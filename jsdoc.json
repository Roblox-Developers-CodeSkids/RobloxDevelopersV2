[
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                56
            ],
            "filename": "Client.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000005",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64,
                105
            ],
            "filename": "Client.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000011",
                "name": "Channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Channel",
        "longname": "Channel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                113,
                154
            ],
            "filename": "Client.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000017",
                "name": "Collection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Collection",
        "longname": "Collection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                162,
                196
            ],
            "filename": "Client.js",
            "lineno": 6,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000023",
                "name": "Constants",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Constants",
        "longname": "Constants",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                204,
                243
            ],
            "filename": "Client.js",
            "lineno": 7,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000029",
                "name": "Endpoints",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Endpoints",
        "longname": "Endpoints",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                251,
                302
            ],
            "filename": "Client.js",
            "lineno": 8,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000035",
                "name": "ExtendedUser",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ExtendedUser",
        "longname": "ExtendedUser",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                310,
                361
            ],
            "filename": "Client.js",
            "lineno": 9,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000041",
                "name": "GroupChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GroupChannel",
        "longname": "GroupChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                369,
                406
            ],
            "filename": "Client.js",
            "lineno": 10,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000047",
                "name": "Guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Guild",
        "longname": "Guild",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                414,
                477
            ],
            "filename": "Client.js",
            "lineno": 11,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000053",
                "name": "GuildAuditLogEntry",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GuildAuditLogEntry",
        "longname": "GuildAuditLogEntry",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                485,
                544
            ],
            "filename": "Client.js",
            "lineno": 12,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000059",
                "name": "GuildIntegration",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GuildIntegration",
        "longname": "GuildIntegration",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                552,
                603
            ],
            "filename": "Client.js",
            "lineno": 13,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000065",
                "name": "GuildPreview",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GuildPreview",
        "longname": "GuildPreview",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                611,
                650
            ],
            "filename": "Client.js",
            "lineno": 14,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000071",
                "name": "Invite",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Invite",
        "longname": "Invite",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                658,
                697
            ],
            "filename": "Client.js",
            "lineno": 15,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000077",
                "name": "Member",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Member",
        "longname": "Member",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                705,
                746
            ],
            "filename": "Client.js",
            "lineno": 16,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000083",
                "name": "Message",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Message",
        "longname": "Message",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                754,
                801
            ],
            "filename": "Client.js",
            "lineno": 17,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000089",
                "name": "Permission",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Permission",
        "longname": "Permission",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                809,
                864
            ],
            "filename": "Client.js",
            "lineno": 18,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000095",
                "name": "PrivateChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "PrivateChannel",
        "longname": "PrivateChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                872,
                923
            ],
            "filename": "Client.js",
            "lineno": 19,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000101",
                "name": "Relationship",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Relationship",
        "longname": "Relationship",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                931,
                980
            ],
            "filename": "Client.js",
            "lineno": 20,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000107",
                "name": "RequestHandler",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "RequestHandler",
        "longname": "RequestHandler",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                988,
                1023
            ],
            "filename": "Client.js",
            "lineno": 21,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000113",
                "name": "Role",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Role",
        "longname": "Role",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1031,
                1079
            ],
            "filename": "Client.js",
            "lineno": 22,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000119",
                "name": "ShardManager",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ShardManager",
        "longname": "ShardManager",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1087,
                1146
            ],
            "filename": "Client.js",
            "lineno": 23,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000125",
                "name": "UnavailableGuild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "UnavailableGuild",
        "longname": "UnavailableGuild",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1154,
                1189
            ],
            "filename": "Client.js",
            "lineno": 24,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000131",
                "name": "User",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "User",
        "longname": "User",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1197,
                1263
            ],
            "filename": "Client.js",
            "lineno": 25,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000137",
                "name": "VoiceConnectionManager",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "VoiceConnectionManager",
        "longname": "VoiceConnectionManager",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1270,
                1282
            ],
            "filename": "Client.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000143",
                "name": "EventEmitter"
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1294,
                1333
            ],
            "filename": "Client.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000148",
                "name": "EventEmitter",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1354,
                1386
            ],
            "filename": "Client.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000155",
                "name": "EventEmitter",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1394,
                1401
            ],
            "filename": "Client.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000161",
                "name": "Erlpack"
            }
        },
        "undocumented": true,
        "name": "Erlpack",
        "longname": "Erlpack",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1413,
                1441
            ],
            "filename": "Client.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000166",
                "name": "Erlpack",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Erlpack",
        "longname": "Erlpack",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1491,
                1499
            ],
            "filename": "Client.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000173",
                "name": "ZlibSync"
            }
        },
        "undocumented": true,
        "name": "ZlibSync",
        "longname": "ZlibSync",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1511,
                1542
            ],
            "filename": "Client.js",
            "lineno": 40,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000178",
                "name": "ZlibSync",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ZlibSync",
        "longname": "ZlibSync",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1577,
                1603
            ],
            "filename": "Client.js",
            "lineno": 43,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000187",
                "name": "ZlibSync",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ZlibSync",
        "longname": "ZlibSync",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1665,
                1722
            ],
            "filename": "Client.js",
            "lineno": 47,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000194",
                "name": "sleep",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "sleep",
        "longname": "sleep",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents the main Eris client\n* @extends EventEmitter\n* @prop {String} token The bot user token\n* @prop {Boolean?} bot Whether the bot user belongs to an OAuth2 application\n* @prop {Object} options Eris options\n* @prop {Object} channelGuildMap Object mapping channel IDs to guild IDs\n* @prop {Collection<Shard>} shards Collection of shards Eris is using\n* @prop {Collection<Guild>} guilds Collection of guilds the bot is in\n* @prop {Object} privateChannelMap Object mapping user IDs to private channel IDs\n* @prop {Collection<PrivateChannel>} privateChannels Collection of private channels the bot is in\n* @prop {Collection<GroupChannel>} groupChannels Collection of group channels the bot is in (user accounts only)\n* @prop {Collection<VoiceConnection>} voiceConnections Extended collection of active VoiceConnections the bot has\n* @prop {Object} guildShardMap Object mapping guild IDs to shard IDs\n* @prop {Number} startTime Timestamp of bot ready event\n* @prop {Collection<UnavailableGuild>} unavailableGuilds Collection of unavailable guilds the bot is in\n* @prop {Number} uptime How long in milliseconds the bot has been up for\n* @prop {ExtendedUser} user The bot user\n* @prop {Collection<User>} users Collection of users the bot sees\n* @prop {Collection<Relationship>} relationships Collection of relationships the bot user has (user accounts only)\n* @prop {Object} userGuildSettings Object mapping guild IDs to individual guild settings for the bot user (user accounts only)\n* @prop {Object} userSettings Object containing the user account settings (user accounts only)\n* @prop {Object} notes Object mapping user IDs to user notes (user accounts only)\n*/",
        "meta": {
            "range": [
                3395,
                105199
            ],
            "filename": "Client.js",
            "lineno": 73,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000206",
                "name": "Client",
                "type": "ClassDeclaration",
                "paramnames": [
                    "token",
                    "options"
                ]
            }
        },
        "classdesc": "Represents the main Eris client",
        "augments": [
            "EventEmitter"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The bot user token",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "nullable": true,
                "description": "Whether the bot user belongs to an OAuth2 application",
                "name": "bot"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Eris options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping channel IDs to guild IDs",
                "name": "channelGuildMap"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Shard>"
                    ]
                },
                "description": "Collection of shards Eris is using",
                "name": "shards"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Guild>"
                    ]
                },
                "description": "Collection of guilds the bot is in",
                "name": "guilds"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping user IDs to private channel IDs",
                "name": "privateChannelMap"
            },
            {
                "type": {
                    "names": [
                        "Collection.<PrivateChannel>"
                    ]
                },
                "description": "Collection of private channels the bot is in",
                "name": "privateChannels"
            },
            {
                "type": {
                    "names": [
                        "Collection.<GroupChannel>"
                    ]
                },
                "description": "Collection of group channels the bot is in (user accounts only)",
                "name": "groupChannels"
            },
            {
                "type": {
                    "names": [
                        "Collection.<VoiceConnection>"
                    ]
                },
                "description": "Extended collection of active VoiceConnections the bot has",
                "name": "voiceConnections"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping guild IDs to shard IDs",
                "name": "guildShardMap"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of bot ready event",
                "name": "startTime"
            },
            {
                "type": {
                    "names": [
                        "Collection.<UnavailableGuild>"
                    ]
                },
                "description": "Collection of unavailable guilds the bot is in",
                "name": "unavailableGuilds"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How long in milliseconds the bot has been up for",
                "name": "uptime"
            },
            {
                "type": {
                    "names": [
                        "ExtendedUser"
                    ]
                },
                "description": "The bot user",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Collection.<User>"
                    ]
                },
                "description": "Collection of users the bot sees",
                "name": "users"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Relationship>"
                    ]
                },
                "description": "Collection of relationships the bot user has (user accounts only)",
                "name": "relationships"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping guild IDs to individual guild settings for the bot user (user accounts only)",
                "name": "userGuildSettings"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object containing the user account settings (user accounts only)",
                "name": "userSettings"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping user IDs to user notes (user accounts only)",
                "name": "notes"
            }
        ],
        "name": "Client",
        "longname": "Client",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "/**\n    * Create a Client\n    * @arg {String} token bot token\n    * @arg {Object} [options] Eris options (all options are optional)\n    * @arg {Boolean} [options.autoreconnect=true] Have Eris autoreconnect when connection is lost\n    * @arg {Boolean} [options.compress=false] Whether to request WebSocket data to be compressed or not\n    * @arg {Number} [options.connectionTimeout=30000] How long in milliseconds to wait for the connection to handshake with the server\n    * @arg {Object} [options.disableEvents] If disableEvents[eventName] is true, the WS event will not be processed. This can cause significant performance increase on large bots. [A full list of the WS event names can be found on the docs reference page](/Eris/docs/reference#ws-event-names)\n    * @arg {Object} [options.allowedMentions] A list of mentions to allow by default in createMessage/editMessage\n    * @arg {Boolean} [options.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [options.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [options.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @arg {Number} [options.firstShardID=0] The ID of the first shard to run for this client\n    * @arg {Boolean} [options.getAllUsers=false] Get all the users in every guild. Ready time will be severely delayed\n    * @arg {Number} [options.guildCreateTimeout=2000] How long in milliseconds to wait for a GUILD_CREATE before \"ready\" is fired. Increase this value if you notice missing guilds\n    * @arg {Boolean} [options.guildSubscriptions=true] If false, disables some guild subscription events, including typing and presence events. This will reduce processing load, but will also result in inconsistent member caching\n    * @arg {Number} [options.largeThreshold=250] The maximum number of offline users per guild during initial guild data transmission\n    * @arg {Number} [options.latencyThreshold=30000] The average request latency at which Eris will start emitting latency errors\n    * @arg {Number} [options.lastShardID=options.maxShards - 1] The ID of the last shard to run for this client\n    * @arg {Number | String} [options.maxShards=1] The total number of shards you want to run. If \"auto\" Eris will use Discord's recommended shard count.\n    * @arg {Number} [options.messageLimit=100] The maximum size of a channel message cache\n    * @arg {Boolean} [options.opusOnly=false] Whether to suppress the node-opus not found error or not\n    * @arg {Number} [options.ratelimiterOffset=0] A number of milliseconds to offset the ratelimit timing calculations by\n    * @arg {Number} [options.requestTimeout=15000] A number of milliseconds before requests are considered timed out\n    * @arg {Boolean} [options.restMode=false] Whether to enable getting objects over REST. This should only be enabled if you are not connecting to the gateway. Bot tokens must be prefixed manually in REST mode\n    * @arg {Boolean} [options.seedVoiceConnections=false] Whether to populate bot.voiceConnections with existing connections the bot account has during startup. Note that this will disconnect connections from other bot sessions\n    * @arg {String} [options.defaultImageFormat=\"jpg\"] The default format to provide user avatars, guild icons, and group icons in. Can be \"jpg\", \"png\", \"gif\", or \"webp\"\n    * @arg {Number} [options.defaultImageSize=128] The default size to return user avatars, guild icons, banners, splashes, and group icons. Can be any power of two between 16 and 2048. If the height and width are different, the width will be the value specified, and the height relative to that\n    * @arg {Object} [options.ws] An object of WebSocket options to pass to the shard WebSocket constructors\n    * @arg {Object} [options.agent] A HTTP Agent used to proxy requests\n    * @arg {Number} [options.maxReconnectAttempts=Infinity] The maximum amount of times that the client is allowed to try to reconnect to Discord.\n    * @arg {Number} [options.maxResumeAttempts=10] The maximum amount of times a shard can attempt to resume a session before considering that session invalid.\n    * @arg {Function} [options.reconnectDelay] A function which returns how long the bot should wait until reconnecting to Discord.\n    * @arg {Number | String[]} [options.intents] A list of intents, or raw bitmask value describing the intents to subscribe to. \"presence\" intent must be enabled on your application's page to be used.\n    */",
        "meta": {
            "range": [
                8051,
                12221
            ],
            "filename": "Client.js",
            "lineno": 109,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000210",
                "name": "Client",
                "type": "MethodDefinition",
                "paramnames": [
                    "token",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a Client",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "bot token",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Eris options (all options are optional)",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Have Eris autoreconnect when connection is lost",
                "name": "options.autoreconnect"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to request WebSocket data to be compressed or not",
                "name": "options.compress"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 30000,
                "description": "How long in milliseconds to wait for the connection to handshake with the server",
                "name": "options.connectionTimeout"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "If disableEvents[eventName] is true, the WS event will not be processed. This can cause significant performance increase on large bots. [A full list of the WS event names can be found on the docs reference page](/Eris/docs/reference#ws-event-names)",
                "name": "options.disableEvents"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow by default in createMessage/editMessage",
                "name": "options.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "options.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "options.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "options.allowedMentions.users"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The ID of the first shard to run for this client",
                "name": "options.firstShardID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Get all the users in every guild. Ready time will be severely delayed",
                "name": "options.getAllUsers"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 2000,
                "description": "How long in milliseconds to wait for a GUILD_CREATE before \"ready\" is fired. Increase this value if you notice missing guilds",
                "name": "options.guildCreateTimeout"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If false, disables some guild subscription events, including typing and presence events. This will reduce processing load, but will also result in inconsistent member caching",
                "name": "options.guildSubscriptions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 250,
                "description": "The maximum number of offline users per guild during initial guild data transmission",
                "name": "options.largeThreshold"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 30000,
                "description": "The average request latency at which Eris will start emitting latency errors",
                "name": "options.latencyThreshold"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": "options.maxShards - 1",
                "description": "The ID of the last shard to run for this client",
                "name": "options.lastShardID"
            },
            {
                "type": {
                    "names": [
                        "Number",
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The total number of shards you want to run. If \"auto\" Eris will use Discord's recommended shard count.",
                "name": "options.maxShards"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 100,
                "description": "The maximum size of a channel message cache",
                "name": "options.messageLimit"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to suppress the node-opus not found error or not",
                "name": "options.opusOnly"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "A number of milliseconds to offset the ratelimit timing calculations by",
                "name": "options.ratelimiterOffset"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 15000,
                "description": "A number of milliseconds before requests are considered timed out",
                "name": "options.requestTimeout"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to enable getting objects over REST. This should only be enabled if you are not connecting to the gateway. Bot tokens must be prefixed manually in REST mode",
                "name": "options.restMode"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to populate bot.voiceConnections with existing connections the bot account has during startup. Note that this will disconnect connections from other bot sessions",
                "name": "options.seedVoiceConnections"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"jpg\"",
                "description": "The default format to provide user avatars, guild icons, and group icons in. Can be \"jpg\", \"png\", \"gif\", or \"webp\"",
                "name": "options.defaultImageFormat"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 128,
                "description": "The default size to return user avatars, guild icons, banners, splashes, and group icons. Can be any power of two between 16 and 2048. If the height and width are different, the width will be the value specified, and the height relative to that",
                "name": "options.defaultImageSize"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An object of WebSocket options to pass to the shard WebSocket constructors",
                "name": "options.ws"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A HTTP Agent used to proxy requests",
                "name": "options.agent"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": "Infinity",
                "description": "The maximum amount of times that the client is allowed to try to reconnect to Discord.",
                "name": "options.maxReconnectAttempts"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 10,
                "description": "The maximum amount of times a shard can attempt to resume a session before considering that session invalid.",
                "name": "options.maxResumeAttempts"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function which returns how long the bot should wait until reconnecting to Discord.",
                "name": "options.reconnectDelay"
            },
            {
                "type": {
                    "names": [
                        "Number",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "A list of intents, or raw bitmask value describing the intents to subscribe to. \"presence\" intent must be enabled on your application's page to be used.",
                "name": "options.intents"
            }
        ],
        "name": "Client",
        "longname": "Client",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "/**\n* Represents the main Eris client\n* @extends EventEmitter\n* @prop {String} token The bot user token\n* @prop {Boolean?} bot Whether the bot user belongs to an OAuth2 application\n* @prop {Object} options Eris options\n* @prop {Object} channelGuildMap Object mapping channel IDs to guild IDs\n* @prop {Collection<Shard>} shards Collection of shards Eris is using\n* @prop {Collection<Guild>} guilds Collection of guilds the bot is in\n* @prop {Object} privateChannelMap Object mapping user IDs to private channel IDs\n* @prop {Collection<PrivateChannel>} privateChannels Collection of private channels the bot is in\n* @prop {Collection<GroupChannel>} groupChannels Collection of group channels the bot is in (user accounts only)\n* @prop {Collection<VoiceConnection>} voiceConnections Extended collection of active VoiceConnections the bot has\n* @prop {Object} guildShardMap Object mapping guild IDs to shard IDs\n* @prop {Number} startTime Timestamp of bot ready event\n* @prop {Collection<UnavailableGuild>} unavailableGuilds Collection of unavailable guilds the bot is in\n* @prop {Number} uptime How long in milliseconds the bot has been up for\n* @prop {ExtendedUser} user The bot user\n* @prop {Collection<User>} users Collection of users the bot sees\n* @prop {Collection<Relationship>} relationships Collection of relationships the bot user has (user accounts only)\n* @prop {Object} userGuildSettings Object mapping guild IDs to individual guild settings for the bot user (user accounts only)\n* @prop {Object} userSettings Object containing the user account settings (user accounts only)\n* @prop {Object} notes Object mapping user IDs to user notes (user accounts only)\n*/",
        "meta": {
            "range": [
                3395,
                105199
            ],
            "filename": "Client.js",
            "lineno": 73,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000206",
                "name": "Client",
                "type": "ClassDeclaration",
                "paramnames": [
                    "token",
                    "options"
                ]
            }
        },
        "name": "Client",
        "longname": "Client",
        "kind": "class",
        "classdesc": "Represents the main Eris client",
        "augments": [
            "EventEmitter"
        ],
        "scope": "global",
        "description": "Create a Client",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "bot token",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Eris options (all options are optional)",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Have Eris autoreconnect when connection is lost",
                "name": "options.autoreconnect"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to request WebSocket data to be compressed or not",
                "name": "options.compress"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 30000,
                "description": "How long in milliseconds to wait for the connection to handshake with the server",
                "name": "options.connectionTimeout"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "If disableEvents[eventName] is true, the WS event will not be processed. This can cause significant performance increase on large bots. [A full list of the WS event names can be found on the docs reference page](/Eris/docs/reference#ws-event-names)",
                "name": "options.disableEvents"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow by default in createMessage/editMessage",
                "name": "options.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "options.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "options.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "options.allowedMentions.users"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The ID of the first shard to run for this client",
                "name": "options.firstShardID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Get all the users in every guild. Ready time will be severely delayed",
                "name": "options.getAllUsers"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 2000,
                "description": "How long in milliseconds to wait for a GUILD_CREATE before \"ready\" is fired. Increase this value if you notice missing guilds",
                "name": "options.guildCreateTimeout"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If false, disables some guild subscription events, including typing and presence events. This will reduce processing load, but will also result in inconsistent member caching",
                "name": "options.guildSubscriptions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 250,
                "description": "The maximum number of offline users per guild during initial guild data transmission",
                "name": "options.largeThreshold"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 30000,
                "description": "The average request latency at which Eris will start emitting latency errors",
                "name": "options.latencyThreshold"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": "options.maxShards - 1",
                "description": "The ID of the last shard to run for this client",
                "name": "options.lastShardID"
            },
            {
                "type": {
                    "names": [
                        "Number",
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The total number of shards you want to run. If \"auto\" Eris will use Discord's recommended shard count.",
                "name": "options.maxShards"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 100,
                "description": "The maximum size of a channel message cache",
                "name": "options.messageLimit"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to suppress the node-opus not found error or not",
                "name": "options.opusOnly"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "A number of milliseconds to offset the ratelimit timing calculations by",
                "name": "options.ratelimiterOffset"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 15000,
                "description": "A number of milliseconds before requests are considered timed out",
                "name": "options.requestTimeout"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to enable getting objects over REST. This should only be enabled if you are not connecting to the gateway. Bot tokens must be prefixed manually in REST mode",
                "name": "options.restMode"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to populate bot.voiceConnections with existing connections the bot account has during startup. Note that this will disconnect connections from other bot sessions",
                "name": "options.seedVoiceConnections"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"jpg\"",
                "description": "The default format to provide user avatars, guild icons, and group icons in. Can be \"jpg\", \"png\", \"gif\", or \"webp\"",
                "name": "options.defaultImageFormat"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 128,
                "description": "The default size to return user avatars, guild icons, banners, splashes, and group icons. Can be any power of two between 16 and 2048. If the height and width are different, the width will be the value specified, and the height relative to that",
                "name": "options.defaultImageSize"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An object of WebSocket options to pass to the shard WebSocket constructors",
                "name": "options.ws"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A HTTP Agent used to proxy requests",
                "name": "options.agent"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": "Infinity",
                "description": "The maximum amount of times that the client is allowed to try to reconnect to Discord.",
                "name": "options.maxReconnectAttempts"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 10,
                "description": "The maximum amount of times a shard can attempt to resume a session before considering that session invalid.",
                "name": "options.maxResumeAttempts"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function which returns how long the bot should wait until reconnecting to Discord.",
                "name": "options.reconnectDelay"
            },
            {
                "type": {
                    "names": [
                        "Number",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "A list of intents, or raw bitmask value describing the intents to subscribe to. \"presence\" intent must be enabled on your application's page to be used.",
                "name": "options.intents"
            }
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The bot user token",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "nullable": true,
                "description": "Whether the bot user belongs to an OAuth2 application",
                "name": "bot"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Eris options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping channel IDs to guild IDs",
                "name": "channelGuildMap"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Shard>"
                    ]
                },
                "description": "Collection of shards Eris is using",
                "name": "shards"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Guild>"
                    ]
                },
                "description": "Collection of guilds the bot is in",
                "name": "guilds"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping user IDs to private channel IDs",
                "name": "privateChannelMap"
            },
            {
                "type": {
                    "names": [
                        "Collection.<PrivateChannel>"
                    ]
                },
                "description": "Collection of private channels the bot is in",
                "name": "privateChannels"
            },
            {
                "type": {
                    "names": [
                        "Collection.<GroupChannel>"
                    ]
                },
                "description": "Collection of group channels the bot is in (user accounts only)",
                "name": "groupChannels"
            },
            {
                "type": {
                    "names": [
                        "Collection.<VoiceConnection>"
                    ]
                },
                "description": "Extended collection of active VoiceConnections the bot has",
                "name": "voiceConnections"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping guild IDs to shard IDs",
                "name": "guildShardMap"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of bot ready event",
                "name": "startTime"
            },
            {
                "type": {
                    "names": [
                        "Collection.<UnavailableGuild>"
                    ]
                },
                "description": "Collection of unavailable guilds the bot is in",
                "name": "unavailableGuilds"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How long in milliseconds the bot has been up for",
                "name": "uptime"
            },
            {
                "type": {
                    "names": [
                        "ExtendedUser"
                    ]
                },
                "description": "The bot user",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Collection.<User>"
                    ]
                },
                "description": "Collection of users the bot sees",
                "name": "users"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Relationship>"
                    ]
                },
                "description": "Collection of relationships the bot user has (user accounts only)",
                "name": "relationships"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping guild IDs to individual guild settings for the bot user (user accounts only)",
                "name": "userGuildSettings"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object containing the user account settings (user accounts only)",
                "name": "userSettings"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping user IDs to user notes (user accounts only)",
                "name": "notes"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8107,
                9110
            ],
            "filename": "Client.js",
            "lineno": 112,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000220",
                "name": "this.options",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "Client#options",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8150,
                8169
            ],
            "filename": "Client.js",
            "lineno": 113,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000229",
                "name": "autoreconnect",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "autoreconnect",
        "longname": "autoreconnect",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8183,
                8198
            ],
            "filename": "Client.js",
            "lineno": 114,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000231",
                "name": "compress",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "compress",
        "longname": "compress",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8212,
                8236
            ],
            "filename": "Client.js",
            "lineno": 115,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000233",
                "name": "connectionTimeout",
                "type": "Literal",
                "value": 30000
            }
        },
        "undocumented": true,
        "name": "connectionTimeout",
        "longname": "connectionTimeout",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8250,
                8275
            ],
            "filename": "Client.js",
            "lineno": 116,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000235",
                "name": "defaultImageFormat",
                "type": "Literal",
                "value": "jpg"
            }
        },
        "undocumented": true,
        "name": "defaultImageFormat",
        "longname": "defaultImageFormat",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8289,
                8310
            ],
            "filename": "Client.js",
            "lineno": 117,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000237",
                "name": "defaultImageSize",
                "type": "Literal",
                "value": 128
            }
        },
        "undocumented": true,
        "name": "defaultImageSize",
        "longname": "defaultImageSize",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8324,
                8341
            ],
            "filename": "Client.js",
            "lineno": 118,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000239",
                "name": "disableEvents",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "disableEvents",
        "longname": "disableEvents",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8355,
                8444
            ],
            "filename": "Client.js",
            "lineno": 119,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000241",
                "name": "allowedMentions",
                "type": "ObjectExpression",
                "value": "{\"users\":true,\"roles\":true}"
            }
        },
        "undocumented": true,
        "name": "allowedMentions",
        "longname": "allowedMentions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8390,
                8401
            ],
            "filename": "Client.js",
            "lineno": 120,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000243",
                "name": "users",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "users",
        "longname": "allowedMentions.users",
        "kind": "member",
        "memberof": "allowedMentions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8419,
                8430
            ],
            "filename": "Client.js",
            "lineno": 121,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000245",
                "name": "roles",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "roles",
        "longname": "allowedMentions.roles",
        "kind": "member",
        "memberof": "allowedMentions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8458,
                8473
            ],
            "filename": "Client.js",
            "lineno": 123,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000247",
                "name": "firstShardID",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "firstShardID",
        "longname": "firstShardID",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8487,
                8505
            ],
            "filename": "Client.js",
            "lineno": 124,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000249",
                "name": "getAllUsers",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "getAllUsers",
        "longname": "getAllUsers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8519,
                8543
            ],
            "filename": "Client.js",
            "lineno": 125,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000251",
                "name": "guildCreateTimeout",
                "type": "Literal",
                "value": 2000
            }
        },
        "undocumented": true,
        "name": "guildCreateTimeout",
        "longname": "guildCreateTimeout",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8557,
                8581
            ],
            "filename": "Client.js",
            "lineno": 126,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000253",
                "name": "guildSubscriptions",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "guildSubscriptions",
        "longname": "guildSubscriptions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8595,
                8614
            ],
            "filename": "Client.js",
            "lineno": 127,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000255",
                "name": "largeThreshold",
                "type": "Literal",
                "value": 250
            }
        },
        "undocumented": true,
        "name": "largeThreshold",
        "longname": "largeThreshold",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8628,
                8651
            ],
            "filename": "Client.js",
            "lineno": 128,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000257",
                "name": "latencyThreshold",
                "type": "Literal",
                "value": 30000
            }
        },
        "undocumented": true,
        "name": "latencyThreshold",
        "longname": "latencyThreshold",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8665,
                8695
            ],
            "filename": "Client.js",
            "lineno": 129,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000259",
                "name": "maxReconnectAttempts",
                "type": "Identifier",
                "value": "Infinity"
            }
        },
        "undocumented": true,
        "name": "maxReconnectAttempts",
        "longname": "maxReconnectAttempts",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8709,
                8730
            ],
            "filename": "Client.js",
            "lineno": 130,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000261",
                "name": "maxResumeAttempts",
                "type": "Literal",
                "value": 10
            }
        },
        "undocumented": true,
        "name": "maxResumeAttempts",
        "longname": "maxResumeAttempts",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8744,
                8756
            ],
            "filename": "Client.js",
            "lineno": 131,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000263",
                "name": "maxShards",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "maxShards",
        "longname": "maxShards",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8770,
                8787
            ],
            "filename": "Client.js",
            "lineno": 132,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000265",
                "name": "messageLimit",
                "type": "Literal",
                "value": 100
            }
        },
        "undocumented": true,
        "name": "messageLimit",
        "longname": "messageLimit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8801,
                8816
            ],
            "filename": "Client.js",
            "lineno": 133,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000267",
                "name": "opusOnly",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "opusOnly",
        "longname": "opusOnly",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8830,
                8850
            ],
            "filename": "Client.js",
            "lineno": 134,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000269",
                "name": "ratelimiterOffset",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "ratelimiterOffset",
        "longname": "ratelimiterOffset",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8864,
                8885
            ],
            "filename": "Client.js",
            "lineno": 135,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000271",
                "name": "requestTimeout",
                "type": "Literal",
                "value": 15000
            }
        },
        "undocumented": true,
        "name": "requestTimeout",
        "longname": "requestTimeout",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8899,
                8914
            ],
            "filename": "Client.js",
            "lineno": 136,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000273",
                "name": "restMode",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "restMode",
        "longname": "restMode",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8928,
                8955
            ],
            "filename": "Client.js",
            "lineno": 137,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000275",
                "name": "seedVoiceConnections",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "seedVoiceConnections",
        "longname": "seedVoiceConnections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8969,
                8975
            ],
            "filename": "Client.js",
            "lineno": 138,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000277",
                "name": "ws",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "ws",
        "longname": "ws",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8989,
                9000
            ],
            "filename": "Client.js",
            "lineno": 139,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000279",
                "name": "agent",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "agent",
        "longname": "agent",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9014,
                9090
            ],
            "filename": "Client.js",
            "lineno": 140,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000281",
                "name": "reconnectDelay",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "reconnectDelay",
        "longname": "reconnectDelay",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9120,
                9208
            ],
            "filename": "Client.js",
            "lineno": 142,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000297",
                "name": "this.options.allowedMentions",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "allowedMentions",
        "longname": "Client#options.allowedMentions",
        "kind": "member",
        "memberof": "Client#options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9312,
                9365
            ],
            "filename": "Client.js",
            "lineno": 144,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000330",
                "name": "this.options.lastShardID",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastShardID",
        "longname": "Client#options.lastShardID",
        "kind": "member",
        "memberof": "Client#options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9446,
                9475
            ],
            "filename": "Client.js",
            "lineno": 147,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000353",
                "name": "this.options.compress",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "compress",
        "longname": "Client#options.compress",
        "kind": "member",
        "memberof": "Client#options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9752,
                9800
            ],
            "filename": "Client.js",
            "lineno": 152,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000389",
                "name": "defaultImageSize",
                "type": "MemberExpression",
                "value": "this.options.defaultImageSize"
            }
        },
        "undocumented": true,
        "name": "defaultImageSize",
        "longname": "<anonymous>~defaultImageSize",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10225,
                10264
            ],
            "filename": "Client.js",
            "lineno": 158,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000449",
                "name": "this.options.ws",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ws",
        "longname": "Client#options.ws",
        "kind": "member",
        "memberof": "Client#options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10278,
                10320
            ],
            "filename": "Client.js",
            "lineno": 159,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000463",
                "name": "this.options.ws.agent",
                "type": "MemberExpression",
                "value": "this.options.agent",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "agent",
        "longname": "Client#options.ws.agent",
        "kind": "member",
        "memberof": "Client#options.ws",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10520,
                10531
            ],
            "filename": "Client.js",
            "lineno": 165,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000497",
                "name": "bitmask",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "bitmask",
        "longname": "<anonymous>~bitmask",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10559,
                10565
            ],
            "filename": "Client.js",
            "lineno": 166,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000502",
                "name": "intent"
            }
        },
        "undocumented": true,
        "name": "intent",
        "longname": "<anonymous>~intent",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10669,
                10705
            ],
            "filename": "Client.js",
            "lineno": 168,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000518",
                "name": "bitmask",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "Constants.Intents[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "bitmask",
        "longname": "<anonymous>~bitmask",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10763,
                10793
            ],
            "filename": "Client.js",
            "lineno": 171,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000526",
                "name": "this.options.intents",
                "type": "Identifier",
                "value": "bitmask",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "intents",
        "longname": "Client#options.intents",
        "kind": "member",
        "memberof": "Client#options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11111,
                11129
            ],
            "filename": "Client.js",
            "lineno": 180,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000558",
                "name": "this.token",
                "type": "Identifier",
                "value": "token",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "token",
        "longname": "Client#token",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11140,
                11186
            ],
            "filename": "Client.js",
            "lineno": 182,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000564",
                "name": "this.requestHandler",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "requestHandler",
        "longname": "Client#requestHandler",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11197,
                11215
            ],
            "filename": "Client.js",
            "lineno": 184,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000572",
                "name": "this.ready",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ready",
        "longname": "Client#ready",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11225,
                11300
            ],
            "filename": "Client.js",
            "lineno": 185,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000578",
                "name": "this.bot",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "bot",
        "longname": "Client#bot",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11310,
                11328
            ],
            "filename": "Client.js",
            "lineno": 186,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000597",
                "name": "this.startTime",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "startTime",
        "longname": "Client#startTime",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11338,
                11358
            ],
            "filename": "Client.js",
            "lineno": 187,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000603",
                "name": "this.lastConnect",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastConnect",
        "longname": "Client#lastConnect",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11368,
                11393
            ],
            "filename": "Client.js",
            "lineno": 188,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000609",
                "name": "this.channelGuildMap",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channelGuildMap",
        "longname": "Client#channelGuildMap",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11403,
                11439
            ],
            "filename": "Client.js",
            "lineno": 189,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000615",
                "name": "this.shards",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "shards",
        "longname": "Client#shards",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11449,
                11498
            ],
            "filename": "Client.js",
            "lineno": 190,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000623",
                "name": "this.groupChannels",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "groupChannels",
        "longname": "Client#groupChannels",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11508,
                11543
            ],
            "filename": "Client.js",
            "lineno": 191,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000631",
                "name": "this.guilds",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guilds",
        "longname": "Client#guilds",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11553,
                11580
            ],
            "filename": "Client.js",
            "lineno": 192,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000639",
                "name": "this.privateChannelMap",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "privateChannelMap",
        "longname": "Client#privateChannelMap",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11590,
                11643
            ],
            "filename": "Client.js",
            "lineno": 193,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000645",
                "name": "this.privateChannels",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "privateChannels",
        "longname": "Client#privateChannels",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11653,
                11676
            ],
            "filename": "Client.js",
            "lineno": 194,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000653",
                "name": "this.guildShardMap",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildShardMap",
        "longname": "Client#guildShardMap",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11686,
                11743
            ],
            "filename": "Client.js",
            "lineno": 195,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000659",
                "name": "this.unavailableGuilds",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unavailableGuilds",
        "longname": "Client#unavailableGuilds",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11753,
                11802
            ],
            "filename": "Client.js",
            "lineno": 196,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000667",
                "name": "this.relationships",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "relationships",
        "longname": "Client#relationships",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11812,
                11845
            ],
            "filename": "Client.js",
            "lineno": 197,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000675",
                "name": "this.users",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "users",
        "longname": "Client#users",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11855,
                11936
            ],
            "filename": "Client.js",
            "lineno": 198,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000683",
                "name": "this.presence",
                "type": "ObjectExpression",
                "value": "{\"game\":null,\"status\":\"offline\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "presence",
        "longname": "Client#presence",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11885,
                11895
            ],
            "filename": "Client.js",
            "lineno": 199,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000688",
                "name": "game",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "game",
        "longname": "Client#presence.game",
        "kind": "member",
        "memberof": "Client#presence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11909,
                11926
            ],
            "filename": "Client.js",
            "lineno": 200,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000690",
                "name": "status",
                "type": "Literal",
                "value": "offline"
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "Client#presence.status",
        "kind": "member",
        "memberof": "Client#presence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11946,
                11973
            ],
            "filename": "Client.js",
            "lineno": 202,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000693",
                "name": "this.userGuildSettings",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "userGuildSettings",
        "longname": "Client#userGuildSettings",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11983,
                12005
            ],
            "filename": "Client.js",
            "lineno": 203,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000699",
                "name": "this.userSettings",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "userSettings",
        "longname": "Client#userSettings",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12015,
                12030
            ],
            "filename": "Client.js",
            "lineno": 204,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000705",
                "name": "this.notes",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "notes",
        "longname": "Client#notes",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12040,
                12092
            ],
            "filename": "Client.js",
            "lineno": 205,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000711",
                "name": "this.voiceConnections",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "voiceConnections",
        "longname": "Client#voiceConnections",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12103,
                12141
            ],
            "filename": "Client.js",
            "lineno": 207,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000718",
                "name": "this.connect",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connect",
        "longname": "Client#connect",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12151,
                12178
            ],
            "filename": "Client.js",
            "lineno": 208,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000730",
                "name": "this.lastReconnectDelay",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastReconnectDelay",
        "longname": "Client#lastReconnectDelay",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12188,
                12214
            ],
            "filename": "Client.js",
            "lineno": 209,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000736",
                "name": "this.reconnectAttempts",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reconnectAttempts",
        "longname": "Client#reconnectAttempts",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12227,
                12312
            ],
            "filename": "Client.js",
            "lineno": 212,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000741",
                "name": "Client#uptime",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "uptime",
        "longname": "Client#uptime",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Tells all shards to connect.\n    * @returns {Promise} Resolves when all shards are initialized\n    */",
        "meta": {
            "range": [
                12434,
                14181
            ],
            "filename": "Client.js",
            "lineno": 220,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000759",
                "name": "Client#connect",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Tells all shards to connect.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Resolves when all shards are initialized"
            }
        ],
        "name": "connect",
        "longname": "Client#connect",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": [],
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12484,
                12575
            ],
            "filename": "Client.js",
            "lineno": 222,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000766",
                "name": "data",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12807,
                12862
            ],
            "filename": "Client.js",
            "lineno": 227,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000818",
                "name": "data.url",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "url",
        "longname": "<anonymous>~data.url",
        "kind": "member",
        "memberof": "<anonymous>~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12936,
                12951
            ],
            "filename": "Client.js",
            "lineno": 230,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000847",
                "name": "data.url",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": "/",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "url",
        "longname": "<anonymous>~data.url",
        "kind": "member",
        "memberof": "<anonymous>~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12979,
                13078
            ],
            "filename": "Client.js",
            "lineno": 232,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000853",
                "name": "this.gatewayURL",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "gatewayURL",
        "longname": "Client#gatewayURL",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13137,
                13179
            ],
            "filename": "Client.js",
            "lineno": 235,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000880",
                "name": "this.gatewayURL",
                "type": "Literal",
                "value": "&compress=zlib-stream",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "gatewayURL",
        "longname": "Client#gatewayURL",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13411,
                13447
            ],
            "filename": "Client.js",
            "lineno": 242,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000905",
                "name": "this.options.maxShards",
                "type": "MemberExpression",
                "value": "data.shards",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "maxShards",
        "longname": "Client#options.maxShards",
        "kind": "member",
        "memberof": "Client#options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13530,
                13572
            ],
            "filename": "Client.js",
            "lineno": 244,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000924",
                "name": "this.options.lastShardID",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastShardID",
        "longname": "Client#options.lastShardID",
        "kind": "member",
        "memberof": "Client#options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13627,
                13656
            ],
            "filename": "Client.js",
            "lineno": 248,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000937",
                "name": "i",
                "type": "MemberExpression",
                "value": "this.options.firstShardID"
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13876,
                13969
            ],
            "filename": "Client.js",
            "lineno": 255,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000974",
                "name": "reconnectDelay",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reconnectDelay",
        "longname": "<anonymous>~reconnectDelay",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14024,
                14064
            ],
            "filename": "Client.js",
            "lineno": 257,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000994",
                "name": "this.lastReconnectDelay",
                "type": "Identifier",
                "value": "reconnectDelay",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastReconnectDelay",
        "longname": "Client#lastReconnectDelay",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14078,
                14129
            ],
            "filename": "Client.js",
            "lineno": 258,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001000",
                "name": "this.reconnectAttempts",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reconnectAttempts",
        "longname": "Client#reconnectAttempts",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get info on connecting to the Discord gateway\n    * @returns {Promise<Object>} Resolves with an object containing gateway connection info\n    */",
        "meta": {
            "range": [
                14346,
                14436
            ],
            "filename": "Client.js",
            "lineno": 267,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001014",
                "name": "Client#getGateway",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get info on connecting to the Discord gateway",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with an object containing gateway connection info"
            }
        ],
        "name": "getGateway",
        "longname": "Client#getGateway",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get general and bot-specific info on connecting to the Discord gateway (e.g. connection ratelimit)\n    * @returns {Promise<Object>} Resolves with an object containing gateway connection info\n    */",
        "meta": {
            "range": [
                14654,
                14858
            ],
            "filename": "Client.js",
            "lineno": 275,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001029",
                "name": "Client#getBotGateway",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get general and bot-specific info on connecting to the Discord gateway (e.g. connection ratelimit)",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with an object containing gateway connection info"
            }
        ],
        "name": "getBotGateway",
        "longname": "Client#getBotGateway",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14729,
                14761
            ],
            "filename": "Client.js",
            "lineno": 277,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001044",
                "name": "this.token",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "token",
        "longname": "Client#token",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Disconnects all shards\n    * @arg {Object?} [options] Shard disconnect options\n    * @arg {String | Boolean} [options.reconnect] false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect\n    */",
        "meta": {
            "range": [
                15120,
                15306
            ],
            "filename": "Client.js",
            "lineno": 287,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001065",
                "name": "Client#disconnect",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Disconnects all shards",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "Shard disconnect options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect",
                "name": "options.reconnect"
            }
        ],
        "name": "disconnect",
        "longname": "Client#disconnect",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15150,
                15168
            ],
            "filename": "Client.js",
            "lineno": 288,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001071",
                "name": "this.ready",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ready",
        "longname": "Client#ready",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15270,
                15299
            ],
            "filename": "Client.js",
            "lineno": 292,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001093",
                "name": "this.shards.connectQueue",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectQueue",
        "longname": "Client#shards.connectQueue",
        "kind": "member",
        "memberof": "Client#shards",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Join a voice channel. If joining a group call, the voice connection ID will be stored in voiceConnections as \"call\". Otherwise, it will be the guild ID\n    * @arg {String} channelID The ID of the voice channel\n    * @arg {Object} [options] VoiceConnection constructor options\n    * @arg {Object} [options.shared] Whether the VoiceConnection will be part of a SharedStream or not\n    * @arg {Object} [options.opusOnly] Skip opus encoder initialization. You should not enable this unless you know what you are doing\n    * @returns {Promise<VoiceConnection>} Resolves with a VoiceConnection\n    */",
        "meta": {
            "range": [
                15921,
                16874
            ],
            "filename": "Client.js",
            "lineno": 303,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001100",
                "name": "Client#joinVoiceChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Join a voice channel. If joining a group call, the voice connection ID will be stored in voiceConnections as \"call\". Otherwise, it will be the guild ID",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the voice channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "VoiceConnection constructor options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Whether the VoiceConnection will be part of a SharedStream or not",
                "name": "options.shared"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Skip opus encoder initialization. You should not enable this unless you know what you are doing",
                "name": "options.opusOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<VoiceConnection>"
                    ]
                },
                "description": "Resolves with a VoiceConnection"
            }
        ],
        "name": "joinVoiceChannel",
        "longname": "Client#joinVoiceChannel",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15979,
                16015
            ],
            "filename": "Client.js",
            "lineno": 304,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001109",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16489,
                16538
            ],
            "filename": "Client.js",
            "lineno": 312,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001187",
                "name": "guild_id",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild_id",
        "longname": "guild_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16552,
                16581
            ],
            "filename": "Client.js",
            "lineno": 313,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001195",
                "name": "channel_id",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel_id",
        "longname": "channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16595,
                16611
            ],
            "filename": "Client.js",
            "lineno": 314,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001199",
                "name": "self_mute",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "self_mute",
        "longname": "self_mute",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16625,
                16641
            ],
            "filename": "Client.js",
            "lineno": 315,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001201",
                "name": "self_deaf",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "self_deaf",
        "longname": "self_deaf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16711,
                16751
            ],
            "filename": "Client.js",
            "lineno": 318,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001211",
                "name": "options.opusOnly",
                "type": "MemberExpression",
                "value": "this.options.opusOnly",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "opusOnly",
        "longname": "options.opusOnly",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Leaves a voice channel\n    * @arg {String} channelID The ID of the voice channel\n    */",
        "meta": {
            "range": [
                16982,
                17177
            ],
            "filename": "Client.js",
            "lineno": 327,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001236",
                "name": "Client#leaveVoiceChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Leaves a voice channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the voice channel",
                "name": "channelID"
            }
        ],
        "name": "leaveVoiceChannel",
        "longname": "Client#leaveVoiceChannel",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Closes a voice connection with a guild ID\n    * @arg {String} guildID The ID of the guild\n    */",
        "meta": {
            "range": [
                17294,
                17639
            ],
            "filename": "Client.js",
            "lineno": 338,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001263",
                "name": "Client#closeVoiceConnection",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Closes a voice connection with a guild ID",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "name": "closeVoiceConnection",
        "longname": "Client#closeVoiceConnection",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17450,
                17475
            ],
            "filename": "Client.js",
            "lineno": 340,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001291",
                "name": "guild_id",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild_id",
        "longname": "guild_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17489,
                17505
            ],
            "filename": "Client.js",
            "lineno": 341,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001295",
                "name": "channel_id",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "channel_id",
        "longname": "channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17519,
                17535
            ],
            "filename": "Client.js",
            "lineno": 342,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001297",
                "name": "self_mute",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "self_mute",
        "longname": "self_mute",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17549,
                17565
            ],
            "filename": "Client.js",
            "lineno": 343,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001299",
                "name": "self_deaf",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "self_deaf",
        "longname": "self_deaf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Update the bot's AFK status. Setting this to true will enable push notifications for userbots.\n    * @arg {Boolean} afk Whether the bot user is AFK or not\n    */",
        "meta": {
            "range": [
                17821,
                17962
            ],
            "filename": "Client.js",
            "lineno": 352,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001311",
                "name": "Client#editAFK",
                "type": "MethodDefinition",
                "paramnames": [
                    "afk"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Update the bot's AFK status. Setting this to true will enable push notifications for userbots.",
        "params": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the bot user is AFK or not",
                "name": "afk"
            }
        ],
        "name": "editAFK",
        "longname": "Client#editAFK",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17844,
                17869
            ],
            "filename": "Client.js",
            "lineno": 353,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001317",
                "name": "this.presence.afk",
                "type": "UnaryExpression",
                "value": "!!afk",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "afk",
        "longname": "Client#presence.afk",
        "kind": "member",
        "memberof": "Client#presence",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Update the bot's status on all guilds\n    * @arg {String} [status] Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"\n    * @arg {Object} [game] Sets the bot's active game, null to clear\n    * @arg {String} game.name Sets the name of the bot's active game\n    * @arg {Number} [game.type] The type of game. 0 is playing, 1 is streaming (Twitch only), 2 is listening, 3 is watching\n    * @arg {String} [game.url] Sets the url of the shard's active game\n    */",
        "meta": {
            "range": [
                18459,
                18877
            ],
            "filename": "Client.js",
            "lineno": 368,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001342",
                "name": "Client#editStatus",
                "type": "MethodDefinition",
                "paramnames": [
                    "status",
                    "game"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Update the bot's status on all guilds",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Sets the bot's active game, null to clear",
                "name": "game"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Sets the name of the bot's active game",
                "name": "game.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The type of game. 0 is playing, 1 is streaming (Twitch only), 2 is listening, 3 is watching",
                "name": "game.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Sets the url of the shard's active game",
                "name": "game.url"
            }
        ],
        "name": "editStatus",
        "longname": "Client#editStatus",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18561,
                18574
            ],
            "filename": "Client.js",
            "lineno": 370,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001359",
                "name": "game",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "status",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "game",
        "longname": "<anonymous>~game",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18588,
                18606
            ],
            "filename": "Client.js",
            "lineno": 371,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001363",
                "name": "status",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "undefined",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "<anonymous>~status",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18651,
                18680
            ],
            "filename": "Client.js",
            "lineno": 374,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001370",
                "name": "this.presence.status",
                "type": "Identifier",
                "value": "status",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "Client#presence.status",
        "kind": "member",
        "memberof": "Client#presence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18737,
                18762
            ],
            "filename": "Client.js",
            "lineno": 377,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001383",
                "name": "this.presence.game",
                "type": "Identifier",
                "value": "game",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "game",
        "longname": "Client#presence.game",
        "kind": "member",
        "memberof": "Client#presence",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Get a Channel object from a channel ID\n    * @arg {String} channelID The ID of the channel\n    * @returns {CategoryChannel | GroupChannel | PrivateChannel | TextChannel | VoiceChannel | NewsChannel}\n    */",
        "meta": {
            "range": [
                19103,
                19523
            ],
            "filename": "Client.js",
            "lineno": 390,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001407",
                "name": "Client#getChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a Channel object from a channel ID",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "CategoryChannel",
                        "GroupChannel",
                        "PrivateChannel",
                        "TextChannel",
                        "VoiceChannel",
                        "NewsChannel"
                    ]
                }
            }
        ],
        "name": "getChannel",
        "longname": "Client#getChannel",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Create a channel in a guild\n    * @arg {String} guildID The ID of the guild to create the channel in\n    * @arg {String} name The name of the channel\n    * @arg {String} [type=0] The type of the channel, either 0 (text), 2 (voice), or 4 (category)\n    * @arg {Object | String} [options] The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.\n    * @arg {String} [options.topic] The topic of the channel (text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number} [options.bitrate] The bitrate of the channel (voice channels only)\n    * @arg {String?} [options.parentID] The ID of the parent category channel for this channel\n    * @arg {Array} [options.permissionOverwrites] An array containing permission overwrite objects\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)\n    * @arg {String} [options.reason] The reason to be displayed in audit logs\n    * @arg {Number} [options.userLimit] The channel user limit (voice channels only)\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel>}\n    */",
        "meta": {
            "range": [
                20914,
                22207
            ],
            "filename": "Client.js",
            "lineno": 417,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001476",
                "name": "Client#createChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "name",
                    "type",
                    "reason",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a channel in a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to create the channel in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The type of the channel, either 0 (text), 2 (voice), or 4 (category)",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Object",
                        "String"
                    ]
                },
                "optional": true,
                "description": "The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The topic of the channel (text channels only)",
                "name": "options.topic"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "The nsfw status of the channel",
                "name": "options.nsfw"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The bitrate of the channel (voice channels only)",
                "name": "options.bitrate"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "The ID of the parent category channel for this channel",
                "name": "options.parentID"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "optional": true,
                "description": "An array containing permission overwrite objects",
                "name": "options.permissionOverwrites"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)",
                "name": "options.rateLimitPerUser"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "options.reason"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The channel user limit (voice channels only)",
                "name": "options.userLimit"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|TextChannel|VoiceChannel)>"
                    ]
                }
            }
        ],
        "name": "createChannel",
        "longname": "Client#createChannel",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21175,
                21234
            ],
            "filename": "Client.js",
            "lineno": 420,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001501",
                "name": "options",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"parentID\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "<anonymous>~options",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21203,
                21220
            ],
            "filename": "Client.js",
            "lineno": 421,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001504",
                "name": "parentID",
                "type": "Identifier",
                "value": "options"
            }
        },
        "undocumented": true,
        "name": "parentID",
        "longname": "<anonymous>~options.parentID",
        "kind": "member",
        "memberof": "<anonymous>~options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21458,
                21481
            ],
            "filename": "Client.js",
            "lineno": 426,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001520",
                "name": "options.reason",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "reason",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "<anonymous>~options.reason",
        "kind": "member",
        "memberof": "<anonymous>~options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21495,
                21513
            ],
            "filename": "Client.js",
            "lineno": 427,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001526",
                "name": "reason",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "undefined",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "<anonymous>~reason",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21594,
                21610
            ],
            "filename": "Client.js",
            "lineno": 429,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001540",
                "name": "options",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "reason",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "<anonymous>~options",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21624,
                21642
            ],
            "filename": "Client.js",
            "lineno": 430,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001544",
                "name": "reason",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "undefined",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "<anonymous>~reason",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21760,
                21770
            ],
            "filename": "Client.js",
            "lineno": 433,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001564",
                "name": "name",
                "type": "Identifier",
                "value": "name"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21784,
                21794
            ],
            "filename": "Client.js",
            "lineno": 434,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001566",
                "name": "type",
                "type": "Identifier",
                "value": "type"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21808,
                21830
            ],
            "filename": "Client.js",
            "lineno": 435,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001568",
                "name": "reason",
                "type": "MemberExpression",
                "value": "options.reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21844,
                21864
            ],
            "filename": "Client.js",
            "lineno": 436,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001572",
                "name": "topic",
                "type": "MemberExpression",
                "value": "options.topic"
            }
        },
        "undocumented": true,
        "name": "topic",
        "longname": "topic",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21878,
                21896
            ],
            "filename": "Client.js",
            "lineno": 437,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001576",
                "name": "nsfw",
                "type": "MemberExpression",
                "value": "options.nsfw"
            }
        },
        "undocumented": true,
        "name": "nsfw",
        "longname": "nsfw",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21910,
                21934
            ],
            "filename": "Client.js",
            "lineno": 438,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001580",
                "name": "bitrate",
                "type": "MemberExpression",
                "value": "options.bitrate"
            }
        },
        "undocumented": true,
        "name": "bitrate",
        "longname": "bitrate",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21948,
                21977
            ],
            "filename": "Client.js",
            "lineno": 439,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001584",
                "name": "user_limit",
                "type": "MemberExpression",
                "value": "options.userLimit"
            }
        },
        "undocumented": true,
        "name": "user_limit",
        "longname": "user_limit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21991,
                22036
            ],
            "filename": "Client.js",
            "lineno": 440,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001588",
                "name": "rate_limit_per_user",
                "type": "MemberExpression",
                "value": "options.rateLimitPerUser"
            }
        },
        "undocumented": true,
        "name": "rate_limit_per_user",
        "longname": "rate_limit_per_user",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22050,
                22077
            ],
            "filename": "Client.js",
            "lineno": 441,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001592",
                "name": "parent_id",
                "type": "MemberExpression",
                "value": "options.parentID"
            }
        },
        "undocumented": true,
        "name": "parent_id",
        "longname": "parent_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22091,
                22142
            ],
            "filename": "Client.js",
            "lineno": 442,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001596",
                "name": "permission_overwrites",
                "type": "MemberExpression",
                "value": "options.permissionOverwrites"
            }
        },
        "undocumented": true,
        "name": "permission_overwrites",
        "longname": "permission_overwrites",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Edit a channel's properties\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.icon] The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.ownerID] The ID of the channel owner (group channels only)\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel (guild channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {String?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | GroupChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
        "meta": {
            "range": [
                23555,
                24128
            ],
            "filename": "Client.js",
            "lineno": 462,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001609",
                "name": "Client#editChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a channel's properties",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the channel",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings",
                "name": "options.icon"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the channel owner (group channels only)",
                "name": "options.ownerID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The topic of the channel (guild text channels only)",
                "name": "options.topic"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "The nsfw status of the channel (guild channels only)",
                "name": "options.nsfw"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The bitrate of the channel (guild voice channels only)",
                "name": "options.bitrate"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The channel user limit (guild voice channels only)",
                "name": "options.userLimit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
                "name": "options.rateLimitPerUser"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
                "name": "options.parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|GroupChannel|TextChannel|VoiceChannel|NewsChannel)>"
                    ]
                }
            }
        ],
        "name": "editChannel",
        "longname": "Client#editChannel",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23699,
                23717
            ],
            "filename": "Client.js",
            "lineno": 464,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001633",
                "name": "name",
                "type": "MemberExpression",
                "value": "options.name"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23731,
                23749
            ],
            "filename": "Client.js",
            "lineno": 465,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001637",
                "name": "icon",
                "type": "MemberExpression",
                "value": "options.icon"
            }
        },
        "undocumented": true,
        "name": "icon",
        "longname": "icon",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23763,
                23788
            ],
            "filename": "Client.js",
            "lineno": 466,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001641",
                "name": "owner_id",
                "type": "MemberExpression",
                "value": "options.ownerID"
            }
        },
        "undocumented": true,
        "name": "owner_id",
        "longname": "owner_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23802,
                23822
            ],
            "filename": "Client.js",
            "lineno": 467,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001645",
                "name": "topic",
                "type": "MemberExpression",
                "value": "options.topic"
            }
        },
        "undocumented": true,
        "name": "topic",
        "longname": "topic",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23836,
                23854
            ],
            "filename": "Client.js",
            "lineno": 468,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001649",
                "name": "nsfw",
                "type": "MemberExpression",
                "value": "options.nsfw"
            }
        },
        "undocumented": true,
        "name": "nsfw",
        "longname": "nsfw",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23868,
                23892
            ],
            "filename": "Client.js",
            "lineno": 469,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001653",
                "name": "bitrate",
                "type": "MemberExpression",
                "value": "options.bitrate"
            }
        },
        "undocumented": true,
        "name": "bitrate",
        "longname": "bitrate",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23906,
                23935
            ],
            "filename": "Client.js",
            "lineno": 470,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001657",
                "name": "user_limit",
                "type": "MemberExpression",
                "value": "options.userLimit"
            }
        },
        "undocumented": true,
        "name": "user_limit",
        "longname": "user_limit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23949,
                23994
            ],
            "filename": "Client.js",
            "lineno": 471,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001661",
                "name": "rate_limit_per_user",
                "type": "MemberExpression",
                "value": "options.rateLimitPerUser"
            }
        },
        "undocumented": true,
        "name": "rate_limit_per_user",
        "longname": "rate_limit_per_user",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24008,
                24035
            ],
            "filename": "Client.js",
            "lineno": 472,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001665",
                "name": "parent_id",
                "type": "MemberExpression",
                "value": "options.parentID"
            }
        },
        "undocumented": true,
        "name": "parent_id",
        "longname": "parent_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24049,
                24063
            ],
            "filename": "Client.js",
            "lineno": 473,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001669",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Edit a guild channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                24406,
                25546
            ],
            "filename": "Client.js",
            "lineno": 483,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001680",
                "name": "Client#editChannelPosition",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "position"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a guild channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new position of the channel",
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editChannelPosition",
        "longname": "Client#editChannelPosition",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24461,
                24529
            ],
            "filename": "Client.js",
            "lineno": 484,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001687",
                "name": "channels",
                "type": "MemberExpression",
                "value": ".channels"
            }
        },
        "undocumented": true,
        "name": "channels",
        "longname": "<anonymous>~channels",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24545,
                24578
            ],
            "filename": "Client.js",
            "lineno": 485,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001703",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24799,
                24841
            ],
            "filename": "Client.js",
            "lineno": 492,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001738",
                "name": "min",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "min",
        "longname": "<anonymous>~min",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24857,
                24899
            ],
            "filename": "Client.js",
            "lineno": 493,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001749",
                "name": "max",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "max",
        "longname": "<anonymous>~max",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24909,
                25166
            ],
            "filename": "Client.js",
            "lineno": 494,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001760",
                "name": "channels",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channels",
        "longname": "<anonymous>~channels",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25477,
                25491
            ],
            "filename": "Client.js",
            "lineno": 506,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001854",
                "name": "id",
                "type": "MemberExpression",
                "value": "channel.id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25505,
                25526
            ],
            "filename": "Client.js",
            "lineno": 507,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001858",
                "name": "position",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "position",
        "longname": "position",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Delete a guild channel, or leave a private or group channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                25780,
                25942
            ],
            "filename": "Client.js",
            "lineno": 517,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001862",
                "name": "Client#deleteChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a guild channel, or leave a private or group channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteChannel",
        "longname": "Client#deleteChannel",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25918,
                25924
            ],
            "filename": "Client.js",
            "lineno": 519,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001883",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Send typing status in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                26078,
                26209
            ],
            "filename": "Client.js",
            "lineno": 528,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001885",
                "name": "Client#sendChannelTyping",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Send typing status in a channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "sendChannelTyping",
        "longname": "Client#sendChannelTyping",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} channelID The ID of channel\n    * @arg {String} overwriteID The ID of the overwritten user or role (everyone role ID = guild ID)\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                26747,
                27025
            ],
            "filename": "Client.js",
            "lineno": 542,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001904",
                "name": "Client#editChannelPermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "overwriteID",
                    "allow",
                    "deny",
                    "type",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a channel permission overwrite",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role (everyone role ID = guild ID)",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for allowed permissions",
                "name": "allow"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for denied permissions",
                "name": "deny"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The object type of the overwrite, either \"member\" or \"role\"",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editChannelPermission",
        "longname": "Client#editChannelPermission",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26946,
                26951
            ],
            "filename": "Client.js",
            "lineno": 544,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001930",
                "name": "allow",
                "type": "Identifier",
                "value": "allow"
            }
        },
        "undocumented": true,
        "name": "allow",
        "longname": "allow",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26965,
                26969
            ],
            "filename": "Client.js",
            "lineno": 545,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001932",
                "name": "deny",
                "type": "Identifier",
                "value": "deny"
            }
        },
        "undocumented": true,
        "name": "deny",
        "longname": "deny",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26983,
                26987
            ],
            "filename": "Client.js",
            "lineno": 546,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001934",
                "name": "type",
                "type": "Identifier",
                "value": "type"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27001,
                27007
            ],
            "filename": "Client.js",
            "lineno": 547,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001936",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                27308,
                27517
            ],
            "filename": "Client.js",
            "lineno": 558,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001938",
                "name": "Client#deleteChannelPermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "overwriteID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a channel permission overwrite",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteChannelPermission",
        "longname": "Client#deleteChannelPermission",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27493,
                27499
            ],
            "filename": "Client.js",
            "lineno": 560,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001961",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Get all invites in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<Invite[]>}\n    */",
        "meta": {
            "range": [
                27660,
                27860
            ],
            "filename": "Client.js",
            "lineno": 569,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001963",
                "name": "Client#getChannelInvites",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all invites in a channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Invite>>"
                    ]
                }
            }
        ],
        "name": "getChannelInvites",
        "longname": "Client#getChannelInvites",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Create an invite for a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} [options] Invite generation options\n    * @arg {Number} [options.maxAge] How long the invite should last in seconds\n    * @arg {Number} [options.maxUses] How many uses the invite should last for\n    * @arg {Boolean} [options.temporary] Whether the invite grants temporary membership or not\n    * @arg {Boolean} [options.unique] Whether the invite is unique or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Invite>}\n    */",
        "meta": {
            "range": [
                28457,
                28850
            ],
            "filename": "Client.js",
            "lineno": 584,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001997",
                "name": "Client#createChannelInvite",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create an invite for a channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Invite generation options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "How long the invite should last in seconds",
                "name": "options.maxAge"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "How many uses the invite should last for",
                "name": "options.maxUses"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the invite grants temporary membership or not",
                "name": "options.temporary"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the invite is unique or not",
                "name": "options.unique"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Invite>"
                    ]
                }
            }
        ],
        "name": "createChannelInvite",
        "longname": "Client#createChannelInvite",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28621,
                28644
            ],
            "filename": "Client.js",
            "lineno": 586,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002023",
                "name": "max_age",
                "type": "MemberExpression",
                "value": "options.maxAge"
            }
        },
        "undocumented": true,
        "name": "max_age",
        "longname": "max_age",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28658,
                28683
            ],
            "filename": "Client.js",
            "lineno": 587,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002027",
                "name": "max_uses",
                "type": "MemberExpression",
                "value": "options.maxUses"
            }
        },
        "undocumented": true,
        "name": "max_uses",
        "longname": "max_uses",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28697,
                28725
            ],
            "filename": "Client.js",
            "lineno": 588,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002031",
                "name": "temporary",
                "type": "MemberExpression",
                "value": "options.temporary"
            }
        },
        "undocumented": true,
        "name": "temporary",
        "longname": "temporary",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28739,
                28761
            ],
            "filename": "Client.js",
            "lineno": 589,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002035",
                "name": "unique",
                "type": "MemberExpression",
                "value": "options.unique"
            }
        },
        "undocumented": true,
        "name": "unique",
        "longname": "unique",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28775,
                28789
            ],
            "filename": "Client.js",
            "lineno": 590,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002039",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Get all the webhooks in a channel\n    * @arg {String} channelID The ID of the channel to get webhooks for\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
        "meta": {
            "range": [
                29060,
                29193
            ],
            "filename": "Client.js",
            "lineno": 599,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002048",
                "name": "Client#getChannelWebhooks",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all the webhooks in a channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel to get webhooks for",
                "name": "channelID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of webhook objects"
            }
        ],
        "name": "getChannelWebhooks",
        "longname": "Client#getChannelWebhooks",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
        "meta": {
            "range": [
                29448,
                29625
            ],
            "filename": "Client.js",
            "lineno": 609,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002067",
                "name": "Client#getWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "webhookID",
                    "token"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a webhook",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the webhook",
                "name": "webhookID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The token of the webhook, used instead of the Bot Authorization token",
                "name": "token"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with a webhook object"
            }
        ],
        "name": "getWebhook",
        "longname": "Client#getWebhook",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Create a channel webhook\n    * @arg {String} channelID The ID of the channel to create the webhook in\n    * @arg {Object} options Webhook options\n    * @arg {String} options.name The default name\n    * @arg {String} options.avatar The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
        "meta": {
            "range": [
                30117,
                30312
            ],
            "filename": "Client.js",
            "lineno": 622,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002096",
                "name": "Client#createChannelWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a channel webhook",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel to create the webhook in",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Webhook options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The default name",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.avatar"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with a webhook object"
            }
        ],
        "name": "createChannelWebhook",
        "longname": "Client#createChannelWebhook",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30176,
                30199
            ],
            "filename": "Client.js",
            "lineno": 623,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002104",
                "name": "options.reason",
                "type": "Identifier",
                "value": "reason",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "options.reason",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Edit a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {Object} options Webhook options\n    * @arg {String} [options.name] The new default name\n    * @arg {String} [options.avatar] The new default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
        "meta": {
            "range": [
                30879,
                31118
            ],
            "filename": "Client.js",
            "lineno": 637,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002124",
                "name": "Client#editWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "webhookID",
                    "options",
                    "token",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a webhook",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the webhook",
                "name": "webhookID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Webhook options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The new default name",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The new default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.avatar"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The token of the webhook, used instead of the Bot Authorization token",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with a webhook object"
            }
        ],
        "name": "editWebhook",
        "longname": "Client#editWebhook",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30936,
                30959
            ],
            "filename": "Client.js",
            "lineno": 638,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002133",
                "name": "options.reason",
                "type": "Identifier",
                "value": "reason",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "options.reason",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Execute a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} token The token of the webhook\n    * @arg {Object} options Webhook execution options\n    * @arg {Boolean} [options.auth=false] Whether or not to authorize the request with the bot token (allowing custom emotes from other guilds)\n    * @arg {String} [options.content=\"\"] A content string\n    * @arg {Object | Object[]} [options.file] A file object (or an Array of them)\n    * @arg {Buffer} options.file.file A buffer containing file data\n    * @arg {String} options.file.name What to name the file\n    * @arg {Object[]} [options.embeds] An array of Discord embeds\n    * @arg {String} [options.username] A custom username, defaults to webhook default username if not specified\n    * @arg {String} [options.avatarURL] A URL for a custom avatar, defaults to webhook default avatar if not specified\n    * @arg {Boolean} [options.tts=false] Whether the message should be a TTS message or not\n    * @arg {Boolean} [options.wait=false] Whether to wait for the server to confirm the message create or not\n    * @arg {Object} [options.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [options.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [options.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [options.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @returns {Promise<Message?>}\n    */",
        "meta": {
            "range": [
                32777,
                33500
            ],
            "filename": "Client.js",
            "lineno": 663,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002162",
                "name": "Client#executeWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "webhookID",
                    "token",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Execute a webhook",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the webhook",
                "name": "webhookID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The token of the webhook",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Webhook execution options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not to authorize the request with the bot token (allowing custom emotes from other guilds)",
                "name": "options.auth"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "A content string",
                "name": "options.content"
            },
            {
                "type": {
                    "names": [
                        "Object",
                        "Array.<Object>"
                    ]
                },
                "optional": true,
                "description": "A file object (or an Array of them)",
                "name": "options.file"
            },
            {
                "type": {
                    "names": [
                        "Buffer"
                    ]
                },
                "description": "A buffer containing file data",
                "name": "options.file.file"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "What to name the file",
                "name": "options.file.name"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "optional": true,
                "description": "An array of Discord embeds",
                "name": "options.embeds"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "A custom username, defaults to webhook default username if not specified",
                "name": "options.username"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "A URL for a custom avatar, defaults to webhook default avatar if not specified",
                "name": "options.avatarURL"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the message should be a TTS message or not",
                "name": "options.tts"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to wait for the server to confirm the message create or not",
                "name": "options.wait"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "options.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "options.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "options.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "options.allowedMentions.users"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<?Message>"
                    ]
                }
            }
        ],
        "name": "executeWebhook",
        "longname": "Client#executeWebhook",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33136,
                33160
            ],
            "filename": "Client.js",
            "lineno": 668,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002222",
                "name": "content",
                "type": "MemberExpression",
                "value": "options.content"
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "content",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33174,
                33196
            ],
            "filename": "Client.js",
            "lineno": 669,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002226",
                "name": "embeds",
                "type": "MemberExpression",
                "value": "options.embeds"
            }
        },
        "undocumented": true,
        "name": "embeds",
        "longname": "embeds",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33210,
                33236
            ],
            "filename": "Client.js",
            "lineno": 670,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002230",
                "name": "username",
                "type": "MemberExpression",
                "value": "options.username"
            }
        },
        "undocumented": true,
        "name": "username",
        "longname": "username",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33250,
                33279
            ],
            "filename": "Client.js",
            "lineno": 671,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002234",
                "name": "avatar_url",
                "type": "MemberExpression",
                "value": "options.avatarURL"
            }
        },
        "undocumented": true,
        "name": "avatar_url",
        "longname": "avatar_url",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33293,
                33309
            ],
            "filename": "Client.js",
            "lineno": 672,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002238",
                "name": "tts",
                "type": "MemberExpression",
                "value": "options.tts"
            }
        },
        "undocumented": true,
        "name": "tts",
        "longname": "tts",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33323,
                33393
            ],
            "filename": "Client.js",
            "lineno": 673,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002242",
                "name": "allowed_mentions",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "allowed_mentions",
        "longname": "allowed_mentions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Execute a slack-style webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} token The token of the webhook\n    * @arg {Object} options Slack webhook options\n    * @arg {Boolean} [options.wait=false] Whether to wait for the server to confirm the message create or not\n    * @arg {Boolean} [options.auth=false] Whether or not to authorize the request with the bot token (allowing custom emotes from other guilds)\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                33989,
                34330
            ],
            "filename": "Client.js",
            "lineno": 686,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002265",
                "name": "Client#executeSlackWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "webhookID",
                    "token",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Execute a slack-style webhook",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the webhook",
                "name": "webhookID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The token of the webhook",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Slack webhook options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to wait for the server to confirm the message create or not",
                "name": "options.wait"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not to authorize the request with the bot token (allowing custom emotes from other guilds)",
                "name": "options.auth"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "executeSlackWebhook",
        "longname": "Client#executeSlackWebhook",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34052,
                34073
            ],
            "filename": "Client.js",
            "lineno": 687,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002273",
                "name": "wait",
                "type": "UnaryExpression",
                "value": "!!options.wait"
            }
        },
        "undocumented": true,
        "name": "wait",
        "longname": "<anonymous>~wait",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34083,
                34107
            ],
            "filename": "Client.js",
            "lineno": 688,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002281",
                "name": "options.wait",
                "type": "Identifier",
                "value": "undefined",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "wait",
        "longname": "options.wait",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34123,
                34144
            ],
            "filename": "Client.js",
            "lineno": 689,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002287",
                "name": "auth",
                "type": "UnaryExpression",
                "value": "!!options.auth"
            }
        },
        "undocumented": true,
        "name": "auth",
        "longname": "<anonymous>~auth",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34154,
                34178
            ],
            "filename": "Client.js",
            "lineno": 690,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002295",
                "name": "options.auth",
                "type": "Identifier",
                "value": "undefined",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "auth",
        "longname": "options.auth",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Delete a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                34619,
                34842
            ],
            "filename": "Client.js",
            "lineno": 701,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002321",
                "name": "Client#deleteWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "webhookID",
                    "token",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a webhook",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the webhook",
                "name": "webhookID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The token of the webhook, used instead of the Bot Authorization token",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteWebhook",
        "longname": "Client#deleteWebhook",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34818,
                34824
            ],
            "filename": "Client.js",
            "lineno": 703,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002352",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Get all the webhooks in a guild\n    * @arg {String} guildID The ID of the guild to get webhooks for\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
        "meta": {
            "range": [
                35046,
                35171
            ],
            "filename": "Client.js",
            "lineno": 712,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002354",
                "name": "Client#getGuildWebhooks",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all the webhooks in a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to get webhooks for",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of webhook objects"
            }
        ],
        "name": "getGuildWebhooks",
        "longname": "Client#getGuildWebhooks",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get the audit logs for a guild\n    * @arg {String} guildID The ID of the guild to get audit logs for\n    * @arg {Number} [limit=50] The maximum number of entries to return\n    * @arg {String} [before] Get entries before this entry ID\n    * @arg {Number} [actionType] Filter entries by action type\n    * @returns {Promise<Object>} Resolves with {users: Users[], entries: GuildAuditLogEntry[]}\n    */",
        "meta": {
            "range": [
                35590,
                36148
            ],
            "filename": "Client.js",
            "lineno": 724,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002373",
                "name": "Client#getGuildAuditLogs",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "limit",
                    "before",
                    "actionType"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the audit logs for a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to get audit logs for",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 50,
                "description": "The maximum number of entries to return",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get entries before this entry ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "Filter entries by action type",
                "name": "actionType"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with {users: Users[], entries: GuildAuditLogEntry[]}"
            }
        ],
        "name": "getGuildAuditLogs",
        "longname": "Client#getGuildAuditLogs",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35753,
                35771
            ],
            "filename": "Client.js",
            "lineno": 726,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002398",
                "name": "limit",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "limit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35785,
                35799
            ],
            "filename": "Client.js",
            "lineno": 727,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002402",
                "name": "before",
                "type": "Identifier",
                "value": "before"
            }
        },
        "undocumented": true,
        "name": "before",
        "longname": "before",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35813,
                35836
            ],
            "filename": "Client.js",
            "lineno": 728,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002404",
                "name": "action_type",
                "type": "Identifier",
                "value": "actionType"
            }
        },
        "undocumented": true,
        "name": "action_type",
        "longname": "action_type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35883,
                35915
            ],
            "filename": "Client.js",
            "lineno": 730,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002411",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35954,
                36013
            ],
            "filename": "Client.js",
            "lineno": 732,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002422",
                "name": "users",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "users",
        "longname": "users",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36031,
                36115
            ],
            "filename": "Client.js",
            "lineno": 733,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002439",
                "name": "entries",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "entries",
        "longname": "entries",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Create a guild emoji object\n    * @arg {String} guildID The ID of the guild to create the emoji in\n    * @arg {Object} options Emoji options\n    * @arg {String} options.name The name of emoji\n    * @arg {String} options.image The base 64 encoded string\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
        "meta": {
            "range": [
                36627,
                36810
            ],
            "filename": "Client.js",
            "lineno": 748,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002452",
                "name": "Client#createGuildEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a guild emoji object",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to create the emoji in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Emoji options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of emoji",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The base 64 encoded string",
                "name": "options.image"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "optional": true,
                "description": "An array containing authorized role IDs",
                "name": "options.roles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild emoji object"
            }
        ],
        "name": "createGuildEmoji",
        "longname": "Client#createGuildEmoji",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36680,
                36703
            ],
            "filename": "Client.js",
            "lineno": 749,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002460",
                "name": "options.reason",
                "type": "Identifier",
                "value": "reason",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "options.reason",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Edit a guild emoji object\n    * @arg {String} guildID The ID of the guild to edit the emoji in\n    * @arg {String} emojiID The ID of the emoji you want to modify\n    * @arg {Object} options Emoji options\n    * @arg {String} [options.name] The name of emoji\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
        "meta": {
            "range": [
                37293,
                37492
            ],
            "filename": "Client.js",
            "lineno": 763,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002480",
                "name": "Client#editGuildEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "emojiID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a guild emoji object",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to edit the emoji in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the emoji you want to modify",
                "name": "emojiID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Emoji options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of emoji",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "optional": true,
                "description": "An array containing authorized role IDs",
                "name": "options.roles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild emoji object"
            }
        ],
        "name": "editGuildEmoji",
        "longname": "Client#editGuildEmoji",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                37353,
                37376
            ],
            "filename": "Client.js",
            "lineno": 764,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002489",
                "name": "options.reason",
                "type": "Identifier",
                "value": "reason",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "options.reason",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Delete a guild emoji object\n    * @arg {String} guildID The ID of the guild to delete the emoji in\n    * @arg {String} emojiID The ID of the emoji\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                37761,
                37944
            ],
            "filename": "Client.js",
            "lineno": 775,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002510",
                "name": "Client#deleteGuildEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "emojiID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a guild emoji object",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to delete the emoji in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the emoji",
                "name": "emojiID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteGuildEmoji",
        "longname": "Client#deleteGuildEmoji",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                37920,
                37926
            ],
            "filename": "Client.js",
            "lineno": 777,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002533",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Create a guild role\n    * @arg {String} guildID The ID of the guild to create the role in\n    * @arg {Object|Role} [options] An object or Role containing the properties to set\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
        "meta": {
            "range": [
                38647,
                39316
            ],
            "filename": "Client.js",
            "lineno": 793,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002535",
                "name": "Client#createRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a guild role",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to create the role in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Object",
                        "Role"
                    ]
                },
                "optional": true,
                "description": "An object or Role containing the properties to set",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the role",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The role permissions number",
                "name": "options.permissions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)",
                "name": "options.color"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to hoist the role in the user list or not",
                "name": "options.hoist"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the role is mentionable or not",
                "name": "options.mentionable"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Role>"
                    ]
                }
            }
        ],
        "name": "createRole",
        "longname": "Client#createRole",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38789,
                38807
            ],
            "filename": "Client.js",
            "lineno": 795,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002559",
                "name": "name",
                "type": "MemberExpression",
                "value": "options.name"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38821,
                38925
            ],
            "filename": "Client.js",
            "lineno": 796,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002563",
                "name": "permissions",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "permissions",
        "longname": "permissions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38939,
                38959
            ],
            "filename": "Client.js",
            "lineno": 797,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002578",
                "name": "color",
                "type": "MemberExpression",
                "value": "options.color"
            }
        },
        "undocumented": true,
        "name": "color",
        "longname": "color",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38973,
                38993
            ],
            "filename": "Client.js",
            "lineno": 798,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002582",
                "name": "hoist",
                "type": "MemberExpression",
                "value": "options.hoist"
            }
        },
        "undocumented": true,
        "name": "hoist",
        "longname": "hoist",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39007,
                39039
            ],
            "filename": "Client.js",
            "lineno": 799,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002586",
                "name": "mentionable",
                "type": "MemberExpression",
                "value": "options.mentionable"
            }
        },
        "undocumented": true,
        "name": "mentionable",
        "longname": "mentionable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39053,
                39067
            ],
            "filename": "Client.js",
            "lineno": 800,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002590",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39114,
                39146
            ],
            "filename": "Client.js",
            "lineno": 802,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002597",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n    * Edit a guild role\n    * @arg {String} guildID The ID of the guild the role is in\n    * @arg {String} roleID The ID of the role\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
        "meta": {
            "range": [
                40021,
                40268
            ],
            "filename": "Client.js",
            "lineno": 824,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002623",
                "name": "Client#editRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "roleID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a guild role",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild the role is in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the role",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The role permissions number",
                "name": "options.permissions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)",
                "name": "options.color"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to hoist the role in the user list or not",
                "name": "options.hoist"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the role is mentionable or not",
                "name": "options.mentionable"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Role>"
                    ]
                }
            }
        ],
        "name": "editRole",
        "longname": "Client#editRole",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                40074,
                40097
            ],
            "filename": "Client.js",
            "lineno": 825,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002632",
                "name": "options.reason",
                "type": "Identifier",
                "value": "reason",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "options.reason",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Edit a guild role's position. Note that role position numbers are highest on top and lowest at the bottom.\n    * @arg {String} guildID The ID of the guild the role is in\n    * @arg {String} roleID The ID of the role\n    * @arg {Number} position The new position of the role\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                40594,
                41627
            ],
            "filename": "Client.js",
            "lineno": 836,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002668",
                "name": "Client#editRolePosition",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "roleID",
                    "position"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a guild role's position. Note that role position numbers are highest on top and lowest at the bottom.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild the role is in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new position of the role",
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editRolePosition",
        "longname": "Client#editRolePosition",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                40769,
                40807
            ],
            "filename": "Client.js",
            "lineno": 840,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002689",
                "name": "roles",
                "type": "MemberExpression",
                "value": ".roles"
            }
        },
        "undocumented": true,
        "name": "roles",
        "longname": "<anonymous>~roles",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                40823,
                40847
            ],
            "filename": "Client.js",
            "lineno": 841,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002701",
                "name": "role",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "role",
        "longname": "<anonymous>~role",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                41056,
                41095
            ],
            "filename": "Client.js",
            "lineno": 848,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002736",
                "name": "min",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "min",
        "longname": "<anonymous>~min",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                41111,
                41150
            ],
            "filename": "Client.js",
            "lineno": 849,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002747",
                "name": "max",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "max",
        "longname": "<anonymous>~max",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                41160,
                41298
            ],
            "filename": "Client.js",
            "lineno": 850,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002758",
                "name": "roles",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "roles",
        "longname": "<anonymous>~roles",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                41561,
                41572
            ],
            "filename": "Client.js",
            "lineno": 857,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002838",
                "name": "id",
                "type": "MemberExpression",
                "value": "role.id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                41586,
                41607
            ],
            "filename": "Client.js",
            "lineno": 858,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002842",
                "name": "position",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "position",
        "longname": "position",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Delete a guild role\n    * @arg {String} guildID The ID of the guild to create the role in\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                41885,
                42059
            ],
            "filename": "Client.js",
            "lineno": 869,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002846",
                "name": "Client#deleteRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "roleID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a guild role",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to create the role in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteRole",
        "longname": "Client#deleteRole",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42035,
                42041
            ],
            "filename": "Client.js",
            "lineno": 871,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002869",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Get the prune count for a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} [options] The options to use to get number of prune members\n    * @arg {Number} [options.days=7] The number of days of inactivity to prune for\n    * @arg {Array<String>} [options.includeRoles] An array of role IDs that members must have to be considered for pruning\n    * @returns {Promise<Number>} Resolves with the number of members that would be pruned\n    */",
        "meta": {
            "range": [
                42542,
                42796
            ],
            "filename": "Client.js",
            "lineno": 883,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002871",
                "name": "Client#getPruneCount",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the prune count for a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The options to use to get number of prune members",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 7,
                "description": "The number of days of inactivity to prune for",
                "name": "options.days"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of role IDs that members must have to be considered for pruning",
                "name": "options.includeRoles"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Number>"
                    ]
                },
                "description": "Resolves with the number of members that would be pruned"
            }
        ],
        "name": "getPruneCount",
        "longname": "Client#getPruneCount",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42683,
                42701
            ],
            "filename": "Client.js",
            "lineno": 885,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002896",
                "name": "days",
                "type": "MemberExpression",
                "value": "options.days"
            }
        },
        "undocumented": true,
        "name": "days",
        "longname": "days",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42715,
                42750
            ],
            "filename": "Client.js",
            "lineno": 886,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002900",
                "name": "include_roles",
                "type": "MemberExpression",
                "value": "options.includeRoles"
            }
        },
        "undocumented": true,
        "name": "include_roles",
        "longname": "include_roles",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Begin pruning a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} [options] The options to pass to prune members\n    * @arg {Number} [options.days=7] The number of days of inactivity to prune for\n    * @arg {Boolean} [options.computePruneCount=true] Whether or not the number of pruned members should be returned. Discord discourages setting this to true for larger guilds\n    * @arg {Array<String>} [options.includeRoles] An array of role IDs that members must have to be considered for pruning\n    * @arg {String} [options.reason] The reason to be displayed in audit logs\n    * @returns {Promise<Number?>} If computePruneCount was true, resolves with the number of pruned members\n    */",
        "meta": {
            "range": [
                43529,
                43879
            ],
            "filename": "Client.js",
            "lineno": 900,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002910",
                "name": "Client#pruneMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Begin pruning a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The options to pass to prune members",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 7,
                "description": "The number of days of inactivity to prune for",
                "name": "options.days"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether or not the number of pruned members should be returned. Discord discourages setting this to true for larger guilds",
                "name": "options.computePruneCount"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of role IDs that members must have to be considered for pruning",
                "name": "options.includeRoles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "options.reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<?Number>"
                    ]
                },
                "description": "If computePruneCount was true, resolves with the number of pruned members"
            }
        ],
        "name": "pruneMembers",
        "longname": "Client#pruneMembers",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43670,
                43688
            ],
            "filename": "Client.js",
            "lineno": 902,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002935",
                "name": "days",
                "type": "MemberExpression",
                "value": "options.days"
            }
        },
        "undocumented": true,
        "name": "days",
        "longname": "days",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43702,
                43748
            ],
            "filename": "Client.js",
            "lineno": 903,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002939",
                "name": "compute_prune_count",
                "type": "MemberExpression",
                "value": "options.computePruneCount"
            }
        },
        "undocumented": true,
        "name": "compute_prune_count",
        "longname": "compute_prune_count",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43762,
                43797
            ],
            "filename": "Client.js",
            "lineno": 904,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002943",
                "name": "include_roles",
                "type": "MemberExpression",
                "value": "options.includeRoles"
            }
        },
        "undocumented": true,
        "name": "include_roles",
        "longname": "include_roles",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43811,
                43833
            ],
            "filename": "Client.js",
            "lineno": 905,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002947",
                "name": "reason",
                "type": "MemberExpression",
                "value": "options.reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Get a list of general/guild-specific voice regions\n    * @arg {String} [guildID] The ID of the guild\n    * @returns {Promise<Object[]>} Resolves with an array of voice region objects\n    */",
        "meta": {
            "range": [
                44089,
                44296
            ],
            "filename": "Client.js",
            "lineno": 914,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002957",
                "name": "Client#getVoiceRegions",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a list of general/guild-specific voice regions",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of voice region objects"
            }
        ],
        "name": "getVoiceRegions",
        "longname": "Client#getVoiceRegions",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get info on an invite\n    * @arg {String} inviteID The ID of the invite\n    * @arg {Boolean} [withCounts] Whether to fetch additional invite info or not (approximate member counts, approximate presences, channel counts, etc.)\n    * @returns {Promise<Invite>}\n    */",
        "meta": {
            "range": [
                44582,
                44798
            ],
            "filename": "Client.js",
            "lineno": 924,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002989",
                "name": "Client#getInvite",
                "type": "MethodDefinition",
                "paramnames": [
                    "inviteID",
                    "withCounts"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get info on an invite",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the invite",
                "name": "inviteID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to fetch additional invite info or not (approximate member counts, approximate presences, channel counts, etc.)",
                "name": "withCounts"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Invite>"
                    ]
                }
            }
        ],
        "name": "getInvite",
        "longname": "Client#getInvite",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                44714,
                44737
            ],
            "filename": "Client.js",
            "lineno": 926,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003012",
                "name": "with_counts",
                "type": "Identifier",
                "value": "withCounts"
            }
        },
        "undocumented": true,
        "name": "with_counts",
        "longname": "with_counts",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Accept an invite\n    * @arg {String} inviteID The ID of the invite\n    * @returns {Promise<Invite>}\n    */",
        "meta": {
            "range": [
                44940,
                45099
            ],
            "filename": "Client.js",
            "lineno": 935,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003021",
                "name": "Client#acceptInvite",
                "type": "MethodDefinition",
                "paramnames": [
                    "inviteID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Accept an invite",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the invite",
                "name": "inviteID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Invite>"
                    ]
                }
            }
        ],
        "name": "acceptInvite",
        "longname": "Client#acceptInvite",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Delete an invite\n    * @arg {String} inviteID The ID of the invite\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                45288,
                45446
            ],
            "filename": "Client.js",
            "lineno": 945,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003049",
                "name": "Client#deleteInvite",
                "type": "MethodDefinition",
                "paramnames": [
                    "inviteID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete an invite",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the invite",
                "name": "inviteID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteInvite",
        "longname": "Client#deleteInvite",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45422,
                45428
            ],
            "filename": "Client.js",
            "lineno": 947,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003070",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Get properties of the bot user\n    * @returns {Promise<ExtendedUser>}\n    */",
        "meta": {
            "range": [
                45543,
                45685
            ],
            "filename": "Client.js",
            "lineno": 955,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003072",
                "name": "Client#getSelf",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get properties of the bot user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<ExtendedUser>"
                    ]
                }
            }
        ],
        "name": "getSelf",
        "longname": "Client#getSelf",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Edit properties of the bot user\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.username] The new username\n    * @arg {String} [options.avatar] The new avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @returns {Promise<ExtendedUser>}\n    */",
        "meta": {
            "range": [
                46023,
                46184
            ],
            "filename": "Client.js",
            "lineno": 966,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003099",
                "name": "Client#editSelf",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit properties of the bot user",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The new username",
                "name": "options.username"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The new avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.avatar"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<ExtendedUser>"
                    ]
                }
            }
        ],
        "name": "editSelf",
        "longname": "Client#editSelf",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a DM channel with a user, or create one if it does not exist\n    * @arg {String} userID The ID of the user\n    * @returns {Promise<PrivateChannel>}\n    */",
        "meta": {
            "range": [
                46363,
                46764
            ],
            "filename": "Client.js",
            "lineno": 975,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003128",
                "name": "Client#getDMChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a DM channel with a user, or create one if it does not exist",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<PrivateChannel>"
                    ]
                }
            }
        ],
        "name": "getDMChannel",
        "longname": "Client#getDMChannel",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46638,
                46658
            ],
            "filename": "Client.js",
            "lineno": 980,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003173",
                "name": "recipients",
                "type": "ArrayExpression",
                "value": "[\"userID\"]"
            }
        },
        "undocumented": true,
        "name": "recipients",
        "longname": "recipients",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46672,
                46679
            ],
            "filename": "Client.js",
            "lineno": 981,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003176",
                "name": "type",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Create a group channel with other users\n    * @arg {String[]} userIDs The IDs of the other users\n    * @returns {Promise<PrivateChannel>}\n    */",
        "meta": {
            "range": [
                46944,
                47200
            ],
            "filename": "Client.js",
            "lineno": 990,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003185",
                "name": "Client#createGroupChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "userIDs"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Create a group channel with other users",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "The IDs of the other users",
                "name": "userIDs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<PrivateChannel>"
                    ]
                }
            }
        ],
        "name": "createGroupChannel",
        "longname": "Client#createGroupChannel",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                47077,
                47096
            ],
            "filename": "Client.js",
            "lineno": 992,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003207",
                "name": "recipients",
                "type": "Identifier",
                "value": "userIDs"
            }
        },
        "undocumented": true,
        "name": "recipients",
        "longname": "recipients",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                47110,
                47117
            ],
            "filename": "Client.js",
            "lineno": 993,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003209",
                "name": "type",
                "type": "Literal",
                "value": 3
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Get a previous message in a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                47401,
                47593
            ],
            "filename": "Client.js",
            "lineno": 1003,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003218",
                "name": "Client#getMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a previous message in a channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "getMessage",
        "longname": "Client#getMessage",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get previous messages in a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
        "meta": {
            "range": [
                48034,
                49933
            ],
            "filename": "Client.js",
            "lineno": 1016,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003248",
                "name": "Client#getMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "limit",
                    "before",
                    "after",
                    "around"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get previous messages in a channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 50,
                "description": "The max number of messages to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages before this message ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages after this message ID",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages around this message ID (does not work with limit > 100)",
                "name": "around"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Message>>"
                    ]
                }
            }
        ],
        "name": "getMessages",
        "longname": "Client#getMessages",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48151,
                48160
            ],
            "filename": "Client.js",
            "lineno": 1018,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003267",
                "name": "logs",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "logs",
        "longname": "<anonymous>~logs",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48180,
                49354
            ],
            "filename": "Client.js",
            "lineno": 1019,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003271",
                "name": "get",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "messages": "<anonymous>~get~messages",
                "": null,
                "limit": "<anonymous>~get~limit",
                "logs": "<anonymous>~get~logs"
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "<anonymous>~get",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": [],
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48237,
                48483
            ],
            "filename": "Client.js",
            "lineno": 1020,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003278",
                "name": "messages",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "<anonymous>~get~messages",
        "kind": "constant",
        "memberof": "<anonymous>~get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48356,
                48366
            ],
            "filename": "Client.js",
            "lineno": 1021,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003295",
                "name": "limit",
                "type": "Literal",
                "value": 100
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "limit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48388,
                48416
            ],
            "filename": "Client.js",
            "lineno": 1022,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003297",
                "name": "before",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "before",
        "longname": "before",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48438,
                48464
            ],
            "filename": "Client.js",
            "lineno": 1023,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003301",
                "name": "after",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "after",
        "longname": "after",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48805,
                48829
            ],
            "filename": "Client.js",
            "lineno": 1028,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003360",
                "name": "limit",
                "type": "MemberExpression",
                "funcscope": "<anonymous>~get",
                "value": "messages.length",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "<anonymous>~get~limit",
        "kind": "member",
        "memberof": "<anonymous>~get",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48847,
                49000
            ],
            "filename": "Client.js",
            "lineno": 1029,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003366",
                "name": "logs",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>~get",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "logs",
        "longname": "<anonymous>~get~logs",
        "kind": "member",
        "memberof": "<anonymous>~get",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49419,
                49605
            ],
            "filename": "Client.js",
            "lineno": 1038,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003455",
                "name": "messages",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "<anonymous>~messages",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49530,
                49535
            ],
            "filename": "Client.js",
            "lineno": 1039,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003472",
                "name": "limit",
                "type": "Identifier",
                "value": "limit"
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "limit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49549,
                49555
            ],
            "filename": "Client.js",
            "lineno": 1040,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003474",
                "name": "before",
                "type": "Identifier",
                "value": "before"
            }
        },
        "undocumented": true,
        "name": "before",
        "longname": "before",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49569,
                49574
            ],
            "filename": "Client.js",
            "lineno": 1041,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003476",
                "name": "after",
                "type": "Identifier",
                "value": "after"
            }
        },
        "undocumented": true,
        "name": "after",
        "longname": "after",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49588,
                49594
            ],
            "filename": "Client.js",
            "lineno": 1042,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003478",
                "name": "around",
                "type": "Identifier",
                "value": "around"
            }
        },
        "undocumented": true,
        "name": "around",
        "longname": "around",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Get all the pins in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<Message[]>}\n    */",
        "meta": {
            "range": [
                50078,
                50270
            ],
            "filename": "Client.js",
            "lineno": 1059,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003516",
                "name": "Client#getPins",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all the pins in a channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Message>>"
                    ]
                }
            }
        ],
        "name": "getPins",
        "longname": "Client#getPins",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Create a message in a channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel for a user\n    * @arg {String} channelID The ID of the channel\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @arg {Object | Object[]} [file] A file object (or an Array of them)\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                51667,
                52595
            ],
            "filename": "Client.js",
            "lineno": 1080,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003550",
                "name": "Client#createMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "content",
                    "file"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a message in a channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel for a user",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Array",
                        "Object"
                    ]
                },
                "description": "A string, array of strings, or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Set the message TTS flag",
                "name": "content.tts"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            },
            {
                "type": {
                    "names": [
                        "Object",
                        "Array.<Object>"
                    ]
                },
                "optional": true,
                "description": "A file object (or an Array of them)",
                "name": "file"
            },
            {
                "type": {
                    "names": [
                        "Buffer"
                    ]
                },
                "description": "A buffer containing file data",
                "name": "file.file"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "What to name the file",
                "name": "file.name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "createMessage",
        "longname": "Client#createMessage",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51827,
                51898
            ],
            "filename": "Client.js",
            "lineno": 1083,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003573",
                "name": "content",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"content\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "<anonymous>~content",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51859,
                51880
            ],
            "filename": "Client.js",
            "lineno": 1084,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003576",
                "name": "content",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "<anonymous>~content.content",
        "kind": "member",
        "memberof": "<anonymous>~content",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52010,
                52048
            ],
            "filename": "Client.js",
            "lineno": 1087,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003595",
                "name": "content.content",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "<anonymous>~content.content",
        "kind": "member",
        "memberof": "<anonymous>~content",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52238,
                52317
            ],
            "filename": "Client.js",
            "lineno": 1091,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003628",
                "name": "content.allowed_mentions",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "allowed_mentions",
        "longname": "<anonymous>~content.allowed_mentions",
        "kind": "member",
        "memberof": "<anonymous>~content",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Edit a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                53894,
                54749
            ],
            "filename": "Client.js",
            "lineno": 1112,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003676",
                "name": "Client#editMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID",
                    "content"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Array",
                        "Object"
                    ]
                },
                "description": "A string, array of strings, or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
                "name": "content.flags"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "editMessage",
        "longname": "Client#editMessage",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                54057,
                54128
            ],
            "filename": "Client.js",
            "lineno": 1115,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003699",
                "name": "content",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"content\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "<anonymous>~content",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                54089,
                54110
            ],
            "filename": "Client.js",
            "lineno": 1116,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003702",
                "name": "content",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "<anonymous>~content.content",
        "kind": "member",
        "memberof": "<anonymous>~content",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                54240,
                54278
            ],
            "filename": "Client.js",
            "lineno": 1119,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003721",
                "name": "content.content",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "<anonymous>~content.content",
        "kind": "member",
        "memberof": "<anonymous>~content",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                54490,
                54569
            ],
            "filename": "Client.js",
            "lineno": 1123,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003757",
                "name": "content.allowed_mentions",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "allowed_mentions",
        "longname": "<anonymous>~content.allowed_mentions",
        "kind": "member",
        "memberof": "<anonymous>~content",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Pin a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                54919,
                55061
            ],
            "filename": "Client.js",
            "lineno": 1134,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003793",
                "name": "Client#pinMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Pin a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "pinMessage",
        "longname": "Client#pinMessage",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Unpin a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                55233,
                55380
            ],
            "filename": "Client.js",
            "lineno": 1144,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003814",
                "name": "Client#unpinMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Unpin a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "unpinMessage",
        "longname": "Client#unpinMessage",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
        "meta": {
            "range": [
                55897,
                56370
            ],
            "filename": "Client.js",
            "lineno": 1158,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003835",
                "name": "Client#getMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID",
                    "reaction",
                    "limit",
                    "before",
                    "after"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a list of users who reacted with a specific reaction",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 100,
                "description": "The maximum number of users to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users before this user ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users after this user ID",
                "name": "after"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<User>>"
                    ]
                }
            }
        ],
        "name": "getMessageReaction",
        "longname": "Client#getMessageReaction",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                56031,
                56070
            ],
            "filename": "Client.js",
            "lineno": 1160,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003853",
                "name": "reaction",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reaction",
        "longname": "<anonymous>~reaction",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                56220,
                56239
            ],
            "filename": "Client.js",
            "lineno": 1163,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003877",
                "name": "limit",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "limit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                56253,
                56267
            ],
            "filename": "Client.js",
            "lineno": 1164,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003881",
                "name": "before",
                "type": "Identifier",
                "value": "before"
            }
        },
        "undocumented": true,
        "name": "before",
        "longname": "before",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                56281,
                56293
            ],
            "filename": "Client.js",
            "lineno": 1165,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003883",
                "name": "after",
                "type": "Identifier",
                "value": "after"
            }
        },
        "undocumented": true,
        "name": "after",
        "longname": "after",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                56733,
                57056
            ],
            "filename": "Client.js",
            "lineno": 1177,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003898",
                "name": "Client#addMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID",
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Add a reaction to a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to react as",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "addMessageReaction",
        "longname": "Client#addMessageReaction",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                56853,
                56892
            ],
            "filename": "Client.js",
            "lineno": 1179,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003914",
                "name": "reaction",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reaction",
        "longname": "<anonymous>~reaction",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                57439,
                57768
            ],
            "filename": "Client.js",
            "lineno": 1192,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003938",
                "name": "Client#removeMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID",
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove a reaction from a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to remove the reaction for",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeMessageReaction",
        "longname": "Client#removeMessageReaction",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57562,
                57601
            ],
            "filename": "Client.js",
            "lineno": 1194,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003954",
                "name": "reaction",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reaction",
        "longname": "<anonymous>~reaction",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n    * Remove all reactions from a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                57960,
                58131
            ],
            "filename": "Client.js",
            "lineno": 1205,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003978",
                "name": "Client#removeMessageReactions",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove all reactions from a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeMessageReactions",
        "longname": "Client#removeMessageReactions",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Remove all reactions from a message for a single emoji.\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                58456,
                58760
            ],
            "filename": "Client.js",
            "lineno": 1216,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003999",
                "name": "Client#removeMessageReactionEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID",
                    "reaction"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove all reactions from a message for a single emoji.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeMessageReactionEmoji",
        "longname": "Client#removeMessageReactionEmoji",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58576,
                58615
            ],
            "filename": "Client.js",
            "lineno": 1218,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004014",
                "name": "reaction",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reaction",
        "longname": "<anonymous>~reaction",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n    * Delete a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                59003,
                59195
            ],
            "filename": "Client.js",
            "lineno": 1230,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004035",
                "name": "Client#deleteMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteMessage",
        "longname": "Client#deleteMessage",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59171,
                59177
            ],
            "filename": "Client.js",
            "lineno": 1232,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004058",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Bulk delete messages (bot accounts only)\n    * @arg {String} channelID The ID of the channel\n    * @arg {String[]} messageIDs Array of message IDs to delete\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                59474,
                60528
            ],
            "filename": "Client.js",
            "lineno": 1243,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004060",
                "name": "Client#deleteMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageIDs",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Bulk delete messages (bot accounts only)",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of message IDs to delete",
                "name": "messageIDs"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteMessages",
        "longname": "Client#deleteMessages",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59736,
                59799
            ],
            "filename": "Client.js",
            "lineno": 1251,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004096",
                "name": "oldestAllowedSnowflake",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "oldestAllowedSnowflake",
        "longname": "<anonymous>~oldestAllowedSnowflake",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59815,
                59898
            ],
            "filename": "Client.js",
            "lineno": 1252,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004107",
                "name": "invalidMessage",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "invalidMessage",
        "longname": "<anonymous>~invalidMessage",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60200,
                60235
            ],
            "filename": "Client.js",
            "lineno": 1259,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004156",
                "name": "messages",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "messages",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60253,
                60267
            ],
            "filename": "Client.js",
            "lineno": 1260,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004163",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60462,
                60482
            ],
            "filename": "Client.js",
            "lineno": 1264,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004188",
                "name": "messages",
                "type": "Identifier",
                "value": "messageIDs"
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "messages",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60496,
                60510
            ],
            "filename": "Client.js",
            "lineno": 1265,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004190",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n     * Crosspost (publish) a message to subscribed channels\n     * @arg {String} channelID The ID of the NewsChannel\n     * @arg {String} messageID The ID of the message\n     * @returns {Promise<Message>}\n     */",
        "meta": {
            "range": [
                60755,
                60956
            ],
            "filename": "Client.js",
            "lineno": 1275,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004192",
                "name": "Client#crosspostMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Crosspost (publish) a message to subscribed channels",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the NewsChannel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "crosspostMessage",
        "longname": "Client#crosspostMessage",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Follow a NewsChannel in another channel. This creates a webhook in the target channel\n     * @param {String} channelID The ID of the NewsChannel\n     * @arg {String} webhookChannelID The ID of the target channel\n     * @returns {Object} An object containing the NewsChannel's ID and the new webhook's ID\n     */",
        "meta": {
            "range": [
                61289,
                61474
            ],
            "filename": "Client.js",
            "lineno": 1285,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004222",
                "name": "Client#followChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "webhookChannelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Follow a NewsChannel in another channel. This creates a webhook in the target channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the NewsChannel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target channel",
                "name": "webhookChannelID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "An object containing the NewsChannel's ID and the new webhook's ID"
            }
        ],
        "name": "followChannel",
        "longname": "Client#followChannel",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                61429,
                61465
            ],
            "filename": "Client.js",
            "lineno": 1286,
            "columnno": 95,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004243",
                "name": "webhook_channel_id",
                "type": "Identifier",
                "value": "webhookChannelID"
            }
        },
        "undocumented": true,
        "name": "webhook_channel_id",
        "longname": "webhook_channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Purge previous messages in a channel with an optional filter (bot accounts only)\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} limit The max number of messages to search through, -1 for no limit\n    * @arg {function} [filter] Optional filter function that returns a boolean when passed a Message object\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Number>} Resolves with the number of messages deleted\n    */",
        "meta": {
            "range": [
                62106,
                64180
            ],
            "filename": "Client.js",
            "lineno": 1299,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004245",
                "name": "Client#purgeChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "limit",
                    "filter",
                    "before",
                    "after",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Purge previous messages in a channel with an optional filter (bot accounts only)",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The max number of messages to search through, -1 for no limit",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "Optional filter function that returns a boolean when passed a Message object",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages before this message ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages after this message ID",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Number>"
                    ]
                },
                "description": "Resolves with the number of messages deleted"
            }
        ],
        "name": "purgeChannel",
        "longname": "Client#purgeChannel",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                62229,
                62275
            ],
            "filename": "Client.js",
            "lineno": 1301,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004262",
                "name": "filter",
                "type": "ArrowFunctionExpression",
                "funcscope": "<anonymous>",
                "paramnames": [
                    "msg"
                ]
            }
        },
        "undocumented": true,
        "name": "filter",
        "longname": "<anonymous>~filter",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                62374,
                62387
            ],
            "filename": "Client.js",
            "lineno": 1306,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004286",
                "name": "toDelete",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "toDelete",
        "longname": "<anonymous>~toDelete",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                62401,
                62412
            ],
            "filename": "Client.js",
            "lineno": 1307,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004290",
                "name": "deleted",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "deleted",
        "longname": "<anonymous>~deleted",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                62426,
                62438
            ],
            "filename": "Client.js",
            "lineno": 1308,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004294",
                "name": "done",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "done",
        "longname": "<anonymous>~done",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                62454,
                63075
            ],
            "filename": "Client.js",
            "lineno": 1309,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004298",
                "name": "checkToDelete",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "messageIDs": "<anonymous>~checkToDelete~messageIDs",
                "deleted": "<anonymous>~checkToDelete~deleted"
            }
        },
        "undocumented": true,
        "name": "checkToDelete",
        "longname": "<anonymous>~checkToDelete",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": [],
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                62502,
                62588
            ],
            "filename": "Client.js",
            "lineno": 1310,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004303",
                "name": "messageIDs",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "messageIDs",
        "longname": "<anonymous>~checkToDelete~messageIDs",
        "kind": "constant",
        "memberof": "<anonymous>~checkToDelete",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                62635,
                62663
            ],
            "filename": "Client.js",
            "lineno": 1312,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004325",
                "name": "deleted",
                "type": "MemberExpression",
                "funcscope": "<anonymous>~checkToDelete",
                "value": "messageIDs.length",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "deleted",
        "longname": "<anonymous>~checkToDelete~deleted",
        "kind": "member",
        "memberof": "<anonymous>~checkToDelete",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63091,
                64107
            ],
            "filename": "Client.js",
            "lineno": 1326,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004367",
                "name": "del",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "messages": "<anonymous>~del~messages",
                "done": "<anonymous>~del~done",
                "message": "<anonymous>~del~message"
            }
        },
        "undocumented": true,
        "name": "del",
        "longname": "<anonymous>~del",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": [],
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63144,
                63210
            ],
            "filename": "Client.js",
            "lineno": 1327,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004374",
                "name": "messages",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "<anonymous>~del~messages",
        "kind": "constant",
        "memberof": "<anonymous>~del",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63273,
                63284
            ],
            "filename": "Client.js",
            "lineno": 1329,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004396",
                "name": "done",
                "type": "Literal",
                "funcscope": "<anonymous>~del",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "done",
        "longname": "<anonymous>~del~done",
        "kind": "member",
        "memberof": "<anonymous>~del",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63346,
                63353
            ],
            "filename": "Client.js",
            "lineno": 1332,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004402",
                "name": "message"
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~del~message",
        "kind": "constant",
        "memberof": "<anonymous>~del",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63583,
                63594
            ],
            "filename": "Client.js",
            "lineno": 1337,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004430",
                "name": "done",
                "type": "Literal",
                "funcscope": "<anonymous>~del",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "done",
        "longname": "<anonymous>~del~done",
        "kind": "member",
        "memberof": "<anonymous>~del",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63940,
                63951
            ],
            "filename": "Client.js",
            "lineno": 1348,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004476",
                "name": "done",
                "type": "Literal",
                "funcscope": "<anonymous>~del",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "done",
        "longname": "<anonymous>~del~done",
        "kind": "member",
        "memberof": "<anonymous>~del",
        "scope": "inner"
    },
    {
        "comment": "/**\n    * [DEPRECATED] Get a guild's embed object\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object>} A guild embed object\n    */",
        "meta": {
            "range": [
                64349,
                64468
            ],
            "filename": "Client.js",
            "lineno": 1362,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004514",
                "name": "Client#getGuildEmbed",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[DEPRECATED] Get a guild's embed object",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild embed object"
            }
        ],
        "name": "getGuildEmbed",
        "longname": "Client#getGuildEmbed",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a guild's widget object\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object>} A guild widget object\n    */",
        "meta": {
            "range": [
                64626,
                64747
            ],
            "filename": "Client.js",
            "lineno": 1371,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004533",
                "name": "Client#getGuildWidget",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's widget object",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild widget object"
            }
        ],
        "name": "getGuildWidget",
        "longname": "Client#getGuildWidget",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Modify a guild's widget\n    * @arg {String} guildID The ID of the guild\n    * @arg {Object} options The widget object to modify (https://discord.com/developers/docs/resources/guild#modify-guild-widget)\n    * @returns {Promise<Object>} A guild widget object\n    */",
        "meta": {
            "range": [
                65031,
                65173
            ],
            "filename": "Client.js",
            "lineno": 1381,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004552",
                "name": "Client#editGuildWidget",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Modify a guild's widget",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The widget object to modify (https://discord.com/developers/docs/resources/guild#modify-guild-widget)",
                "name": "options"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild widget object"
            }
        ],
        "name": "editGuildWidget",
        "longname": "Client#editGuildWidget",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a guild preview for a guild. Only available for public guilds.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object>}\n    */",
        "meta": {
            "range": [
                65348,
                65516
            ],
            "filename": "Client.js",
            "lineno": 1390,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004573",
                "name": "Client#getGuildPreview",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild preview for a guild. Only available for public guilds.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                }
            }
        ],
        "name": "getGuildPreview",
        "longname": "Client#getGuildPreview",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a list of integrations for a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<GuildIntegration[]>}\n    */",
        "meta": {
            "range": [
                65675,
                65956
            ],
            "filename": "Client.js",
            "lineno": 1399,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004601",
                "name": "Client#getGuildIntegrations",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a list of integrations for a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<GuildIntegration>>"
                    ]
                }
            }
        ],
        "name": "getGuildIntegrations",
        "longname": "Client#getGuildIntegrations",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65721,
                65753
            ],
            "filename": "Client.js",
            "lineno": 1400,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004607",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n    * Edit a guild integration\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.expireBehavior] What to do when a user's subscription runs out\n    * @arg {String} [options.expireGracePeriod] How long before the integration's role is removed from an unsubscribed user\n    * @arg {String} [options.enableEmoticons] Whether to enable integration emoticons or not\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                66501,
                66854
            ],
            "filename": "Client.js",
            "lineno": 1414,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004645",
                "name": "Client#editGuildIntegration",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "integrationID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a guild integration",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration",
                "name": "integrationID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "What to do when a user's subscription runs out",
                "name": "options.expireBehavior"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "How long before the integration's role is removed from an unsubscribed user",
                "name": "options.expireGracePeriod"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Whether to enable integration emoticons or not",
                "name": "options.enableEmoticons"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editGuildIntegration",
        "longname": "Client#editGuildIntegration",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66682,
                66721
            ],
            "filename": "Client.js",
            "lineno": 1416,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004668",
                "name": "expire_behavior",
                "type": "MemberExpression",
                "value": "options.expireBehavior"
            }
        },
        "undocumented": true,
        "name": "expire_behavior",
        "longname": "expire_behavior",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66735,
                66781
            ],
            "filename": "Client.js",
            "lineno": 1417,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004672",
                "name": "expire_grace_period",
                "type": "MemberExpression",
                "value": "options.expireGracePeriod"
            }
        },
        "undocumented": true,
        "name": "expire_grace_period",
        "longname": "expire_grace_period",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66795,
                66836
            ],
            "filename": "Client.js",
            "lineno": 1418,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004676",
                "name": "enable_emoticons",
                "type": "MemberExpression",
                "value": "options.enableEmoticons"
            }
        },
        "undocumented": true,
        "name": "enable_emoticons",
        "longname": "enable_emoticons",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Delete a guild integration\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                67041,
                67208
            ],
            "filename": "Client.js",
            "lineno": 1428,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004680",
                "name": "Client#deleteGuildIntegration",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "integrationID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a guild integration",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration",
                "name": "integrationID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteGuildIntegration",
        "longname": "Client#deleteGuildIntegration",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Force a guild integration to sync\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                67402,
                67570
            ],
            "filename": "Client.js",
            "lineno": 1438,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004701",
                "name": "Client#syncGuildIntegration",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "integrationID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Force a guild integration to sync",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration",
                "name": "integrationID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "syncGuildIntegration",
        "longname": "Client#syncGuildIntegration",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get all invites in a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Invite[]>}\n    */",
        "meta": {
            "range": [
                67707,
                67899
            ],
            "filename": "Client.js",
            "lineno": 1447,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004722",
                "name": "Client#getGuildInvites",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all invites in a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Invite>>"
                    ]
                }
            }
        ],
        "name": "getGuildInvites",
        "longname": "Client#getGuildInvites",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Returns the vanity url of the guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                68035,
                68160
            ],
            "filename": "Client.js",
            "lineno": 1456,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004756",
                "name": "Client#getGuildVanity",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns the vanity url of the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "getGuildVanity",
        "longname": "Client#getGuildVanity",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Ban a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {Number} [deleteMessageDays=0] Number of days to delete messages for, between 0-7 inclusive\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                68503,
                69009
            ],
            "filename": "Client.js",
            "lineno": 1468,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004775",
                "name": "Client#banGuildMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "userID",
                    "deleteMessageDays",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Ban a user from a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Number of days to delete messages for, between 0-7 inclusive",
                "name": "deleteMessageDays"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "banGuildMember",
        "longname": "Client#banGuildMember",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68920,
                68963
            ],
            "filename": "Client.js",
            "lineno": 1473,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004824",
                "name": "delete_message_days",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "delete_message_days",
        "longname": "delete_message_days",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68977,
                68991
            ],
            "filename": "Client.js",
            "lineno": 1474,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004828",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Unban a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                69251,
                69430
            ],
            "filename": "Client.js",
            "lineno": 1485,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004830",
                "name": "Client#unbanGuildMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "userID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Unban a user from a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "unbanGuildMember",
        "longname": "Client#unbanGuildMember",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69406,
                69412
            ],
            "filename": "Client.js",
            "lineno": 1487,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004853",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Create a guild\n    * @arg {String} name The name of the guild\n    * @arg {Object} options The properties of the guild\n    * @arg {String} [options.region] The region of the guild\n    * @arg {String} [options.icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {Number} [options.verificationLevel] The guild verification level\n    * @arg {Number} [options.defaultNotifications] The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".\n    * @arg {Number} [options.explicitContentFilter] The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.\n    * @arg {String} [options.systemChannelID] The ID of the system channel\n    * @arg {String} [options.afkChannelID] The ID of the AFK voice channel\n    * @arg {Number} [options.afkTimeout] The AFK timeout in seconds\n    * @arg {Array<Object>} [options.roles] The new roles of the guild, the first one is the @everyone role. IDs are placeholders which allow channel overwrites.\n    * @arg {Array<Object>} [options.channels] The new channels of the guild. IDs are placeholders which allow use of category channels.\n    * @returns {Promise<Guild>}\n    */",
        "meta": {
            "range": [
                70786,
                71596
            ],
            "filename": "Client.js",
            "lineno": 1507,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004855",
                "name": "Client#createGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "name",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the guild",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties of the guild",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The region of the guild",
                "name": "options.region"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.icon"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The guild verification level",
                "name": "options.verificationLevel"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".",
                "name": "options.defaultNotifications"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.",
                "name": "options.explicitContentFilter"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the system channel",
                "name": "options.systemChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the AFK voice channel",
                "name": "options.afkChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The AFK timeout in seconds",
                "name": "options.afkTimeout"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "optional": true,
                "description": "The new roles of the guild, the first one is the @everyone role. IDs are placeholders which allow channel overwrites.",
                "name": "options.roles"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "optional": true,
                "description": "The new channels of the guild. IDs are placeholders which allow use of category channels.",
                "name": "options.channels"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Guild>"
                    ]
                }
            }
        ],
        "name": "createGuild",
        "longname": "Client#createGuild",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71035,
                71045
            ],
            "filename": "Client.js",
            "lineno": 1513,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004889",
                "name": "name",
                "type": "Identifier",
                "value": "name"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71059,
                71081
            ],
            "filename": "Client.js",
            "lineno": 1514,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004891",
                "name": "region",
                "type": "MemberExpression",
                "value": "options.region"
            }
        },
        "undocumented": true,
        "name": "region",
        "longname": "region",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71095,
                71113
            ],
            "filename": "Client.js",
            "lineno": 1515,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004895",
                "name": "icon",
                "type": "MemberExpression",
                "value": "options.icon"
            }
        },
        "undocumented": true,
        "name": "icon",
        "longname": "icon",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71127,
                71172
            ],
            "filename": "Client.js",
            "lineno": 1516,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004899",
                "name": "verification_level",
                "type": "MemberExpression",
                "value": "options.verificationLevel"
            }
        },
        "undocumented": true,
        "name": "verification_level",
        "longname": "verification_level",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71186,
                71245
            ],
            "filename": "Client.js",
            "lineno": 1517,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004903",
                "name": "default_message_notifications",
                "type": "MemberExpression",
                "value": "options.defaultNotifications"
            }
        },
        "undocumented": true,
        "name": "default_message_notifications",
        "longname": "default_message_notifications",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71259,
                71313
            ],
            "filename": "Client.js",
            "lineno": 1518,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004907",
                "name": "explicit_content_filter",
                "type": "MemberExpression",
                "value": "options.explicitContentFilter"
            }
        },
        "undocumented": true,
        "name": "explicit_content_filter",
        "longname": "explicit_content_filter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71327,
                71369
            ],
            "filename": "Client.js",
            "lineno": 1519,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004911",
                "name": "system_channel_id",
                "type": "MemberExpression",
                "value": "options.systemChannelID"
            }
        },
        "undocumented": true,
        "name": "system_channel_id",
        "longname": "system_channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71383,
                71419
            ],
            "filename": "Client.js",
            "lineno": 1520,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004915",
                "name": "afk_channel_id",
                "type": "MemberExpression",
                "value": "options.afkChannelID"
            }
        },
        "undocumented": true,
        "name": "afk_channel_id",
        "longname": "afk_channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71433,
                71464
            ],
            "filename": "Client.js",
            "lineno": 1521,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004919",
                "name": "afk_timeout",
                "type": "MemberExpression",
                "value": "options.afkTimeout"
            }
        },
        "undocumented": true,
        "name": "afk_timeout",
        "longname": "afk_timeout",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71478,
                71498
            ],
            "filename": "Client.js",
            "lineno": 1522,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004923",
                "name": "roles",
                "type": "MemberExpression",
                "value": "options.roles"
            }
        },
        "undocumented": true,
        "name": "roles",
        "longname": "roles",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71512,
                71538
            ],
            "filename": "Client.js",
            "lineno": 1523,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004927",
                "name": "channels",
                "type": "MemberExpression",
                "value": "options.channels"
            }
        },
        "undocumented": true,
        "name": "channels",
        "longname": "channels",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Edit a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The ID of the guild\n    * @arg {String} [options.region] The region of the guild\n    * @arg {String} [options.icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {Number} [options.verificationLevel] The guild verification level\n    * @arg {Number} [options.defaultNotifications] The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".\n    * @arg {Number} [options.explicitContentFilter] The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.\n    * @arg {String} [options.systemChannelID] The ID of the system channel\n    * @arg {String} [options.rulesChannelID] The id of the channel where \"PUBLIC\" guilds display rules and/or guidelines\n    * @arg {String} [options.publicUpdatesChannelID] The id of the channel where admins and moderators of \"PUBLIC\" guilds receive notices from Discord\n    * @arg {String} [options.preferredLocale] Preferred \"PUBLIC\" guild language used in server discovery and notices from Discord\n    * @arg {String} [options.afkChannelID] The ID of the AFK voice channel\n    * @arg {Number} [options.afkTimeout] The AFK timeout in seconds\n    * @arg {String} [options.ownerID] The ID of the user to transfer server ownership to (bot user must be owner)\n    * @arg {String} [options.splash] The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.banner] The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.description] The description for the guild (VIP only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Guild>}\n    */",
        "meta": {
            "range": [
                73677,
                74673
            ],
            "filename": "Client.js",
            "lineno": 1550,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004938",
                "name": "Client#editGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the guild",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The region of the guild",
                "name": "options.region"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.icon"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The guild verification level",
                "name": "options.verificationLevel"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".",
                "name": "options.defaultNotifications"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.",
                "name": "options.explicitContentFilter"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the system channel",
                "name": "options.systemChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The id of the channel where \"PUBLIC\" guilds display rules and/or guidelines",
                "name": "options.rulesChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The id of the channel where admins and moderators of \"PUBLIC\" guilds receive notices from Discord",
                "name": "options.publicUpdatesChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Preferred \"PUBLIC\" guild language used in server discovery and notices from Discord",
                "name": "options.preferredLocale"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the AFK voice channel",
                "name": "options.afkChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The AFK timeout in seconds",
                "name": "options.afkTimeout"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the user to transfer server ownership to (bot user must be owner)",
                "name": "options.ownerID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
                "name": "options.splash"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
                "name": "options.banner"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The description for the guild (VIP only)",
                "name": "options.description"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Guild>"
                    ]
                }
            }
        ],
        "name": "editGuild",
        "longname": "Client#editGuild",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73813,
                73831
            ],
            "filename": "Client.js",
            "lineno": 1552,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004962",
                "name": "name",
                "type": "MemberExpression",
                "value": "options.name"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73845,
                73867
            ],
            "filename": "Client.js",
            "lineno": 1553,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004966",
                "name": "region",
                "type": "MemberExpression",
                "value": "options.region"
            }
        },
        "undocumented": true,
        "name": "region",
        "longname": "region",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73881,
                73899
            ],
            "filename": "Client.js",
            "lineno": 1554,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004970",
                "name": "icon",
                "type": "MemberExpression",
                "value": "options.icon"
            }
        },
        "undocumented": true,
        "name": "icon",
        "longname": "icon",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73913,
                73958
            ],
            "filename": "Client.js",
            "lineno": 1555,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004974",
                "name": "verification_level",
                "type": "MemberExpression",
                "value": "options.verificationLevel"
            }
        },
        "undocumented": true,
        "name": "verification_level",
        "longname": "verification_level",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73972,
                74031
            ],
            "filename": "Client.js",
            "lineno": 1556,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004978",
                "name": "default_message_notifications",
                "type": "MemberExpression",
                "value": "options.defaultNotifications"
            }
        },
        "undocumented": true,
        "name": "default_message_notifications",
        "longname": "default_message_notifications",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74045,
                74099
            ],
            "filename": "Client.js",
            "lineno": 1557,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004982",
                "name": "explicit_content_filter",
                "type": "MemberExpression",
                "value": "options.explicitContentFilter"
            }
        },
        "undocumented": true,
        "name": "explicit_content_filter",
        "longname": "explicit_content_filter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74113,
                74155
            ],
            "filename": "Client.js",
            "lineno": 1558,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004986",
                "name": "system_channel_id",
                "type": "MemberExpression",
                "value": "options.systemChannelID"
            }
        },
        "undocumented": true,
        "name": "system_channel_id",
        "longname": "system_channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74169,
                74209
            ],
            "filename": "Client.js",
            "lineno": 1559,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004990",
                "name": "rules_channel_id",
                "type": "MemberExpression",
                "value": "options.rulesChannelID"
            }
        },
        "undocumented": true,
        "name": "rules_channel_id",
        "longname": "rules_channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74223,
                74280
            ],
            "filename": "Client.js",
            "lineno": 1560,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004994",
                "name": "public_updates_channel_id",
                "type": "MemberExpression",
                "value": "options.publicUpdatesChannelID"
            }
        },
        "undocumented": true,
        "name": "public_updates_channel_id",
        "longname": "public_updates_channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74294,
                74335
            ],
            "filename": "Client.js",
            "lineno": 1561,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004998",
                "name": "preferred_locale",
                "type": "MemberExpression",
                "value": "options.preferredLocale"
            }
        },
        "undocumented": true,
        "name": "preferred_locale",
        "longname": "preferred_locale",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74349,
                74385
            ],
            "filename": "Client.js",
            "lineno": 1562,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005002",
                "name": "afk_channel_id",
                "type": "MemberExpression",
                "value": "options.afkChannelID"
            }
        },
        "undocumented": true,
        "name": "afk_channel_id",
        "longname": "afk_channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74399,
                74430
            ],
            "filename": "Client.js",
            "lineno": 1563,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005006",
                "name": "afk_timeout",
                "type": "MemberExpression",
                "value": "options.afkTimeout"
            }
        },
        "undocumented": true,
        "name": "afk_timeout",
        "longname": "afk_timeout",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74444,
                74469
            ],
            "filename": "Client.js",
            "lineno": 1564,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005010",
                "name": "owner_id",
                "type": "MemberExpression",
                "value": "options.ownerID"
            }
        },
        "undocumented": true,
        "name": "owner_id",
        "longname": "owner_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74483,
                74505
            ],
            "filename": "Client.js",
            "lineno": 1565,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005014",
                "name": "splash",
                "type": "MemberExpression",
                "value": "options.splash"
            }
        },
        "undocumented": true,
        "name": "splash",
        "longname": "splash",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74519,
                74541
            ],
            "filename": "Client.js",
            "lineno": 1566,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005018",
                "name": "banner",
                "type": "MemberExpression",
                "value": "options.banner"
            }
        },
        "undocumented": true,
        "name": "banner",
        "longname": "banner",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74555,
                74587
            ],
            "filename": "Client.js",
            "lineno": 1567,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005022",
                "name": "description",
                "type": "MemberExpression",
                "value": "options.description"
            }
        },
        "undocumented": true,
        "name": "description",
        "longname": "description",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74601,
                74615
            ],
            "filename": "Client.js",
            "lineno": 1568,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005026",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Get the ban list of a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object[]>} Resolves with an array of {reason: String, user: User}\n    */",
        "meta": {
            "range": [
                74866,
                75141
            ],
            "filename": "Client.js",
            "lineno": 1577,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005035",
                "name": "Client#getGuildBans",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the ban list of a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of {reason: String, user: User}"
            }
        ],
        "name": "getGuildBans",
        "longname": "Client#getGuildBans",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                75046,
                75081
            ],
            "filename": "Client.js",
            "lineno": 1580,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005069",
                "name": "ban.user",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "ban.user",
        "kind": "member",
        "memberof": "ban",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Get a ban from the ban list of a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the banned user\n    * @returns {Promise<Object>} Resolves with {reason: String, user: User}\n    */",
        "meta": {
            "range": [
                75384,
                75615
            ],
            "filename": "Client.js",
            "lineno": 1592,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005081",
                "name": "Client#getGuildBan",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a ban from the ban list of a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the banned user",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with {reason: String, user: User}"
            }
        ],
        "name": "getGuildBan",
        "longname": "Client#getGuildBan",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                75537,
                75572
            ],
            "filename": "Client.js",
            "lineno": 1594,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005109",
                "name": "ban.user",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "ban.user",
        "kind": "member",
        "memberof": "ban",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Edit a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {Object} options The properties to edit\n    * @arg {String[]} [options.roles] The array of role IDs the member should have\n    * @arg {String} [options.nick] Set the member's server nickname, \"\" to remove\n    * @arg {Boolean} [options.mute] Server mute the member\n    * @arg {Boolean} [options.deaf] Server deafen the member\n    * @arg {String} [options.channelID] The ID of the voice channel to move the member to (must be in voice)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                76300,
                76758
            ],
            "filename": "Client.js",
            "lineno": 1612,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005121",
                "name": "Client#editGuildMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "memberID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a guild member",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "The array of role IDs the member should have",
                "name": "options.roles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Set the member's server nickname, \"\" to remove",
                "name": "options.nick"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Server mute the member",
                "name": "options.mute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Server deafen the member",
                "name": "options.deaf"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the voice channel to move the member to (must be in voice)",
                "name": "options.channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editGuildMember",
        "longname": "Client#editGuildMember",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76469,
                76573
            ],
            "filename": "Client.js",
            "lineno": 1614,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005145",
                "name": "roles",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "roles",
        "longname": "roles",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76587,
                76605
            ],
            "filename": "Client.js",
            "lineno": 1615,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005168",
                "name": "nick",
                "type": "MemberExpression",
                "value": "options.nick"
            }
        },
        "undocumented": true,
        "name": "nick",
        "longname": "nick",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76619,
                76637
            ],
            "filename": "Client.js",
            "lineno": 1616,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005172",
                "name": "mute",
                "type": "MemberExpression",
                "value": "options.mute"
            }
        },
        "undocumented": true,
        "name": "mute",
        "longname": "mute",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76651,
                76669
            ],
            "filename": "Client.js",
            "lineno": 1617,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005176",
                "name": "deaf",
                "type": "MemberExpression",
                "value": "options.deaf"
            }
        },
        "undocumented": true,
        "name": "deaf",
        "longname": "deaf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76683,
                76712
            ],
            "filename": "Client.js",
            "lineno": 1618,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005180",
                "name": "channel_id",
                "type": "MemberExpression",
                "value": "options.channelID"
            }
        },
        "undocumented": true,
        "name": "channel_id",
        "longname": "channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76726,
                76740
            ],
            "filename": "Client.js",
            "lineno": 1619,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005184",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Add a role to a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                77053,
                77259
            ],
            "filename": "Client.js",
            "lineno": 1631,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005186",
                "name": "Client#addGuildMemberRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "memberID",
                    "roleID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Add a role to a guild member",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "addGuildMemberRole",
        "longname": "Client#addGuildMemberRole",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77235,
                77241
            ],
            "filename": "Client.js",
            "lineno": 1633,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005211",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Remove a role from a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                77559,
                77771
            ],
            "filename": "Client.js",
            "lineno": 1645,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005213",
                "name": "Client#removeGuildMemberRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "memberID",
                    "roleID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove a role from a guild member",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeGuildMemberRole",
        "longname": "Client#removeGuildMemberRole",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77747,
                77753
            ],
            "filename": "Client.js",
            "lineno": 1647,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005238",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Edit the bot's nickname in a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} nick The nickname\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                78014,
                78211
            ],
            "filename": "Client.js",
            "lineno": 1658,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005240",
                "name": "Client#editNickname",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "nick",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit the bot's nickname in a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The nickname",
                "name": "nick"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editNickname",
        "longname": "Client#editNickname",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78169,
                78173
            ],
            "filename": "Client.js",
            "lineno": 1660,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005263",
                "name": "nick",
                "type": "Identifier",
                "value": "nick"
            }
        },
        "undocumented": true,
        "name": "nick",
        "longname": "nick",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78187,
                78193
            ],
            "filename": "Client.js",
            "lineno": 1661,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005265",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Kick a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                78452,
                78633
            ],
            "filename": "Client.js",
            "lineno": 1672,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005267",
                "name": "Client#kickGuildMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "userID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Kick a user from a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "kickGuildMember",
        "longname": "Client#kickGuildMember",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78609,
                78615
            ],
            "filename": "Client.js",
            "lineno": 1674,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005290",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Delete a guild (bot user must be owner)\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                78773,
                78887
            ],
            "filename": "Client.js",
            "lineno": 1683,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005292",
                "name": "Client#deleteGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a guild (bot user must be owner)",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteGuild",
        "longname": "Client#deleteGuild",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Leave a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                79001,
                79126
            ],
            "filename": "Client.js",
            "lineno": 1692,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005311",
                "name": "Client#leaveGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Leave a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "leaveGuild",
        "longname": "Client#leaveGuild",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get data on an OAuth2 application\n    * @arg {String} [appID=\"@me\"] The client ID of the application to get data for. \"@me\" refers to the logged in user's own application\n    * @returns {Promise<Object>} The bot's application data. Refer to [the official Discord API documentation entry](https://discordapp.com/developers/docs/topics/oauth2#get-current-application-information) for object structure\n    */",
        "meta": {
            "range": [
                79552,
                79689
            ],
            "filename": "Client.js",
            "lineno": 1701,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005331",
                "name": "Client#getOAuthApplication",
                "type": "MethodDefinition",
                "paramnames": [
                    "appID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get data on an OAuth2 application",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The client ID of the application to get data for. \"@me\" refers to the logged in user's own application",
                "name": "appID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The bot's application data. Refer to [the official Discord API documentation entry](https://discordapp.com/developers/docs/topics/oauth2#get-current-application-information) for object structure"
            }
        ],
        "name": "getOAuthApplication",
        "longname": "Client#getOAuthApplication",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Create a relationship with a user\n    * @arg {String} userID The ID of the target user\n    * @arg {Boolean} [block=false] If true, block the user. Otherwise, add the user as a friend\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                79939,
                80131
            ],
            "filename": "Client.js",
            "lineno": 1711,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005352",
                "name": "Client#addRelationship",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID",
                    "block"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Create a relationship with a user",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, block the user. Otherwise, add the user as a friend",
                "name": "block"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "addRelationship",
        "longname": "Client#addRelationship",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                80086,
                80113
            ],
            "filename": "Client.js",
            "lineno": 1713,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005374",
                "name": "type",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Remove a relationship with a user\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                80285,
                80423
            ],
            "filename": "Client.js",
            "lineno": 1722,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005379",
                "name": "Client#removeRelationship",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Remove a relationship with a user",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeRelationship",
        "longname": "Client#removeRelationship",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Add a user to a group\n    * @arg {String} groupID The ID of the target group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                80620,
                80765
            ],
            "filename": "Client.js",
            "lineno": 1732,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005399",
                "name": "Client#addGroupRecipient",
                "type": "MethodDefinition",
                "paramnames": [
                    "groupID",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Add a user to a group",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target group",
                "name": "groupID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "addGroupRecipient",
        "longname": "Client#addGroupRecipient",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Remove a user from a group\n    * @arg {String} groupID The ID of the target group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                80967,
                81118
            ],
            "filename": "Client.js",
            "lineno": 1742,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005420",
                "name": "Client#removeGroupRecipient",
                "type": "MethodDefinition",
                "paramnames": [
                    "groupID",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Remove a user from a group",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target group",
                "name": "groupID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeGroupRecipient",
        "longname": "Client#removeGroupRecipient",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get profile data for a user\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise<Object>} The user's profile data.\n    */",
        "meta": {
            "range": [
                81299,
                81418
            ],
            "filename": "Client.js",
            "lineno": 1751,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005441",
                "name": "Client#getUserProfile",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Get profile data for a user",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's profile data."
            }
        ],
        "name": "getUserProfile",
        "longname": "Client#getUserProfile",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Edit the current user's note for another user\n    * @arg {String} userID The ID of the target user\n    * @arg {String} note The note\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                81618,
                81775
            ],
            "filename": "Client.js",
            "lineno": 1761,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005460",
                "name": "Client#editUserNote",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID",
                    "note"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Edit the current user's note for another user",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The note",
                "name": "note"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editUserNote",
        "longname": "Client#editUserNote",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81753,
                81757
            ],
            "filename": "Client.js",
            "lineno": 1763,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005482",
                "name": "note",
                "type": "Identifier",
                "value": "note"
            }
        },
        "undocumented": true,
        "name": "note",
        "longname": "note",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Delete the current user's note for another user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                81890,
                82016
            ],
            "filename": "Client.js",
            "lineno": 1771,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005484",
                "name": "Client#deleteUserNote",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Delete the current user's note for another user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteUserNote",
        "longname": "Client#deleteUserNote",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get the connections for the current user\n    * @returns {Promise<Object>} The user's connections\n    */",
        "meta": {
            "range": [
                82155,
                82275
            ],
            "filename": "Client.js",
            "lineno": 1779,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005504",
                "name": "Client#getSelfConnections",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Get the connections for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's connections"
            }
        ],
        "name": "getSelfConnections",
        "longname": "Client#getSelfConnections",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Edit a connection for the current user\n    * @arg {String} platform The connection platform (e.g. \"twitch\", \"reddit\")\n    * @arg {String} id The connection ID\n    * @arg {Object} data The connection data\n    * @arg {Boolean} [data.friendSync] Whether to sync friends from the connection or not\n    * @arg {Number} [data.visibility] The visibility level for the connection. 0 = hidden, 1 = shown on profile\n    * @returns {Promise<Object>} The updated connection data\n    */",
        "meta": {
            "range": [
                82784,
                83041
            ],
            "filename": "Client.js",
            "lineno": 1792,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005522",
                "name": "Client#editSelfConnection",
                "type": "MethodDefinition",
                "paramnames": [
                    "platform",
                    "id",
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Edit a connection for the current user",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The connection platform (e.g. \"twitch\", \"reddit\")",
                "name": "platform"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The connection ID",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The connection data",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to sync friends from the connection or not",
                "name": "data.friendSync"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The visibility level for the connection. 0 = hidden, 1 = shown on profile",
                "name": "data.visibility"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The updated connection data"
            }
        ],
        "name": "editSelfConnection",
        "longname": "Client#editSelfConnection",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82954,
                82981
            ],
            "filename": "Client.js",
            "lineno": 1794,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005546",
                "name": "visibility",
                "type": "MemberExpression",
                "value": "data.visibility"
            }
        },
        "undocumented": true,
        "name": "visibility",
        "longname": "visibility",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82995,
                83023
            ],
            "filename": "Client.js",
            "lineno": 1795,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005550",
                "name": "friend_sync",
                "type": "MemberExpression",
                "value": "data.friendSync"
            }
        },
        "undocumented": true,
        "name": "friend_sync",
        "longname": "friend_sync",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Delete a connection for the current user\n    * @arg {String} platform The connection platform (e.g. \"twitch\", \"reddit\")\n    * @arg {String} id The connection ID\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                83269,
                83428
            ],
            "filename": "Client.js",
            "lineno": 1805,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005554",
                "name": "Client#deleteSelfConnection",
                "type": "MethodDefinition",
                "paramnames": [
                    "platform",
                    "id"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Delete a connection for the current user",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The connection platform (e.g. \"twitch\", \"reddit\")",
                "name": "platform"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The connection ID",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteSelfConnection",
        "longname": "Client#deleteSelfConnection",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get settings for the current user\n    * @returns {Promise<Object>} The user's settings data.\n    */",
        "meta": {
            "range": [
                83563,
                83677
            ],
            "filename": "Client.js",
            "lineno": 1813,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005576",
                "name": "Client#getSelfSettings",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Get settings for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's settings data."
            }
        ],
        "name": "getSelfSettings",
        "longname": "Client#getSelfSettings",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Edit settings for the current user\n    * @arg {Object} data The user settings data\n    * @arg {Boolean} [data.convertEmoticons] Whether to convert emoticons or not (e.g. :D => 😄)\n    * @arg {Boolean} [data.detectPlatformAccounts] Whether to automatically detect accounts from other platforms or not (Blizzard, Skype, etc.)\n    * @arg {Boolean} [data.developerMode] Whether to enable developer mode or not\n    * @arg {Boolean} [data.enableTTSCommand] Whether to respect usage of the TTS command or not\n    * @arg {Object} [data.friendSourceFlags] An object representing allowed friend request sources\n    * @arg {Boolean} [data.friendSourceFlags.all] Whether to allow friends requests from anywhere or not\n    * @arg {Boolean} [data.friendSourceFlags.mutualFriends] Whether to allow friend requests from people with mutual friends or not\n    * @arg {Boolean} [data.friendSourceFlags.mutualGuilds] Whether to allow friend requests from people in mutual guilds or not\n    * @arg {Array<String>} [data.guildPositions] An ordered array of guild IDs representing the guild list order in the Discord client\n    * @arg {Boolean} [data.inlineAttachmentMedia] Whether to show attachment previews or not\n    * @arg {Boolean} [data.inlineEmbedMedia] Whether to show embed images or not\n    * @arg {String} [data.locale] The locale to use for the Discord UI\n    * @arg {Boolean} [data.messageDisplayCompact] Whether to use compact mode or not\n    * @arg {Boolean} [data.renderEmbeds] Whether to show embeds or not\n    * @arg {Boolean} [data.renderReactions] Whether to show reactions or not\n    * @arg {Array<String>} [data.restrictedGuilds] An array of guild IDs where direct messages from guild members are disallowed\n    * @arg {Boolean} [data.showCurrentGame] Whether to set the user's status to the current game or not\n    * @arg {String} [data.status] The status of the user, either \"invisible\", \"dnd\", \"away\", or \"online\"\n    * @arg {String} [data.theme] The theme to use for the Discord UI, either \"dark\" or \"light\"\n    * @returns {Promise<Object>} The user's settings data.\n    */",
        "meta": {
            "range": [
                85790,
                87217
            ],
            "filename": "Client.js",
            "lineno": 1841,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005594",
                "name": "Client#editSelfSettings",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Edit settings for the current user",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The user settings data",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to convert emoticons or not (e.g. :D => 😄)",
                "name": "data.convertEmoticons"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to automatically detect accounts from other platforms or not (Blizzard, Skype, etc.)",
                "name": "data.detectPlatformAccounts"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to enable developer mode or not",
                "name": "data.developerMode"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to respect usage of the TTS command or not",
                "name": "data.enableTTSCommand"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An object representing allowed friend request sources",
                "name": "data.friendSourceFlags"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to allow friends requests from anywhere or not",
                "name": "data.friendSourceFlags.all"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to allow friend requests from people with mutual friends or not",
                "name": "data.friendSourceFlags.mutualFriends"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to allow friend requests from people in mutual guilds or not",
                "name": "data.friendSourceFlags.mutualGuilds"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An ordered array of guild IDs representing the guild list order in the Discord client",
                "name": "data.guildPositions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to show attachment previews or not",
                "name": "data.inlineAttachmentMedia"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to show embed images or not",
                "name": "data.inlineEmbedMedia"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The locale to use for the Discord UI",
                "name": "data.locale"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to use compact mode or not",
                "name": "data.messageDisplayCompact"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to show embeds or not",
                "name": "data.renderEmbeds"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to show reactions or not",
                "name": "data.renderReactions"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of guild IDs where direct messages from guild members are disallowed",
                "name": "data.restrictedGuilds"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to set the user's status to the current game or not",
                "name": "data.showCurrentGame"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The status of the user, either \"invisible\", \"dnd\", \"away\", or \"online\"",
                "name": "data.status"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The theme to use for the Discord UI, either \"dark\" or \"light\"",
                "name": "data.theme"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's settings data."
            }
        ],
        "name": "editSelfSettings",
        "longname": "Client#editSelfSettings",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85827,
                85856
            ],
            "filename": "Client.js",
            "lineno": 1842,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005600",
                "name": "friendSourceFlags",
                "type": "Identifier",
                "value": "undefined"
            }
        },
        "undocumented": true,
        "name": "friendSourceFlags",
        "longname": "<anonymous>~friendSourceFlags",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85907,
                85929
            ],
            "filename": "Client.js",
            "lineno": 1844,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005609",
                "name": "friendSourceFlags",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "friendSourceFlags",
        "longname": "<anonymous>~friendSourceFlags",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85992,
                86020
            ],
            "filename": "Client.js",
            "lineno": 1846,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005620",
                "name": "friendSourceFlags.all",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "all",
        "longname": "<anonymous>~friendSourceFlags.all",
        "kind": "member",
        "memberof": "<anonymous>~friendSourceFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86107,
                86146
            ],
            "filename": "Client.js",
            "lineno": 1849,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005633",
                "name": "friendSourceFlags.mutual_friends",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mutual_friends",
        "longname": "<anonymous>~friendSourceFlags.mutual_friends",
        "kind": "member",
        "memberof": "<anonymous>~friendSourceFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86232,
                86270
            ],
            "filename": "Client.js",
            "lineno": 1852,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005646",
                "name": "friendSourceFlags.mutual_guilds",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mutual_guilds",
        "longname": "<anonymous>~friendSourceFlags.mutual_guilds",
        "kind": "member",
        "memberof": "<anonymous>~friendSourceFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86400,
                86440
            ],
            "filename": "Client.js",
            "lineno": 1856,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005666",
                "name": "convert_emoticons",
                "type": "MemberExpression",
                "value": "data.convertEmoticons"
            }
        },
        "undocumented": true,
        "name": "convert_emoticons",
        "longname": "convert_emoticons",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86454,
                86507
            ],
            "filename": "Client.js",
            "lineno": 1857,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005670",
                "name": "detect_platform_accounts",
                "type": "MemberExpression",
                "value": "data.detectPlatformAccounts"
            }
        },
        "undocumented": true,
        "name": "detect_platform_accounts",
        "longname": "detect_platform_accounts",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86521,
                86555
            ],
            "filename": "Client.js",
            "lineno": 1858,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005674",
                "name": "developer_mode",
                "type": "MemberExpression",
                "value": "data.developerMode"
            }
        },
        "undocumented": true,
        "name": "developer_mode",
        "longname": "developer_mode",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86569,
                86610
            ],
            "filename": "Client.js",
            "lineno": 1859,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005678",
                "name": "enable_tts_command",
                "type": "MemberExpression",
                "value": "data.enableTTSCommand"
            }
        },
        "undocumented": true,
        "name": "enable_tts_command",
        "longname": "enable_tts_command",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86624,
                86662
            ],
            "filename": "Client.js",
            "lineno": 1860,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005682",
                "name": "friend_source_flags",
                "type": "Identifier",
                "value": "friendSourceFlags"
            }
        },
        "undocumented": true,
        "name": "friend_source_flags",
        "longname": "friend_source_flags",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86676,
                86712
            ],
            "filename": "Client.js",
            "lineno": 1861,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005684",
                "name": "guild_positions",
                "type": "MemberExpression",
                "value": "data.guildPositions"
            }
        },
        "undocumented": true,
        "name": "guild_positions",
        "longname": "guild_positions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86726,
                86777
            ],
            "filename": "Client.js",
            "lineno": 1862,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005688",
                "name": "inline_attachment_media",
                "type": "MemberExpression",
                "value": "data.inlineAttachmentMedia"
            }
        },
        "undocumented": true,
        "name": "inline_attachment_media",
        "longname": "inline_attachment_media",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86791,
                86832
            ],
            "filename": "Client.js",
            "lineno": 1863,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005692",
                "name": "inline_embed_media",
                "type": "MemberExpression",
                "value": "data.inlineEmbedMedia"
            }
        },
        "undocumented": true,
        "name": "inline_embed_media",
        "longname": "inline_embed_media",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86846,
                86865
            ],
            "filename": "Client.js",
            "lineno": 1864,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005696",
                "name": "locale",
                "type": "MemberExpression",
                "value": "data.locale"
            }
        },
        "undocumented": true,
        "name": "locale",
        "longname": "locale",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86879,
                86930
            ],
            "filename": "Client.js",
            "lineno": 1865,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005700",
                "name": "message_display_compact",
                "type": "MemberExpression",
                "value": "data.messageDisplayCompact"
            }
        },
        "undocumented": true,
        "name": "message_display_compact",
        "longname": "message_display_compact",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86944,
                86976
            ],
            "filename": "Client.js",
            "lineno": 1866,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005704",
                "name": "render_embeds",
                "type": "MemberExpression",
                "value": "data.renderEmbeds"
            }
        },
        "undocumented": true,
        "name": "render_embeds",
        "longname": "render_embeds",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86990,
                87028
            ],
            "filename": "Client.js",
            "lineno": 1867,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005708",
                "name": "render_reactions",
                "type": "MemberExpression",
                "value": "data.renderReactions"
            }
        },
        "undocumented": true,
        "name": "render_reactions",
        "longname": "render_reactions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87042,
                87082
            ],
            "filename": "Client.js",
            "lineno": 1868,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005712",
                "name": "restricted_guilds",
                "type": "MemberExpression",
                "value": "data.restrictedGuilds"
            }
        },
        "undocumented": true,
        "name": "restricted_guilds",
        "longname": "restricted_guilds",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87096,
                87135
            ],
            "filename": "Client.js",
            "lineno": 1869,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005716",
                "name": "show_current_game",
                "type": "MemberExpression",
                "value": "data.showCurrentGame"
            }
        },
        "undocumented": true,
        "name": "show_current_game",
        "longname": "show_current_game",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87149,
                87168
            ],
            "filename": "Client.js",
            "lineno": 1870,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005720",
                "name": "status",
                "type": "MemberExpression",
                "value": "data.status"
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "status",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87182,
                87199
            ],
            "filename": "Client.js",
            "lineno": 1871,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005724",
                "name": "theme",
                "type": "MemberExpression",
                "value": "data.theme"
            }
        },
        "undocumented": true,
        "name": "theme",
        "longname": "theme",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get the MFA backup codes for the current user\n    * @arg {String} password The password for the current user\n    * @arg {Boolean} [regenerate] Whether to regenerate the MFA backup codes or not\n    * @returns {Promise<Object>} The user's MFA codes\n    */",
        "meta": {
            "range": [
                87506,
                87724
            ],
            "filename": "Client.js",
            "lineno": 1881,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005728",
                "name": "Client#getSelfMFACodes",
                "type": "MethodDefinition",
                "paramnames": [
                    "password",
                    "regenerate"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Get the MFA backup codes for the current user",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The password for the current user",
                "name": "password"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to regenerate the MFA backup codes or not",
                "name": "regenerate"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's MFA codes"
            }
        ],
        "name": "getSelfMFACodes",
        "longname": "Client#getSelfMFACodes",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87650,
                87668
            ],
            "filename": "Client.js",
            "lineno": 1883,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005749",
                "name": "password",
                "type": "Identifier",
                "value": "password"
            }
        },
        "undocumented": true,
        "name": "password",
        "longname": "password",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87682,
                87706
            ],
            "filename": "Client.js",
            "lineno": 1884,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005751",
                "name": "regenerate",
                "type": "UnaryExpression",
                "value": "!!regenerate"
            }
        },
        "undocumented": true,
        "name": "regenerate",
        "longname": "regenerate",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Enable TOTP authentication for the current user\n    * @arg {String} secret The TOTP secret used to generate the auth code\n    * @arg {String} code The timed auth code for the current user\n    * @returns {Promise<Object>} An object containing the user's new authorization token and backup codes\n    */",
        "meta": {
            "range": [
                88060,
                88358
            ],
            "filename": "Client.js",
            "lineno": 1894,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005755",
                "name": "Client#enableSelfMFATOTP",
                "type": "MethodDefinition",
                "paramnames": [
                    "secret",
                    "code"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Enable TOTP authentication for the current user",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The TOTP secret used to generate the auth code",
                "name": "secret"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The timed auth code for the current user",
                "name": "code"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "An object containing the user's new authorization token and backup codes"
            }
        ],
        "name": "enableSelfMFATOTP",
        "longname": "Client#enableSelfMFATOTP",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88204,
                88210
            ],
            "filename": "Client.js",
            "lineno": 1896,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005778",
                "name": "secret",
                "type": "Identifier",
                "value": "secret"
            }
        },
        "undocumented": true,
        "name": "secret",
        "longname": "secret",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88224,
                88228
            ],
            "filename": "Client.js",
            "lineno": 1897,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005780",
                "name": "code",
                "type": "Identifier",
                "value": "code"
            }
        },
        "undocumented": true,
        "name": "code",
        "longname": "code",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88302,
                88325
            ],
            "filename": "Client.js",
            "lineno": 1900,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005792",
                "name": "this.token",
                "type": "MemberExpression",
                "value": "data.token",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "token",
        "longname": "Client#token",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Disable TOTP authentication for the current user\n    * @arg {String} code The timed auth code for the current user\n    * @returns {Promise<Object>} An object containing the user's new authorization token\n    */",
        "meta": {
            "range": [
                88604,
                88876
            ],
            "filename": "Client.js",
            "lineno": 1910,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005799",
                "name": "Client#disableSelfMFATOTP",
                "type": "MethodDefinition",
                "paramnames": [
                    "code"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Disable TOTP authentication for the current user",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The timed auth code for the current user",
                "name": "code"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "An object containing the user's new authorization token"
            }
        ],
        "name": "disableSelfMFATOTP",
        "longname": "Client#disableSelfMFATOTP",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88742,
                88746
            ],
            "filename": "Client.js",
            "lineno": 1912,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005821",
                "name": "code",
                "type": "Identifier",
                "value": "code"
            }
        },
        "undocumented": true,
        "name": "code",
        "longname": "code",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88820,
                88843
            ],
            "filename": "Client.js",
            "lineno": 1915,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005833",
                "name": "this.token",
                "type": "MemberExpression",
                "value": "data.token",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "token",
        "longname": "Client#token",
        "kind": "member",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get the billing info for the current user\n    * @returns {Promise<Object>} The user's billing info\n    */",
        "meta": {
            "range": [
                89017,
                89129
            ],
            "filename": "Client.js",
            "lineno": 1924,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005840",
                "name": "Client#getSelfBilling",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Get the billing info for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's billing info"
            }
        ],
        "name": "getSelfBilling",
        "longname": "Client#getSelfBilling",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get the payment history for the current user\n    * @returns {Promise<Object>} The user's payment history\n    */",
        "meta": {
            "range": [
                89276,
                89398
            ],
            "filename": "Client.js",
            "lineno": 1932,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005858",
                "name": "Client#getSelfPayments",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Get the payment history for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's payment history"
            }
        ],
        "name": "getSelfPayments",
        "longname": "Client#getSelfPayments",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Purchase a premium subscription (Nitro) for the current user\n    * You must get a Stripe card token from the Stripe API for this to work\n    * @arg {String} token The Stripe credit card token\n    * @arg {String} plan The plan to purchase, either \"premium_month\" or \"premium_year\"\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                89745,
                90002
            ],
            "filename": "Client.js",
            "lineno": 1943,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005876",
                "name": "Client#addSelfPremiumSubscription",
                "type": "MethodDefinition",
                "paramnames": [
                    "token",
                    "plan"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Purchase a premium subscription (Nitro) for the current user\nYou must get a Stripe card token from the Stripe API for this to work",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The Stripe credit card token",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The plan to purchase, either \"premium_month\" or \"premium_year\"",
                "name": "plan"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "addSelfPremiumSubscription",
        "longname": "Client#addSelfPremiumSubscription",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                89909,
                89921
            ],
            "filename": "Client.js",
            "lineno": 1945,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005897",
                "name": "token",
                "type": "Identifier",
                "value": "token"
            }
        },
        "undocumented": true,
        "name": "token",
        "longname": "token",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                89935,
                89960
            ],
            "filename": "Client.js",
            "lineno": 1946,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005899",
                "name": "payment_gateway",
                "type": "Literal",
                "value": "stripe"
            }
        },
        "undocumented": true,
        "name": "payment_gateway",
        "longname": "payment_gateway",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                89974,
                89984
            ],
            "filename": "Client.js",
            "lineno": 1947,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005901",
                "name": "plan",
                "type": "Identifier",
                "value": "plan"
            }
        },
        "undocumented": true,
        "name": "plan",
        "longname": "plan",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Cancel the premium subscription (Nitro) for the current user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                90130,
                90281
            ],
            "filename": "Client.js",
            "lineno": 1955,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005903",
                "name": "Client#deleteSelfPremiumSubscription",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Cancel the premium subscription (Nitro) for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteSelfPremiumSubscription",
        "longname": "Client#deleteSelfPremiumSubscription",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get a channel's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<CategoryChannel | GroupChannel | PrivateChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
        "meta": {
            "range": [
                90560,
                90866
            ],
            "filename": "Client.js",
            "lineno": 1964,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005921",
                "name": "Client#getRESTChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a channel's data via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|GroupChannel|PrivateChannel|TextChannel|VoiceChannel|NewsChannel)>"
                    ]
                }
            }
        ],
        "name": "getRESTChannel",
        "longname": "Client#getRESTChannel",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a guild's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {Boolean} [withCounts=false] Whether the guild object will have approximateMemberCount and approximatePresenceCount\n    * @returns {Promise<Guild>}\n    */",
        "meta": {
            "range": [
                91181,
                91528
            ],
            "filename": "Client.js",
            "lineno": 1978,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005967",
                "name": "Client#getRESTGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "withCounts"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's data via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the guild object will have approximateMemberCount and approximatePresenceCount",
                "name": "withCounts"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Guild>"
                    ]
                }
            }
        ],
        "name": "getRESTGuild",
        "longname": "Client#getRESTGuild",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                91447,
                91470
            ],
            "filename": "Client.js",
            "lineno": 1983,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006008",
                "name": "with_counts",
                "type": "Identifier",
                "value": "withCounts"
            }
        },
        "undocumented": true,
        "name": "with_counts",
        "longname": "with_counts",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Get a list of the user's guilds via the REST API. REST mode is required to use this endpoint.\n    * @arg {Number} [limit=100] The max number of guilds to get (1 to 1000)\n    * @arg {String} [before] The lowest guild ID of the next page\n    * @arg {String} [after] The highest guild ID of the previous page\n    * @returns {Promise<Guild[]>}\n    */",
        "meta": {
            "range": [
                91895,
                92285
            ],
            "filename": "Client.js",
            "lineno": 1994,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006017",
                "name": "Client#getRESTGuilds",
                "type": "MethodDefinition",
                "paramnames": [
                    "limit",
                    "before",
                    "after"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a list of the user's guilds via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 100,
                "description": "The max number of guilds to get (1 to 1000)",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The lowest guild ID of the next page",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The highest guild ID of the previous page",
                "name": "after"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Guild>>"
                    ]
                }
            }
        ],
        "name": "getRESTGuilds",
        "longname": "Client#getRESTGuilds",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                92159,
                92164
            ],
            "filename": "Client.js",
            "lineno": 1999,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006057",
                "name": "limit",
                "type": "Identifier",
                "value": "limit"
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "limit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                92178,
                92184
            ],
            "filename": "Client.js",
            "lineno": 2000,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006059",
                "name": "before",
                "type": "Identifier",
                "value": "before"
            }
        },
        "undocumented": true,
        "name": "before",
        "longname": "before",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                92198,
                92203
            ],
            "filename": "Client.js",
            "lineno": 2001,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006061",
                "name": "after",
                "type": "Identifier",
                "value": "after"
            }
        },
        "undocumented": true,
        "name": "after",
        "longname": "after",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Get a guild's channels via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<(CategoryChannel[] | TextChannel[] | VoiceChannel[] | NewsChannel[])>}\n    */",
        "meta": {
            "range": [
                92540,
                92883
            ],
            "filename": "Client.js",
            "lineno": 2010,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006076",
                "name": "Client#getRESTGuildChannels",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's channels via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(Array.<CategoryChannel>|Array.<TextChannel>|Array.<VoiceChannel>|Array.<NewsChannel>)>"
                    ]
                }
            }
        ],
        "name": "getRESTGuildChannels",
        "longname": "Client#getRESTGuildChannels",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a guild's emojis via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object[]>} An array of guild emoji objects\n    */",
        "meta": {
            "range": [
                93108,
                93359
            ],
            "filename": "Client.js",
            "lineno": 2023,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006128",
                "name": "Client#getRESTGuildEmojis",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's emojis via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "An array of guild emoji objects"
            }
        ],
        "name": "getRESTGuildEmojis",
        "longname": "Client#getRESTGuildEmojis",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a guild emoji via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} emojiID The ID of the emoji\n    * @returns {Promise<Object>} An emoji object\n    */",
        "meta": {
            "range": [
                93611,
                93878
            ],
            "filename": "Client.js",
            "lineno": 2036,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006163",
                "name": "Client#getRESTGuildEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "emojiID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild emoji via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the emoji",
                "name": "emojiID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "An emoji object"
            }
        ],
        "name": "getRESTGuildEmoji",
        "longname": "Client#getRESTGuildEmoji",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} [limit=1] The max number of members to get (1 to 1000)\n    * @arg {String} [after] The highest user ID of the previous page\n    * @returns {Promise<Member[]>}\n    */",
        "meta": {
            "range": [
                94216,
                94628
            ],
            "filename": "Client.js",
            "lineno": 2050,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006200",
                "name": "Client#getRESTGuildMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "limit",
                    "after"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The max number of members to get (1 to 1000)",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The highest user ID of the previous page",
                "name": "after"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Member>>"
                    ]
                }
            }
        ],
        "name": "getRESTGuildMembers",
        "longname": "Client#getRESTGuildMembers",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                94491,
                94496
            ],
            "filename": "Client.js",
            "lineno": 2055,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006240",
                "name": "limit",
                "type": "Identifier",
                "value": "limit"
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "limit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                94510,
                94515
            ],
            "filename": "Client.js",
            "lineno": 2056,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006242",
                "name": "after",
                "type": "Identifier",
                "value": "after"
            }
        },
        "undocumented": true,
        "name": "after",
        "longname": "after",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @returns {Promise<Member>}\n    */",
        "meta": {
            "range": [
                94870,
                95210
            ],
            "filename": "Client.js",
            "lineno": 2066,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006264",
                "name": "Client#getRESTGuildMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "memberID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Member>"
                    ]
                }
            }
        ],
        "name": "getRESTGuildMember",
        "longname": "Client#getRESTGuildMember",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a guild's roles via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Role[]>}\n    */",
        "meta": {
            "range": [
                95400,
                95708
            ],
            "filename": "Client.js",
            "lineno": 2078,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006317",
                "name": "Client#getRESTGuildRoles",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's roles via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Role>>"
                    ]
                }
            }
        ],
        "name": "getRESTGuildRoles",
        "longname": "Client#getRESTGuildRoles",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a user's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} userID The ID of the user\n    * @returns {Promise<User>}\n    */",
        "meta": {
            "range": [
                95892,
                96163
            ],
            "filename": "Client.js",
            "lineno": 2090,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006367",
                "name": "Client#getRESTUser",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a user's data via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<User>"
                    ]
                }
            }
        ],
        "name": "getRESTUser",
        "longname": "Client#getRESTUser",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Search for guild members by partial nickname/username\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} query The query string to match username(s) and nickname(s) against\n    * @arg {Number} [limit=1] The maximum number of members you want returned, capped at 100\n    * @returns {Promise<Member[]>}\n    */",
        "meta": {
            "range": [
                96508,
                96865
            ],
            "filename": "Client.js",
            "lineno": 2104,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006411",
                "name": "Client#searchGuildMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "query",
                    "limit"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Search for guild members by partial nickname/username",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The query string to match username(s) and nickname(s) against",
                "name": "query"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The maximum number of members you want returned, capped at 100",
                "name": "limit"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Member>>"
                    ]
                }
            }
        ],
        "name": "searchGuildMembers",
        "longname": "Client#searchGuildMembers",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                96663,
                96668
            ],
            "filename": "Client.js",
            "lineno": 2106,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006435",
                "name": "query",
                "type": "Identifier",
                "value": "query"
            }
        },
        "undocumented": true,
        "name": "query",
        "longname": "query",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                96682,
                96687
            ],
            "filename": "Client.js",
            "lineno": 2107,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006437",
                "name": "limit",
                "type": "Identifier",
                "value": "limit"
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "limit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                96737,
                96769
            ],
            "filename": "Client.js",
            "lineno": 2109,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006444",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Search a channel's messages\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} query Search parameters\n    * @arg {String} [query.sortBy=\"timestamp\"] What to sort by, either \"timestamp\" or \"relevance\"\n    * @arg {String} [query.sortOrder=\"desc\"] What order to sort by, either \"asc\" or \"desc\"\n    * @arg {String} [query.content] Filter results by a content string\n    * @arg {String} [query.authorID] Filter results by an author ID\n    * @arg {String} [query.minID] The minimum message ID to return results for\n    * @arg {String} [query.maxID] The maximum message ID to return results for\n    * @arg {Number} [query.limit=25] How many messages to return, 1 <= limit <= 25\n    * @arg {Number} [query.offset=0] The query index of the first message to be returned, 0 <= offset <= 5000\n    * @arg {Number} [query.contextSize=2] How many context messages around each result to return.\n    * For example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned\n    * @arg {String} [query.has] Only return messages with an \"attachment\", \"embed\", or \"link\"\n    * @arg {String} [query.embedProviders] Filter results by embed provider\n    * @arg {String} [query.embedTypes] Filter results by embed type\n    * @arg {String} [query.attachmentExtensions] Filter results by attachment extension\n    * @arg {String} [query.attachmentFilename] Filter results by attachment filename\n    * @returns {Promise<Object>} A search result object. The object will have a `totalResults` key and `results` key.\n    * Each entry in the result array is an array of Message objects.\n    * In each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\n    * Sample return: ```\n    * {\n    *     totalResults: 2,\n    *     results: [\n    *         [Message, Message, Message (Message.hit = true), Message],\n    *         [Message, Message, Message (Message.hit = true), Message, Message]\n    *     ]\n    * }\n    * ```\n    */",
        "meta": {
            "range": [
                98906,
                99849
            ],
            "filename": "Client.js",
            "lineno": 2146,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006465",
                "name": "Client#searchChannelMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "query"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Search a channel's messages",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Search parameters",
                "name": "query"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"timestamp\"",
                "description": "What to sort by, either \"timestamp\" or \"relevance\"",
                "name": "query.sortBy"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"desc\"",
                "description": "What order to sort by, either \"asc\" or \"desc\"",
                "name": "query.sortOrder"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by a content string",
                "name": "query.content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by an author ID",
                "name": "query.authorID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The minimum message ID to return results for",
                "name": "query.minID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The maximum message ID to return results for",
                "name": "query.maxID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 25,
                "description": "How many messages to return, 1 <= limit <= 25",
                "name": "query.limit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The query index of the first message to be returned, 0 <= offset <= 5000",
                "name": "query.offset"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 2,
                "description": "How many context messages around each result to return.\nFor example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned",
                "name": "query.contextSize"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Only return messages with an \"attachment\", \"embed\", or \"link\"",
                "name": "query.has"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by embed provider",
                "name": "query.embedProviders"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by embed type",
                "name": "query.embedTypes"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by attachment extension",
                "name": "query.attachmentExtensions"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by attachment filename",
                "name": "query.attachmentFilename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A search result object. The object will have a `totalResults` key and `results` key.\nEach entry in the result array is an array of Message objects.\nIn each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\nSample return: ```\n{\n    totalResults: 2,\n    results: [\n        [Message, Message, Message (Message.hit = true), Message],\n        [Message, Message, Message (Message.hit = true), Message, Message]\n    ]\n}\n```"
            }
        ],
        "name": "searchChannelMessages",
        "longname": "Client#searchChannelMessages",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99064,
                99085
            ],
            "filename": "Client.js",
            "lineno": 2148,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006488",
                "name": "sort_by",
                "type": "MemberExpression",
                "value": "query.sortBy"
            }
        },
        "undocumented": true,
        "name": "sort_by",
        "longname": "sort_by",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99099,
                99126
            ],
            "filename": "Client.js",
            "lineno": 2149,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006492",
                "name": "sort_order",
                "type": "MemberExpression",
                "value": "query.sortOrder"
            }
        },
        "undocumented": true,
        "name": "sort_order",
        "longname": "sort_order",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99140,
                99162
            ],
            "filename": "Client.js",
            "lineno": 2150,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006496",
                "name": "content",
                "type": "MemberExpression",
                "value": "query.content"
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "content",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99176,
                99201
            ],
            "filename": "Client.js",
            "lineno": 2151,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006500",
                "name": "author_id",
                "type": "MemberExpression",
                "value": "query.authorID"
            }
        },
        "undocumented": true,
        "name": "author_id",
        "longname": "author_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99215,
                99234
            ],
            "filename": "Client.js",
            "lineno": 2152,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006504",
                "name": "min_id",
                "type": "MemberExpression",
                "value": "query.minID"
            }
        },
        "undocumented": true,
        "name": "min_id",
        "longname": "min_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99248,
                99267
            ],
            "filename": "Client.js",
            "lineno": 2153,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006508",
                "name": "max_id",
                "type": "MemberExpression",
                "value": "query.maxID"
            }
        },
        "undocumented": true,
        "name": "max_id",
        "longname": "max_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99281,
                99299
            ],
            "filename": "Client.js",
            "lineno": 2154,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006512",
                "name": "limit",
                "type": "MemberExpression",
                "value": "query.limit"
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "limit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99313,
                99333
            ],
            "filename": "Client.js",
            "lineno": 2155,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006516",
                "name": "offset",
                "type": "MemberExpression",
                "value": "query.offset"
            }
        },
        "undocumented": true,
        "name": "offset",
        "longname": "offset",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99347,
                99378
            ],
            "filename": "Client.js",
            "lineno": 2156,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006520",
                "name": "context_size",
                "type": "MemberExpression",
                "value": "query.contextSize"
            }
        },
        "undocumented": true,
        "name": "context_size",
        "longname": "context_size",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99392,
                99406
            ],
            "filename": "Client.js",
            "lineno": 2157,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006524",
                "name": "has",
                "type": "MemberExpression",
                "value": "query.has"
            }
        },
        "undocumented": true,
        "name": "has",
        "longname": "has",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99420,
                99457
            ],
            "filename": "Client.js",
            "lineno": 2158,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006528",
                "name": "embed_providers",
                "type": "MemberExpression",
                "value": "query.embedProviders"
            }
        },
        "undocumented": true,
        "name": "embed_providers",
        "longname": "embed_providers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99471,
                99500
            ],
            "filename": "Client.js",
            "lineno": 2159,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006532",
                "name": "embed_types",
                "type": "MemberExpression",
                "value": "query.embedTypes"
            }
        },
        "undocumented": true,
        "name": "embed_types",
        "longname": "embed_types",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99514,
                99563
            ],
            "filename": "Client.js",
            "lineno": 2160,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006536",
                "name": "attachment_extensions",
                "type": "MemberExpression",
                "value": "query.attachmentExtensions"
            }
        },
        "undocumented": true,
        "name": "attachment_extensions",
        "longname": "attachment_extensions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99577,
                99622
            ],
            "filename": "Client.js",
            "lineno": 2161,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006540",
                "name": "attachment_filename",
                "type": "MemberExpression",
                "value": "query.attachmentFilename"
            }
        },
        "undocumented": true,
        "name": "attachment_filename",
        "longname": "attachment_filename",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99667,
                99702
            ],
            "filename": "Client.js",
            "lineno": 2163,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006548",
                "name": "totalResults",
                "type": "MemberExpression",
                "value": "results.total_results"
            }
        },
        "undocumented": true,
        "name": "totalResults",
        "longname": "totalResults",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                99716,
                99830
            ],
            "filename": "Client.js",
            "lineno": 2164,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006552",
                "name": "results",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "results",
        "longname": "results",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Search a guild's messages\n    * @arg {String} guildID The ID of the guild\n    * @arg {Object} query Search parameters\n    * @arg {String} [query.sortBy=\"timestamp\"] What to sort by, either \"timestamp\" or \"relevance\"\n    * @arg {String} [query.sortOrder=\"desc\"] What order to sort by, either \"asc\" or \"desc\"\n    * @arg {String} [query.content] Filter results by a content string\n    * @arg {String} [query.authorID] Filter results by an author ID\n    * @arg {String} [query.minID] The minimum message ID to return results for\n    * @arg {String} [query.maxID] The maximum message ID to return results for\n    * @arg {Number} [query.limit=25] How many messages to return, 1 <= limit <= 25\n    * @arg {Number} [query.offset=0] The query index of the first message to be returned, 0 <= offset <= 5000\n    * @arg {Number} [query.contextSize=2] How many context messages around each result to return.\n    * For example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned\n    * @arg {String} [query.has] Only return messages with an \"attachment\", \"embed\", or \"link\"\n    * @arg {String} [query.embedProviders] Filter results by embed provider\n    * @arg {String} [query.embedTypes] Filter results by embed type\n    * @arg {String} [query.attachmentExtensions] Filter results by attachment extension\n    * @arg {String} [query.attachmentFilename] Filter results by attachment filename\n    * @arg {String[]} [query.channelIDs] Filter results by channel ID\n    * @returns {Promise<Object>} A search result object. The object will have a `totalResults` key and `results` key.\n    * Each entry in the result array is an array of Message objects.\n    * In each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\n    * Sample return: ```\n    * {\n    *     totalResults: 2,\n    *     results: [\n    *         [Message, Message, Message (Message.hit = true), Message],\n    *         [Message, Message, Message (Message.hit = true), Message, Message]\n    *     ]\n    * }\n    * ```\n    */",
        "meta": {
            "range": [
                101954,
                102931
            ],
            "filename": "Client.js",
            "lineno": 2201,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006575",
                "name": "Client#searchGuildMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "query"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Search a guild's messages",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Search parameters",
                "name": "query"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"timestamp\"",
                "description": "What to sort by, either \"timestamp\" or \"relevance\"",
                "name": "query.sortBy"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"desc\"",
                "description": "What order to sort by, either \"asc\" or \"desc\"",
                "name": "query.sortOrder"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by a content string",
                "name": "query.content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by an author ID",
                "name": "query.authorID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The minimum message ID to return results for",
                "name": "query.minID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The maximum message ID to return results for",
                "name": "query.maxID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 25,
                "description": "How many messages to return, 1 <= limit <= 25",
                "name": "query.limit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The query index of the first message to be returned, 0 <= offset <= 5000",
                "name": "query.offset"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 2,
                "description": "How many context messages around each result to return.\nFor example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned",
                "name": "query.contextSize"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Only return messages with an \"attachment\", \"embed\", or \"link\"",
                "name": "query.has"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by embed provider",
                "name": "query.embedProviders"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by embed type",
                "name": "query.embedTypes"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by attachment extension",
                "name": "query.attachmentExtensions"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by attachment filename",
                "name": "query.attachmentFilename"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Filter results by channel ID",
                "name": "query.channelIDs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A search result object. The object will have a `totalResults` key and `results` key.\nEach entry in the result array is an array of Message objects.\nIn each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\nSample return: ```\n{\n    totalResults: 2,\n    results: [\n        [Message, Message, Message (Message.hit = true), Message],\n        [Message, Message, Message (Message.hit = true), Message, Message]\n    ]\n}\n```"
            }
        ],
        "name": "searchGuildMessages",
        "longname": "Client#searchGuildMessages",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102104,
                102125
            ],
            "filename": "Client.js",
            "lineno": 2203,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006598",
                "name": "sort_by",
                "type": "MemberExpression",
                "value": "query.sortBy"
            }
        },
        "undocumented": true,
        "name": "sort_by",
        "longname": "sort_by",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102139,
                102166
            ],
            "filename": "Client.js",
            "lineno": 2204,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006602",
                "name": "sort_order",
                "type": "MemberExpression",
                "value": "query.sortOrder"
            }
        },
        "undocumented": true,
        "name": "sort_order",
        "longname": "sort_order",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102180,
                102202
            ],
            "filename": "Client.js",
            "lineno": 2205,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006606",
                "name": "content",
                "type": "MemberExpression",
                "value": "query.content"
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "content",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102216,
                102241
            ],
            "filename": "Client.js",
            "lineno": 2206,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006610",
                "name": "author_id",
                "type": "MemberExpression",
                "value": "query.authorID"
            }
        },
        "undocumented": true,
        "name": "author_id",
        "longname": "author_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102255,
                102274
            ],
            "filename": "Client.js",
            "lineno": 2207,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006614",
                "name": "min_id",
                "type": "MemberExpression",
                "value": "query.minID"
            }
        },
        "undocumented": true,
        "name": "min_id",
        "longname": "min_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102288,
                102307
            ],
            "filename": "Client.js",
            "lineno": 2208,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006618",
                "name": "max_id",
                "type": "MemberExpression",
                "value": "query.maxID"
            }
        },
        "undocumented": true,
        "name": "max_id",
        "longname": "max_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102321,
                102339
            ],
            "filename": "Client.js",
            "lineno": 2209,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006622",
                "name": "limit",
                "type": "MemberExpression",
                "value": "query.limit"
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "limit",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102353,
                102373
            ],
            "filename": "Client.js",
            "lineno": 2210,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006626",
                "name": "offset",
                "type": "MemberExpression",
                "value": "query.offset"
            }
        },
        "undocumented": true,
        "name": "offset",
        "longname": "offset",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102387,
                102418
            ],
            "filename": "Client.js",
            "lineno": 2211,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006630",
                "name": "context_size",
                "type": "MemberExpression",
                "value": "query.contextSize"
            }
        },
        "undocumented": true,
        "name": "context_size",
        "longname": "context_size",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102432,
                102446
            ],
            "filename": "Client.js",
            "lineno": 2212,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006634",
                "name": "has",
                "type": "MemberExpression",
                "value": "query.has"
            }
        },
        "undocumented": true,
        "name": "has",
        "longname": "has",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102460,
                102497
            ],
            "filename": "Client.js",
            "lineno": 2213,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006638",
                "name": "embed_providers",
                "type": "MemberExpression",
                "value": "query.embedProviders"
            }
        },
        "undocumented": true,
        "name": "embed_providers",
        "longname": "embed_providers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102511,
                102540
            ],
            "filename": "Client.js",
            "lineno": 2214,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006642",
                "name": "embed_types",
                "type": "MemberExpression",
                "value": "query.embedTypes"
            }
        },
        "undocumented": true,
        "name": "embed_types",
        "longname": "embed_types",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102554,
                102603
            ],
            "filename": "Client.js",
            "lineno": 2215,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006646",
                "name": "attachment_extensions",
                "type": "MemberExpression",
                "value": "query.attachmentExtensions"
            }
        },
        "undocumented": true,
        "name": "attachment_extensions",
        "longname": "attachment_extensions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102617,
                102662
            ],
            "filename": "Client.js",
            "lineno": 2216,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006650",
                "name": "attachment_filename",
                "type": "MemberExpression",
                "value": "query.attachmentFilename"
            }
        },
        "undocumented": true,
        "name": "attachment_filename",
        "longname": "attachment_filename",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102676,
                102704
            ],
            "filename": "Client.js",
            "lineno": 2217,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006654",
                "name": "channel_id",
                "type": "MemberExpression",
                "value": "query.channelIDs"
            }
        },
        "undocumented": true,
        "name": "channel_id",
        "longname": "channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102749,
                102784
            ],
            "filename": "Client.js",
            "lineno": 2219,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006662",
                "name": "totalResults",
                "type": "MemberExpression",
                "value": "results.total_results"
            }
        },
        "undocumented": true,
        "name": "totalResults",
        "longname": "totalResults",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102798,
                102912
            ],
            "filename": "Client.js",
            "lineno": 2220,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006666",
                "name": "results",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "results",
        "longname": "results",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                102937,
                103853
            ],
            "filename": "Client.js",
            "lineno": 2224,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006689",
                "name": "Client#_formatAllowedMentions",
                "type": "MethodDefinition",
                "paramnames": [
                    "allowed"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_formatAllowedMentions",
        "longname": "Client#_formatAllowedMentions",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103067,
                103109
            ],
            "filename": "Client.js",
            "lineno": 2228,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006705",
                "name": "result",
                "type": "ObjectExpression",
                "value": "{\"parse\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103090,
                103099
            ],
            "filename": "Client.js",
            "lineno": 2229,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006708",
                "name": "parse",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "parse",
        "longname": "<anonymous>~result.parse",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103470,
                103498
            ],
            "filename": "Client.js",
            "lineno": 2240,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006761",
                "name": "result.roles",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "allowed.roles",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "roles",
        "longname": "<anonymous>~result.roles",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103785,
                103813
            ],
            "filename": "Client.js",
            "lineno": 2248,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006806",
                "name": "result.users",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "allowed.users",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "users",
        "longname": "<anonymous>~result.users",
        "kind": "member",
        "memberof": "<anonymous>~result",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103859,
                104338
            ],
            "filename": "Client.js",
            "lineno": 2253,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006815",
                "name": "Client#_formatImage",
                "type": "MethodDefinition",
                "paramnames": [
                    "url",
                    "format",
                    "size"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_formatImage",
        "longname": "Client#_formatImage",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103985,
                104054
            ],
            "filename": "Client.js",
            "lineno": 2255,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006839",
                "name": "format",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "format",
        "longname": "<anonymous>~format",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                104217,
                104253
            ],
            "filename": "Client.js",
            "lineno": 2258,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006880",
                "name": "size",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.options.defaultImageSize",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "size",
        "longname": "<anonymous>~size",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                104344,
                104405
            ],
            "filename": "Client.js",
            "lineno": 2263,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006900",
                "name": "Client#toString",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "Client#toString",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                104411,
                105197
            ],
            "filename": "Client.js",
            "lineno": 2267,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006913",
                "name": "Client#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Client#toJSON",
        "kind": "function",
        "memberof": "Client",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                105201,
                105224
            ],
            "filename": "Client.js",
            "lineno": 2299,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006959",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Client",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15,
                104
            ],
            "filename": "Constants.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006969",
                "name": "module.exports.ImageFormats",
                "type": "ArrayExpression",
                "value": "[\"jpg\",\"jpeg\",\"png\",\"webp\",\"gif\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ImageFormats",
        "longname": "ImageFormats",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                107,
                182
            ],
            "filename": "Constants.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006982",
                "name": "module.exports.ImageSizeBoundaries",
                "type": "ObjectExpression",
                "value": "{\"MINIMUM\":16,\"MAXIMUM\":4096}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ImageSizeBoundaries",
        "longname": "ImageSizeBoundaries",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                150,
                161
            ],
            "filename": "Constants.js",
            "lineno": 12,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006989",
                "name": "MINIMUM",
                "type": "Literal",
                "value": 16
            }
        },
        "undocumented": true,
        "name": "MINIMUM",
        "longname": "ImageSizeBoundaries.MINIMUM",
        "kind": "member",
        "memberof": "ImageSizeBoundaries",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                167,
                180
            ],
            "filename": "Constants.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006991",
                "name": "MAXIMUM",
                "type": "Literal",
                "value": 4096
            }
        },
        "undocumented": true,
        "name": "MAXIMUM",
        "longname": "ImageSizeBoundaries.MAXIMUM",
        "kind": "member",
        "memberof": "ImageSizeBoundaries",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                185,
                597
            ],
            "filename": "Constants.js",
            "lineno": 16,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006994",
                "name": "module.exports.GatewayOPCodes",
                "type": "ObjectExpression",
                "value": "{\"EVENT\":0,\"HEARTBEAT\":1,\"IDENTIFY\":2,\"STATUS_UPDATE\":3,\"VOICE_STATE_UPDATE\":4,\"VOICE_SERVER_PING\":5,\"RESUME\":6,\"RECONNECT\":7,\"GET_GUILD_MEMBERS\":8,\"INVALID_SESSION\":9,\"HELLO\":10,\"HEARTBEAT_ACK\":11,\"SYNC_GUILD\":12,\"SYNC_CALL\":13}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "GatewayOPCodes",
        "longname": "GatewayOPCodes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                223,
                244
            ],
            "filename": "Constants.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007001",
                "name": "EVENT",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "EVENT",
        "longname": "GatewayOPCodes.EVENT",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                250,
                271
            ],
            "filename": "Constants.js",
            "lineno": 18,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007003",
                "name": "HEARTBEAT",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "HEARTBEAT",
        "longname": "GatewayOPCodes.HEARTBEAT",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                277,
                298
            ],
            "filename": "Constants.js",
            "lineno": 19,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007005",
                "name": "IDENTIFY",
                "type": "Literal",
                "value": 2
            }
        },
        "undocumented": true,
        "name": "IDENTIFY",
        "longname": "GatewayOPCodes.IDENTIFY",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                304,
                325
            ],
            "filename": "Constants.js",
            "lineno": 20,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007007",
                "name": "STATUS_UPDATE",
                "type": "Literal",
                "value": 3
            }
        },
        "undocumented": true,
        "name": "STATUS_UPDATE",
        "longname": "GatewayOPCodes.STATUS_UPDATE",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                331,
                352
            ],
            "filename": "Constants.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007009",
                "name": "VOICE_STATE_UPDATE",
                "type": "Literal",
                "value": 4
            }
        },
        "undocumented": true,
        "name": "VOICE_STATE_UPDATE",
        "longname": "GatewayOPCodes.VOICE_STATE_UPDATE",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                358,
                379
            ],
            "filename": "Constants.js",
            "lineno": 22,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007011",
                "name": "VOICE_SERVER_PING",
                "type": "Literal",
                "value": 5
            }
        },
        "undocumented": true,
        "name": "VOICE_SERVER_PING",
        "longname": "GatewayOPCodes.VOICE_SERVER_PING",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                385,
                406
            ],
            "filename": "Constants.js",
            "lineno": 23,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007013",
                "name": "RESUME",
                "type": "Literal",
                "value": 6
            }
        },
        "undocumented": true,
        "name": "RESUME",
        "longname": "GatewayOPCodes.RESUME",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                412,
                433
            ],
            "filename": "Constants.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007015",
                "name": "RECONNECT",
                "type": "Literal",
                "value": 7
            }
        },
        "undocumented": true,
        "name": "RECONNECT",
        "longname": "GatewayOPCodes.RECONNECT",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                439,
                460
            ],
            "filename": "Constants.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007017",
                "name": "GET_GUILD_MEMBERS",
                "type": "Literal",
                "value": 8
            }
        },
        "undocumented": true,
        "name": "GET_GUILD_MEMBERS",
        "longname": "GatewayOPCodes.GET_GUILD_MEMBERS",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                466,
                487
            ],
            "filename": "Constants.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007019",
                "name": "INVALID_SESSION",
                "type": "Literal",
                "value": 9
            }
        },
        "undocumented": true,
        "name": "INVALID_SESSION",
        "longname": "GatewayOPCodes.INVALID_SESSION",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                493,
                514
            ],
            "filename": "Constants.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007021",
                "name": "HELLO",
                "type": "Literal",
                "value": 10
            }
        },
        "undocumented": true,
        "name": "HELLO",
        "longname": "GatewayOPCodes.HELLO",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                520,
                541
            ],
            "filename": "Constants.js",
            "lineno": 28,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007023",
                "name": "HEARTBEAT_ACK",
                "type": "Literal",
                "value": 11
            }
        },
        "undocumented": true,
        "name": "HEARTBEAT_ACK",
        "longname": "GatewayOPCodes.HEARTBEAT_ACK",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                547,
                568
            ],
            "filename": "Constants.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007025",
                "name": "SYNC_GUILD",
                "type": "Literal",
                "value": 12
            }
        },
        "undocumented": true,
        "name": "SYNC_GUILD",
        "longname": "GatewayOPCodes.SYNC_GUILD",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                574,
                595
            ],
            "filename": "Constants.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007027",
                "name": "SYNC_CALL",
                "type": "Literal",
                "value": 13
            }
        },
        "undocumented": true,
        "name": "SYNC_CALL",
        "longname": "GatewayOPCodes.SYNC_CALL",
        "kind": "member",
        "memberof": "GatewayOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                600,
                634
            ],
            "filename": "Constants.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007030",
                "name": "module.exports.GATEWAY_VERSION",
                "type": "Literal",
                "value": 6,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "GATEWAY_VERSION",
        "longname": "GATEWAY_VERSION",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                636,
                667
            ],
            "filename": "Constants.js",
            "lineno": 34,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007038",
                "name": "module.exports.REST_VERSION",
                "type": "Literal",
                "value": 7,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "REST_VERSION",
        "longname": "REST_VERSION",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                670,
                1967
            ],
            "filename": "Constants.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007046",
                "name": "module.exports.Permissions",
                "type": "ObjectExpression",
                "value": "{\"createInstantInvite\":1,\"kickMembers\":\"\",\"banMembers\":\"\",\"administrator\":\"\",\"manageChannels\":\"\",\"manageGuild\":\"\",\"addReactions\":\"\",\"viewAuditLogs\":\"\",\"voicePrioritySpeaker\":\"\",\"stream\":\"\",\"readMessages\":\"\",\"sendMessages\":\"\",\"sendTTSMessages\":\"\",\"manageMessages\":\"\",\"embedLinks\":\"\",\"attachFiles\":\"\",\"readMessageHistory\":\"\",\"mentionEveryone\":\"\",\"externalEmojis\":\"\",\"viewGuildInsights\":\"\",\"voiceConnect\":\"\",\"voiceSpeak\":\"\",\"voiceMuteMembers\":\"\",\"voiceDeafenMembers\":\"\",\"voiceMoveMembers\":\"\",\"voiceUseVAD\":\"\",\"changeNickname\":\"\",\"manageNicknames\":\"\",\"manageRoles\":\"\",\"manageWebhooks\":\"\",\"manageEmojis\":\"\",\"all\":2147483647,\"allGuild\":2080899263,\"allText\":805829713,\"allVoice\":871367441}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Permissions",
        "longname": "Permissions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                705,
                728
            ],
            "filename": "Constants.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007053",
                "name": "createInstantInvite",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "createInstantInvite",
        "longname": "Permissions.createInstantInvite",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                734,
                762
            ],
            "filename": "Constants.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007055",
                "name": "kickMembers",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "kickMembers",
        "longname": "Permissions.kickMembers",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                768,
                796
            ],
            "filename": "Constants.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007059",
                "name": "banMembers",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "banMembers",
        "longname": "Permissions.banMembers",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                802,
                830
            ],
            "filename": "Constants.js",
            "lineno": 40,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007063",
                "name": "administrator",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "administrator",
        "longname": "Permissions.administrator",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                836,
                864
            ],
            "filename": "Constants.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007067",
                "name": "manageChannels",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "manageChannels",
        "longname": "Permissions.manageChannels",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                870,
                898
            ],
            "filename": "Constants.js",
            "lineno": 42,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007071",
                "name": "manageGuild",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "manageGuild",
        "longname": "Permissions.manageGuild",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                904,
                932
            ],
            "filename": "Constants.js",
            "lineno": 43,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007075",
                "name": "addReactions",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "addReactions",
        "longname": "Permissions.addReactions",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                938,
                966
            ],
            "filename": "Constants.js",
            "lineno": 44,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007079",
                "name": "viewAuditLogs",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "viewAuditLogs",
        "longname": "Permissions.viewAuditLogs",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                972,
                1000
            ],
            "filename": "Constants.js",
            "lineno": 45,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007083",
                "name": "voicePrioritySpeaker",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "voicePrioritySpeaker",
        "longname": "Permissions.voicePrioritySpeaker",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1006,
                1034
            ],
            "filename": "Constants.js",
            "lineno": 46,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007087",
                "name": "stream",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "stream",
        "longname": "Permissions.stream",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1040,
                1069
            ],
            "filename": "Constants.js",
            "lineno": 47,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007091",
                "name": "readMessages",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "readMessages",
        "longname": "Permissions.readMessages",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1075,
                1104
            ],
            "filename": "Constants.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007095",
                "name": "sendMessages",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "sendMessages",
        "longname": "Permissions.sendMessages",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1110,
                1139
            ],
            "filename": "Constants.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007099",
                "name": "sendTTSMessages",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "sendTTSMessages",
        "longname": "Permissions.sendTTSMessages",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1145,
                1174
            ],
            "filename": "Constants.js",
            "lineno": 50,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007103",
                "name": "manageMessages",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "manageMessages",
        "longname": "Permissions.manageMessages",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1180,
                1209
            ],
            "filename": "Constants.js",
            "lineno": 51,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007107",
                "name": "embedLinks",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "embedLinks",
        "longname": "Permissions.embedLinks",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1215,
                1244
            ],
            "filename": "Constants.js",
            "lineno": 52,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007111",
                "name": "attachFiles",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "attachFiles",
        "longname": "Permissions.attachFiles",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1250,
                1279
            ],
            "filename": "Constants.js",
            "lineno": 53,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007115",
                "name": "readMessageHistory",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "readMessageHistory",
        "longname": "Permissions.readMessageHistory",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1285,
                1314
            ],
            "filename": "Constants.js",
            "lineno": 54,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007119",
                "name": "mentionEveryone",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "mentionEveryone",
        "longname": "Permissions.mentionEveryone",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1320,
                1349
            ],
            "filename": "Constants.js",
            "lineno": 55,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007123",
                "name": "externalEmojis",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "externalEmojis",
        "longname": "Permissions.externalEmojis",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1355,
                1384
            ],
            "filename": "Constants.js",
            "lineno": 56,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007127",
                "name": "viewGuildInsights",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "viewGuildInsights",
        "longname": "Permissions.viewGuildInsights",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1390,
                1419
            ],
            "filename": "Constants.js",
            "lineno": 57,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007131",
                "name": "voiceConnect",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "voiceConnect",
        "longname": "Permissions.voiceConnect",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1425,
                1454
            ],
            "filename": "Constants.js",
            "lineno": 58,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007135",
                "name": "voiceSpeak",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "voiceSpeak",
        "longname": "Permissions.voiceSpeak",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1460,
                1489
            ],
            "filename": "Constants.js",
            "lineno": 59,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007139",
                "name": "voiceMuteMembers",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "voiceMuteMembers",
        "longname": "Permissions.voiceMuteMembers",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1495,
                1524
            ],
            "filename": "Constants.js",
            "lineno": 60,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007143",
                "name": "voiceDeafenMembers",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "voiceDeafenMembers",
        "longname": "Permissions.voiceDeafenMembers",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1530,
                1559
            ],
            "filename": "Constants.js",
            "lineno": 61,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007147",
                "name": "voiceMoveMembers",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "voiceMoveMembers",
        "longname": "Permissions.voiceMoveMembers",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1565,
                1594
            ],
            "filename": "Constants.js",
            "lineno": 62,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007151",
                "name": "voiceUseVAD",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "voiceUseVAD",
        "longname": "Permissions.voiceUseVAD",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1600,
                1629
            ],
            "filename": "Constants.js",
            "lineno": 63,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007155",
                "name": "changeNickname",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "changeNickname",
        "longname": "Permissions.changeNickname",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1635,
                1664
            ],
            "filename": "Constants.js",
            "lineno": 64,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007159",
                "name": "manageNicknames",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "manageNicknames",
        "longname": "Permissions.manageNicknames",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1670,
                1699
            ],
            "filename": "Constants.js",
            "lineno": 65,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007163",
                "name": "manageRoles",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "manageRoles",
        "longname": "Permissions.manageRoles",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1705,
                1734
            ],
            "filename": "Constants.js",
            "lineno": 66,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007167",
                "name": "manageWebhooks",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "manageWebhooks",
        "longname": "Permissions.manageWebhooks",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1740,
                1769
            ],
            "filename": "Constants.js",
            "lineno": 67,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007171",
                "name": "manageEmojis",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "manageEmojis",
        "longname": "Permissions.manageEmojis",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1775,
                1818
            ],
            "filename": "Constants.js",
            "lineno": 68,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007175",
                "name": "all",
                "type": "Literal",
                "value": 2147483647
            }
        },
        "undocumented": true,
        "name": "all",
        "longname": "Permissions.all",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1824,
                1867
            ],
            "filename": "Constants.js",
            "lineno": 69,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007177",
                "name": "allGuild",
                "type": "Literal",
                "value": 2080899263
            }
        },
        "undocumented": true,
        "name": "allGuild",
        "longname": "Permissions.allGuild",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1873,
                1916
            ],
            "filename": "Constants.js",
            "lineno": 70,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007179",
                "name": "allText",
                "type": "Literal",
                "value": 805829713
            }
        },
        "undocumented": true,
        "name": "allText",
        "longname": "Permissions.allText",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1922,
                1965
            ],
            "filename": "Constants.js",
            "lineno": 71,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007181",
                "name": "allVoice",
                "type": "Literal",
                "value": 871367441
            }
        },
        "undocumented": true,
        "name": "allVoice",
        "longname": "Permissions.allVoice",
        "kind": "member",
        "memberof": "Permissions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1970,
                2199
            ],
            "filename": "Constants.js",
            "lineno": 74,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007184",
                "name": "module.exports.VoiceOPCodes",
                "type": "ObjectExpression",
                "value": "{\"IDENTIFY\":0,\"SELECT_PROTOCOL\":1,\"READY\":2,\"HEARTBEAT\":3,\"SESSION_DESCRIPTION\":4,\"SPEAKING\":5,\"DISCONNECT\":13}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "VoiceOPCodes",
        "longname": "VoiceOPCodes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2006,
                2028
            ],
            "filename": "Constants.js",
            "lineno": 75,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007191",
                "name": "IDENTIFY",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "IDENTIFY",
        "longname": "VoiceOPCodes.IDENTIFY",
        "kind": "member",
        "memberof": "VoiceOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2034,
                2056
            ],
            "filename": "Constants.js",
            "lineno": 76,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007193",
                "name": "SELECT_PROTOCOL",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "SELECT_PROTOCOL",
        "longname": "VoiceOPCodes.SELECT_PROTOCOL",
        "kind": "member",
        "memberof": "VoiceOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2062,
                2084
            ],
            "filename": "Constants.js",
            "lineno": 77,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007195",
                "name": "READY",
                "type": "Literal",
                "value": 2
            }
        },
        "undocumented": true,
        "name": "READY",
        "longname": "VoiceOPCodes.READY",
        "kind": "member",
        "memberof": "VoiceOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2090,
                2112
            ],
            "filename": "Constants.js",
            "lineno": 78,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007197",
                "name": "HEARTBEAT",
                "type": "Literal",
                "value": 3
            }
        },
        "undocumented": true,
        "name": "HEARTBEAT",
        "longname": "VoiceOPCodes.HEARTBEAT",
        "kind": "member",
        "memberof": "VoiceOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2118,
                2140
            ],
            "filename": "Constants.js",
            "lineno": 79,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007199",
                "name": "SESSION_DESCRIPTION",
                "type": "Literal",
                "value": 4
            }
        },
        "undocumented": true,
        "name": "SESSION_DESCRIPTION",
        "longname": "VoiceOPCodes.SESSION_DESCRIPTION",
        "kind": "member",
        "memberof": "VoiceOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2146,
                2168
            ],
            "filename": "Constants.js",
            "lineno": 80,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007201",
                "name": "SPEAKING",
                "type": "Literal",
                "value": 5
            }
        },
        "undocumented": true,
        "name": "SPEAKING",
        "longname": "VoiceOPCodes.SPEAKING",
        "kind": "member",
        "memberof": "VoiceOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2174,
                2197
            ],
            "filename": "Constants.js",
            "lineno": 81,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007203",
                "name": "DISCONNECT",
                "type": "Literal",
                "value": 13
            }
        },
        "undocumented": true,
        "name": "DISCONNECT",
        "longname": "VoiceOPCodes.DISCONNECT",
        "kind": "member",
        "memberof": "VoiceOPCodes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2202,
                2673
            ],
            "filename": "Constants.js",
            "lineno": 84,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007206",
                "name": "module.exports.SystemJoinMessages",
                "type": "ArrayExpression",
                "value": "[\"%user% joined the party.\",\"%user% is here.\",\"Welcome, %user%. We hope you brought pizza.\",\"A wild %user% appeared.\",\"%user% just landed.\",\"%user% just slid into the server.\",\"%user% just showed up!\",\"Welcome %user%. Say hi!\",\"%user% hopped into the server.\",\"Everyone welcome %user%!\",\"Glad you're here, %user%.\",\"Good to see you, %user%.\",\"Yay you made it, %user%!\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "SystemJoinMessages",
        "longname": "SystemJoinMessages",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2676,
                3575
            ],
            "filename": "Constants.js",
            "lineno": 100,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007227",
                "name": "module.exports.AuditLogActions",
                "type": "ObjectExpression",
                "value": "{\"GUILD_UPDATE\":1,\"CHANNEL_CREATE\":10,\"CHANNEL_UPDATE\":11,\"CHANNEL_DELETE\":12,\"CHANNEL_OVERWRITE_CREATE\":13,\"CHANNEL_OVERWRITE_UPDATE\":14,\"CHANNEL_OVERWRITE_DELETE\":15,\"MEMBER_KICK\":20,\"MEMBER_PRUNE\":21,\"MEMBER_BAN_ADD\":22,\"MEMBER_BAN_REMOVE\":23,\"MEMBER_UPDATE\":24,\"MEMBER_ROLE_UPDATE\":25,\"MEMBER_MOVE\":26,\"MEMBER_DISCONNECT\":27,\"BOT_ADD\":28,\"ROLE_CREATE\":30,\"ROLE_UPDATE\":31,\"ROLE_DELETE\":32,\"INVITE_CREATE\":40,\"INVITE_UPDATE\":41,\"INVITE_DELETE\":42,\"WEBHOOK_CREATE\":50,\"WEBHOOK_UPDATE\":51,\"WEBHOOK_DELETE\":52,\"EMOJI_CREATE\":60,\"EMOJI_UPDATE\":61,\"EMOJI_DELETE\":62,\"MESSAGE_DELETE\":72,\"MESSAGE_BULK_DELETE\":73,\"MESSAGE_PIN\":74,\"MESSAGE_UNPIN\":75,\"INTEGRATION_CREATE\":80,\"INTEGRATION_UPDATE\":81,\"INTEGRATION_DELETE\":82}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "AuditLogActions",
        "longname": "AuditLogActions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2715,
                2730
            ],
            "filename": "Constants.js",
            "lineno": 101,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007234",
                "name": "GUILD_UPDATE",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "GUILD_UPDATE",
        "longname": "AuditLogActions.GUILD_UPDATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2737,
                2755
            ],
            "filename": "Constants.js",
            "lineno": 103,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007236",
                "name": "CHANNEL_CREATE",
                "type": "Literal",
                "value": 10
            }
        },
        "undocumented": true,
        "name": "CHANNEL_CREATE",
        "longname": "AuditLogActions.CHANNEL_CREATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2761,
                2779
            ],
            "filename": "Constants.js",
            "lineno": 104,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007238",
                "name": "CHANNEL_UPDATE",
                "type": "Literal",
                "value": 11
            }
        },
        "undocumented": true,
        "name": "CHANNEL_UPDATE",
        "longname": "AuditLogActions.CHANNEL_UPDATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2785,
                2803
            ],
            "filename": "Constants.js",
            "lineno": 105,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007240",
                "name": "CHANNEL_DELETE",
                "type": "Literal",
                "value": 12
            }
        },
        "undocumented": true,
        "name": "CHANNEL_DELETE",
        "longname": "AuditLogActions.CHANNEL_DELETE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2809,
                2837
            ],
            "filename": "Constants.js",
            "lineno": 106,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007242",
                "name": "CHANNEL_OVERWRITE_CREATE",
                "type": "Literal",
                "value": 13
            }
        },
        "undocumented": true,
        "name": "CHANNEL_OVERWRITE_CREATE",
        "longname": "AuditLogActions.CHANNEL_OVERWRITE_CREATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2843,
                2871
            ],
            "filename": "Constants.js",
            "lineno": 107,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007244",
                "name": "CHANNEL_OVERWRITE_UPDATE",
                "type": "Literal",
                "value": 14
            }
        },
        "undocumented": true,
        "name": "CHANNEL_OVERWRITE_UPDATE",
        "longname": "AuditLogActions.CHANNEL_OVERWRITE_UPDATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2877,
                2905
            ],
            "filename": "Constants.js",
            "lineno": 108,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007246",
                "name": "CHANNEL_OVERWRITE_DELETE",
                "type": "Literal",
                "value": 15
            }
        },
        "undocumented": true,
        "name": "CHANNEL_OVERWRITE_DELETE",
        "longname": "AuditLogActions.CHANNEL_OVERWRITE_DELETE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2912,
                2927
            ],
            "filename": "Constants.js",
            "lineno": 110,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007248",
                "name": "MEMBER_KICK",
                "type": "Literal",
                "value": 20
            }
        },
        "undocumented": true,
        "name": "MEMBER_KICK",
        "longname": "AuditLogActions.MEMBER_KICK",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2933,
                2949
            ],
            "filename": "Constants.js",
            "lineno": 111,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007250",
                "name": "MEMBER_PRUNE",
                "type": "Literal",
                "value": 21
            }
        },
        "undocumented": true,
        "name": "MEMBER_PRUNE",
        "longname": "AuditLogActions.MEMBER_PRUNE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2955,
                2973
            ],
            "filename": "Constants.js",
            "lineno": 112,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007252",
                "name": "MEMBER_BAN_ADD",
                "type": "Literal",
                "value": 22
            }
        },
        "undocumented": true,
        "name": "MEMBER_BAN_ADD",
        "longname": "AuditLogActions.MEMBER_BAN_ADD",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2979,
                3000
            ],
            "filename": "Constants.js",
            "lineno": 113,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007254",
                "name": "MEMBER_BAN_REMOVE",
                "type": "Literal",
                "value": 23
            }
        },
        "undocumented": true,
        "name": "MEMBER_BAN_REMOVE",
        "longname": "AuditLogActions.MEMBER_BAN_REMOVE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3006,
                3023
            ],
            "filename": "Constants.js",
            "lineno": 114,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007256",
                "name": "MEMBER_UPDATE",
                "type": "Literal",
                "value": 24
            }
        },
        "undocumented": true,
        "name": "MEMBER_UPDATE",
        "longname": "AuditLogActions.MEMBER_UPDATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3029,
                3051
            ],
            "filename": "Constants.js",
            "lineno": 115,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007258",
                "name": "MEMBER_ROLE_UPDATE",
                "type": "Literal",
                "value": 25
            }
        },
        "undocumented": true,
        "name": "MEMBER_ROLE_UPDATE",
        "longname": "AuditLogActions.MEMBER_ROLE_UPDATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3057,
                3072
            ],
            "filename": "Constants.js",
            "lineno": 116,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007260",
                "name": "MEMBER_MOVE",
                "type": "Literal",
                "value": 26
            }
        },
        "undocumented": true,
        "name": "MEMBER_MOVE",
        "longname": "AuditLogActions.MEMBER_MOVE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3078,
                3099
            ],
            "filename": "Constants.js",
            "lineno": 117,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007262",
                "name": "MEMBER_DISCONNECT",
                "type": "Literal",
                "value": 27
            }
        },
        "undocumented": true,
        "name": "MEMBER_DISCONNECT",
        "longname": "AuditLogActions.MEMBER_DISCONNECT",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3105,
                3116
            ],
            "filename": "Constants.js",
            "lineno": 118,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007264",
                "name": "BOT_ADD",
                "type": "Literal",
                "value": 28
            }
        },
        "undocumented": true,
        "name": "BOT_ADD",
        "longname": "AuditLogActions.BOT_ADD",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3123,
                3138
            ],
            "filename": "Constants.js",
            "lineno": 120,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007266",
                "name": "ROLE_CREATE",
                "type": "Literal",
                "value": 30
            }
        },
        "undocumented": true,
        "name": "ROLE_CREATE",
        "longname": "AuditLogActions.ROLE_CREATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3144,
                3159
            ],
            "filename": "Constants.js",
            "lineno": 121,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007268",
                "name": "ROLE_UPDATE",
                "type": "Literal",
                "value": 31
            }
        },
        "undocumented": true,
        "name": "ROLE_UPDATE",
        "longname": "AuditLogActions.ROLE_UPDATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3165,
                3180
            ],
            "filename": "Constants.js",
            "lineno": 122,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007270",
                "name": "ROLE_DELETE",
                "type": "Literal",
                "value": 32
            }
        },
        "undocumented": true,
        "name": "ROLE_DELETE",
        "longname": "AuditLogActions.ROLE_DELETE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3187,
                3204
            ],
            "filename": "Constants.js",
            "lineno": 124,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007272",
                "name": "INVITE_CREATE",
                "type": "Literal",
                "value": 40
            }
        },
        "undocumented": true,
        "name": "INVITE_CREATE",
        "longname": "AuditLogActions.INVITE_CREATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3210,
                3227
            ],
            "filename": "Constants.js",
            "lineno": 125,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007274",
                "name": "INVITE_UPDATE",
                "type": "Literal",
                "value": 41
            }
        },
        "undocumented": true,
        "name": "INVITE_UPDATE",
        "longname": "AuditLogActions.INVITE_UPDATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3233,
                3250
            ],
            "filename": "Constants.js",
            "lineno": 126,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007276",
                "name": "INVITE_DELETE",
                "type": "Literal",
                "value": 42
            }
        },
        "undocumented": true,
        "name": "INVITE_DELETE",
        "longname": "AuditLogActions.INVITE_DELETE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3257,
                3275
            ],
            "filename": "Constants.js",
            "lineno": 128,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007278",
                "name": "WEBHOOK_CREATE",
                "type": "Literal",
                "value": 50
            }
        },
        "undocumented": true,
        "name": "WEBHOOK_CREATE",
        "longname": "AuditLogActions.WEBHOOK_CREATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3281,
                3299
            ],
            "filename": "Constants.js",
            "lineno": 129,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007280",
                "name": "WEBHOOK_UPDATE",
                "type": "Literal",
                "value": 51
            }
        },
        "undocumented": true,
        "name": "WEBHOOK_UPDATE",
        "longname": "AuditLogActions.WEBHOOK_UPDATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3305,
                3323
            ],
            "filename": "Constants.js",
            "lineno": 130,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007282",
                "name": "WEBHOOK_DELETE",
                "type": "Literal",
                "value": 52
            }
        },
        "undocumented": true,
        "name": "WEBHOOK_DELETE",
        "longname": "AuditLogActions.WEBHOOK_DELETE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3330,
                3346
            ],
            "filename": "Constants.js",
            "lineno": 132,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007284",
                "name": "EMOJI_CREATE",
                "type": "Literal",
                "value": 60
            }
        },
        "undocumented": true,
        "name": "EMOJI_CREATE",
        "longname": "AuditLogActions.EMOJI_CREATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3352,
                3368
            ],
            "filename": "Constants.js",
            "lineno": 133,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007286",
                "name": "EMOJI_UPDATE",
                "type": "Literal",
                "value": 61
            }
        },
        "undocumented": true,
        "name": "EMOJI_UPDATE",
        "longname": "AuditLogActions.EMOJI_UPDATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3374,
                3390
            ],
            "filename": "Constants.js",
            "lineno": 134,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007288",
                "name": "EMOJI_DELETE",
                "type": "Literal",
                "value": 62
            }
        },
        "undocumented": true,
        "name": "EMOJI_DELETE",
        "longname": "AuditLogActions.EMOJI_DELETE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3397,
                3415
            ],
            "filename": "Constants.js",
            "lineno": 136,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007290",
                "name": "MESSAGE_DELETE",
                "type": "Literal",
                "value": 72
            }
        },
        "undocumented": true,
        "name": "MESSAGE_DELETE",
        "longname": "AuditLogActions.MESSAGE_DELETE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3421,
                3444
            ],
            "filename": "Constants.js",
            "lineno": 137,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007292",
                "name": "MESSAGE_BULK_DELETE",
                "type": "Literal",
                "value": 73
            }
        },
        "undocumented": true,
        "name": "MESSAGE_BULK_DELETE",
        "longname": "AuditLogActions.MESSAGE_BULK_DELETE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3450,
                3465
            ],
            "filename": "Constants.js",
            "lineno": 138,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007294",
                "name": "MESSAGE_PIN",
                "type": "Literal",
                "value": 74
            }
        },
        "undocumented": true,
        "name": "MESSAGE_PIN",
        "longname": "AuditLogActions.MESSAGE_PIN",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3471,
                3488
            ],
            "filename": "Constants.js",
            "lineno": 139,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007296",
                "name": "MESSAGE_UNPIN",
                "type": "Literal",
                "value": 75
            }
        },
        "undocumented": true,
        "name": "MESSAGE_UNPIN",
        "longname": "AuditLogActions.MESSAGE_UNPIN",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3495,
                3517
            ],
            "filename": "Constants.js",
            "lineno": 141,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007298",
                "name": "INTEGRATION_CREATE",
                "type": "Literal",
                "value": 80
            }
        },
        "undocumented": true,
        "name": "INTEGRATION_CREATE",
        "longname": "AuditLogActions.INTEGRATION_CREATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3523,
                3545
            ],
            "filename": "Constants.js",
            "lineno": 142,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007300",
                "name": "INTEGRATION_UPDATE",
                "type": "Literal",
                "value": 81
            }
        },
        "undocumented": true,
        "name": "INTEGRATION_UPDATE",
        "longname": "AuditLogActions.INTEGRATION_UPDATE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3551,
                3573
            ],
            "filename": "Constants.js",
            "lineno": 143,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007302",
                "name": "INTEGRATION_DELETE",
                "type": "Literal",
                "value": 82
            }
        },
        "undocumented": true,
        "name": "INTEGRATION_DELETE",
        "longname": "AuditLogActions.INTEGRATION_DELETE",
        "kind": "member",
        "memberof": "AuditLogActions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3578,
                3746
            ],
            "filename": "Constants.js",
            "lineno": 146,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007305",
                "name": "module.exports.MessageFlags",
                "type": "ObjectExpression",
                "value": "{\"CROSSPOSTED\":\"\",\"IS_CROSSPOST\":\"\",\"SUPPRESS_EMBEDS\":\"\",\"SOURCE_MESSAGE_DELETED\":\"\",\"URGENT\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "MessageFlags",
        "longname": "MessageFlags",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3614,
                3633
            ],
            "filename": "Constants.js",
            "lineno": 147,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007312",
                "name": "CROSSPOSTED",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "CROSSPOSTED",
        "longname": "MessageFlags.CROSSPOSTED",
        "kind": "member",
        "memberof": "MessageFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3639,
                3659
            ],
            "filename": "Constants.js",
            "lineno": 148,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007316",
                "name": "IS_CROSSPOST",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "IS_CROSSPOST",
        "longname": "MessageFlags.IS_CROSSPOST",
        "kind": "member",
        "memberof": "MessageFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3665,
                3688
            ],
            "filename": "Constants.js",
            "lineno": 149,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007320",
                "name": "SUPPRESS_EMBEDS",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "SUPPRESS_EMBEDS",
        "longname": "MessageFlags.SUPPRESS_EMBEDS",
        "kind": "member",
        "memberof": "MessageFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3694,
                3724
            ],
            "filename": "Constants.js",
            "lineno": 150,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007324",
                "name": "SOURCE_MESSAGE_DELETED",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "SOURCE_MESSAGE_DELETED",
        "longname": "MessageFlags.SOURCE_MESSAGE_DELETED",
        "kind": "member",
        "memberof": "MessageFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3730,
                3744
            ],
            "filename": "Constants.js",
            "lineno": 151,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007328",
                "name": "URGENT",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "URGENT",
        "longname": "MessageFlags.URGENT",
        "kind": "member",
        "memberof": "MessageFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3749,
                4257
            ],
            "filename": "Constants.js",
            "lineno": 154,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007333",
                "name": "module.exports.MessageTypes",
                "type": "ObjectExpression",
                "value": "{\"DEFAULT\":0,\"RECIPIENT_ADD\":1,\"RECIPIENT_REMOVE\":2,\"CALL\":3,\"CHANNEL_NAME_CHANGE\":4,\"CHANNEL_ICON_CHANGE\":5,\"CHANNEL_PINNED_MESSAGE\":6,\"GUILD_MEMBER_JOIN\":7,\"USER_PREMIUM_GUILD_SUBSCRIPTION\":8,\"USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1\":9,\"USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2\":10,\"USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3\":11,\"CHANNEL_FOLLOW_ADD\":12,\"GUILD_DISCOVERY_DISQUALIFIED\":14,\"GUILD_DISCOVERY_REQUALIFIED\":15}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "MessageTypes",
        "longname": "MessageTypes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3785,
                3795
            ],
            "filename": "Constants.js",
            "lineno": 155,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007340",
                "name": "DEFAULT",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "DEFAULT",
        "longname": "MessageTypes.DEFAULT",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3801,
                3817
            ],
            "filename": "Constants.js",
            "lineno": 156,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007342",
                "name": "RECIPIENT_ADD",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "RECIPIENT_ADD",
        "longname": "MessageTypes.RECIPIENT_ADD",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3823,
                3842
            ],
            "filename": "Constants.js",
            "lineno": 157,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007344",
                "name": "RECIPIENT_REMOVE",
                "type": "Literal",
                "value": 2
            }
        },
        "undocumented": true,
        "name": "RECIPIENT_REMOVE",
        "longname": "MessageTypes.RECIPIENT_REMOVE",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3848,
                3855
            ],
            "filename": "Constants.js",
            "lineno": 158,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007346",
                "name": "CALL",
                "type": "Literal",
                "value": 3
            }
        },
        "undocumented": true,
        "name": "CALL",
        "longname": "MessageTypes.CALL",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3861,
                3883
            ],
            "filename": "Constants.js",
            "lineno": 159,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007348",
                "name": "CHANNEL_NAME_CHANGE",
                "type": "Literal",
                "value": 4
            }
        },
        "undocumented": true,
        "name": "CHANNEL_NAME_CHANGE",
        "longname": "MessageTypes.CHANNEL_NAME_CHANGE",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3889,
                3911
            ],
            "filename": "Constants.js",
            "lineno": 160,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007350",
                "name": "CHANNEL_ICON_CHANGE",
                "type": "Literal",
                "value": 5
            }
        },
        "undocumented": true,
        "name": "CHANNEL_ICON_CHANGE",
        "longname": "MessageTypes.CHANNEL_ICON_CHANGE",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3917,
                3942
            ],
            "filename": "Constants.js",
            "lineno": 161,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007352",
                "name": "CHANNEL_PINNED_MESSAGE",
                "type": "Literal",
                "value": 6
            }
        },
        "undocumented": true,
        "name": "CHANNEL_PINNED_MESSAGE",
        "longname": "MessageTypes.CHANNEL_PINNED_MESSAGE",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3948,
                3968
            ],
            "filename": "Constants.js",
            "lineno": 162,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007354",
                "name": "GUILD_MEMBER_JOIN",
                "type": "Literal",
                "value": 7
            }
        },
        "undocumented": true,
        "name": "GUILD_MEMBER_JOIN",
        "longname": "MessageTypes.GUILD_MEMBER_JOIN",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3974,
                4008
            ],
            "filename": "Constants.js",
            "lineno": 163,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007356",
                "name": "USER_PREMIUM_GUILD_SUBSCRIPTION",
                "type": "Literal",
                "value": 8
            }
        },
        "undocumented": true,
        "name": "USER_PREMIUM_GUILD_SUBSCRIPTION",
        "longname": "MessageTypes.USER_PREMIUM_GUILD_SUBSCRIPTION",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4014,
                4055
            ],
            "filename": "Constants.js",
            "lineno": 164,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007358",
                "name": "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1",
                "type": "Literal",
                "value": 9
            }
        },
        "undocumented": true,
        "name": "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1",
        "longname": "MessageTypes.USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4061,
                4103
            ],
            "filename": "Constants.js",
            "lineno": 165,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007360",
                "name": "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2",
                "type": "Literal",
                "value": 10
            }
        },
        "undocumented": true,
        "name": "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2",
        "longname": "MessageTypes.USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4109,
                4151
            ],
            "filename": "Constants.js",
            "lineno": 166,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007362",
                "name": "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3",
                "type": "Literal",
                "value": 11
            }
        },
        "undocumented": true,
        "name": "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3",
        "longname": "MessageTypes.USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4157,
                4179
            ],
            "filename": "Constants.js",
            "lineno": 167,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007364",
                "name": "CHANNEL_FOLLOW_ADD",
                "type": "Literal",
                "value": 12
            }
        },
        "undocumented": true,
        "name": "CHANNEL_FOLLOW_ADD",
        "longname": "MessageTypes.CHANNEL_FOLLOW_ADD",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4186,
                4218
            ],
            "filename": "Constants.js",
            "lineno": 169,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007366",
                "name": "GUILD_DISCOVERY_DISQUALIFIED",
                "type": "Literal",
                "value": 14
            }
        },
        "undocumented": true,
        "name": "GUILD_DISCOVERY_DISQUALIFIED",
        "longname": "MessageTypes.GUILD_DISCOVERY_DISQUALIFIED",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4224,
                4255
            ],
            "filename": "Constants.js",
            "lineno": 170,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007368",
                "name": "GUILD_DISCOVERY_REQUALIFIED",
                "type": "Literal",
                "value": 15
            }
        },
        "undocumented": true,
        "name": "GUILD_DISCOVERY_REQUALIFIED",
        "longname": "MessageTypes.GUILD_DISCOVERY_REQUALIFIED",
        "kind": "member",
        "memberof": "MessageTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4260,
                4421
            ],
            "filename": "Constants.js",
            "lineno": 173,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007371",
                "name": "module.exports.ChannelTypes",
                "type": "ObjectExpression",
                "value": "{\"GUILD_TEXT\":0,\"DM\":1,\"GUILD_VOICE\":2,\"GROUP_DM\":3,\"GUILD_CATEGORY\":4,\"GUILD_NEWS\":5,\"GUILD_STORE\":6}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ChannelTypes",
        "longname": "ChannelTypes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4296,
                4309
            ],
            "filename": "Constants.js",
            "lineno": 174,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007378",
                "name": "GUILD_TEXT",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "GUILD_TEXT",
        "longname": "ChannelTypes.GUILD_TEXT",
        "kind": "member",
        "memberof": "ChannelTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4315,
                4320
            ],
            "filename": "Constants.js",
            "lineno": 175,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007380",
                "name": "DM",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "DM",
        "longname": "ChannelTypes.DM",
        "kind": "member",
        "memberof": "ChannelTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4326,
                4340
            ],
            "filename": "Constants.js",
            "lineno": 176,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007382",
                "name": "GUILD_VOICE",
                "type": "Literal",
                "value": 2
            }
        },
        "undocumented": true,
        "name": "GUILD_VOICE",
        "longname": "ChannelTypes.GUILD_VOICE",
        "kind": "member",
        "memberof": "ChannelTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4346,
                4357
            ],
            "filename": "Constants.js",
            "lineno": 177,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007384",
                "name": "GROUP_DM",
                "type": "Literal",
                "value": 3
            }
        },
        "undocumented": true,
        "name": "GROUP_DM",
        "longname": "ChannelTypes.GROUP_DM",
        "kind": "member",
        "memberof": "ChannelTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4363,
                4380
            ],
            "filename": "Constants.js",
            "lineno": 178,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007386",
                "name": "GUILD_CATEGORY",
                "type": "Literal",
                "value": 4
            }
        },
        "undocumented": true,
        "name": "GUILD_CATEGORY",
        "longname": "ChannelTypes.GUILD_CATEGORY",
        "kind": "member",
        "memberof": "ChannelTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4386,
                4399
            ],
            "filename": "Constants.js",
            "lineno": 179,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007388",
                "name": "GUILD_NEWS",
                "type": "Literal",
                "value": 5
            }
        },
        "undocumented": true,
        "name": "GUILD_NEWS",
        "longname": "ChannelTypes.GUILD_NEWS",
        "kind": "member",
        "memberof": "ChannelTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4405,
                4419
            ],
            "filename": "Constants.js",
            "lineno": 180,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007390",
                "name": "GUILD_STORE",
                "type": "Literal",
                "value": 6
            }
        },
        "undocumented": true,
        "name": "GUILD_STORE",
        "longname": "ChannelTypes.GUILD_STORE",
        "kind": "member",
        "memberof": "ChannelTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4424,
                4842
            ],
            "filename": "Constants.js",
            "lineno": 183,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007393",
                "name": "module.exports.UserFlags",
                "type": "ObjectExpression",
                "value": "{\"NONE\":0,\"DISCORD_EMPLOYEE\":\"\",\"DISCORD_PARTNER\":\"\",\"HYPESQUAD_EVENTS\":\"\",\"BUG_HUNTER_LEVEL_1\":\"\",\"HOUSE_BRAVERY\":\"\",\"HOUSE_BRILLIANCE\":\"\",\"HOUSE_BALANCE\":\"\",\"EARLY_SUPPORTER\":\"\",\"TEAM_USER\":\"\",\"SYSTEM\":\"\",\"BUG_HUNTER_LEVEL_2\":\"\",\"VERIFIED_BOT\":\"\",\"VERIFIED_BOT_DEVELOPER\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "UserFlags",
        "longname": "UserFlags",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4457,
                4464
            ],
            "filename": "Constants.js",
            "lineno": 184,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007400",
                "name": "NONE",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "NONE",
        "longname": "UserFlags.NONE",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4470,
                4494
            ],
            "filename": "Constants.js",
            "lineno": 185,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007402",
                "name": "DISCORD_EMPLOYEE",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "DISCORD_EMPLOYEE",
        "longname": "UserFlags.DISCORD_EMPLOYEE",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4500,
                4523
            ],
            "filename": "Constants.js",
            "lineno": 186,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007406",
                "name": "DISCORD_PARTNER",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "DISCORD_PARTNER",
        "longname": "UserFlags.DISCORD_PARTNER",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4529,
                4553
            ],
            "filename": "Constants.js",
            "lineno": 187,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007410",
                "name": "HYPESQUAD_EVENTS",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "HYPESQUAD_EVENTS",
        "longname": "UserFlags.HYPESQUAD_EVENTS",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4559,
                4585
            ],
            "filename": "Constants.js",
            "lineno": 188,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007414",
                "name": "BUG_HUNTER_LEVEL_1",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "BUG_HUNTER_LEVEL_1",
        "longname": "UserFlags.BUG_HUNTER_LEVEL_1",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4591,
                4612
            ],
            "filename": "Constants.js",
            "lineno": 189,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007418",
                "name": "HOUSE_BRAVERY",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "HOUSE_BRAVERY",
        "longname": "UserFlags.HOUSE_BRAVERY",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4618,
                4642
            ],
            "filename": "Constants.js",
            "lineno": 190,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007422",
                "name": "HOUSE_BRILLIANCE",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "HOUSE_BRILLIANCE",
        "longname": "UserFlags.HOUSE_BRILLIANCE",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4648,
                4669
            ],
            "filename": "Constants.js",
            "lineno": 191,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007426",
                "name": "HOUSE_BALANCE",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "HOUSE_BALANCE",
        "longname": "UserFlags.HOUSE_BALANCE",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4675,
                4698
            ],
            "filename": "Constants.js",
            "lineno": 192,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007430",
                "name": "EARLY_SUPPORTER",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "EARLY_SUPPORTER",
        "longname": "UserFlags.EARLY_SUPPORTER",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4704,
                4722
            ],
            "filename": "Constants.js",
            "lineno": 193,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007434",
                "name": "TEAM_USER",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "TEAM_USER",
        "longname": "UserFlags.TEAM_USER",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4728,
                4743
            ],
            "filename": "Constants.js",
            "lineno": 194,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007438",
                "name": "SYSTEM",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "SYSTEM",
        "longname": "UserFlags.SYSTEM",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4749,
                4776
            ],
            "filename": "Constants.js",
            "lineno": 195,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007442",
                "name": "BUG_HUNTER_LEVEL_2",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "BUG_HUNTER_LEVEL_2",
        "longname": "UserFlags.BUG_HUNTER_LEVEL_2",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4782,
                4803
            ],
            "filename": "Constants.js",
            "lineno": 196,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007446",
                "name": "VERIFIED_BOT",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "VERIFIED_BOT",
        "longname": "UserFlags.VERIFIED_BOT",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4809,
                4840
            ],
            "filename": "Constants.js",
            "lineno": 197,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007450",
                "name": "VERIFIED_BOT_DEVELOPER",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "VERIFIED_BOT_DEVELOPER",
        "longname": "UserFlags.VERIFIED_BOT_DEVELOPER",
        "kind": "member",
        "memberof": "UserFlags",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4846,
                5418
            ],
            "filename": "Constants.js",
            "lineno": 201,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007455",
                "name": "module.exports.Intents",
                "type": "ObjectExpression",
                "value": "{\"guilds\":\"\",\"guildMembers\":\"\",\"guildBans\":\"\",\"guildEmojis\":\"\",\"guildIntegrations\":\"\",\"guildWebhooks\":\"\",\"guildInvites\":\"\",\"guildVoiceStates\":\"\",\"guildPresences\":\"\",\"guildMessages\":\"\",\"guildMessageReactions\":\"\",\"guildMessageTyping\":\"\",\"directMessages\":\"\",\"directMessageReactions\":\"\",\"directMessageTyping\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Intents",
        "longname": "Intents",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4877,
                4907
            ],
            "filename": "Constants.js",
            "lineno": 202,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007462",
                "name": "guilds",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guilds",
        "longname": "Intents.guilds",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4913,
                4943
            ],
            "filename": "Constants.js",
            "lineno": 203,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007466",
                "name": "guildMembers",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guildMembers",
        "longname": "Intents.guildMembers",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4949,
                4979
            ],
            "filename": "Constants.js",
            "lineno": 204,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007470",
                "name": "guildBans",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guildBans",
        "longname": "Intents.guildBans",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4985,
                5015
            ],
            "filename": "Constants.js",
            "lineno": 205,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007474",
                "name": "guildEmojis",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guildEmojis",
        "longname": "Intents.guildEmojis",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5021,
                5051
            ],
            "filename": "Constants.js",
            "lineno": 206,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007478",
                "name": "guildIntegrations",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guildIntegrations",
        "longname": "Intents.guildIntegrations",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5057,
                5087
            ],
            "filename": "Constants.js",
            "lineno": 207,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007482",
                "name": "guildWebhooks",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guildWebhooks",
        "longname": "Intents.guildWebhooks",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5093,
                5123
            ],
            "filename": "Constants.js",
            "lineno": 208,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007486",
                "name": "guildInvites",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guildInvites",
        "longname": "Intents.guildInvites",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5129,
                5159
            ],
            "filename": "Constants.js",
            "lineno": 209,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007490",
                "name": "guildVoiceStates",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guildVoiceStates",
        "longname": "Intents.guildVoiceStates",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5165,
                5195
            ],
            "filename": "Constants.js",
            "lineno": 210,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007494",
                "name": "guildPresences",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guildPresences",
        "longname": "Intents.guildPresences",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5201,
                5231
            ],
            "filename": "Constants.js",
            "lineno": 211,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007498",
                "name": "guildMessages",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guildMessages",
        "longname": "Intents.guildMessages",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5237,
                5268
            ],
            "filename": "Constants.js",
            "lineno": 212,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007502",
                "name": "guildMessageReactions",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guildMessageReactions",
        "longname": "Intents.guildMessageReactions",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5274,
                5305
            ],
            "filename": "Constants.js",
            "lineno": 213,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007506",
                "name": "guildMessageTyping",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guildMessageTyping",
        "longname": "Intents.guildMessageTyping",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5311,
                5342
            ],
            "filename": "Constants.js",
            "lineno": 214,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007510",
                "name": "directMessages",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "directMessages",
        "longname": "Intents.directMessages",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5348,
                5379
            ],
            "filename": "Constants.js",
            "lineno": 215,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007514",
                "name": "directMessageReactions",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "directMessageReactions",
        "longname": "Intents.directMessageReactions",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5385,
                5416
            ],
            "filename": "Constants.js",
            "lineno": 216,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100007518",
                "name": "directMessageTyping",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "directMessageTyping",
        "longname": "Intents.directMessageTyping",
        "kind": "member",
        "memberof": "Intents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                57
            ],
            "filename": "Command.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007527",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents an command framework command\n* @prop {Object} subcommands Object mapping subcommand labels to Command objects\n* @prop {Command?} parentCommand If this command is also a subcommand, this will refer to its parent Command\n*/",
        "meta": {
            "range": [
                299,
                30672
            ],
            "filename": "Command.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007532",
                "name": "Command",
                "type": "ClassDeclaration",
                "paramnames": [
                    "label",
                    "generator",
                    "options",
                    "parentCommand"
                ]
            }
        },
        "classdesc": "Represents an command framework command",
        "properties": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping subcommand labels to Command objects",
                "name": "subcommands"
            },
            {
                "type": {
                    "names": [
                        "Command"
                    ]
                },
                "nullable": true,
                "description": "If this command is also a subcommand, this will refer to its parent Command",
                "name": "parentCommand"
            }
        ],
        "name": "Command",
        "longname": "Command",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "/**\n    * Register a command\n    * @arg {String} label The command label\n    * @arg {Function | String | Array<Function | String>} generator A response string, array of functions or strings, or function that generates a string or array of strings when called.\n    * If a function is passed, the function will be passed a Message object and an array of command arguments. The Message object will have an additional property `prefix`, which is the prefix used in the command.\n    * `generator(msg, args)`\n    * @arg {Object} [options] Command options\n    * @arg {Array<String>} [options.aliases] An array of command aliases\n    * @arg {Boolean} [options.argsRequired=false] If arguments are required or not\n    * @arg {Boolean} [options.caseInsensitive=false] Whether the command label (and aliases) is case insensitive or not\n    * @arg {Number} [options.cooldown] The cooldown between command usage in milliseconds\n    * @arg {Object} [options.cooldownExclusions={}] A set of factors that limit where cooldowns are active\n    * @arg {Array<String>} [options.cooldownExclusions.userIDs] An array of user IDs representing users that are not affected by cooldowns.\n    * @arg {Array<String>} [options.cooldownExclusions.guildIDs] An array of guild IDs representing guilds that are not affected by cooldowns.\n    * @arg {Array<String>} [options.cooldownExclusions.channelIDs] An array of channel IDs representing channels that are not affected by cooldowns.\n    * @arg {Function | String} [options.cooldownMessage] A string or a function that returns a string to show when the command is on cooldown.  The function is passed the Message object as a parameter.\n    * @arg {Number} [option.cooldownReturns=0] Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.\n    * @arg {Object} [options.defaultSubcommandOptions={}] Default subcommand options. This object takes the same options as a normal Command\n    * @arg {Boolean} [options.deleteCommand=false] Whether to delete the user command message or not\n    * @arg {String} [options.description=\"No description\"] A short description of the command to show in the default help command\n    * @arg {Boolean} [options.dmOnly=false] Whether to prevent the command from being used in guilds or not\n    * @arg {Function | String} [options.errorMessage] A string or a function that returns a string to show if the execution of the command handler somehow fails.  The function is passed the Message object as a parameter.\n    * @arg {String} [options.fullDescription=\"No full description\"] A detailed description of the command to show in the default help command\n    * @arg {Boolean} [options.guildOnly=false] Whether to prevent the command from being used in Direct Messages or not\n    * @arg {Boolean} [options.hidden=false] Whether or not the command should be hidden from the default help command list.\n    * @arg {Object} [options.hooks] A set of functions to be executed at different times throughout the command's processing\n    * @arg {Function} [options.hooks.preCommand] A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.\n    * @arg {Function} [options.hooks.postCheck] A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.\n    * @arg {Function} [options.hooks.postExecution] A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.\n    * @arg {Function} [options.hooks.postCommand] A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.\n    * @arg {Function | String} [options.invalidUsageMessage] A string or a function that returns a string to show when a command was improperly used.  The function is passed the Message object as a parameter.\n    * @arg {Function | String} [options.permissionMessage] A string or a function that returns a string to show when the user doesn't have permissions to use the command.  The function is passed the Message object as a parameter.\n    * @arg {Array<{emoji: String, type: String, response: (Function | String | Array<Function | String>)}>} [options.reactionButtons] An array of objects specifying reaction buttons\n    * `emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n    * `type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n    * `response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n    * `filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response\n    * @arg {Number} [options.reactionButtonTimeout=60000] Time (in milliseconds) to wait before invalidating the command's reaction buttons\n    * @arg {Object} [options.requirements] A set of factors that limit who can call the command\n    * @arg {Function | Array<String>} [options.requirements.userIDs] An array or a function that returns an array of user IDs representing users that can call the command.  The function is passed the Message object as a parameter.\n    * @arg {Function | Object} [options.requirements.permissions] An object or a function that returns an object containing permission keys the user must match to use the command.  The function is passed the Message object as a parameter.\n    * i.e.:\n    * ```\n    * {\n    *   \"administrator\": false,\n    *   \"manageMessages\": true\n    * }\n    * ```\n    * In the above example, the user must not have administrator permissions, but must have manageMessages to use the command\n    * @arg {Function | Array<String>} [options.requirements.roleIDs] An array or a function that returns an array of role IDs that would allow a user to use the command.  The function is passed the Message object as a parameter.\n    * @arg {Function | Array<String>} [options.requirements.roleNames] An array or a function that returns an array of role names that would allow a user to use the command.  The function is passed the Message object as a parameter.\n    * @arg {Function} [options.requirements.custom] A function that accepts a message and returns true if the command should be run\n    * @arg {Boolean} [option.restartCooldown=false] Whether or not to restart a command's cooldown every time it's used.\n    * @arg {String} [options.usage] Details on how to call the command to show in the default help command\n    */",
        "meta": {
            "range": [
                7456,
                11879
            ],
            "filename": "Command.js",
            "lineno": 66,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007535",
                "name": "Command",
                "type": "MethodDefinition",
                "paramnames": [
                    "label",
                    "generator",
                    "options",
                    "parentCommand"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Register a command",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The command label",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String",
                        "Array.<(function()|String)>"
                    ]
                },
                "description": "A response string, array of functions or strings, or function that generates a string or array of strings when called.\nIf a function is passed, the function will be passed a Message object and an array of command arguments. The Message object will have an additional property `prefix`, which is the prefix used in the command.\n`generator(msg, args)`",
                "name": "generator"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Command options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of command aliases",
                "name": "options.aliases"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If arguments are required or not",
                "name": "options.argsRequired"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the command label (and aliases) is case insensitive or not",
                "name": "options.caseInsensitive"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The cooldown between command usage in milliseconds",
                "name": "options.cooldown"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "A set of factors that limit where cooldowns are active",
                "name": "options.cooldownExclusions"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of user IDs representing users that are not affected by cooldowns.",
                "name": "options.cooldownExclusions.userIDs"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of guild IDs representing guilds that are not affected by cooldowns.",
                "name": "options.cooldownExclusions.guildIDs"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of channel IDs representing channels that are not affected by cooldowns.",
                "name": "options.cooldownExclusions.channelIDs"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show when the command is on cooldown.  The function is passed the Message object as a parameter.",
                "name": "options.cooldownMessage"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.",
                "name": "option.cooldownReturns"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "Default subcommand options. This object takes the same options as a normal Command",
                "name": "options.defaultSubcommandOptions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to delete the user command message or not",
                "name": "options.deleteCommand"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"No description\"",
                "description": "A short description of the command to show in the default help command",
                "name": "options.description"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to prevent the command from being used in guilds or not",
                "name": "options.dmOnly"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show if the execution of the command handler somehow fails.  The function is passed the Message object as a parameter.",
                "name": "options.errorMessage"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"No full description\"",
                "description": "A detailed description of the command to show in the default help command",
                "name": "options.fullDescription"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to prevent the command from being used in Direct Messages or not",
                "name": "options.guildOnly"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the command should be hidden from the default help command list.",
                "name": "options.hidden"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A set of functions to be executed at different times throughout the command's processing",
                "name": "options.hooks"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.",
                "name": "options.hooks.preCommand"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.",
                "name": "options.hooks.postCheck"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.",
                "name": "options.hooks.postExecution"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.",
                "name": "options.hooks.postCommand"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show when a command was improperly used.  The function is passed the Message object as a parameter.",
                "name": "options.invalidUsageMessage"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show when the user doesn't have permissions to use the command.  The function is passed the Message object as a parameter.",
                "name": "options.permissionMessage"
            },
            {
                "type": {
                    "names": [
                        "Array.<{emoji: String, type: String, response: (function()|String|Array.<(function()|String)>)}>"
                    ]
                },
                "optional": true,
                "description": "An array of objects specifying reaction buttons\n`emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n`type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n`response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n`filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response",
                "name": "options.reactionButtons"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 60000,
                "description": "Time (in milliseconds) to wait before invalidating the command's reaction buttons",
                "name": "options.reactionButtonTimeout"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A set of factors that limit who can call the command",
                "name": "options.requirements"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array or a function that returns an array of user IDs representing users that can call the command.  The function is passed the Message object as a parameter.",
                "name": "options.requirements.userIDs"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An object or a function that returns an object containing permission keys the user must match to use the command.  The function is passed the Message object as a parameter.\ni.e.:\n```\n{\n  \"administrator\": false,\n  \"manageMessages\": true\n}\n```\nIn the above example, the user must not have administrator permissions, but must have manageMessages to use the command",
                "name": "options.requirements.permissions"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array or a function that returns an array of role IDs that would allow a user to use the command.  The function is passed the Message object as a parameter.",
                "name": "options.requirements.roleIDs"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array or a function that returns an array of role names that would allow a user to use the command.  The function is passed the Message object as a parameter.",
                "name": "options.requirements.roleNames"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that accepts a message and returns true if the command should be run",
                "name": "options.requirements.custom"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not to restart a command's cooldown every time it's used.",
                "name": "option.restartCooldown"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Details on how to call the command to show in the default help command",
                "name": "options.usage"
            }
        ],
        "name": "Command",
        "longname": "Command",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "/**\n* Represents an command framework command\n* @prop {Object} subcommands Object mapping subcommand labels to Command objects\n* @prop {Command?} parentCommand If this command is also a subcommand, this will refer to its parent Command\n*/",
        "meta": {
            "range": [
                299,
                30672
            ],
            "filename": "Command.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007532",
                "name": "Command",
                "type": "ClassDeclaration",
                "paramnames": [
                    "label",
                    "generator",
                    "options",
                    "parentCommand"
                ]
            }
        },
        "name": "Command",
        "longname": "Command",
        "kind": "class",
        "classdesc": "Represents an command framework command",
        "scope": "global",
        "description": "Register a command",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The command label",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String",
                        "Array.<(function()|String)>"
                    ]
                },
                "description": "A response string, array of functions or strings, or function that generates a string or array of strings when called.\nIf a function is passed, the function will be passed a Message object and an array of command arguments. The Message object will have an additional property `prefix`, which is the prefix used in the command.\n`generator(msg, args)`",
                "name": "generator"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Command options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of command aliases",
                "name": "options.aliases"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If arguments are required or not",
                "name": "options.argsRequired"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the command label (and aliases) is case insensitive or not",
                "name": "options.caseInsensitive"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The cooldown between command usage in milliseconds",
                "name": "options.cooldown"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "A set of factors that limit where cooldowns are active",
                "name": "options.cooldownExclusions"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of user IDs representing users that are not affected by cooldowns.",
                "name": "options.cooldownExclusions.userIDs"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of guild IDs representing guilds that are not affected by cooldowns.",
                "name": "options.cooldownExclusions.guildIDs"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of channel IDs representing channels that are not affected by cooldowns.",
                "name": "options.cooldownExclusions.channelIDs"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show when the command is on cooldown.  The function is passed the Message object as a parameter.",
                "name": "options.cooldownMessage"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.",
                "name": "option.cooldownReturns"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "Default subcommand options. This object takes the same options as a normal Command",
                "name": "options.defaultSubcommandOptions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to delete the user command message or not",
                "name": "options.deleteCommand"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"No description\"",
                "description": "A short description of the command to show in the default help command",
                "name": "options.description"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to prevent the command from being used in guilds or not",
                "name": "options.dmOnly"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show if the execution of the command handler somehow fails.  The function is passed the Message object as a parameter.",
                "name": "options.errorMessage"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"No full description\"",
                "description": "A detailed description of the command to show in the default help command",
                "name": "options.fullDescription"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to prevent the command from being used in Direct Messages or not",
                "name": "options.guildOnly"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the command should be hidden from the default help command list.",
                "name": "options.hidden"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A set of functions to be executed at different times throughout the command's processing",
                "name": "options.hooks"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.",
                "name": "options.hooks.preCommand"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.",
                "name": "options.hooks.postCheck"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.",
                "name": "options.hooks.postExecution"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.",
                "name": "options.hooks.postCommand"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show when a command was improperly used.  The function is passed the Message object as a parameter.",
                "name": "options.invalidUsageMessage"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show when the user doesn't have permissions to use the command.  The function is passed the Message object as a parameter.",
                "name": "options.permissionMessage"
            },
            {
                "type": {
                    "names": [
                        "Array.<{emoji: String, type: String, response: (function()|String|Array.<(function()|String)>)}>"
                    ]
                },
                "optional": true,
                "description": "An array of objects specifying reaction buttons\n`emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n`type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n`response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n`filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response",
                "name": "options.reactionButtons"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 60000,
                "description": "Time (in milliseconds) to wait before invalidating the command's reaction buttons",
                "name": "options.reactionButtonTimeout"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A set of factors that limit who can call the command",
                "name": "options.requirements"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array or a function that returns an array of user IDs representing users that can call the command.  The function is passed the Message object as a parameter.",
                "name": "options.requirements.userIDs"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An object or a function that returns an object containing permission keys the user must match to use the command.  The function is passed the Message object as a parameter.\ni.e.:\n```\n{\n  \"administrator\": false,\n  \"manageMessages\": true\n}\n```\nIn the above example, the user must not have administrator permissions, but must have manageMessages to use the command",
                "name": "options.requirements.permissions"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array or a function that returns an array of role IDs that would allow a user to use the command.  The function is passed the Message object as a parameter.",
                "name": "options.requirements.roleIDs"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array or a function that returns an array of role names that would allow a user to use the command.  The function is passed the Message object as a parameter.",
                "name": "options.requirements.roleNames"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that accepts a message and returns true if the command should be run",
                "name": "options.requirements.custom"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not to restart a command's cooldown every time it's used.",
                "name": "option.restartCooldown"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Details on how to call the command to show in the default help command",
                "name": "options.usage"
            }
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping subcommand labels to Command objects",
                "name": "subcommands"
            },
            {
                "type": {
                    "names": [
                        "Command"
                    ]
                },
                "nullable": true,
                "description": "If this command is also a subcommand, this will refer to its parent Command",
                "name": "parentCommand"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7520,
                7554
            ],
            "filename": "Command.js",
            "lineno": 67,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007544",
                "name": "this.parentCommand",
                "type": "Identifier",
                "value": "parentCommand",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "parentCommand",
        "longname": "Command#parentCommand",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7564,
                7582
            ],
            "filename": "Command.js",
            "lineno": 68,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007550",
                "name": "this.label",
                "type": "Identifier",
                "value": "label",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "label",
        "longname": "Command#label",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7592,
                7650
            ],
            "filename": "Command.js",
            "lineno": 69,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007556",
                "name": "this.description",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "description",
        "longname": "Command#description",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7660,
                7731
            ],
            "filename": "Command.js",
            "lineno": 70,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007566",
                "name": "this.fullDescription",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "fullDescription",
        "longname": "Command#fullDescription",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7741,
                7773
            ],
            "filename": "Command.js",
            "lineno": 71,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007576",
                "name": "this.usage",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "usage",
        "longname": "Command#usage",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7783,
                7819
            ],
            "filename": "Command.js",
            "lineno": 72,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007586",
                "name": "this.aliases",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "aliases",
        "longname": "Command#aliases",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7829,
                7877
            ],
            "filename": "Command.js",
            "lineno": 73,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007596",
                "name": "this.caseInsensitive",
                "type": "UnaryExpression",
                "value": "!!options.caseInsensitive",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caseInsensitive",
        "longname": "Command#caseInsensitive",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7887,
                7919
            ],
            "filename": "Command.js",
            "lineno": 74,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007606",
                "name": "this.hooks",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "hooks",
        "longname": "Command#hooks",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7929,
                7975
            ],
            "filename": "Command.js",
            "lineno": 75,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007616",
                "name": "this.requirements",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "requirements",
        "longname": "Command#requirements",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8030,
                8060
            ],
            "filename": "Command.js",
            "lineno": 77,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007634",
                "name": "this.requirements.userIDs",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "userIDs",
        "longname": "Command#requirements.userIDs",
        "kind": "member",
        "memberof": "Command#requirements",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8129,
                8163
            ],
            "filename": "Command.js",
            "lineno": 80,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007650",
                "name": "this.requirements.permissions",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "permissions",
        "longname": "Command#requirements.permissions",
        "kind": "member",
        "memberof": "Command#requirements",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8183,
                8227
            ],
            "filename": "Command.js",
            "lineno": 82,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007658",
                "name": "this.deleteCommand",
                "type": "UnaryExpression",
                "value": "!!options.deleteCommand",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "deleteCommand",
        "longname": "Command#deleteCommand",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8237,
                8279
            ],
            "filename": "Command.js",
            "lineno": 83,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007668",
                "name": "this.argsRequired",
                "type": "UnaryExpression",
                "value": "!!options.argsRequired",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "argsRequired",
        "longname": "Command#argsRequired",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8289,
                8325
            ],
            "filename": "Command.js",
            "lineno": 84,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007678",
                "name": "this.guildOnly",
                "type": "UnaryExpression",
                "value": "!!options.guildOnly",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildOnly",
        "longname": "Command#guildOnly",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8335,
                8365
            ],
            "filename": "Command.js",
            "lineno": 85,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007688",
                "name": "this.dmOnly",
                "type": "UnaryExpression",
                "value": "!!options.dmOnly",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "dmOnly",
        "longname": "Command#dmOnly",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8375,
                8412
            ],
            "filename": "Command.js",
            "lineno": 86,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007698",
                "name": "this.cooldown",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cooldown",
        "longname": "Command#cooldown",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8422,
                8480
            ],
            "filename": "Command.js",
            "lineno": 87,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007708",
                "name": "this.cooldownExclusions",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cooldownExclusions",
        "longname": "Command#cooldownExclusions",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8541,
                8577
            ],
            "filename": "Command.js",
            "lineno": 89,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007726",
                "name": "this.cooldownExclusions.userIDs",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "userIDs",
        "longname": "Command#cooldownExclusions.userIDs",
        "kind": "member",
        "memberof": "Command#cooldownExclusions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8649,
                8686
            ],
            "filename": "Command.js",
            "lineno": 92,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007742",
                "name": "this.cooldownExclusions.guildIDs",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildIDs",
        "longname": "Command#cooldownExclusions.guildIDs",
        "kind": "member",
        "memberof": "Command#cooldownExclusions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8760,
                8799
            ],
            "filename": "Command.js",
            "lineno": 95,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007758",
                "name": "this.cooldownExclusions.channelIDs",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channelIDs",
        "longname": "Command#cooldownExclusions.channelIDs",
        "kind": "member",
        "memberof": "Command#cooldownExclusions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8819,
                8867
            ],
            "filename": "Command.js",
            "lineno": 97,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007766",
                "name": "this.restartCooldown",
                "type": "UnaryExpression",
                "value": "!!options.restartCooldown",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "restartCooldown",
        "longname": "Command#restartCooldown",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8877,
                8928
            ],
            "filename": "Command.js",
            "lineno": 98,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007776",
                "name": "this.cooldownReturns",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cooldownReturns",
        "longname": "Command#cooldownReturns",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8938,
                8993
            ],
            "filename": "Command.js",
            "lineno": 99,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007786",
                "name": "this.cooldownMessage",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cooldownMessage",
        "longname": "Command#cooldownMessage",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9003,
                9066
            ],
            "filename": "Command.js",
            "lineno": 100,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007796",
                "name": "this.invalidUsageMessage",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "invalidUsageMessage",
        "longname": "Command#invalidUsageMessage",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9076,
                9135
            ],
            "filename": "Command.js",
            "lineno": 101,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007806",
                "name": "this.permissionMessage",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "permissionMessage",
        "longname": "Command#permissionMessage",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9145,
                9191
            ],
            "filename": "Command.js",
            "lineno": 102,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007816",
                "name": "this.errorMessage",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "errorMessage",
        "longname": "Command#errorMessage",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9201,
                10471
            ],
            "filename": "Command.js",
            "lineno": 103,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007826",
                "name": "this.reactionButtons",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reactionButtons",
        "longname": "Command#reactionButtons",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9369,
                9407
            ],
            "filename": "Command.js",
            "lineno": 105,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007853",
                "name": "button.execute",
                "type": "ArrowFunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "execute",
        "longname": "button.execute",
        "kind": "function",
        "memberof": "button",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9512,
                9953
            ],
            "filename": "Command.js",
            "lineno": 108,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007873",
                "name": "button.responses",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "responses",
        "longname": "button.responses",
        "kind": "member",
        "memberof": "button",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9971,
                10065
            ],
            "filename": "Command.js",
            "lineno": 117,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007915",
                "name": "button.execute",
                "type": "ArrowFunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "execute",
        "longname": "button.execute",
        "kind": "function",
        "memberof": "button",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10177,
                10209
            ],
            "filename": "Command.js",
            "lineno": 120,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007950",
                "name": "button.execute",
                "type": "MemberExpression",
                "value": "button.response",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "execute",
        "longname": "button.execute",
        "kind": "member",
        "memberof": "button",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10481,
                10548
            ],
            "filename": "Command.js",
            "lineno": 128,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007978",
                "name": "this.reactionButtonTimeout",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reactionButtonTimeout",
        "longname": "Command#reactionButtonTimeout",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10596,
                10628
            ],
            "filename": "Command.js",
            "lineno": 130,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100007995",
                "name": "this.usersOnCooldown",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "usersOnCooldown",
        "longname": "Command#usersOnCooldown",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10685,
                10711
            ],
            "filename": "Command.js",
            "lineno": 132,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008007",
                "name": "this.cooldownTimeouts",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cooldownTimeouts",
        "longname": "Command#cooldownTimeouts",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10782,
                10807
            ],
            "filename": "Command.js",
            "lineno": 135,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008018",
                "name": "this.cooldownAmounts",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cooldownAmounts",
        "longname": "Command#cooldownAmounts",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10889,
                10914
            ],
            "filename": "Command.js",
            "lineno": 139,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008030",
                "name": "this.response",
                "type": "Identifier",
                "value": "generator",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "response",
        "longname": "Command#response",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10928,
                10962
            ],
            "filename": "Command.js",
            "lineno": 140,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008036",
                "name": "this.execute",
                "type": "ArrowFunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "execute",
        "longname": "Command#execute",
        "kind": "function",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11022,
                11396
            ],
            "filename": "Command.js",
            "lineno": 142,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008052",
                "name": "this.responses",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "responses",
        "longname": "Command#responses",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11410,
                11498
            ],
            "filename": "Command.js",
            "lineno": 151,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008090",
                "name": "this.execute",
                "type": "ArrowFunctionExpression",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "execute",
        "longname": "Command#execute",
        "kind": "function",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11565,
                11589
            ],
            "filename": "Command.js",
            "lineno": 153,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008121",
                "name": "this.execute",
                "type": "Identifier",
                "value": "generator",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "execute",
        "longname": "Command#execute",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11693,
                11763
            ],
            "filename": "Command.js",
            "lineno": 157,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008132",
                "name": "this.defaultSubcommandOptions",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "defaultSubcommandOptions",
        "longname": "Command#defaultSubcommandOptions",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11774,
                11795
            ],
            "filename": "Command.js",
            "lineno": 159,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008142",
                "name": "this.subcommands",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "subcommands",
        "longname": "Command#subcommands",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11805,
                11832
            ],
            "filename": "Command.js",
            "lineno": 160,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008148",
                "name": "this.subcommandAliases",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "subcommandAliases",
        "longname": "Command#subcommandAliases",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11842,
                11872
            ],
            "filename": "Command.js",
            "lineno": 161,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008154",
                "name": "this.hidden",
                "type": "UnaryExpression",
                "value": "!!options.hidden",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "hidden",
        "longname": "Command#hidden",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11885,
                12003
            ],
            "filename": "Command.js",
            "lineno": 164,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008163",
                "name": "Command#fullLabel",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "fullLabel",
        "longname": "Command#fullLabel",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12009,
                14863
            ],
            "filename": "Command.js",
            "lineno": 168,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008187",
                "name": "Command#permissionCheck",
                "type": "MethodDefinition",
                "paramnames": [
                    "msg"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "permissionCheck",
        "longname": "Command#permissionCheck",
        "kind": "function",
        "memberof": "Command",
        "scope": "instance",
        "params": [],
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12398,
                12522
            ],
            "filename": "Command.js",
            "lineno": 178,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008234",
                "name": "userIDs",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "userIDs",
        "longname": "<anonymous>~userIDs",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12956,
                13117
            ],
            "filename": "Command.js",
            "lineno": 191,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008312",
                "name": "requiredPermissions",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "requiredPermissions",
        "longname": "<anonymous>~requiredPermissions",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13198,
                13252
            ],
            "filename": "Command.js",
            "lineno": 193,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008348",
                "name": "permissions",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "permissions",
        "longname": "<anonymous>~permissions",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13284,
                13294
            ],
            "filename": "Command.js",
            "lineno": 194,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008363",
                "name": "permission"
            }
        },
        "undocumented": true,
        "name": "permission",
        "longname": "<anonymous>~permission",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13520,
                13552
            ],
            "filename": "Command.js",
            "lineno": 201,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008378",
                "name": "roleIDs",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "roleIDs",
        "longname": "<anonymous>~roleIDs",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13620,
                13752
            ],
            "filename": "Command.js",
            "lineno": 203,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008395",
                "name": "requiredRoleIDs",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "requiredRoleIDs",
        "longname": "<anonymous>~requiredRoleIDs",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13929,
                13935
            ],
            "filename": "Command.js",
            "lineno": 207,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008433",
                "name": "roleID"
            }
        },
        "undocumented": true,
        "name": "roleID",
        "longname": "<anonymous>~roleID",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14170,
                14247
            ],
            "filename": "Command.js",
            "lineno": 214,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008455",
                "name": "roleNames",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "roleNames",
        "longname": "<anonymous>~roleNames",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14271,
                14411
            ],
            "filename": "Command.js",
            "lineno": 215,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008477",
                "name": "requiredRoleNames",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "requiredRoleNames",
        "longname": "<anonymous>~requiredRoleNames",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14584,
                14592
            ],
            "filename": "Command.js",
            "lineno": 219,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008515",
                "name": "roleName"
            }
        },
        "undocumented": true,
        "name": "roleName",
        "longname": "<anonymous>~roleName",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14869,
                15129
            ],
            "filename": "Command.js",
            "lineno": 231,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008538",
                "name": "Command#cooldownExclusionCheck",
                "type": "MethodDefinition",
                "paramnames": [
                    "msg"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "cooldownExclusionCheck",
        "longname": "Command#cooldownExclusionCheck",
        "kind": "function",
        "memberof": "Command",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15135,
                16279
            ],
            "filename": "Command.js",
            "lineno": 235,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008593",
                "name": "Command#cooldownCheck",
                "type": "MethodDefinition",
                "paramnames": [
                    "msg"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "cooldownCheck",
        "longname": "Command#cooldownCheck",
        "kind": "function",
        "memberof": "Command",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15315,
                15337
            ],
            "filename": "Command.js",
            "lineno": 241,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008608",
                "name": "userID",
                "type": "MemberExpression",
                "value": "msg.author.id"
            }
        },
        "undocumented": true,
        "name": "userID",
        "longname": "<anonymous>~userID",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15603,
                15744
            ],
            "filename": "Command.js",
            "lineno": 248,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008650",
                "name": "this.cooldownTimeouts[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cooldownTimeouts[undefined]",
        "longname": "Command#cooldownTimeouts[undefined]",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15843,
                15875
            ],
            "filename": "Command.js",
            "lineno": 255,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008679",
                "name": "this.cooldownAmounts[undefined]",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cooldownAmounts[undefined]",
        "longname": "Command#cooldownAmounts[undefined]",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15976,
                16109
            ],
            "filename": "Command.js",
            "lineno": 259,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008700",
                "name": "this.cooldownTimeouts[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cooldownTimeouts[undefined]",
        "longname": "Command#cooldownTimeouts[undefined]",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16285,
                20443
            ],
            "filename": "Command.js",
            "lineno": 270,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008740",
                "name": "Command#process",
                "type": "MethodDefinition",
                "paramnames": [
                    "args",
                    "msg"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "process",
        "longname": "Command#process",
        "kind": "function",
        "memberof": "Command",
        "scope": "instance",
        "params": [],
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16326,
                16452
            ],
            "filename": "Command.js",
            "lineno": 271,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008747",
                "name": "shouldDelete",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "shouldDelete",
        "longname": "<anonymous>~shouldDelete",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16509,
                16575
            ],
            "filename": "Command.js",
            "lineno": 274,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008784",
                "name": "response",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "response",
        "longname": "<anonymous>~response",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16620,
                16645
            ],
            "filename": "Command.js",
            "lineno": 276,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008803",
                "name": "msg",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "<anonymous>~msg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16663,
                16691
            ],
            "filename": "Command.js",
            "lineno": 277,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008811",
                "name": "args",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16730,
                16735
            ],
            "filename": "Command.js",
            "lineno": 281,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008819",
                "name": "reply"
            }
        },
        "undocumented": true,
        "name": "reply",
        "longname": "<anonymous>~reply",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16845,
                16917
            ],
            "filename": "Command.js",
            "lineno": 284,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008838",
                "name": "response",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "response",
        "longname": "<anonymous>~response",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16970,
                16995
            ],
            "filename": "Command.js",
            "lineno": 286,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008858",
                "name": "msg",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "<anonymous>~msg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17017,
                17045
            ],
            "filename": "Command.js",
            "lineno": 287,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008866",
                "name": "args",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17167,
                17274
            ],
            "filename": "Command.js",
            "lineno": 294,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008882",
                "name": "reply",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reply",
        "longname": "<anonymous>~reply",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17606,
                17677
            ],
            "filename": "Command.js",
            "lineno": 306,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008939",
                "name": "response",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "response",
        "longname": "<anonymous>~response",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17738,
                17763
            ],
            "filename": "Command.js",
            "lineno": 308,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008959",
                "name": "msg",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "<anonymous>~msg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17789,
                17817
            ],
            "filename": "Command.js",
            "lineno": 309,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008967",
                "name": "args",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17875,
                17988
            ],
            "filename": "Command.js",
            "lineno": 312,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100008975",
                "name": "reply",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reply",
        "longname": "<anonymous>~reply",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18332,
                18403
            ],
            "filename": "Command.js",
            "lineno": 320,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009040",
                "name": "response",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "response",
        "longname": "<anonymous>~response",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18464,
                18489
            ],
            "filename": "Command.js",
            "lineno": 322,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009060",
                "name": "msg",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "<anonymous>~msg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18515,
                18543
            ],
            "filename": "Command.js",
            "lineno": 323,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009068",
                "name": "args",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18738,
                18839
            ],
            "filename": "Command.js",
            "lineno": 327,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009100",
                "name": "reply",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reply",
        "longname": "<anonymous>~reply",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19084,
                19134
            ],
            "filename": "Command.js",
            "lineno": 336,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009137",
                "name": "label",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "label",
        "longname": "<anonymous>~label",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19148,
                19158
            ],
            "filename": "Command.js",
            "lineno": 337,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009151",
                "name": "subcommand"
            }
        },
        "undocumented": true,
        "name": "subcommand",
        "longname": "<anonymous>~subcommand",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19172,
                19208
            ],
            "filename": "Command.js",
            "lineno": 338,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009156",
                "name": "subcommand",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.subcommands[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "subcommand",
        "longname": "<anonymous>~subcommand",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19229,
                19279
            ],
            "filename": "Command.js",
            "lineno": 338,
            "columnno": 69,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009166",
                "name": "subcommand",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.subcommands[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "subcommand",
        "longname": "<anonymous>~subcommand",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19341,
                19365
            ],
            "filename": "Command.js",
            "lineno": 339,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009182",
                "name": "msg.command",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "subcommand",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "<anonymous>~msg.command",
        "kind": "member",
        "memberof": "<anonymous>~msg",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19699,
                19771
            ],
            "filename": "Command.js",
            "lineno": 347,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009229",
                "name": "response",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "response",
        "longname": "<anonymous>~response",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19832,
                19857
            ],
            "filename": "Command.js",
            "lineno": 349,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009249",
                "name": "msg",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "<anonymous>~msg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19883,
                19911
            ],
            "filename": "Command.js",
            "lineno": 350,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009257",
                "name": "args",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20106,
                20207
            ],
            "filename": "Command.js",
            "lineno": 354,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009289",
                "name": "reply",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reply",
        "longname": "<anonymous>~reply",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20449,
                20926
            ],
            "filename": "Command.js",
            "lineno": 365,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009325",
                "name": "Command#executeCommand",
                "type": "MethodDefinition",
                "paramnames": [
                    "msg",
                    "args"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "executeCommand",
        "longname": "Command#executeCommand",
        "kind": "function",
        "memberof": "Command",
        "scope": "instance",
        "params": [],
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20536,
                20607
            ],
            "filename": "Command.js",
            "lineno": 367,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009339",
                "name": "response",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "response",
        "longname": "<anonymous>~response",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20652,
                20677
            ],
            "filename": "Command.js",
            "lineno": 369,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009359",
                "name": "msg",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "msg",
        "longname": "<anonymous>~msg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20695,
                20723
            ],
            "filename": "Command.js",
            "lineno": 370,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009367",
                "name": "args",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20764,
                20793
            ],
            "filename": "Command.js",
            "lineno": 374,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009375",
                "name": "ret",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ret",
        "longname": "<anonymous>~ret",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n    * Register an alias for a subcommand\n    * @arg {String} alias The alias\n    * @arg {String} label The original subcommand label\n    */",
        "meta": {
            "range": [
                21080,
                21464
            ],
            "filename": "Command.js",
            "lineno": 388,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009402",
                "name": "Command#registerSubcommandAlias",
                "type": "MethodDefinition",
                "paramnames": [
                    "alias",
                    "label"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Register an alias for a subcommand",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The alias",
                "name": "alias"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The original subcommand label",
                "name": "label"
            }
        ],
        "name": "registerSubcommandAlias",
        "longname": "Command#registerSubcommandAlias",
        "kind": "function",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21367,
                21404
            ],
            "filename": "Command.js",
            "lineno": 395,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009437",
                "name": "this.subcommandAliases[undefined]",
                "type": "Identifier",
                "value": "label",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "subcommandAliases[undefined]",
        "longname": "Command#subcommandAliases[undefined]",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Register a subcommand\n    * @arg {String} label The subcommand label\n    * @arg {Function | String | Array<Function | String>} generator A response string, array of functions or strings, or function that generates a string or array of strings when called.\n    * If a function is passed, the function will be passed a Message object and an array of subcommand arguments. The Message object will have an additional property `prefix`, which is the prefix used in the subcommand.\n    * `generator(msg, args)`\n    * @arg {Object} [options] Command options\n    * @arg {Array<String>} [options.aliases] An array of command aliases\n    * @arg {Boolean} [options.argsRequired=false] If arguments are required or not\n    * @arg {Boolean} [options.caseInsensitive=false] Whether the command label (and aliases) is case insensitive or not\n    * @arg {Number} [options.cooldown] The cooldown between command usage in milliseconds\n    * @arg {Object} [options.cooldownExclusions={}] A set of factors that limit where cooldowns are active\n    * @arg {Array<String>} [options.cooldownExclusions.userIDs] An array of user IDs representing users that are not affected by cooldowns.\n    * @arg {Array<String>} [options.cooldownExclusions.guildIDs] An array of guild IDs representing guilds that are not affected by cooldowns.\n    * @arg {Array<String>} [options.cooldownExclusions.channelIDs] An array of channel IDs representing channels that are not affected by cooldowns.\n    * @arg {Function | String} [options.cooldownMessage] A string or a function that returns a string to show when the command is on cooldown\n    * @arg {Number} [option.cooldownReturns=0] Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.\n    * @arg {Object} [options.defaultSubcommandOptions={}] Default subcommand options. This object takes the same options as a normal Command\n    * @arg {Boolean} [options.deleteCommand=false] Whether to delete the user command message or not\n    * @arg {String} [options.description=\"No description\"] A short description of the command to show in the default help command\n    * @arg {Boolean} [options.dmOnly=false] Whether to prevent the command from being used in guilds or not\n    * @arg {Function | String} [options.errorMessage] A string or a function that returns a string to show if the execution of the command handler somehow fails.\n    * @arg {String} [options.fullDescription=\"No full description\"] A detailed description of the command to show in the default help command\n    * @arg {Boolean} [options.guildOnly=false] Whether to prevent the command from being used in Direct Messages or not\n    * @arg {Boolean} [options.hidden=false] Whether or not the command should be hidden from the default help command list\n    * @arg {Object} [options.hooks] A set of functions to be executed at different times throughout the command's processing\n    * @arg {Function} [options.hooks.preCommand] A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.\n    * @arg {Function} [options.hooks.postCheck] A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.\n    * @arg {Function} [options.hooks.postExecution] A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.\n    * @arg {Function} [options.hooks.postCommand] A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.\n    * @arg {Function | String} [options.invalidUsageMessage] A string or a function that returns a string to show when a command was improperly used\n    * @arg {Function | String} [options.permissionMessage] A string or a function that returns a string to show when the user doesn't have permissions to use the command\n    * @arg {Array<{emoji: String, type: String, response: (Function | String | Array<Function | String>)}>} [options.reactionButtons] An array of objects specifying reaction buttons\n    * `emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n    * `type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n    * `response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n    * `filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response\n    * @arg {Number} [options.reactionButtonTimeout=60000] Time (in milliseconds) to wait before invalidating the command's reaction buttons\n    * @arg {Object} [options.requirements] A set of factors that limit who can call the command\n    * @arg {Function | Array<String>} [options.requirements.userIDs] An array or a function that returns an array of user IDs representing users that can call the command\n    * @arg {Function | Object} [options.requirements.permissions] An object or a function that returns an object containing permission keys the user must match to use the command\n    * i.e.:\n    * ```\n    * {\n    *   \"administrator\": false,\n    *   \"manageMessages\": true\n    * }\n    * ```\n    * In the above example, the user must not have administrator permissions, but must have manageMessages to use the command\n    * @arg {Function | Array<String>} [options.requirements.roleIDs] An array or a function that returns an array of role IDs that would allow a user to use the command\n    * @arg {Function | Array<String>} [options.requirements.roleNames] An array or a function that returns an array of role names that would allow a user to use the command\n    * @arg {Function} [options.requirements.custom] A function that accepts a message and returns true if the command should be run\n    * @arg {Boolean} [option.restartCooldown=false] Whether or not to restart a command's cooldown every time it's used.\n    * @arg {String} [options.usage] Details on how to call the command to show in the default help command\n    * @returns {Command}\n    */",
        "meta": {
            "range": [
                28164,
                29251
            ],
            "filename": "Command.js",
            "lineno": 455,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009456",
                "name": "Command#registerSubcommand",
                "type": "MethodDefinition",
                "paramnames": [
                    "label",
                    "generator",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Register a subcommand",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The subcommand label",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String",
                        "Array.<(function()|String)>"
                    ]
                },
                "description": "A response string, array of functions or strings, or function that generates a string or array of strings when called.\nIf a function is passed, the function will be passed a Message object and an array of subcommand arguments. The Message object will have an additional property `prefix`, which is the prefix used in the subcommand.\n`generator(msg, args)`",
                "name": "generator"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Command options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of command aliases",
                "name": "options.aliases"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If arguments are required or not",
                "name": "options.argsRequired"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the command label (and aliases) is case insensitive or not",
                "name": "options.caseInsensitive"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The cooldown between command usage in milliseconds",
                "name": "options.cooldown"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "A set of factors that limit where cooldowns are active",
                "name": "options.cooldownExclusions"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of user IDs representing users that are not affected by cooldowns.",
                "name": "options.cooldownExclusions.userIDs"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of guild IDs representing guilds that are not affected by cooldowns.",
                "name": "options.cooldownExclusions.guildIDs"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of channel IDs representing channels that are not affected by cooldowns.",
                "name": "options.cooldownExclusions.channelIDs"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show when the command is on cooldown",
                "name": "options.cooldownMessage"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.",
                "name": "option.cooldownReturns"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "Default subcommand options. This object takes the same options as a normal Command",
                "name": "options.defaultSubcommandOptions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to delete the user command message or not",
                "name": "options.deleteCommand"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"No description\"",
                "description": "A short description of the command to show in the default help command",
                "name": "options.description"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to prevent the command from being used in guilds or not",
                "name": "options.dmOnly"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show if the execution of the command handler somehow fails.",
                "name": "options.errorMessage"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"No full description\"",
                "description": "A detailed description of the command to show in the default help command",
                "name": "options.fullDescription"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to prevent the command from being used in Direct Messages or not",
                "name": "options.guildOnly"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the command should be hidden from the default help command list",
                "name": "options.hidden"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A set of functions to be executed at different times throughout the command's processing",
                "name": "options.hooks"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.",
                "name": "options.hooks.preCommand"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.",
                "name": "options.hooks.postCheck"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.",
                "name": "options.hooks.postExecution"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.",
                "name": "options.hooks.postCommand"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show when a command was improperly used",
                "name": "options.invalidUsageMessage"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show when the user doesn't have permissions to use the command",
                "name": "options.permissionMessage"
            },
            {
                "type": {
                    "names": [
                        "Array.<{emoji: String, type: String, response: (function()|String|Array.<(function()|String)>)}>"
                    ]
                },
                "optional": true,
                "description": "An array of objects specifying reaction buttons\n`emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n`type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n`response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n`filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response",
                "name": "options.reactionButtons"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 60000,
                "description": "Time (in milliseconds) to wait before invalidating the command's reaction buttons",
                "name": "options.reactionButtonTimeout"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A set of factors that limit who can call the command",
                "name": "options.requirements"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array or a function that returns an array of user IDs representing users that can call the command",
                "name": "options.requirements.userIDs"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An object or a function that returns an object containing permission keys the user must match to use the command\ni.e.:\n```\n{\n  \"administrator\": false,\n  \"manageMessages\": true\n}\n```\nIn the above example, the user must not have administrator permissions, but must have manageMessages to use the command",
                "name": "options.requirements.permissions"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array or a function that returns an array of role IDs that would allow a user to use the command",
                "name": "options.requirements.roleIDs"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array or a function that returns an array of role names that would allow a user to use the command",
                "name": "options.requirements.roleNames"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that accepts a message and returns true if the command should be run",
                "name": "options.requirements.custom"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not to restart a command's cooldown every time it's used.",
                "name": "option.restartCooldown"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Details on how to call the command to show in the default help command",
                "name": "options.usage"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Command"
                    ]
                }
            }
        ],
        "name": "registerSubcommand",
        "longname": "Command#registerSubcommand",
        "kind": "function",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28472,
                28545
            ],
            "filename": "Command.js",
            "lineno": 462,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009490",
                "name": "options.defaultSubcommandOptions",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "defaultSubcommandOptions",
        "longname": "options.defaultSubcommandOptions",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28565,
                28568
            ],
            "filename": "Command.js",
            "lineno": 463,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009501",
                "name": "key"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28719,
                28768
            ],
            "filename": "Command.js",
            "lineno": 465,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009523",
                "name": "options[undefined]",
                "type": "MemberExpression",
                "value": "this.defaultSubcommandOptions[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "options[undefined]",
        "longname": "options[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28786,
                28860
            ],
            "filename": "Command.js",
            "lineno": 466,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009533",
                "name": "options.defaultSubcommandOptions[undefined]",
                "type": "MemberExpression",
                "value": "this.defaultSubcommandOptions[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "defaultSubcommandOptions[undefined]",
        "longname": "options.defaultSubcommandOptions[undefined]",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28894,
                28964
            ],
            "filename": "Command.js",
            "lineno": 469,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009545",
                "name": "label",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "label",
        "longname": "<anonymous>~label",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28974,
                29044
            ],
            "filename": "Command.js",
            "lineno": 470,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009559",
                "name": "this.subcommands[undefined]",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "subcommands[undefined]",
        "longname": "Command#subcommands[undefined]",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29141,
                29178
            ],
            "filename": "Command.js",
            "lineno": 473,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009587",
                "name": "this.subcommandAliases[undefined]",
                "type": "Identifier",
                "value": "label",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "subcommandAliases[undefined]",
        "longname": "Command#subcommandAliases[undefined]",
        "kind": "member",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Unregister a subcommand\n    * @arg {String} label The subcommand label\n    */",
        "meta": {
            "range": [
                29349,
                29693
            ],
            "filename": "Command.js",
            "lineno": 483,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009600",
                "name": "Command#unregisterSubcommand",
                "type": "MethodDefinition",
                "paramnames": [
                    "label"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Unregister a subcommand",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The subcommand label",
                "name": "label"
            }
        ],
        "name": "unregisterSubcommand",
        "longname": "Command#unregisterSubcommand",
        "kind": "function",
        "memberof": "Command",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29393,
                29433
            ],
            "filename": "Command.js",
            "lineno": 484,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009606",
                "name": "original",
                "type": "MemberExpression",
                "value": "this.subcommandAliases[undefined]"
            }
        },
        "undocumented": true,
        "name": "original",
        "longname": "<anonymous>~original",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29699,
                29759
            ],
            "filename": "Command.js",
            "lineno": 493,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009654",
                "name": "Command#toString",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "Command#toString",
        "kind": "function",
        "memberof": "Command",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29765,
                30670
            ],
            "filename": "Command.js",
            "lineno": 497,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009665",
                "name": "Command#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Command#toJSON",
        "kind": "function",
        "memberof": "Command",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30674,
                30698
            ],
            "filename": "Command.js",
            "lineno": 532,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009714",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Command",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                50
            ],
            "filename": "CommandClient.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009724",
                "name": "Client",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Client",
        "longname": "Client",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58,
                88
            ],
            "filename": "CommandClient.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009730",
                "name": "Command",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Command",
        "longname": "Command",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                96,
                138
            ],
            "filename": "CommandClient.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009736",
                "name": "Message",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Message",
        "longname": "Message",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents an Eris client with the command framework\n* @extends Client\n* @prop {Object} commandAliases Object mapping command label aliases to command labels\n* @prop {Object} commands Object mapping command labels to Command objects\n* @prop {Object} guildPrefixes Object mapping guild IDs to arrays of guild-specific prefixes\n*/",
        "meta": {
            "range": [
                476,
                24851
            ],
            "filename": "CommandClient.js",
            "lineno": 14,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009741",
                "name": "CommandClient",
                "type": "ClassDeclaration",
                "paramnames": [
                    "token",
                    "options",
                    "commandOptions"
                ]
            }
        },
        "classdesc": "Represents an Eris client with the command framework",
        "augments": [
            "Client"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping command label aliases to command labels",
                "name": "commandAliases"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping command labels to Command objects",
                "name": "commands"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping guild IDs to arrays of guild-specific prefixes",
                "name": "guildPrefixes"
            }
        ],
        "name": "CommandClient",
        "longname": "CommandClient",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "/**\n    * Create a CommandClient\n    * @arg {String} token bot token\n    * @arg {Object} [options] Eris options (same as Client)\n    * @arg {Object} [commandOptions] Command options\n    * @arg {Boolean} [commandOptions.defaultHelpCommand=true] Whether to register the default help command or not\n    * @arg {String} [commandOptions.description=\"An Eris-based Discord bot\"] The description to show in the default help command\n    * @arg {Boolean} [commandOptions.ignoreBots=true] Whether to ignore bot accounts or not\n    * @arg {Boolean} [commandOptions.ignoreSelf=true] Whether to ignore the bot's own account or not\n    * @arg {String} [commandOptions.name=\"<Bot username>\"] The bot name to show in the default help command\n    * @arg {String} [commandOptions.owner=\"an unknown user\"] The owner to show in the default help command\n    * @arg {String | Array<String>} [commandOptions.prefix=\"@mention \"] The bot prefix. Can be either an array of prefixes or a single prefix. \"@mention\" will be automatically replaced with the bot's actual mention\n    * @arg {Object} [commandOptions.defaultCommandOptions={}] Default command options. This object takes the same options as a normal Command\n    */",
        "meta": {
            "range": [
                1718,
                6670
            ],
            "filename": "CommandClient.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009745",
                "name": "CommandClient",
                "type": "MethodDefinition",
                "paramnames": [
                    "token",
                    "options",
                    "commandOptions"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a CommandClient",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "bot token",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Eris options (same as Client)",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Command options",
                "name": "commandOptions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to register the default help command or not",
                "name": "commandOptions.defaultHelpCommand"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"An Eris-based Discord bot\"",
                "description": "The description to show in the default help command",
                "name": "commandOptions.description"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to ignore bot accounts or not",
                "name": "commandOptions.ignoreBots"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to ignore the bot's own account or not",
                "name": "commandOptions.ignoreSelf"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"<Bot username>\"",
                "description": "The bot name to show in the default help command",
                "name": "commandOptions.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"an unknown user\"",
                "description": "The owner to show in the default help command",
                "name": "commandOptions.owner"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@mention \"",
                "description": "The bot prefix. Can be either an array of prefixes or a single prefix. \"@mention\" will be automatically replaced with the bot's actual mention",
                "name": "commandOptions.prefix"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "Default command options. This object takes the same options as a normal Command",
                "name": "commandOptions.defaultCommandOptions"
            }
        ],
        "name": "CommandClient",
        "longname": "CommandClient",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "/**\n* Represents an Eris client with the command framework\n* @extends Client\n* @prop {Object} commandAliases Object mapping command label aliases to command labels\n* @prop {Object} commands Object mapping command labels to Command objects\n* @prop {Object} guildPrefixes Object mapping guild IDs to arrays of guild-specific prefixes\n*/",
        "meta": {
            "range": [
                476,
                24851
            ],
            "filename": "CommandClient.js",
            "lineno": 14,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009741",
                "name": "CommandClient",
                "type": "ClassDeclaration",
                "paramnames": [
                    "token",
                    "options",
                    "commandOptions"
                ]
            }
        },
        "name": "CommandClient",
        "longname": "CommandClient",
        "kind": "class",
        "classdesc": "Represents an Eris client with the command framework",
        "augments": [
            "Client"
        ],
        "scope": "global",
        "description": "Create a CommandClient",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "bot token",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Eris options (same as Client)",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Command options",
                "name": "commandOptions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to register the default help command or not",
                "name": "commandOptions.defaultHelpCommand"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"An Eris-based Discord bot\"",
                "description": "The description to show in the default help command",
                "name": "commandOptions.description"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to ignore bot accounts or not",
                "name": "commandOptions.ignoreBots"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to ignore the bot's own account or not",
                "name": "commandOptions.ignoreSelf"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"<Bot username>\"",
                "description": "The bot name to show in the default help command",
                "name": "commandOptions.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"an unknown user\"",
                "description": "The owner to show in the default help command",
                "name": "commandOptions.owner"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@mention \"",
                "description": "The bot prefix. Can be either an array of prefixes or a single prefix. \"@mention\" will be automatically replaced with the bot's actual mention",
                "name": "commandOptions.prefix"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "Default command options. This object takes the same options as a normal Command",
                "name": "commandOptions.defaultCommandOptions"
            }
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping command label aliases to command labels",
                "name": "commandAliases"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping command labels to Command objects",
                "name": "commands"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object mapping guild IDs to arrays of guild-specific prefixes",
                "name": "guildPrefixes"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1803,
                2152
            ],
            "filename": "CommandClient.js",
            "lineno": 31,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009758",
                "name": "this.commandOptions",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "commandOptions",
        "longname": "CommandClient#commandOptions",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1853,
                1877
            ],
            "filename": "CommandClient.js",
            "lineno": 32,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009767",
                "name": "defaultHelpCommand",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "defaultHelpCommand",
        "longname": "defaultHelpCommand",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1891,
                1931
            ],
            "filename": "CommandClient.js",
            "lineno": 33,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009769",
                "name": "description",
                "type": "Literal",
                "value": "An Eris-based Discord bot"
            }
        },
        "undocumented": true,
        "name": "description",
        "longname": "description",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1945,
                1961
            ],
            "filename": "CommandClient.js",
            "lineno": 34,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009771",
                "name": "ignoreBots",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "ignoreBots",
        "longname": "ignoreBots",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1975,
                1991
            ],
            "filename": "CommandClient.js",
            "lineno": 35,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009773",
                "name": "ignoreSelf",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "ignoreSelf",
        "longname": "ignoreSelf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2005,
                2015
            ],
            "filename": "CommandClient.js",
            "lineno": 36,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009775",
                "name": "name",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2029,
                2053
            ],
            "filename": "CommandClient.js",
            "lineno": 37,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009777",
                "name": "owner",
                "type": "Literal",
                "value": "an unknown user"
            }
        },
        "undocumented": true,
        "name": "owner",
        "longname": "owner",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2067,
                2086
            ],
            "filename": "CommandClient.js",
            "lineno": 38,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009779",
                "name": "prefix",
                "type": "Literal",
                "value": "@mention "
            }
        },
        "undocumented": true,
        "name": "prefix",
        "longname": "prefix",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2100,
                2125
            ],
            "filename": "CommandClient.js",
            "lineno": 39,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009781",
                "name": "defaultCommandOptions",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "defaultCommandOptions",
        "longname": "defaultCommandOptions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2162,
                2185
            ],
            "filename": "CommandClient.js",
            "lineno": 41,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009785",
                "name": "this.guildPrefixes",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildPrefixes",
        "longname": "CommandClient#guildPrefixes",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2195,
                2213
            ],
            "filename": "CommandClient.js",
            "lineno": 42,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009791",
                "name": "this.commands",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "commands",
        "longname": "CommandClient#commands",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2223,
                2247
            ],
            "filename": "CommandClient.js",
            "lineno": 43,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009797",
                "name": "this.commandAliases",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "commandAliases",
        "longname": "CommandClient#commandAliases",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2257,
                2281
            ],
            "filename": "CommandClient.js",
            "lineno": 44,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009803",
                "name": "this.activeMessages",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "activeMessages",
        "longname": "CommandClient#activeMessages",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2339,
                2359
            ],
            "filename": "CommandClient.js",
            "lineno": 47,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009817",
                "name": "this.preReady",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "preReady",
        "longname": "CommandClient#preReady",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2421,
                2475
            ],
            "filename": "CommandClient.js",
            "lineno": 49,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009831",
                "name": "this.commandOptions.name",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "CommandClient#commandOptions.name",
        "kind": "member",
        "memberof": "CommandClient#commandOptions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2575,
                2580
            ],
            "filename": "CommandClient.js",
            "lineno": 52,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009858",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2648,
                2749
            ],
            "filename": "CommandClient.js",
            "lineno": 53,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009874",
                "name": "this.commandOptions.prefix[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prefix[undefined]",
        "longname": "CommandClient#commandOptions.prefix[undefined]",
        "kind": "member",
        "memberof": "CommandClient#commandOptions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2806,
                2901
            ],
            "filename": "CommandClient.js",
            "lineno": 56,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009900",
                "name": "this.commandOptions.prefix",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prefix",
        "longname": "CommandClient#commandOptions.prefix",
        "kind": "member",
        "memberof": "CommandClient#commandOptions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2939,
                2942
            ],
            "filename": "CommandClient.js",
            "lineno": 58,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009922",
                "name": "key"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3070,
                3075
            ],
            "filename": "CommandClient.js",
            "lineno": 60,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009945",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3144,
                3239
            ],
            "filename": "CommandClient.js",
            "lineno": 61,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009961",
                "name": "this.guildPrefixes[undefined][undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildPrefixes[undefined][undefined]",
        "longname": "CommandClient#guildPrefixes[undefined][undefined]",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3308,
                3397
            ],
            "filename": "CommandClient.js",
            "lineno": 64,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100009987",
                "name": "this.guildPrefixes[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildPrefixes[undefined]",
        "longname": "CommandClient#guildPrefixes[undefined]",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3772,
                3783
            ],
            "filename": "CommandClient.js",
            "lineno": 76,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010052",
                "name": "result",
                "type": "Literal",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3847,
                3907
            ],
            "filename": "CommandClient.js",
            "lineno": 78,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010063",
                "name": "cur",
                "type": "MemberExpression",
                "value": "this.commands[undefined]"
            }
        },
        "undocumented": true,
        "name": "cur",
        "longname": "<anonymous>~cur",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4039,
                4044
            ],
            "filename": "CommandClient.js",
            "lineno": 82,
            "columnno": 25,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010089",
                "name": "label",
                "type": "Identifier",
                "value": "label"
            }
        },
        "undocumented": true,
        "name": "label",
        "longname": "label",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4081,
                4086
            ],
            "filename": "CommandClient.js",
            "lineno": 83,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010094",
                "name": "i",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4136,
                4200
            ],
            "filename": "CommandClient.js",
            "lineno": 84,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010106",
                "name": "cur",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "cur.subcommands[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cur",
        "longname": "<anonymous>~cur",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4343,
                4367
            ],
            "filename": "CommandClient.js",
            "lineno": 88,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010130",
                "name": "label",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "label",
        "longname": "<anonymous>~label",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4411,
                4485
            ],
            "filename": "CommandClient.js",
            "lineno": 90,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010139",
                "name": "result",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4560,
                4614
            ],
            "filename": "CommandClient.js",
            "lineno": 92,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010167",
                "name": "result",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4664,
                4706
            ],
            "filename": "CommandClient.js",
            "lineno": 94,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010180",
                "name": "subcommands",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "subcommands",
        "longname": "<anonymous>~subcommands",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4781,
                4813
            ],
            "filename": "CommandClient.js",
            "lineno": 96,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010197",
                "name": "result",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": "\n\n**Subcommands:**",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4849,
                4857
            ],
            "filename": "CommandClient.js",
            "lineno": 97,
            "columnno": 34,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010202",
                "name": "subLabel"
            }
        },
        "undocumented": true,
        "name": "subLabel",
        "longname": "<anonymous>~subLabel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5033,
                5107
            ],
            "filename": "CommandClient.js",
            "lineno": 99,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010226",
                "name": "result",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5232,
                5310
            ],
            "filename": "CommandClient.js",
            "lineno": 104,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010242",
                "name": "result",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5388,
                5433
            ],
            "filename": "CommandClient.js",
            "lineno": 106,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010266",
                "name": "result",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5477,
                5506
            ],
            "filename": "CommandClient.js",
            "lineno": 108,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010277",
                "name": "result",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": "\n**Commands:**\n",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5538,
                5543
            ],
            "filename": "CommandClient.js",
            "lineno": 109,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010282",
                "name": "label"
            }
        },
        "undocumented": true,
        "name": "label",
        "longname": "<anonymous>~label",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5759,
                5838
            ],
            "filename": "CommandClient.js",
            "lineno": 111,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010323",
                "name": "result",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5908,
                5982
            ],
            "filename": "CommandClient.js",
            "lineno": 114,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010342",
                "name": "result",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6066,
                6095
            ],
            "filename": "CommandClient.js",
            "lineno": 118,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010353",
                "name": "description",
                "type": "Literal",
                "value": "This help text"
            }
        },
        "undocumented": true,
        "name": "description",
        "longname": "description",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6113,
                6219
            ],
            "filename": "CommandClient.js",
            "lineno": 119,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010355",
                "name": "fullDescription",
                "type": "Literal",
                "value": "This command is used to view information of different bot commands, including this one."
            }
        },
        "undocumented": true,
        "name": "fullDescription",
        "longname": "fullDescription",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6333,
                6461
            ],
            "filename": "CommandClient.js",
            "lineno": 122,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010368",
                "name": "this.commandOptions.defaultCommandOptions.invalidUsageMessage",
                "type": "Literal",
                "value": "Invalid usage. Do `%prefix%help %label%` to view proper usage.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "invalidUsageMessage",
        "longname": "CommandClient#commandOptions.defaultCommandOptions.invalidUsageMessage",
        "kind": "member",
        "memberof": "CommandClient#commandOptions.defaultCommandOptions",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6573,
                6653
            ],
            "filename": "CommandClient.js",
            "lineno": 125,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010388",
                "name": "this.commandOptions.defaultCommandOptions.invalidUsageMessage",
                "type": "Literal",
                "value": "Invalid usage.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "invalidUsageMessage",
        "longname": "CommandClient#commandOptions.defaultCommandOptions.invalidUsageMessage",
        "kind": "member",
        "memberof": "CommandClient#commandOptions.defaultCommandOptions",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Checks the command client for a command based on the provided message\n    * @arg {Message} msg The message object from the message create event\n    */",
        "meta": {
            "range": [
                6841,
                9915
            ],
            "filename": "CommandClient.js",
            "lineno": 133,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010397",
                "name": "CommandClient#onMessageCreate",
                "type": "MethodDefinition",
                "paramnames": [
                    "msg"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Checks the command client for a command based on the provided message",
        "params": [
            {
                "type": {
                    "names": [
                        "Message"
                    ]
                },
                "description": "The message object from the message create event",
                "name": "msg"
            }
        ],
        "name": "onMessageCreate",
        "longname": "CommandClient#onMessageCreate",
        "kind": "function",
        "memberof": "CommandClient",
        "scope": "instance",
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7121,
                7140
            ],
            "filename": "CommandClient.js",
            "lineno": 142,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010444",
                "name": "msg.command",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "msg.command",
        "kind": "member",
        "memberof": "msg",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7281,
                7315
            ],
            "filename": "CommandClient.js",
            "lineno": 143,
            "columnno": 139,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010483",
                "name": "msg.prefix",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prefix",
        "longname": "msg.prefix",
        "kind": "member",
        "memberof": "msg",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7338,
                7428
            ],
            "filename": "CommandClient.js",
            "lineno": 144,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010494",
                "name": "args",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "<anonymous>~args",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7448,
                7468
            ],
            "filename": "CommandClient.js",
            "lineno": 145,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010520",
                "name": "label",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "label",
        "longname": "<anonymous>~label",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7488,
                7524
            ],
            "filename": "CommandClient.js",
            "lineno": 146,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010527",
                "name": "command",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "<anonymous>~command",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7582,
                7603
            ],
            "filename": "CommandClient.js",
            "lineno": 148,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010540",
                "name": "msg.command",
                "type": "Identifier",
                "value": "command",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "msg.command",
        "kind": "member",
        "memberof": "msg",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7651,
                7694
            ],
            "filename": "CommandClient.js",
            "lineno": 150,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010548",
                "name": "resp",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "resp",
        "longname": "<anonymous>~resp",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7820,
                7873
            ],
            "filename": "CommandClient.js",
            "lineno": 153,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010571",
                "name": "resp",
                "type": "AwaitExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "resp",
        "longname": "<anonymous>~resp",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8142,
                8515
            ],
            "filename": "CommandClient.js",
            "lineno": 157,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010610",
                "name": "this.activeMessages[undefined]",
                "type": "ObjectExpression",
                "value": "{\"args\":\"\",\"command\":\"\",\"timeout\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "activeMessages[undefined]",
        "longname": "CommandClient#activeMessages[undefined]",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8207,
                8217
            ],
            "filename": "CommandClient.js",
            "lineno": 158,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010619",
                "name": "args",
                "type": "Identifier",
                "value": "args"
            }
        },
        "undocumented": true,
        "name": "args",
        "longname": "CommandClient#activeMessages[undefined].args",
        "kind": "member",
        "memberof": "CommandClient#activeMessages[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8251,
                8271
            ],
            "filename": "CommandClient.js",
            "lineno": 159,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010621",
                "name": "command",
                "type": "MemberExpression",
                "value": "msg.command"
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "CommandClient#activeMessages[undefined].command",
        "kind": "member",
        "memberof": "CommandClient#activeMessages[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8305,
                8485
            ],
            "filename": "CommandClient.js",
            "lineno": 160,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010625",
                "name": "timeout",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "CommandClient#activeMessages[undefined].timeout",
        "kind": "member",
        "memberof": "CommandClient#activeMessages[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8970,
                8976
            ],
            "filename": "CommandClient.js",
            "lineno": 174,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010699",
                "name": "newMsg"
            }
        },
        "undocumented": true,
        "name": "newMsg",
        "longname": "<anonymous>~newMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9178,
                9212
            ],
            "filename": "CommandClient.js",
            "lineno": 178,
            "columnno": 38,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010721",
                "name": "reply",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reply",
        "longname": "<anonymous>~reply",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9308,
                9364
            ],
            "filename": "CommandClient.js",
            "lineno": 180,
            "columnno": 36,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010735",
                "name": "newMsg",
                "type": "AwaitExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "newMsg",
        "longname": "<anonymous>~newMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9469,
                9544
            ],
            "filename": "CommandClient.js",
            "lineno": 183,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010750",
                "name": "newMsg",
                "type": "AwaitExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "newMsg",
        "longname": "<anonymous>~newMsg",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9921,
                10324
            ],
            "filename": "CommandClient.js",
            "lineno": 197,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010796",
                "name": "CommandClient#resolveCommand",
                "type": "MethodDefinition",
                "paramnames": [
                    "label"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "resolveCommand",
        "longname": "CommandClient#resolveCommand",
        "kind": "function",
        "memberof": "CommandClient",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9953,
                9996
            ],
            "filename": "CommandClient.js",
            "lineno": 198,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010802",
                "name": "label",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "label",
        "longname": "<anonymous>~label",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10010,
                10040
            ],
            "filename": "CommandClient.js",
            "lineno": 199,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010812",
                "name": "command",
                "type": "MemberExpression",
                "value": "this.commands[undefined]"
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "<anonymous>~command",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10110,
                10137
            ],
            "filename": "CommandClient.js",
            "lineno": 203,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010825",
                "name": "label",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "label",
        "longname": "<anonymous>~label",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10147,
                10190
            ],
            "filename": "CommandClient.js",
            "lineno": 204,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010832",
                "name": "label",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "label",
        "longname": "<anonymous>~label",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10200,
                10230
            ],
            "filename": "CommandClient.js",
            "lineno": 205,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010842",
                "name": "command",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.commands[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "<anonymous>~command",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10330,
                11997
            ],
            "filename": "CommandClient.js",
            "lineno": 211,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010858",
                "name": "CommandClient#onMessageReactionEvent",
                "type": "MethodDefinition",
                "paramnames": [
                    "msg",
                    "emoji",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "onMessageReactionEvent",
        "longname": "CommandClient#onMessageReactionEvent",
        "kind": "function",
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [],
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10524,
                10583
            ],
            "filename": "CommandClient.js",
            "lineno": 216,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010894",
                "name": "emoji",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "emoji",
        "longname": "<anonymous>~emoji",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10600,
                10643
            ],
            "filename": "CommandClient.js",
            "lineno": 218,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010914",
                "name": "activeMessage",
                "type": "MemberExpression",
                "value": "this.activeMessages[undefined]"
            }
        },
        "undocumented": true,
        "name": "activeMessage",
        "longname": "<anonymous>~activeMessage",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10732,
                10819
            ],
            "filename": "CommandClient.js",
            "lineno": 220,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010933",
                "name": "action",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "action",
        "longname": "<anonymous>~action",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11204,
                11264
            ],
            "filename": "CommandClient.js",
            "lineno": 233,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100010999",
                "name": "resp",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "resp",
        "longname": "<anonymous>~resp",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11642,
                11702
            ],
            "filename": "CommandClient.js",
            "lineno": 243,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011040",
                "name": "resp",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "resp",
        "longname": "<anonymous>~resp",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n    * Register a prefix override for a specific guild\n    * @arg {String} guildID The ID of the guild to override prefixes for\n    * @arg {String | Array} prefix The bot prefix. Can be either an array of prefixes or a single prefix. \"@mention\" will be automatically replaced with the bot's actual mention\n    */",
        "meta": {
            "range": [
                12323,
                12802
            ],
            "filename": "CommandClient.js",
            "lineno": 259,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011074",
                "name": "CommandClient#registerGuildPrefix",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "prefix"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Register a prefix override for a specific guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to override prefixes for",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Array"
                    ]
                },
                "description": "The bot prefix. Can be either an array of prefixes or a single prefix. \"@mention\" will be automatically replaced with the bot's actual mention",
                "name": "prefix"
            }
        ],
        "name": "registerGuildPrefix",
        "longname": "CommandClient#registerGuildPrefix",
        "kind": "function",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12403,
                12439
            ],
            "filename": "CommandClient.js",
            "lineno": 261,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011087",
                "name": "this.guildPrefixes[undefined]",
                "type": "Identifier",
                "value": "prefix",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildPrefixes[undefined]",
        "longname": "CommandClient#guildPrefixes[undefined]",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12504,
                12509
            ],
            "filename": "CommandClient.js",
            "lineno": 263,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011103",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12553,
                12614
            ],
            "filename": "CommandClient.js",
            "lineno": 264,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011115",
                "name": "prefix[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prefix[undefined]",
        "longname": "prefix[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12642,
                12678
            ],
            "filename": "CommandClient.js",
            "lineno": 266,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011132",
                "name": "this.guildPrefixes[undefined]",
                "type": "Identifier",
                "value": "prefix",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildPrefixes[undefined]",
        "longname": "CommandClient#guildPrefixes[undefined]",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12709,
                12785
            ],
            "filename": "CommandClient.js",
            "lineno": 268,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011141",
                "name": "this.guildPrefixes[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildPrefixes[undefined]",
        "longname": "CommandClient#guildPrefixes[undefined]",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12808,
                13415
            ],
            "filename": "CommandClient.js",
            "lineno": 272,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011157",
                "name": "CommandClient#checkPrefix",
                "type": "MethodDefinition",
                "paramnames": [
                    "msg"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "checkPrefix",
        "longname": "CommandClient#checkPrefix",
        "kind": "function",
        "memberof": "CommandClient",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12839,
                12876
            ],
            "filename": "CommandClient.js",
            "lineno": 273,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011163",
                "name": "prefixes",
                "type": "MemberExpression",
                "value": "this.commandOptions.prefix"
            }
        },
        "undocumented": true,
        "name": "prefixes",
        "longname": "<anonymous>~prefixes",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12994,
                13045
            ],
            "filename": "CommandClient.js",
            "lineno": 275,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011194",
                "name": "prefixes",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.guildPrefixes[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "prefixes",
        "longname": "<anonymous>~prefixes",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n    * Register an alias for a command\n    * @arg {String} alias The alias\n    * @arg {String} label The original command label\n    */",
        "meta": {
            "range": [
                13563,
                14178
            ],
            "filename": "CommandClient.js",
            "lineno": 290,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011261",
                "name": "CommandClient#registerCommandAlias",
                "type": "MethodDefinition",
                "paramnames": [
                    "alias",
                    "label"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Register an alias for a command",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The alias",
                "name": "alias"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The original command label",
                "name": "label"
            }
        ],
        "name": "registerCommandAlias",
        "longname": "CommandClient#registerCommandAlias",
        "kind": "function",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13612,
                13640
            ],
            "filename": "CommandClient.js",
            "lineno": 291,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011268",
                "name": "caseInsensitiveLabel",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "caseInsensitiveLabel",
        "longname": "<anonymous>~caseInsensitiveLabel",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13695,
                13722
            ],
            "filename": "CommandClient.js",
            "lineno": 292,
            "columnno": 53,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011285",
                "name": "label",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "label",
        "longname": "<anonymous>~label",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13729,
                13802
            ],
            "filename": "CommandClient.js",
            "lineno": 292,
            "columnno": 87,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011291",
                "name": "caseInsensitiveLabel",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.commands[undefined].caseInsensitive",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caseInsensitiveLabel",
        "longname": "<anonymous>~caseInsensitiveLabel",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13893,
                13960
            ],
            "filename": "CommandClient.js",
            "lineno": 295,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011312",
                "name": "alias",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "alias",
        "longname": "<anonymous>~alias",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14087,
                14121
            ],
            "filename": "CommandClient.js",
            "lineno": 299,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011338",
                "name": "this.commandAliases[undefined]",
                "type": "Identifier",
                "value": "label",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "commandAliases[undefined]",
        "longname": "CommandClient#commandAliases[undefined]",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Register a command\n    * @arg {String} label The command label\n    * @arg {Function | String | Array<Function | String>} generator A response string, array of functions or strings, or function that generates a string or array of strings when called.\n    * If a function is passed, the function will be passed a Message object and an array of command arguments. The Message object will have an additional property `prefix`, which is the prefix used in the command.\n    * `generator(msg, args)`\n    * @arg {Object} [options] Command options\n    * @arg {Array<String>} [options.aliases] An array of command aliases\n    * @arg {Boolean} [options.argsRequired=false] If arguments are required or not\n    * @arg {Boolean} [options.caseInsensitive=false] Whether the command label (and aliases) is case insensitive or not\n    * @arg {Number} [options.cooldown] The cooldown between command usage in milliseconds\n    * @arg {Object} [options.cooldownExclusions={}] A set of factors that limit where cooldowns are active\n    * @arg {Array<String>} [options.cooldownExclusions.userIDs] An array of user IDs representing users that are not affected by cooldowns.\n    * @arg {Array<String>} [options.cooldownExclusions.guildIDs] An array of guild IDs representing guilds that are not affected by cooldowns.\n    * @arg {Array<String>} [options.cooldownExclusions.channelIDs] An array of channel IDs representing channels that are not affected by cooldowns.\n    * @arg {Function | String} [options.cooldownMessage] A string or a function that returns a string to show when the command is on cooldown\n    * @arg {Number} [option.cooldownReturns=0] Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.\n    * @arg {Object} [options.defaultSubcommandOptions={}] Default subcommand options. This object takes the same options as a normal Command\n    * @arg {Boolean} [options.deleteCommand=false] Whether to delete the user command message or not\n    * @arg {String} [options.description=\"No description\"] A short description of the command to show in the default help command\n    * @arg {Boolean} [options.dmOnly=false] Whether to prevent the command from being used in guilds or not\n    * @arg {Function | String} [options.errorMessage] A string or a function that returns a string to show if the execution of the command handler somehow fails.\n    * @arg {String} [options.fullDescription=\"No full description\"] A detailed description of the command to show in the default help command\n    * @arg {Boolean} [options.guildOnly=false] Whether to prevent the command from being used in Direct Messages or not\n    * @arg {Boolean} [options.hidden=false] Whether or not the command should be hidden from the default help command list\n    * @arg {Object} [options.hooks] A set of functions to be executed at different times throughout the command's processing\n    * @arg {Function} [options.hooks.preCommand] A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.\n    * @arg {Function} [options.hooks.postCheck] A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.\n    * @arg {Function} [options.hooks.postExecution] A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.\n    * @arg {Function} [options.hooks.postCommand] A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.\n    * @arg {Function | String} [options.invalidUsageMessage] A string or a function that returns a string to show when a command was improperly used\n    * @arg {Function | String} [options.permissionMessage] A string or a function that returns a string to show when the user doesn't have permissions to use the command\n    * @arg {Array<{emoji: String, type: String, response: (Function | String | Array<Function | String>)}>} [options.reactionButtons] An array of objects specifying reaction buttons\n    * `emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n    * `type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n    * `response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n    * `filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response\n    * @arg {Number} [options.reactionButtonTimeout=60000] Time (in milliseconds) to wait before invalidating the command's reaction buttons\n    * @arg {Object} [options.requirements] A set of factors that limit who can call the command\n    * @arg {Function | Array<String>} [options.requirements.userIDs] An array or a function that returns an array of user IDs representing users that can call the command\n    * @arg {Function | Object} [options.requirements.permissions] An object or a function that returns an object containing permission keys the user must match to use the command\n    * i.e.:\n    * ```\n    * {\n    *   \"administrator\": false,\n    *   \"manageMessages\": true\n    * }\n    * ```\n    * In the above example, the user must not have administrator permissions, but must have manageMessages to use the command\n    * @arg {Function | Array<String>} [options.requirements.roleIDs] An array or a function that returns an array of role IDs that would allow a user to use the command\n    * @arg {Function | Array<String>} [options.requirements.roleNames] An array or a function that returns an array of role names that would allow a user to use the command\n    * @arg {Function} [options.requirements.custom] A function that accepts a message and returns true if the command should be run\n    * @arg {Boolean} [option.restartCooldown=false] Whether or not to restart a command's cooldown every time it's used.\n    * @arg {String} [options.usage] Details on how to call the command to show in the default help command\n    * @returns {Command}\n    */",
        "meta": {
            "range": [
                20866,
                23930
            ],
            "filename": "CommandClient.js",
            "lineno": 359,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011357",
                "name": "CommandClient#registerCommand",
                "type": "MethodDefinition",
                "paramnames": [
                    "label",
                    "generator",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Register a command",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The command label",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String",
                        "Array.<(function()|String)>"
                    ]
                },
                "description": "A response string, array of functions or strings, or function that generates a string or array of strings when called.\nIf a function is passed, the function will be passed a Message object and an array of command arguments. The Message object will have an additional property `prefix`, which is the prefix used in the command.\n`generator(msg, args)`",
                "name": "generator"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Command options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of command aliases",
                "name": "options.aliases"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If arguments are required or not",
                "name": "options.argsRequired"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the command label (and aliases) is case insensitive or not",
                "name": "options.caseInsensitive"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The cooldown between command usage in milliseconds",
                "name": "options.cooldown"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "A set of factors that limit where cooldowns are active",
                "name": "options.cooldownExclusions"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of user IDs representing users that are not affected by cooldowns.",
                "name": "options.cooldownExclusions.userIDs"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of guild IDs representing guilds that are not affected by cooldowns.",
                "name": "options.cooldownExclusions.guildIDs"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of channel IDs representing channels that are not affected by cooldowns.",
                "name": "options.cooldownExclusions.channelIDs"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show when the command is on cooldown",
                "name": "options.cooldownMessage"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Number of times to return a message when the command is used during it's cooldown.  Once the cooldown expires this is reset.  Set this to 0 to always return a message.",
                "name": "option.cooldownReturns"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "Default subcommand options. This object takes the same options as a normal Command",
                "name": "options.defaultSubcommandOptions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to delete the user command message or not",
                "name": "options.deleteCommand"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"No description\"",
                "description": "A short description of the command to show in the default help command",
                "name": "options.description"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to prevent the command from being used in guilds or not",
                "name": "options.dmOnly"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show if the execution of the command handler somehow fails.",
                "name": "options.errorMessage"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"No full description\"",
                "description": "A detailed description of the command to show in the default help command",
                "name": "options.fullDescription"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to prevent the command from being used in Direct Messages or not",
                "name": "options.guildOnly"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the command should be hidden from the default help command list",
                "name": "options.hidden"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A set of functions to be executed at different times throughout the command's processing",
                "name": "options.hooks"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed before any permission or cooldown checks is made. The function is passed the command message and arguments as parameters.",
                "name": "options.hooks.preCommand"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed after all checks have cleared, but before the command is executed. The function is passed the command message, arguments, and if command checks were passed as parameters.",
                "name": "options.hooks.postCheck"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed after the command is executed, regardless of the final failed state of the command. The function is passed the command message, arguments, and if execution succeeded as parameters.",
                "name": "options.hooks.postExecution"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that is executed after a response has been posted, and the command has finished processing. The function is passed the command message, arguments, and the response message (if applicable) as parameters.",
                "name": "options.hooks.postCommand"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show when a command was improperly used",
                "name": "options.invalidUsageMessage"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "String"
                    ]
                },
                "optional": true,
                "description": "A string or a function that returns a string to show when the user doesn't have permissions to use the command",
                "name": "options.permissionMessage"
            },
            {
                "type": {
                    "names": [
                        "Array.<{emoji: String, type: String, response: (function()|String|Array.<(function()|String)>)}>"
                    ]
                },
                "optional": true,
                "description": "An array of objects specifying reaction buttons\n`emoji` specifies the button emoji. Custom emojis should be in format `emojiName:emojiID`\n`type` specifies the type of the reaction button, either \"edit\" or \"cancel\"\n`response` specifies the content to edit the message to when the reaction button is pressed. This accepts the same arguments as the `generator` parameter of this function, but with an extra userID parameter for generator functions (`function(msg, args, userID)`) describing the user that made the reaction\n`filter` specifies a function (`function(msg, emoji, userID)`) that filters message reactions. If the function returns false, the reaction is not treated as a valid reaction button response",
                "name": "options.reactionButtons"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 60000,
                "description": "Time (in milliseconds) to wait before invalidating the command's reaction buttons",
                "name": "options.reactionButtonTimeout"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A set of factors that limit who can call the command",
                "name": "options.requirements"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array or a function that returns an array of user IDs representing users that can call the command",
                "name": "options.requirements.userIDs"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An object or a function that returns an object containing permission keys the user must match to use the command\ni.e.:\n```\n{\n  \"administrator\": false,\n  \"manageMessages\": true\n}\n```\nIn the above example, the user must not have administrator permissions, but must have manageMessages to use the command",
                "name": "options.requirements.permissions"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array or a function that returns an array of role IDs that would allow a user to use the command",
                "name": "options.requirements.roleIDs"
            },
            {
                "type": {
                    "names": [
                        "function",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array or a function that returns an array of role names that would allow a user to use the command",
                "name": "options.requirements.roleNames"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A function that accepts a message and returns true if the command should be run",
                "name": "options.requirements.custom"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not to restart a command's cooldown every time it's used.",
                "name": "option.restartCooldown"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Details on how to call the command to show in the default help command",
                "name": "options.usage"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Command"
                    ]
                }
            }
        ],
        "name": "registerCommand",
        "longname": "CommandClient#registerCommand",
        "kind": "function",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21038,
                21076
            ],
            "filename": "CommandClient.js",
            "lineno": 363,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011378",
                "name": "lowercaseCommand",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "lowercaseCommand",
        "longname": "<anonymous>~lowercaseCommand",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21364,
                21400
            ],
            "filename": "CommandClient.js",
            "lineno": 368,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011413",
                "name": "command",
                "type": "MemberExpression",
                "value": "this.commandAliases[undefined]"
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "<anonymous>~command",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21464,
                21523
            ],
            "filename": "CommandClient.js",
            "lineno": 369,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011421",
                "name": "lowercaseCommand",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.commandAliases[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lowercaseCommand",
        "longname": "<anonymous>~lowercaseCommand",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21734,
                21807
            ],
            "filename": "CommandClient.js",
            "lineno": 373,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011460",
                "name": "options.defaultSubcommandOptions",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "defaultSubcommandOptions",
        "longname": "options.defaultSubcommandOptions",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21827,
                21830
            ],
            "filename": "CommandClient.js",
            "lineno": 374,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011471",
                "name": "key"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22005,
                22066
            ],
            "filename": "CommandClient.js",
            "lineno": 376,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011497",
                "name": "options[undefined]",
                "type": "MemberExpression",
                "value": "this.commandOptions.defaultCommandOptions[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "options[undefined]",
        "longname": "options[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22084,
                22170
            ],
            "filename": "CommandClient.js",
            "lineno": 377,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011509",
                "name": "options.defaultSubcommandOptions[undefined]",
                "type": "MemberExpression",
                "value": "this.commandOptions.defaultCommandOptions[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "defaultSubcommandOptions[undefined]",
        "longname": "options.defaultSubcommandOptions[undefined]",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22204,
                22274
            ],
            "filename": "CommandClient.js",
            "lineno": 380,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011523",
                "name": "label",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "label",
        "longname": "<anonymous>~label",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22412,
                22448
            ],
            "filename": "CommandClient.js",
            "lineno": 384,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011551",
                "name": "command",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.commandAliases[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "<anonymous>~command",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22660,
                22698
            ],
            "filename": "CommandClient.js",
            "lineno": 390,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011588",
                "name": "lowercaseCommand",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lowercaseCommand",
        "longname": "<anonymous>~lowercaseCommand",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22962,
                22998
            ],
            "filename": "CommandClient.js",
            "lineno": 394,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011623",
                "name": "command",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.commandAliases[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "<anonymous>~command",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23016,
                23075
            ],
            "filename": "CommandClient.js",
            "lineno": 395,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011631",
                "name": "lowercaseCommand",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.commandAliases[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lowercaseCommand",
        "longname": "<anonymous>~lowercaseCommand",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23318,
                23388
            ],
            "filename": "CommandClient.js",
            "lineno": 399,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011670",
                "name": "alias",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "alias",
        "longname": "<anonymous>~alias",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23564,
                23600
            ],
            "filename": "CommandClient.js",
            "lineno": 403,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011698",
                "name": "command",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.commandAliases[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "<anonymous>~command",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23755,
                23789
            ],
            "filename": "CommandClient.js",
            "lineno": 407,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011720",
                "name": "this.commandAliases[undefined]",
                "type": "Identifier",
                "value": "label",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "commandAliases[undefined]",
        "longname": "CommandClient#commandAliases[undefined]",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23825,
                23886
            ],
            "filename": "CommandClient.js",
            "lineno": 410,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011728",
                "name": "this.commands[undefined]",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "commands[undefined]",
        "longname": "CommandClient#commands[undefined]",
        "kind": "member",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Unregister a command\n    * @arg {String} label The command label\n    */",
        "meta": {
            "range": [
                24022,
                24348
            ],
            "filename": "CommandClient.js",
            "lineno": 418,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011745",
                "name": "CommandClient#unregisterCommand",
                "type": "MethodDefinition",
                "paramnames": [
                    "label"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Unregister a command",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The command label",
                "name": "label"
            }
        ],
        "name": "unregisterCommand",
        "longname": "CommandClient#unregisterCommand",
        "kind": "function",
        "memberof": "CommandClient",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24063,
                24100
            ],
            "filename": "CommandClient.js",
            "lineno": 419,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011751",
                "name": "original",
                "type": "MemberExpression",
                "value": "this.commandAliases[undefined]"
            }
        },
        "undocumented": true,
        "name": "original",
        "longname": "<anonymous>~original",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24354,
                24537
            ],
            "filename": "CommandClient.js",
            "lineno": 428,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011799",
                "name": "CommandClient#unwatchMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "id",
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "unwatchMessage",
        "longname": "CommandClient#unwatchMessage",
        "kind": "function",
        "memberof": "CommandClient",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24543,
                24611
            ],
            "filename": "CommandClient.js",
            "lineno": 435,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011827",
                "name": "CommandClient#toString",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "CommandClient#toString",
        "kind": "function",
        "memberof": "CommandClient",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24617,
                24849
            ],
            "filename": "CommandClient.js",
            "lineno": 439,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011840",
                "name": "CommandClient#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "CommandClient#toJSON",
        "kind": "function",
        "memberof": "CommandClient",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24853,
                24883
            ],
            "filename": "CommandClient.js",
            "lineno": 451,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command",
            "code": {
                "id": "astnode100011861",
                "name": "module.exports",
                "type": "Identifier",
                "value": "CommandClient",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15,
                1669
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011870",
                "name": "DiscordHTTPError",
                "type": "ClassDeclaration",
                "paramnames": [
                    "req",
                    "res",
                    "response",
                    "stack"
                ]
            }
        },
        "undocumented": true,
        "name": "DiscordHTTPError",
        "longname": "DiscordHTTPError",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58,
                1131
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 4,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011874",
                "name": "DiscordHTTPError",
                "type": "MethodDefinition",
                "paramnames": [
                    "req",
                    "res",
                    "response",
                    "stack"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "DiscordHTTPError",
        "longname": "DiscordHTTPError",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                174,
                191
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 8,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011893",
                "name": "enumerable",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "enumerable",
        "longname": "enumerable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                205,
                215
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 9,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011895",
                "name": "value",
                "type": "Identifier",
                "value": "req"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                285,
                302
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 12,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011905",
                "name": "enumerable",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "enumerable",
        "longname": "enumerable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                316,
                326
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 13,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011907",
                "name": "value",
                "type": "Identifier",
                "value": "res"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                401,
                418
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 16,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011917",
                "name": "enumerable",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "enumerable",
        "longname": "enumerable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                432,
                447
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 17,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011919",
                "name": "value",
                "type": "Identifier",
                "value": "response"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                519,
                536
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 21,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011929",
                "name": "enumerable",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "enumerable",
        "longname": "enumerable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                550,
                571
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 22,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011931",
                "name": "value",
                "type": "MemberExpression",
                "value": "res.statusCode"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                596,
                675
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 24,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011936",
                "name": "message",
                "type": "TemplateLiteral",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                691,
                728
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 25,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011957",
                "name": "errors",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "errors",
        "longname": "<anonymous>~errors",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                774,
                813
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 27,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011972",
                "name": "message",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                886,
                903
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 30,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011989",
                "name": "enumerable",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "enumerable",
        "longname": "enumerable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                917,
                931
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 31,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011991",
                "name": "value",
                "type": "Identifier",
                "value": "message"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                977,
                1036
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 35,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100011997",
                "name": "this.stack",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "stack",
        "longname": "DiscordHTTPError#stack",
        "kind": "member",
        "memberof": "DiscordHTTPError",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1137,
                1193
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012022",
                "name": "DiscordHTTPError#name",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "DiscordHTTPError#name",
        "kind": "member",
        "memberof": "DiscordHTTPError",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1199,
                1667
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 45,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012032",
                "name": "DiscordHTTPError#flattenErrors",
                "type": "MethodDefinition",
                "paramnames": [
                    "errors",
                    "keyPrefix"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "flattenErrors",
        "longname": "DiscordHTTPError#flattenErrors",
        "kind": "function",
        "memberof": "DiscordHTTPError",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1251,
                1264
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 46,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012041",
                "name": "messages",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "<anonymous>~messages",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1284,
                1293
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 47,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012046",
                "name": "fieldName"
            }
        },
        "undocumented": true,
        "name": "fieldName",
        "longname": "<anonymous>~fieldName",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1517,
                1611
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 52,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012077",
                "name": "messages",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "<anonymous>~messages",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1671,
                1704
            ],
            "filename": "DiscordHTTPError.js",
            "lineno": 59,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012102",
                "name": "module.exports",
                "type": "Identifier",
                "value": "DiscordHTTPError",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15,
                2170
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012111",
                "name": "DiscordRESTError",
                "type": "ClassDeclaration",
                "paramnames": [
                    "req",
                    "res",
                    "response",
                    "stack"
                ]
            }
        },
        "undocumented": true,
        "name": "DiscordRESTError",
        "longname": "DiscordRESTError",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58,
                1258
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 4,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012115",
                "name": "DiscordRESTError",
                "type": "MethodDefinition",
                "paramnames": [
                    "req",
                    "res",
                    "response",
                    "stack"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "DiscordRESTError",
        "longname": "DiscordRESTError",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                174,
                191
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 8,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012134",
                "name": "enumerable",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "enumerable",
        "longname": "enumerable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                205,
                215
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 9,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012136",
                "name": "value",
                "type": "Identifier",
                "value": "req"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                285,
                302
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 12,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012146",
                "name": "enumerable",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "enumerable",
        "longname": "enumerable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                316,
                326
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 13,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012148",
                "name": "value",
                "type": "Identifier",
                "value": "res"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                401,
                418
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 16,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012158",
                "name": "enumerable",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "enumerable",
        "longname": "enumerable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                432,
                447
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 17,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012160",
                "name": "value",
                "type": "Identifier",
                "value": "response"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                519,
                536
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 21,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012170",
                "name": "enumerable",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "enumerable",
        "longname": "enumerable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                550,
                577
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 22,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012172",
                "name": "value",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                602,
                647
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 24,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012181",
                "name": "message",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                691,
                759
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 26,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012194",
                "name": "message",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                796,
                833
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 28,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012211",
                "name": "errors",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "errors",
        "longname": "<anonymous>~errors",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                887,
                926
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 30,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012226",
                "name": "message",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1013,
                1030
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 34,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012243",
                "name": "enumerable",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "enumerable",
        "longname": "enumerable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1044,
                1058
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 35,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012245",
                "name": "value",
                "type": "Identifier",
                "value": "message"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1104,
                1163
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 39,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012251",
                "name": "this.stack",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "stack",
        "longname": "DiscordRESTError#stack",
        "kind": "member",
        "memberof": "DiscordRESTError",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1264,
                1340
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 45,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012276",
                "name": "DiscordRESTError#name",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "DiscordRESTError#name",
        "kind": "member",
        "memberof": "DiscordRESTError",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1346,
                2168
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012293",
                "name": "DiscordRESTError#flattenErrors",
                "type": "MethodDefinition",
                "paramnames": [
                    "errors",
                    "keyPrefix"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "flattenErrors",
        "longname": "DiscordRESTError#flattenErrors",
        "kind": "function",
        "memberof": "DiscordRESTError",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1398,
                1411
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 50,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012302",
                "name": "messages",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "<anonymous>~messages",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1431,
                1440
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 51,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012307",
                "name": "fieldName"
            }
        },
        "undocumented": true,
        "name": "fieldName",
        "longname": "<anonymous>~fieldName",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1657,
                1767
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 56,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012336",
                "name": "messages",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "<anonymous>~messages",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1843,
                1937
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 58,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012372",
                "name": "messages",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "<anonymous>~messages",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2018,
                2112
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 60,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012403",
                "name": "messages",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "<anonymous>~messages",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2172,
                2205
            ],
            "filename": "DiscordRESTError.js",
            "lineno": 67,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors",
            "code": {
                "id": "astnode100012424",
                "name": "module.exports",
                "type": "Identifier",
                "value": "DiscordRESTError",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                57
            ],
            "filename": "Shard.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012434",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                99
            ],
            "filename": "Shard.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012440",
                "name": "Bucket",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Bucket",
        "longname": "Bucket",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                107,
                143
            ],
            "filename": "Shard.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012446",
                "name": "Call",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Call",
        "longname": "Call",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                151,
                193
            ],
            "filename": "Shard.js",
            "lineno": 6,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012452",
                "name": "Channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Channel",
        "longname": "Channel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                201,
                253
            ],
            "filename": "Shard.js",
            "lineno": 7,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012458",
                "name": "GroupChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GroupChannel",
        "longname": "GroupChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                261,
                313
            ],
            "filename": "Shard.js",
            "lineno": 8,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012464",
                "name": "GuildChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GuildChannel",
        "longname": "GuildChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                321,
                377
            ],
            "filename": "Shard.js",
            "lineno": 9,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012470",
                "name": "PrivateChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "PrivateChannel",
        "longname": "PrivateChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                386,
                401
            ],
            "filename": "Shard.js",
            "lineno": 10,
            "columnno": 7,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012478",
                "name": "GATEWAY_VERSION",
                "type": "Identifier",
                "value": "GATEWAY_VERSION"
            }
        },
        "undocumented": true,
        "name": "GATEWAY_VERSION",
        "longname": "GATEWAY_VERSION",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                403,
                417
            ],
            "filename": "Shard.js",
            "lineno": 10,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012480",
                "name": "GatewayOPCodes",
                "type": "Identifier",
                "value": "GatewayOPCodes"
            }
        },
        "undocumented": true,
        "name": "GatewayOPCodes",
        "longname": "GatewayOPCodes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                419,
                431
            ],
            "filename": "Shard.js",
            "lineno": 10,
            "columnno": 40,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012482",
                "name": "ChannelTypes",
                "type": "Identifier",
                "value": "ChannelTypes"
            }
        },
        "undocumented": true,
        "name": "ChannelTypes",
        "longname": "ChannelTypes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                466,
                518
            ],
            "filename": "Shard.js",
            "lineno": 11,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012488",
                "name": "ExtendedUser",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ExtendedUser",
        "longname": "ExtendedUser",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                526,
                562
            ],
            "filename": "Shard.js",
            "lineno": 12,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012494",
                "name": "User",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "User",
        "longname": "User",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                570,
                610
            ],
            "filename": "Shard.js",
            "lineno": 13,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012500",
                "name": "Invite",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Invite",
        "longname": "Invite",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                618,
                653
            ],
            "filename": "Shard.js",
            "lineno": 14,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012506",
                "name": "Constants",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Constants",
        "longname": "Constants",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                659,
                735
            ],
            "filename": "Shard.js",
            "lineno": 15,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012512",
                "name": "WebSocket",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "WebSocket",
        "longname": "WebSocket",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                742,
                754
            ],
            "filename": "Shard.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012526",
                "name": "EventEmitter"
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                766,
                805
            ],
            "filename": "Shard.js",
            "lineno": 19,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012531",
                "name": "EventEmitter",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                826,
                871
            ],
            "filename": "Shard.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012538",
                "name": "EventEmitter",
                "type": "MemberExpression",
                "value": ".EventEmitter",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                879,
                886
            ],
            "filename": "Shard.js",
            "lineno": 23,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012546",
                "name": "Erlpack"
            }
        },
        "undocumented": true,
        "name": "Erlpack",
        "longname": "Erlpack",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                898,
                926
            ],
            "filename": "Shard.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012551",
                "name": "Erlpack",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Erlpack",
        "longname": "Erlpack",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                976,
                984
            ],
            "filename": "Shard.js",
            "lineno": 28,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012558",
                "name": "ZlibSync"
            }
        },
        "undocumented": true,
        "name": "ZlibSync",
        "longname": "ZlibSync",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                996,
                1027
            ],
            "filename": "Shard.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012563",
                "name": "ZlibSync",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ZlibSync",
        "longname": "ZlibSync",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1062,
                1088
            ],
            "filename": "Shard.js",
            "lineno": 33,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012572",
                "name": "ZlibSync",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ZlibSync",
        "longname": "ZlibSync",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1154,
                1180
            ],
            "filename": "Shard.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012581",
                "name": "WebSocket",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "WebSocket",
        "longname": "WebSocket",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n* Represents a shard\n* @extends EventEmitter\n* @prop {Number} id The ID of the shard\n* @prop {Boolean} connecting Whether the shard is connecting\n* @prop {Boolean} ready Whether the shard is ready\n* @prop {Array<String>?} discordServerTrace Debug trace of Discord servers\n* @prop {String} status The status of the shard. \"disconnected\"/\"connecting\"/\"handshaking\"/\"ready\"/\"resuming\"\n* @prop {Number} lastHeartbeatReceived Last time Discord acknowledged a heartbeat, null if shard has not sent heartbeat yet\n* @prop {Number} lastHeartbeatSent Last time shard sent a heartbeat, null if shard has not sent heartbeat yet\n* @prop {Number} latency The current latency between the shard and Discord, in milliseconds\n*/",
        "meta": {
            "range": [
                1942,
                96949
            ],
            "filename": "Shard.js",
            "lineno": 54,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012587",
                "name": "Shard",
                "type": "ClassDeclaration",
                "paramnames": [
                    "id",
                    "client"
                ]
            }
        },
        "classdesc": "Represents a shard",
        "augments": [
            "EventEmitter"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the shard is connecting",
                "name": "connecting"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the shard is ready",
                "name": "ready"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "nullable": true,
                "description": "Debug trace of Discord servers",
                "name": "discordServerTrace"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The status of the shard. \"disconnected\"/\"connecting\"/\"handshaking\"/\"ready\"/\"resuming\"",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Last time Discord acknowledged a heartbeat, null if shard has not sent heartbeat yet",
                "name": "lastHeartbeatReceived"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Last time shard sent a heartbeat, null if shard has not sent heartbeat yet",
                "name": "lastHeartbeatSent"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The current latency between the shard and Discord, in milliseconds",
                "name": "latency"
            }
        ],
        "name": "Shard",
        "longname": "Shard",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1981,
                2378
            ],
            "filename": "Shard.js",
            "lineno": 55,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012591",
                "name": "Shard",
                "type": "MethodDefinition",
                "paramnames": [
                    "id",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Shard",
        "longname": "Shard",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a shard\n* @extends EventEmitter\n* @prop {Number} id The ID of the shard\n* @prop {Boolean} connecting Whether the shard is connecting\n* @prop {Boolean} ready Whether the shard is ready\n* @prop {Array<String>?} discordServerTrace Debug trace of Discord servers\n* @prop {String} status The status of the shard. \"disconnected\"/\"connecting\"/\"handshaking\"/\"ready\"/\"resuming\"\n* @prop {Number} lastHeartbeatReceived Last time Discord acknowledged a heartbeat, null if shard has not sent heartbeat yet\n* @prop {Number} lastHeartbeatSent Last time shard sent a heartbeat, null if shard has not sent heartbeat yet\n* @prop {Number} latency The current latency between the shard and Discord, in milliseconds\n*/",
        "meta": {
            "range": [
                1942,
                96949
            ],
            "filename": "Shard.js",
            "lineno": 54,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012587",
                "name": "Shard",
                "type": "ClassDeclaration",
                "paramnames": [
                    "id",
                    "client"
                ]
            }
        },
        "name": "Shard",
        "longname": "Shard",
        "kind": "class",
        "classdesc": "Represents a shard",
        "augments": [
            "EventEmitter"
        ],
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the shard is connecting",
                "name": "connecting"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the shard is ready",
                "name": "ready"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "nullable": true,
                "description": "Debug trace of Discord servers",
                "name": "discordServerTrace"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The status of the shard. \"disconnected\"/\"connecting\"/\"handshaking\"/\"ready\"/\"resuming\"",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Last time Discord acknowledged a heartbeat, null if shard has not sent heartbeat yet",
                "name": "lastHeartbeatReceived"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Last time shard sent a heartbeat, null if shard has not sent heartbeat yet",
                "name": "lastHeartbeatSent"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The current latency between the shard and Discord, in milliseconds",
                "name": "latency"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2033,
                2045
            ],
            "filename": "Shard.js",
            "lineno": 58,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012601",
                "name": "this.id",
                "type": "Identifier",
                "value": "id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "Shard#id",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2055,
                2075
            ],
            "filename": "Shard.js",
            "lineno": 59,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012607",
                "name": "this.client",
                "type": "Identifier",
                "value": "client",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "client",
        "longname": "Shard#client",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2086,
                2126
            ],
            "filename": "Shard.js",
            "lineno": 61,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012613",
                "name": "this.onPacket",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "onPacket",
        "longname": "Shard#onPacket",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2136,
                2178
            ],
            "filename": "Shard.js",
            "lineno": 62,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012625",
                "name": "this._onWSOpen",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_onWSOpen",
        "longname": "Shard#_onWSOpen",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2188,
                2236
            ],
            "filename": "Shard.js",
            "lineno": 63,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012637",
                "name": "this._onWSMessage",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_onWSMessage",
        "longname": "Shard#_onWSMessage",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2246,
                2290
            ],
            "filename": "Shard.js",
            "lineno": 64,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012649",
                "name": "this._onWSError",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_onWSError",
        "longname": "Shard#_onWSError",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2300,
                2344
            ],
            "filename": "Shard.js",
            "lineno": 65,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012661",
                "name": "this._onWSClose",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_onWSClose",
        "longname": "Shard#_onWSClose",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Tells the shard to connect\n    */",
        "meta": {
            "range": [
                2432,
                2727
            ],
            "filename": "Shard.js",
            "lineno": 73,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012677",
                "name": "Shard#connect",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Tells the shard to connect",
        "name": "connect",
        "longname": "Shard#connect",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2662,
                2684
            ],
            "filename": "Shard.js",
            "lineno": 79,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012715",
                "name": "this.connecting",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connecting",
        "longname": "Shard#connecting",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Disconnects the shard\n    * @arg {Object?} [options] Shard disconnect options\n    * @arg {String | Boolean} [options.reconnect] false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect\n    */",
        "meta": {
            "range": [
                2988,
                5414
            ],
            "filename": "Shard.js",
            "lineno": 88,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012725",
                "name": "Shard#disconnect",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "error"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Disconnects the shard",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "Shard disconnect options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect",
                "name": "options.reconnect"
            }
        ],
        "name": "disconnect",
        "longname": "Shard#disconnect",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3176,
                3205
            ],
            "filename": "Shard.js",
            "lineno": 95,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012752",
                "name": "this.heartbeatInterval",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "heartbeatInterval",
        "longname": "Shard#heartbeatInterval",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3848,
                3862
            ],
            "filename": "Shard.js",
            "lineno": 114,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012840",
                "name": "this.ws",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ws",
        "longname": "Shard#ws",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "/**\n        * Fired when the shard disconnects\n        * @event Shard#disconnect\n        */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 121,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when the shard disconnects",
        "kind": "event",
        "name": "disconnect",
        "memberof": "Shard",
        "longname": "Shard#event:disconnect",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4353,
                4374
            ],
            "filename": "Shard.js",
            "lineno": 129,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012902",
                "name": "this.sessionID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "Shard#sessionID",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "/**\n            * Fired when stuff happens and gives more info\n            * @event Client#debug\n            * @prop {String} message The debug message\n            * @prop {Number} id The ID of the shard\n            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 133,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when stuff happens and gives more info",
        "kind": "event",
        "name": "debug",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The debug message",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:debug",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5211,
                5313
            ],
            "filename": "Shard.js",
            "lineno": 147,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100012991",
                "name": "this.reconnectInterval",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reconnectInterval",
        "longname": "Shard#reconnectInterval",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5420,
                6542
            ],
            "filename": "Shard.js",
            "lineno": 154,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013027",
                "name": "Shard#reset",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "reset",
        "longname": "Shard#reset",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5438,
                5461
            ],
            "filename": "Shard.js",
            "lineno": 155,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013032",
                "name": "this.connecting",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connecting",
        "longname": "Shard#connecting",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5471,
                5489
            ],
            "filename": "Shard.js",
            "lineno": 156,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013038",
                "name": "this.ready",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ready",
        "longname": "Shard#ready",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5499,
                5520
            ],
            "filename": "Shard.js",
            "lineno": 157,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013044",
                "name": "this.preReady",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "preReady",
        "longname": "Shard#preReady",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5599,
                5606
            ],
            "filename": "Shard.js",
            "lineno": 159,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013058",
                "name": "guildID"
            }
        },
        "undocumented": true,
        "name": "guildID",
        "longname": "<anonymous>~guildID",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5972,
                6003
            ],
            "filename": "Shard.js",
            "lineno": 167,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013102",
                "name": "this.requestMembersPromise",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "requestMembersPromise",
        "longname": "Shard#requestMembersPromise",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6013,
                6039
            ],
            "filename": "Shard.js",
            "lineno": 168,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013108",
                "name": "this.getAllUsersCount",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getAllUsersCount",
        "longname": "Shard#getAllUsersCount",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6049,
                6075
            ],
            "filename": "Shard.js",
            "lineno": 169,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013114",
                "name": "this.getAllUsersQueue",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getAllUsersQueue",
        "longname": "Shard#getAllUsersQueue",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6085,
                6111
            ],
            "filename": "Shard.js",
            "lineno": 170,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013120",
                "name": "this.getAllUsersLength",
                "type": "Literal",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getAllUsersLength",
        "longname": "Shard#getAllUsersLength",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6121,
                6145
            ],
            "filename": "Shard.js",
            "lineno": 171,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013126",
                "name": "this.guildSyncQueue",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildSyncQueue",
        "longname": "Shard#guildSyncQueue",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6155,
                6184
            ],
            "filename": "Shard.js",
            "lineno": 172,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013132",
                "name": "this.guildSyncQueueLength",
                "type": "Literal",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildSyncQueueLength",
        "longname": "Shard#guildSyncQueueLength",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6194,
                6217
            ],
            "filename": "Shard.js",
            "lineno": 173,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013138",
                "name": "this.unsyncedGuilds",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unsyncedGuilds",
        "longname": "Shard#unsyncedGuilds",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6227,
                6250
            ],
            "filename": "Shard.js",
            "lineno": 174,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013144",
                "name": "this.latency",
                "type": "Identifier",
                "value": "Infinity",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "latency",
        "longname": "Shard#latency",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6260,
                6288
            ],
            "filename": "Shard.js",
            "lineno": 175,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013150",
                "name": "this.lastHeartbeatAck",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastHeartbeatAck",
        "longname": "Shard#lastHeartbeatAck",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6298,
                6331
            ],
            "filename": "Shard.js",
            "lineno": 176,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013156",
                "name": "this.lastHeartbeatReceived",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastHeartbeatReceived",
        "longname": "Shard#lastHeartbeatReceived",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6341,
                6370
            ],
            "filename": "Shard.js",
            "lineno": 177,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013162",
                "name": "this.lastHeartbeatSent",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastHeartbeatSent",
        "longname": "Shard#lastHeartbeatSent",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6380,
                6408
            ],
            "filename": "Shard.js",
            "lineno": 178,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013168",
                "name": "this.status",
                "type": "Literal",
                "value": "disconnected",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "Shard#status",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6509,
                6535
            ],
            "filename": "Shard.js",
            "lineno": 182,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013185",
                "name": "this.connectTimeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectTimeout",
        "longname": "Shard#connectTimeout",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6548,
                7196
            ],
            "filename": "Shard.js",
            "lineno": 185,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013190",
                "name": "Shard#hardReset",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "hardReset",
        "longname": "Shard#hardReset",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6592,
                6604
            ],
            "filename": "Shard.js",
            "lineno": 187,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013200",
                "name": "this.seq",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "seq",
        "longname": "Shard#seq",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6614,
                6635
            ],
            "filename": "Shard.js",
            "lineno": 188,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013206",
                "name": "this.sessionID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "Shard#sessionID",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6645,
                6674
            ],
            "filename": "Shard.js",
            "lineno": 189,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013212",
                "name": "this.reconnectInterval",
                "type": "Literal",
                "value": 1000,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reconnectInterval",
        "longname": "Shard#reconnectInterval",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6684,
                6708
            ],
            "filename": "Shard.js",
            "lineno": 190,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013218",
                "name": "this.connectAttempts",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectAttempts",
        "longname": "Shard#connectAttempts",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6718,
                6732
            ],
            "filename": "Shard.js",
            "lineno": 191,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013224",
                "name": "this.ws",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ws",
        "longname": "Shard#ws",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6742,
                6771
            ],
            "filename": "Shard.js",
            "lineno": 192,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013230",
                "name": "this.heartbeatInterval",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "heartbeatInterval",
        "longname": "Shard#heartbeatInterval",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6781,
                6811
            ],
            "filename": "Shard.js",
            "lineno": 193,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013236",
                "name": "this.guildCreateTimeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildCreateTimeout",
        "longname": "Shard#guildCreateTimeout",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6821,
                6884
            ],
            "filename": "Shard.js",
            "lineno": 194,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013242",
                "name": "this.globalBucket",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "globalBucket",
        "longname": "Shard#globalBucket",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6865,
                6882
            ],
            "filename": "Shard.js",
            "lineno": 194,
            "columnno": 52,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013251",
                "name": "reservedTokens",
                "type": "Literal",
                "value": 5
            }
        },
        "undocumented": true,
        "name": "reservedTokens",
        "longname": "reservedTokens",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6894,
                6942
            ],
            "filename": "Shard.js",
            "lineno": 195,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013254",
                "name": "this.presenceUpdateBucket",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "presenceUpdateBucket",
        "longname": "Shard#presenceUpdateBucket",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6952,
                7016
            ],
            "filename": "Shard.js",
            "lineno": 196,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013263",
                "name": "this.presence",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "presence",
        "longname": "Shard#presence",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7091,
                7109
            ],
            "filename": "Shard.js",
            "lineno": 198,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013288",
                "name": "configurable",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "configurable",
        "longname": "configurable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7123,
                7140
            ],
            "filename": "Shard.js",
            "lineno": 199,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013290",
                "name": "enumerable",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "enumerable",
        "longname": "enumerable",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7154,
                7178
            ],
            "filename": "Shard.js",
            "lineno": 200,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013292",
                "name": "value",
                "type": "MemberExpression",
                "value": "this.client.token"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "value",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7202,
                7407
            ],
            "filename": "Shard.js",
            "lineno": 204,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013298",
                "name": "Shard#resume",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "resume",
        "longname": "Shard#resume",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7221,
                7245
            ],
            "filename": "Shard.js",
            "lineno": 205,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013303",
                "name": "this.status",
                "type": "Literal",
                "value": "resuming",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "Shard#status",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7304,
                7322
            ],
            "filename": "Shard.js",
            "lineno": 207,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013317",
                "name": "token",
                "type": "MemberExpression",
                "value": "this._token"
            }
        },
        "undocumented": true,
        "name": "token",
        "longname": "token",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7336,
                7362
            ],
            "filename": "Shard.js",
            "lineno": 208,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013321",
                "name": "session_id",
                "type": "MemberExpression",
                "value": "this.sessionID"
            }
        },
        "undocumented": true,
        "name": "session_id",
        "longname": "session_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7376,
                7389
            ],
            "filename": "Shard.js",
            "lineno": 209,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013325",
                "name": "seq",
                "type": "MemberExpression",
                "value": "this.seq"
            }
        },
        "undocumented": true,
        "name": "seq",
        "longname": "seq",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7413,
                8597
            ],
            "filename": "Shard.js",
            "lineno": 213,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013329",
                "name": "Shard#identify",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "identify",
        "longname": "Shard#identify",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n            * Fired when the shard encounters an error\n            * @event Client#error\n            * @prop {Error} err The error\n            * @prop {Number} id The ID of the shard\n            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 215,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when the shard encounters an error",
        "kind": "event",
        "name": "error",
        "properties": [
            {
                "type": {
                    "names": [
                        "Error"
                    ]
                },
                "description": "The error",
                "name": "err"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:error",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7835,
                8313
            ],
            "filename": "Shard.js",
            "lineno": 224,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013356",
                "name": "identify",
                "type": "ObjectExpression",
                "value": "{\"token\":\"\",\"v\":\"\",\"compress\":\"\",\"large_threshold\":\"\",\"guild_subscriptions\":\"\",\"intents\":\"\",\"properties\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "identify",
        "longname": "<anonymous>~identify",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7860,
                7878
            ],
            "filename": "Shard.js",
            "lineno": 225,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013359",
                "name": "token",
                "type": "MemberExpression",
                "value": "this._token"
            }
        },
        "undocumented": true,
        "name": "token",
        "longname": "<anonymous>~identify.token",
        "kind": "member",
        "memberof": "<anonymous>~identify",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7892,
                7910
            ],
            "filename": "Shard.js",
            "lineno": 226,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013363",
                "name": "v",
                "type": "Identifier",
                "value": "GATEWAY_VERSION"
            }
        },
        "undocumented": true,
        "name": "v",
        "longname": "<anonymous>~identify.v",
        "kind": "member",
        "memberof": "<anonymous>~identify",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7924,
                7964
            ],
            "filename": "Shard.js",
            "lineno": 227,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013365",
                "name": "compress",
                "type": "UnaryExpression",
                "value": "!!this.client.options.compress"
            }
        },
        "undocumented": true,
        "name": "compress",
        "longname": "<anonymous>~identify.compress",
        "kind": "member",
        "memberof": "<anonymous>~identify",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7978,
                8029
            ],
            "filename": "Shard.js",
            "lineno": 228,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013375",
                "name": "large_threshold",
                "type": "MemberExpression",
                "value": "this.client.options.largeThreshold"
            }
        },
        "undocumented": true,
        "name": "large_threshold",
        "longname": "<anonymous>~identify.large_threshold",
        "kind": "member",
        "memberof": "<anonymous>~identify",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8043,
                8104
            ],
            "filename": "Shard.js",
            "lineno": 229,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013383",
                "name": "guild_subscriptions",
                "type": "UnaryExpression",
                "value": "!!this.client.options.guildSubscriptions"
            }
        },
        "undocumented": true,
        "name": "guild_subscriptions",
        "longname": "<anonymous>~identify.guild_subscriptions",
        "kind": "member",
        "memberof": "<anonymous>~identify",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8118,
                8154
            ],
            "filename": "Shard.js",
            "lineno": 230,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013393",
                "name": "intents",
                "type": "MemberExpression",
                "value": "this.client.options.intents"
            }
        },
        "undocumented": true,
        "name": "intents",
        "longname": "<anonymous>~identify.intents",
        "kind": "member",
        "memberof": "<anonymous>~identify",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8168,
                8303
            ],
            "filename": "Shard.js",
            "lineno": 231,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013401",
                "name": "properties",
                "type": "ObjectExpression",
                "value": "{\"undefined\":\"Eris\"}"
            }
        },
        "undocumented": true,
        "name": "properties",
        "longname": "<anonymous>~identify.properties",
        "kind": "member",
        "memberof": "<anonymous>~identify",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8198,
                8220
            ],
            "filename": "Shard.js",
            "lineno": 232,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013403",
                "name": "os",
                "type": "MemberExpression",
                "value": "process.platform"
            }
        },
        "undocumented": true,
        "name": "os",
        "longname": "<anonymous>~identify.properties.os",
        "kind": "member",
        "memberof": "<anonymous>~identify.properties",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8238,
                8255
            ],
            "filename": "Shard.js",
            "lineno": 233,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013407",
                "name": "browser",
                "type": "Literal",
                "value": "Eris"
            }
        },
        "undocumented": true,
        "name": "browser",
        "longname": "<anonymous>~identify.properties.browser",
        "kind": "member",
        "memberof": "<anonymous>~identify.properties",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8273,
                8289
            ],
            "filename": "Shard.js",
            "lineno": 234,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013409",
                "name": "device",
                "type": "Literal",
                "value": "Eris"
            }
        },
        "undocumented": true,
        "name": "device",
        "longname": "<anonymous>~identify.properties.device",
        "kind": "member",
        "memberof": "<anonymous>~identify.properties",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8375,
                8432
            ],
            "filename": "Shard.js",
            "lineno": 238,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013423",
                "name": "identify.shard",
                "type": "ArrayExpression",
                "funcscope": "<anonymous>",
                "value": "[\"this.id\",\"this.client.options.maxShards\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "shard",
        "longname": "<anonymous>~identify.shard",
        "kind": "member",
        "memberof": "<anonymous>~identify",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8491,
                8524
            ],
            "filename": "Shard.js",
            "lineno": 241,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013446",
                "name": "identify.presence",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.presence",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "presence",
        "longname": "<anonymous>~identify.presence",
        "kind": "member",
        "memberof": "<anonymous>~identify",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8603,
                78547
            ],
            "filename": "Shard.js",
            "lineno": 246,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013462",
                "name": "Shard#wsEvent",
                "type": "MethodDefinition",
                "paramnames": [
                    "packet"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "wsEvent",
        "longname": "Shard#wsEvent",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8819,
                8865
            ],
            "filename": "Shard.js",
            "lineno": 250,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013486",
                "name": "user",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "<anonymous>~user",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8891,
                8905
            ],
            "filename": "Shard.js",
            "lineno": 251,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013504",
                "name": "oldUser",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "oldUser",
        "longname": "<anonymous>~oldUser",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9102,
                9303
            ],
            "filename": "Shard.js",
            "lineno": 253,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013547",
                "name": "oldUser",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"username\":\"\",\"discriminator\":\"\",\"avatar\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "oldUser",
        "longname": "<anonymous>~oldUser",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9142,
                9165
            ],
            "filename": "Shard.js",
            "lineno": 254,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013550",
                "name": "username",
                "type": "MemberExpression",
                "value": "user.username"
            }
        },
        "undocumented": true,
        "name": "username",
        "longname": "<anonymous>~oldUser.username",
        "kind": "member",
        "memberof": "<anonymous>~oldUser",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9195,
                9228
            ],
            "filename": "Shard.js",
            "lineno": 255,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013554",
                "name": "discriminator",
                "type": "MemberExpression",
                "value": "user.discriminator"
            }
        },
        "undocumented": true,
        "name": "discriminator",
        "longname": "<anonymous>~oldUser.discriminator",
        "kind": "member",
        "memberof": "<anonymous>~oldUser",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9258,
                9277
            ],
            "filename": "Shard.js",
            "lineno": 256,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013558",
                "name": "avatar",
                "type": "MemberExpression",
                "value": "user.avatar"
            }
        },
        "undocumented": true,
        "name": "avatar",
        "longname": "<anonymous>~oldUser.avatar",
        "kind": "member",
        "memberof": "<anonymous>~oldUser",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9394,
                9453
            ],
            "filename": "Shard.js",
            "lineno": 260,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013569",
                "name": "user",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "<anonymous>~user",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n                        * Fired when a user's username, avatar, or discriminator changes\n                        * @event Client#userUpdate\n                        * @prop {User} user The updated user\n                        * @prop {Object?} oldUser The old user data\n                        * @prop {String} oldUser.username The username of the user\n                        * @prop {String} oldUser.discriminator The discriminator of the user\n                        * @prop {String?} oldUser.avatar The hash of the user's avatar, or null if no avatar\n                        */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 261,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a user's username, avatar, or discriminator changes",
        "kind": "event",
        "name": "userUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The updated user",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The old user data",
                "name": "oldUser"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The username of the user",
                "name": "oldUser.username"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The discriminator of the user",
                "name": "oldUser.discriminator"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the user's avatar, or null if no avatar",
                "name": "oldUser.avatar"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:userUpdate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10229,
                10259
            ],
            "filename": "Shard.js",
            "lineno": 274,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013604",
                "name": "packet.d.id",
                "type": "MemberExpression",
                "value": "packet.d.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "packet.d.id",
        "kind": "member",
        "memberof": "packet.d",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10287,
                10344
            ],
            "filename": "Shard.js",
            "lineno": 275,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013618",
                "name": "relationship",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "relationship",
        "longname": "<anonymous>~relationship",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10491,
                10629
            ],
            "filename": "Shard.js",
            "lineno": 279,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013639",
                "name": "oldPresence",
                "type": "ObjectExpression",
                "value": "{\"game\":\"\",\"status\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "oldPresence",
        "longname": "<anonymous>~oldPresence",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10531,
                10554
            ],
            "filename": "Shard.js",
            "lineno": 280,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013642",
                "name": "game",
                "type": "MemberExpression",
                "value": "relationship.game"
            }
        },
        "undocumented": true,
        "name": "game",
        "longname": "<anonymous>~oldPresence.game",
        "kind": "member",
        "memberof": "<anonymous>~oldPresence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10580,
                10607
            ],
            "filename": "Shard.js",
            "lineno": 281,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013646",
                "name": "status",
                "type": "MemberExpression",
                "value": "relationship.status"
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "<anonymous>~oldPresence.status",
        "kind": "member",
        "memberof": "<anonymous>~oldPresence",
        "scope": "static"
    },
    {
        "comment": "/**\n                    * Fired when a guild member or relationship's status or game changes\n                    * @event Client#presenceUpdate\n                    * @prop {Member | Relationship} other The updated member or relationship\n                    * @prop {Object?} oldPresence The old presence data. If the user was offline when the bot started and the client option getAllUsers is not true, this will be null\n                    * @prop {String} oldPresence.status The other user's old status. Either \"online\", \"idle\", or \"offline\"\n                    * @prop {Object?} oldPresence.game The old game the other user was playing\n                    * @prop {String} oldPresence.game.name The name of the active game\n                    * @prop {Number} oldPresence.game.type The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)\n                    * @prop {String} oldPresence.game.url The url of the active game\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 283,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild member or relationship's status or game changes",
        "kind": "event",
        "name": "presenceUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Member",
                        "Relationship"
                    ]
                },
                "description": "The updated member or relationship",
                "name": "other"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The old presence data. If the user was offline when the bot started and the client option getAllUsers is not true, this will be null",
                "name": "oldPresence"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The other user's old status. Either \"online\", \"idle\", or \"offline\"",
                "name": "oldPresence.status"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The old game the other user was playing",
                "name": "oldPresence.game"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the active game",
                "name": "oldPresence.game.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)",
                "name": "oldPresence.game.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The url of the active game",
                "name": "oldPresence.game.url"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:presenceUpdate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11786,
                11835
            ],
            "filename": "Shard.js",
            "lineno": 297,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013670",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12032,
                12090
            ],
            "filename": "Shard.js",
            "lineno": 302,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013707",
                "name": "member",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12059,
                12089
            ],
            "filename": "Shard.js",
            "lineno": 302,
            "columnno": 47,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013715",
                "name": "packet.d.id",
                "type": "MemberExpression",
                "value": "packet.d.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "packet.d.id",
        "longname": "<anonymous>~member.packet.d.id",
        "kind": "member",
        "memberof": "<anonymous>~member",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12112,
                12130
            ],
            "filename": "Shard.js",
            "lineno": 303,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013729",
                "name": "oldPresence",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "oldPresence",
        "longname": "<anonymous>~oldPresence",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12181,
                12421
            ],
            "filename": "Shard.js",
            "lineno": 305,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013736",
                "name": "oldPresence",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"game\":\"\",\"status\":\"\",\"clientStatus\":\"\",\"activities\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "oldPresence",
        "longname": "<anonymous>~oldPresence",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12221,
                12238
            ],
            "filename": "Shard.js",
            "lineno": 306,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013739",
                "name": "game",
                "type": "MemberExpression",
                "value": "member.game"
            }
        },
        "undocumented": true,
        "name": "game",
        "longname": "<anonymous>~oldPresence.game",
        "kind": "member",
        "memberof": "<anonymous>~oldPresence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12264,
                12285
            ],
            "filename": "Shard.js",
            "lineno": 307,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013743",
                "name": "status",
                "type": "MemberExpression",
                "value": "member.status"
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "<anonymous>~oldPresence.status",
        "kind": "member",
        "memberof": "<anonymous>~oldPresence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12311,
                12344
            ],
            "filename": "Shard.js",
            "lineno": 308,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013747",
                "name": "clientStatus",
                "type": "MemberExpression",
                "value": "member.clientStatus"
            }
        },
        "undocumented": true,
        "name": "clientStatus",
        "longname": "<anonymous>~oldPresence.clientStatus",
        "kind": "member",
        "memberof": "<anonymous>~oldPresence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12370,
                12399
            ],
            "filename": "Shard.js",
            "lineno": 309,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013751",
                "name": "activities",
                "type": "MemberExpression",
                "value": "member.activities"
            }
        },
        "undocumented": true,
        "name": "activities",
        "longname": "<anonymous>~oldPresence.activities",
        "kind": "member",
        "memberof": "<anonymous>~oldPresence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12534,
                12580
            ],
            "filename": "Shard.js",
            "lineno": 313,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013770",
                "name": "member",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12838,
                12868
            ],
            "filename": "Shard.js",
            "lineno": 320,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013804",
                "name": "packet.d.id",
                "type": "MemberExpression",
                "value": "packet.d.user_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "packet.d.id",
        "kind": "member",
        "memberof": "packet.d",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12953,
                12965
            ],
            "filename": "Shard.js",
            "lineno": 322,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013825",
                "name": "flag",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "flag",
        "longname": "<anonymous>~flag",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13001,
                13013
            ],
            "filename": "Shard.js",
            "lineno": 323,
            "columnno": 34,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013830",
                "name": "groupChannel"
            }
        },
        "undocumented": true,
        "name": "groupChannel",
        "longname": "<anonymous>~groupChannel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13080,
                13137
            ],
            "filename": "Shard.js",
            "lineno": 324,
            "columnno": 34,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013839",
                "name": "call",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "call",
        "longname": "<anonymous>~call",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13247,
                13258
            ],
            "filename": "Shard.js",
            "lineno": 326,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013866",
                "name": "flag",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flag",
        "longname": "<anonymous>~flag",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13429,
                13443
            ],
            "filename": "Shard.js",
            "lineno": 331,
            "columnno": 38,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013876",
                "name": "privateChannel"
            }
        },
        "undocumented": true,
        "name": "privateChannel",
        "longname": "<anonymous>~privateChannel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13516,
                13577
            ],
            "filename": "Shard.js",
            "lineno": 332,
            "columnno": 38,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013885",
                "name": "call",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "call",
        "longname": "<anonymous>~call",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13695,
                13706
            ],
            "filename": "Shard.js",
            "lineno": 334,
            "columnno": 36,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013912",
                "name": "flag",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flag",
        "longname": "<anonymous>~flag",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14126,
                14179
            ],
            "filename": "Shard.js",
            "lineno": 344,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013932",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14585,
                14634
            ],
            "filename": "Shard.js",
            "lineno": 353,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100013984",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14883,
                14941
            ],
            "filename": "Shard.js",
            "lineno": 361,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014021",
                "name": "member",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14910,
                14940
            ],
            "filename": "Shard.js",
            "lineno": 361,
            "columnno": 47,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014029",
                "name": "packet.d.id",
                "type": "MemberExpression",
                "value": "packet.d.user_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "packet.d.id",
        "longname": "<anonymous>~member.packet.d.id",
        "kind": "member",
        "memberof": "<anonymous>~member",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15077,
                15114
            ],
            "filename": "Shard.js",
            "lineno": 364,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014045",
                "name": "packet.d.member.id",
                "type": "MemberExpression",
                "value": "packet.d.user_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "packet.d.member.id",
        "kind": "member",
        "memberof": "packet.d.member",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15136,
                15186
            ],
            "filename": "Shard.js",
            "lineno": 365,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014059",
                "name": "member",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15215,
                15341
            ],
            "filename": "Shard.js",
            "lineno": 367,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014074",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15620,
                15927
            ],
            "filename": "Shard.js",
            "lineno": 373,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014133",
                "name": "oldState",
                "type": "ObjectExpression",
                "value": "{\"mute\":\"\",\"deaf\":\"\",\"selfMute\":\"\",\"selfDeaf\":\"\",\"selfStream\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "oldState",
        "longname": "<anonymous>~oldState",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15653,
                15681
            ],
            "filename": "Shard.js",
            "lineno": 374,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014136",
                "name": "mute",
                "type": "MemberExpression",
                "value": "member.voiceState.mute"
            }
        },
        "undocumented": true,
        "name": "mute",
        "longname": "<anonymous>~oldState.mute",
        "kind": "member",
        "memberof": "<anonymous>~oldState",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15703,
                15731
            ],
            "filename": "Shard.js",
            "lineno": 375,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014142",
                "name": "deaf",
                "type": "MemberExpression",
                "value": "member.voiceState.deaf"
            }
        },
        "undocumented": true,
        "name": "deaf",
        "longname": "<anonymous>~oldState.deaf",
        "kind": "member",
        "memberof": "<anonymous>~oldState",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15753,
                15789
            ],
            "filename": "Shard.js",
            "lineno": 376,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014148",
                "name": "selfMute",
                "type": "MemberExpression",
                "value": "member.voiceState.selfMute"
            }
        },
        "undocumented": true,
        "name": "selfMute",
        "longname": "<anonymous>~oldState.selfMute",
        "kind": "member",
        "memberof": "<anonymous>~oldState",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15811,
                15847
            ],
            "filename": "Shard.js",
            "lineno": 377,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014154",
                "name": "selfDeaf",
                "type": "MemberExpression",
                "value": "member.voiceState.selfDeaf"
            }
        },
        "undocumented": true,
        "name": "selfDeaf",
        "longname": "<anonymous>~oldState.selfDeaf",
        "kind": "member",
        "memberof": "<anonymous>~oldState",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15869,
                15909
            ],
            "filename": "Shard.js",
            "lineno": 378,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014160",
                "name": "selfStream",
                "type": "MemberExpression",
                "value": "member.voiceState.selfStream"
            }
        },
        "undocumented": true,
        "name": "selfStream",
        "longname": "<anonymous>~oldState.selfStream",
        "kind": "member",
        "memberof": "<anonymous>~oldState",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15951,
                15993
            ],
            "filename": "Shard.js",
            "lineno": 380,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014167",
                "name": "oldChannelID",
                "type": "MemberExpression",
                "value": "member.voiceState.channelID"
            }
        },
        "undocumented": true,
        "name": "oldChannelID",
        "longname": "<anonymous>~oldChannelID",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16136,
                16205
            ],
            "filename": "Shard.js",
            "lineno": 383,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014201",
                "name": "voiceConnection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "voiceConnection",
        "longname": "<anonymous>~voiceConnection",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16506,
                16516
            ],
            "filename": "Shard.js",
            "lineno": 389,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014250",
                "name": "oldChannel"
            }
        },
        "undocumented": true,
        "name": "oldChannel",
        "longname": "<anonymous>~oldChannel",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16518,
                16528
            ],
            "filename": "Shard.js",
            "lineno": 389,
            "columnno": 36,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014252",
                "name": "newChannel"
            }
        },
        "undocumented": true,
        "name": "newChannel",
        "longname": "<anonymous>~newChannel",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16593,
                16638
            ],
            "filename": "Shard.js",
            "lineno": 391,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014258",
                "name": "oldChannel",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "oldChannel",
        "longname": "<anonymous>~oldChannel",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16709,
                16761
            ],
            "filename": "Shard.js",
            "lineno": 393,
            "columnno": 47,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014275",
                "name": "newChannel",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "newChannel",
        "longname": "<anonymous>~newChannel",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n                            * Fired when a guild member switches voice channels\n                            * @event Client#voiceChannelSwitch\n                            * @prop {Member} member The member\n                            * @prop {VoiceChannel} newChannel The new voice channel\n                            * @prop {VoiceChannel} oldChannel The old voice channel\n                            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 395,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild member switches voice channels",
        "kind": "event",
        "name": "voiceChannelSwitch",
        "properties": [
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "description": "The member",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "VoiceChannel"
                    ]
                },
                "description": "The new voice channel",
                "name": "newChannel"
            },
            {
                "type": {
                    "names": [
                        "VoiceChannel"
                    ]
                },
                "description": "The old voice channel",
                "name": "oldChannel"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:voiceChannelSwitch",
        "scope": "instance"
    },
    {
        "comment": "/**\n                            * Fired when a guild member joins a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`\n                            * @event Client#voiceChannelJoin\n                            * @prop {Member} member The member\n                            * @prop {VoiceChannel} newChannel The voice channel\n                            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 405,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild member joins a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`",
        "kind": "event",
        "name": "voiceChannelJoin",
        "properties": [
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "description": "The member",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "VoiceChannel"
                    ]
                },
                "description": "The voice channel",
                "name": "newChannel"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:voiceChannelJoin",
        "scope": "instance"
    },
    {
        "comment": "/**\n                        * Fired when a guild member leaves a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`\n                        * @event Client#voiceChannelLeave\n                        * @prop {?Member} member The member\n                        * @prop {VoiceChannel} oldChannel The voice channel\n                        */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 415,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild member leaves a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`",
        "kind": "event",
        "name": "voiceChannelLeave",
        "properties": [
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "nullable": true,
                "description": "The member",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "VoiceChannel"
                    ]
                },
                "description": "The voice channel",
                "name": "oldChannel"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:voiceChannelLeave",
        "scope": "instance"
    },
    {
        "comment": "/**\n                    * Fired when a guild member's voice state changes\n                    * @event Client#voiceStateUpdate\n                    * @prop {Member} member The member\n                    * @prop {Object} oldState The old voice state\n                    * @prop {Boolean} oldState.mute The previous server mute status\n                    * @prop {Boolean} oldState.deaf The previous server deaf status\n                    * @prop {Boolean} oldState.selfMute The previous self mute status\n                    * @prop {Boolean} oldState.selfDeaf The previous self deaf status\n                    * @prop {Boolean} oldState.selfStream The previous self stream status\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 425,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild member's voice state changes",
        "kind": "event",
        "name": "voiceStateUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "description": "The member",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The old voice state",
                "name": "oldState"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "The previous server mute status",
                "name": "oldState.mute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "The previous server deaf status",
                "name": "oldState.deaf"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "The previous self mute status",
                "name": "oldState.selfMute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "The previous self deaf status",
                "name": "oldState.selfDeaf"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "The previous self stream status",
                "name": "oldState.selfStream"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:voiceStateUpdate",
        "scope": "instance"
    },
    {
        "comment": "/**\n                    * Fired when a user begins typing\n                    * @event Client#typingStart\n                    * @prop {PrivateChannel | TextChannel} channel The text channel the user is typing in\n                    * @prop {User} user The user\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 442,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a user begins typing",
        "kind": "event",
        "name": "typingStart",
        "properties": [
            {
                "type": {
                    "names": [
                        "PrivateChannel",
                        "TextChannel"
                    ]
                },
                "description": "The text channel the user is typing in",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The user",
                "name": "user"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:typingStart",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20504,
                20557
            ],
            "filename": "Shard.js",
            "lineno": 453,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014459",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20650,
                20685
            ],
            "filename": "Shard.js",
            "lineno": 455,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014476",
                "name": "channel.lastMessageID",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "packet.d.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastMessageID",
        "longname": "<anonymous>~channel.lastMessageID",
        "kind": "member",
        "memberof": "<anonymous>~channel",
        "scope": "static"
    },
    {
        "comment": "/**\n                    * Fired when a message is created\n                    * @event Client#messageCreate\n                    * @prop {Message} message The message\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 456,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a message is created",
        "kind": "event",
        "name": "messageCreate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message"
                    ]
                },
                "description": "The message",
                "name": "message"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:messageCreate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21241,
                21294
            ],
            "filename": "Shard.js",
            "lineno": 468,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014519",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21394,
                21437
            ],
            "filename": "Shard.js",
            "lineno": 472,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014538",
                "name": "message",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21459,
                21476
            ],
            "filename": "Shard.js",
            "lineno": 473,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014552",
                "name": "oldMessage",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "oldMessage",
        "longname": "<anonymous>~oldMessage",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21528,
                22111
            ],
            "filename": "Shard.js",
            "lineno": 475,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014559",
                "name": "oldMessage",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"attachments\":\"\",\"content\":\"\",\"embeds\":\"\",\"editedTimestamp\":\"\",\"mentionedBy\":\"\",\"mentions\":\"\",\"roleMentions\":\"\",\"channelMentions\":\"\",\"tts\":\"\",\"pinned\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "oldMessage",
        "longname": "<anonymous>~oldMessage",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21567,
                21599
            ],
            "filename": "Shard.js",
            "lineno": 476,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014562",
                "name": "attachments",
                "type": "MemberExpression",
                "value": "message.attachments"
            }
        },
        "undocumented": true,
        "name": "attachments",
        "longname": "<anonymous>~oldMessage.attachments",
        "kind": "member",
        "memberof": "<anonymous>~oldMessage",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21625,
                21649
            ],
            "filename": "Shard.js",
            "lineno": 477,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014566",
                "name": "content",
                "type": "MemberExpression",
                "value": "message.content"
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "<anonymous>~oldMessage.content",
        "kind": "member",
        "memberof": "<anonymous>~oldMessage",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21675,
                21697
            ],
            "filename": "Shard.js",
            "lineno": 478,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014570",
                "name": "embeds",
                "type": "MemberExpression",
                "value": "message.embeds"
            }
        },
        "undocumented": true,
        "name": "embeds",
        "longname": "<anonymous>~oldMessage.embeds",
        "kind": "member",
        "memberof": "<anonymous>~oldMessage",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21723,
                21763
            ],
            "filename": "Shard.js",
            "lineno": 479,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014574",
                "name": "editedTimestamp",
                "type": "MemberExpression",
                "value": "message.editedTimestamp"
            }
        },
        "undocumented": true,
        "name": "editedTimestamp",
        "longname": "<anonymous>~oldMessage.editedTimestamp",
        "kind": "member",
        "memberof": "<anonymous>~oldMessage",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21789,
                21821
            ],
            "filename": "Shard.js",
            "lineno": 480,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014578",
                "name": "mentionedBy",
                "type": "MemberExpression",
                "value": "message.mentionedBy"
            }
        },
        "undocumented": true,
        "name": "mentionedBy",
        "longname": "<anonymous>~oldMessage.mentionedBy",
        "kind": "member",
        "memberof": "<anonymous>~oldMessage",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21847,
                21873
            ],
            "filename": "Shard.js",
            "lineno": 481,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014582",
                "name": "mentions",
                "type": "MemberExpression",
                "value": "message.mentions"
            }
        },
        "undocumented": true,
        "name": "mentions",
        "longname": "<anonymous>~oldMessage.mentions",
        "kind": "member",
        "memberof": "<anonymous>~oldMessage",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21899,
                21933
            ],
            "filename": "Shard.js",
            "lineno": 482,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014586",
                "name": "roleMentions",
                "type": "MemberExpression",
                "value": "message.roleMentions"
            }
        },
        "undocumented": true,
        "name": "roleMentions",
        "longname": "<anonymous>~oldMessage.roleMentions",
        "kind": "member",
        "memberof": "<anonymous>~oldMessage",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21959,
                21999
            ],
            "filename": "Shard.js",
            "lineno": 483,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014590",
                "name": "channelMentions",
                "type": "MemberExpression",
                "value": "message.channelMentions"
            }
        },
        "undocumented": true,
        "name": "channelMentions",
        "longname": "<anonymous>~oldMessage.channelMentions",
        "kind": "member",
        "memberof": "<anonymous>~oldMessage",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22025,
                22041
            ],
            "filename": "Shard.js",
            "lineno": 484,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014594",
                "name": "tts",
                "type": "MemberExpression",
                "value": "message.tts"
            }
        },
        "undocumented": true,
        "name": "tts",
        "longname": "<anonymous>~oldMessage.tts",
        "kind": "member",
        "memberof": "<anonymous>~oldMessage",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22067,
                22089
            ],
            "filename": "Shard.js",
            "lineno": 485,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014598",
                "name": "pinned",
                "type": "MemberExpression",
                "value": "message.pinned"
            }
        },
        "undocumented": true,
        "name": "pinned",
        "longname": "<anonymous>~oldMessage.pinned",
        "kind": "member",
        "memberof": "<anonymous>~oldMessage",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22182,
                22208
            ],
            "filename": "Shard.js",
            "lineno": 488,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014611",
                "name": "packet.d.channel",
                "type": "Identifier",
                "value": "channel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "packet.d.channel",
        "kind": "member",
        "memberof": "packet.d",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when a message is updated\n                * @event Client#messageUpdate\n                * @prop {Message} message The updated message. If oldMessage is null, it is recommended to discard this event, since the message data will be very incomplete (only `id` and `channel` are guaranteed)\n                * @prop {Object?} oldMessage The old message data. If the message was cached, this will return the full old message. Otherwise, it will be null\n                * @prop {Object[]} oldMessage.attachments Array of attachments\n                * @prop {Object[]} oldMessage.embeds Array of embeds\n                * @prop {String} oldMessage.content Message content\n                * @prop {Number} oldMessage.editedTimestamp Timestamp of latest message edit\n                * @prop {Object} oldMessage.mentionedBy Object of if different things mention the bot user\n                * @prop {Boolean} oldMessage.pinned Whether the message was pinned or not\n                * @prop {Boolean} oldMessage.tts Whether to play the message using TTS or not\n                * @prop {String[]} oldMessage.mentions Array of mentioned users' ids\n                * @prop {String[]} oldMessage.roleMentions Array of mentioned roles' ids.\n                * @prop {String[]} oldMessage.channelMentions Array of mentions channels' ids.\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 492,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a message is updated",
        "kind": "event",
        "name": "messageUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message"
                    ]
                },
                "description": "The updated message. If oldMessage is null, it is recommended to discard this event, since the message data will be very incomplete (only `id` and `channel` are guaranteed)",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The old message data. If the message was cached, this will return the full old message. Otherwise, it will be null",
                "name": "oldMessage"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "Array of attachments",
                "name": "oldMessage.attachments"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "Array of embeds",
                "name": "oldMessage.embeds"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Message content",
                "name": "oldMessage.content"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of latest message edit",
                "name": "oldMessage.editedTimestamp"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object of if different things mention the bot user",
                "name": "oldMessage.mentionedBy"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the message was pinned or not",
                "name": "oldMessage.pinned"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether to play the message using TTS or not",
                "name": "oldMessage.tts"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of mentioned users' ids",
                "name": "oldMessage.mentions"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of mentioned roles' ids.",
                "name": "oldMessage.roleMentions"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of mentions channels' ids.",
                "name": "oldMessage.channelMentions"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:messageUpdate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23899,
                23952
            ],
            "filename": "Shard.js",
            "lineno": 512,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014653",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n                * Fired when a cached message is deleted\n                * @event Client#messageDelete\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 516,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a cached message is deleted",
        "kind": "event",
        "name": "messageDelete",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message",
                        "Object"
                    ]
                },
                "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed",
                "name": "message"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:messageDelete",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24460,
                24475
            ],
            "filename": "Shard.js",
            "lineno": 522,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014688",
                "name": "id",
                "type": "MemberExpression",
                "value": "packet.d.id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24497,
                24513
            ],
            "filename": "Shard.js",
            "lineno": 523,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014694",
                "name": "channel",
                "type": "Identifier",
                "value": "channel"
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "channel",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24635,
                24688
            ],
            "filename": "Shard.js",
            "lineno": 528,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014701",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n                * Fired when a bulk delete occurs\n                * @event Client#messageDeleteBulk\n                * @prop {Message[] | Object[]} messages An array of (potentially partial) message objects. If a message is not cached, it will be an object with `id` and `channel` keys. No other property is guaranteed\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 533,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a bulk delete occurs",
        "kind": "event",
        "name": "messageDeleteBulk",
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<Message>",
                        "Array.<Object>"
                    ]
                },
                "description": "An array of (potentially partial) message objects. If a message is not cached, it will be an object with `id` and `channel` keys. No other property is guaranteed",
                "name": "messages"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:messageDeleteBulk",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25243,
                25245
            ],
            "filename": "Shard.js",
            "lineno": 539,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014743",
                "name": "id",
                "type": "Identifier",
                "value": "id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25290,
                25292
            ],
            "filename": "Shard.js",
            "lineno": 541,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014746",
                "name": "id",
                "type": "Identifier",
                "value": "id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25314,
                25321
            ],
            "filename": "Shard.js",
            "lineno": 542,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014748",
                "name": "channel",
                "type": "Identifier",
                "value": "channel"
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "channel",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25446,
                25499
            ],
            "filename": "Shard.js",
            "lineno": 547,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014755",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25521,
                25528
            ],
            "filename": "Shard.js",
            "lineno": 548,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014769",
                "name": "message"
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25580,
                25631
            ],
            "filename": "Shard.js",
            "lineno": 550,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014775",
                "name": "message",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25703,
                25755
            ],
            "filename": "Shard.js",
            "lineno": 552,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014794",
                "name": "member",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25915,
                25952
            ],
            "filename": "Shard.js",
            "lineno": 555,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014814",
                "name": "packet.d.member.id",
                "type": "MemberExpression",
                "value": "packet.d.user_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "packet.d.member.id",
        "kind": "member",
        "memberof": "packet.d.member",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26163,
                26261
            ],
            "filename": "Shard.js",
            "lineno": 561,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014848",
                "name": "reaction",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reaction",
        "longname": "<anonymous>~reaction",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26477,
                26514
            ],
            "filename": "Shard.js",
            "lineno": 565,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014915",
                "name": "message.reactions[undefined].me",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reactions[undefined].me",
        "longname": "<anonymous>~message.reactions[undefined].me",
        "kind": "member",
        "memberof": "<anonymous>~message",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26595,
                26763
            ],
            "filename": "Shard.js",
            "lineno": 568,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014926",
                "name": "message.reactions[undefined]",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"count\":1,\"me\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reactions[undefined]",
        "longname": "<anonymous>~message.reactions[undefined]",
        "kind": "member",
        "memberof": "<anonymous>~message",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26655,
                26663
            ],
            "filename": "Shard.js",
            "lineno": 569,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014933",
                "name": "count",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "count",
        "longname": "<anonymous>~message.reactions[undefined].count",
        "kind": "member",
        "memberof": "<anonymous>~message.reactions[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26693,
                26737
            ],
            "filename": "Shard.js",
            "lineno": 570,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014935",
                "name": "me",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "me",
        "longname": "<anonymous>~message.reactions[undefined].me",
        "kind": "member",
        "memberof": "<anonymous>~message.reactions[undefined]",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when someone adds a reaction to a message\n                * @event Client#messageReactionAdd\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed\n                * @prop {Object} emoji The reaction emoji object\n                * @prop {String?} emoji.id The emoji ID (null for non-custom emojis)\n                * @prop {String} emoji.name The emoji name\n                * @prop {String} userID The ID of the user that added the reaction\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 574,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when someone adds a reaction to a message",
        "kind": "event",
        "name": "messageReactionAdd",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message",
                        "Object"
                    ]
                },
                "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The reaction emoji object",
                "name": "emoji"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The emoji ID (null for non-custom emojis)",
                "name": "emoji.id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The emoji name",
                "name": "emoji.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that added the reaction",
                "name": "userID"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:messageReactionAdd",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27597,
                27620
            ],
            "filename": "Shard.js",
            "lineno": 584,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014958",
                "name": "id",
                "type": "MemberExpression",
                "value": "packet.d.message_id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27642,
                27687
            ],
            "filename": "Shard.js",
            "lineno": 585,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014964",
                "name": "channel",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "channel",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27663,
                27686
            ],
            "filename": "Shard.js",
            "lineno": 585,
            "columnno": 41,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014968",
                "name": "id",
                "type": "MemberExpression",
                "value": "packet.d.channel_id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27847,
                27900
            ],
            "filename": "Shard.js",
            "lineno": 590,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100014989",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27922,
                27929
            ],
            "filename": "Shard.js",
            "lineno": 591,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015003",
                "name": "message"
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27981,
                28032
            ],
            "filename": "Shard.js",
            "lineno": 593,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015009",
                "name": "message",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28108,
                28206
            ],
            "filename": "Shard.js",
            "lineno": 596,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015026",
                "name": "reaction",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reaction",
        "longname": "<anonymous>~reaction",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28234,
                28275
            ],
            "filename": "Shard.js",
            "lineno": 597,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015062",
                "name": "reactionObj",
                "type": "MemberExpression",
                "value": "message.reactions[undefined]"
            }
        },
        "undocumented": true,
        "name": "reactionObj",
        "longname": "<anonymous>~reactionObj",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28584,
                28606
            ],
            "filename": "Shard.js",
            "lineno": 603,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015107",
                "name": "reactionObj.me",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "me",
        "longname": "<anonymous>~reactionObj.me",
        "kind": "member",
        "memberof": "<anonymous>~reactionObj",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when someone removes a reaction from a message\n                * @event Client#messageReactionRemove\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed\n                * @prop {Object} emoji The reaction emoji object\n                * @prop {String?} emoji.id The ID of the emoji (null for non-custom emojis)\n                * @prop {String} emoji.name The emoji name\n                * @prop {String} userID The ID of the user that removed the reaction\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 607,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when someone removes a reaction from a message",
        "kind": "event",
        "name": "messageReactionRemove",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message",
                        "Object"
                    ]
                },
                "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The reaction emoji object",
                "name": "emoji"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the emoji (null for non-custom emojis)",
                "name": "emoji.id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The emoji name",
                "name": "emoji.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that removed the reaction",
                "name": "userID"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:messageReactionRemove",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29486,
                29509
            ],
            "filename": "Shard.js",
            "lineno": 617,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015121",
                "name": "id",
                "type": "MemberExpression",
                "value": "packet.d.message_id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29531,
                29576
            ],
            "filename": "Shard.js",
            "lineno": 618,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015127",
                "name": "channel",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "channel",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29552,
                29575
            ],
            "filename": "Shard.js",
            "lineno": 618,
            "columnno": 41,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015131",
                "name": "id",
                "type": "MemberExpression",
                "value": "packet.d.channel_id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29740,
                29793
            ],
            "filename": "Shard.js",
            "lineno": 623,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015152",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29815,
                29822
            ],
            "filename": "Shard.js",
            "lineno": 624,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015166",
                "name": "message"
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29874,
                29925
            ],
            "filename": "Shard.js",
            "lineno": 626,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015172",
                "name": "message",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                29985,
                30007
            ],
            "filename": "Shard.js",
            "lineno": 628,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015189",
                "name": "message.reactions",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reactions",
        "longname": "<anonymous>~message.reactions",
        "kind": "member",
        "memberof": "<anonymous>~message",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when all reactions are removed from a message\n                * @event Client#messageReactionRemoveAll\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 631,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when all reactions are removed from a message",
        "kind": "event",
        "name": "messageReactionRemoveAll",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message",
                        "Object"
                    ]
                },
                "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed",
                "name": "message"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:messageReactionRemoveAll",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30565,
                30588
            ],
            "filename": "Shard.js",
            "lineno": 637,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015203",
                "name": "id",
                "type": "MemberExpression",
                "value": "packet.d.message_id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30610,
                30655
            ],
            "filename": "Shard.js",
            "lineno": 638,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015209",
                "name": "channel",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "channel",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30631,
                30654
            ],
            "filename": "Shard.js",
            "lineno": 638,
            "columnno": 41,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015213",
                "name": "id",
                "type": "MemberExpression",
                "value": "packet.d.channel_id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30787,
                30840
            ],
            "filename": "Shard.js",
            "lineno": 643,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015224",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30862,
                30869
            ],
            "filename": "Shard.js",
            "lineno": 644,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015238",
                "name": "message"
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30921,
                30972
            ],
            "filename": "Shard.js",
            "lineno": 646,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015244",
                "name": "message",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "<anonymous>~message",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31038,
                31136
            ],
            "filename": "Shard.js",
            "lineno": 648,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015261",
                "name": "reaction",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "reaction",
        "longname": "<anonymous>~reaction",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n                * Fired when someone removes all reactions from a message for a single emoji\n                * @event Client#messageReactionRemoveEmoji\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed\n                * @prop {Object} emoji The emoji object with a `name` prop. If the emoji is a custom emoji it will also have an `id` prop.\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 652,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when someone removes all reactions from a message for a single emoji",
        "kind": "event",
        "name": "messageReactionRemoveEmoji",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message",
                        "Object"
                    ]
                },
                "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The emoji object with a `name` prop. If the emoji is a custom emoji it will also have an `id` prop.",
                "name": "emoji"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:messageReactionRemoveEmoji",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31920,
                31943
            ],
            "filename": "Shard.js",
            "lineno": 659,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015312",
                "name": "id",
                "type": "MemberExpression",
                "value": "packet.d.message_id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31965,
                32010
            ],
            "filename": "Shard.js",
            "lineno": 660,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015318",
                "name": "channel",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "channel",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31986,
                32009
            ],
            "filename": "Shard.js",
            "lineno": 660,
            "columnno": 41,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015322",
                "name": "id",
                "type": "MemberExpression",
                "value": "packet.d.channel_id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                32145,
                32194
            ],
            "filename": "Shard.js",
            "lineno": 665,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015338",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                32422,
                32452
            ],
            "filename": "Shard.js",
            "lineno": 670,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015373",
                "name": "packet.d.id",
                "type": "MemberExpression",
                "value": "packet.d.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "packet.d.id",
        "kind": "member",
        "memberof": "packet.d",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when a member joins a server\n                * @event Client#guildMemberAdd\n                * @prop {Guild} guild The guild\n                * @prop {Member} member The member\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 672,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a member joins a server",
        "kind": "event",
        "name": "guildMemberAdd",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "description": "The member",
                "name": "member"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildMemberAdd",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33153,
                33199
            ],
            "filename": "Shard.js",
            "lineno": 684,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015439",
                "name": "user",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "<anonymous>~user",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33225,
                33239
            ],
            "filename": "Shard.js",
            "lineno": 685,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015457",
                "name": "oldUser",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "oldUser",
        "longname": "<anonymous>~oldUser",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33436,
                33637
            ],
            "filename": "Shard.js",
            "lineno": 687,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015500",
                "name": "oldUser",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"username\":\"\",\"discriminator\":\"\",\"avatar\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "oldUser",
        "longname": "<anonymous>~oldUser",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33476,
                33499
            ],
            "filename": "Shard.js",
            "lineno": 688,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015503",
                "name": "username",
                "type": "MemberExpression",
                "value": "user.username"
            }
        },
        "undocumented": true,
        "name": "username",
        "longname": "<anonymous>~oldUser.username",
        "kind": "member",
        "memberof": "<anonymous>~oldUser",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33529,
                33562
            ],
            "filename": "Shard.js",
            "lineno": 689,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015507",
                "name": "discriminator",
                "type": "MemberExpression",
                "value": "user.discriminator"
            }
        },
        "undocumented": true,
        "name": "discriminator",
        "longname": "<anonymous>~oldUser.discriminator",
        "kind": "member",
        "memberof": "<anonymous>~oldUser",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33592,
                33611
            ],
            "filename": "Shard.js",
            "lineno": 690,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015511",
                "name": "avatar",
                "type": "MemberExpression",
                "value": "user.avatar"
            }
        },
        "undocumented": true,
        "name": "avatar",
        "longname": "<anonymous>~oldUser.avatar",
        "kind": "member",
        "memberof": "<anonymous>~oldUser",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                33728,
                33787
            ],
            "filename": "Shard.js",
            "lineno": 694,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015522",
                "name": "user",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "<anonymous>~user",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n                        * Fired when a user's username, avatar, or discriminator changes\n                        * @event Client#userUpdate\n                        * @prop {User} user The updated user\n                        * @prop {Object?} oldUser The old user data\n                        * @prop {String} oldUser.username The username of the user\n                        * @prop {String} oldUser.discriminator The discriminator of the user\n                        * @prop {String?} oldUser.avatar The hash of the user's avatar, or null if no avatar\n                        */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 695,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a user's username, avatar, or discriminator changes",
        "kind": "event",
        "name": "userUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The updated user",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The old user data",
                "name": "oldUser"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The username of the user",
                "name": "oldUser.username"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The discriminator of the user",
                "name": "oldUser.discriminator"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the user's avatar, or null if no avatar",
                "name": "oldUser.avatar"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:userUpdate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34524,
                34573
            ],
            "filename": "Shard.js",
            "lineno": 707,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015549",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34770,
                34828
            ],
            "filename": "Shard.js",
            "lineno": 712,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015584",
                "name": "member",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34797,
                34827
            ],
            "filename": "Shard.js",
            "lineno": 712,
            "columnno": 47,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015592",
                "name": "packet.d.id",
                "type": "MemberExpression",
                "value": "packet.d.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "packet.d.id",
        "longname": "<anonymous>~member.packet.d.id",
        "kind": "member",
        "memberof": "<anonymous>~member",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34850,
                34866
            ],
            "filename": "Shard.js",
            "lineno": 713,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015606",
                "name": "oldMember",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "oldMember",
        "longname": "<anonymous>~oldMember",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34917,
                35039
            ],
            "filename": "Shard.js",
            "lineno": 715,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015613",
                "name": "oldMember",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"roles\":\"\",\"nick\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "oldMember",
        "longname": "<anonymous>~oldMember",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                34955,
                34974
            ],
            "filename": "Shard.js",
            "lineno": 716,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015616",
                "name": "roles",
                "type": "MemberExpression",
                "value": "member.roles"
            }
        },
        "undocumented": true,
        "name": "roles",
        "longname": "<anonymous>~oldMember.roles",
        "kind": "member",
        "memberof": "<anonymous>~oldMember",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35000,
                35017
            ],
            "filename": "Shard.js",
            "lineno": 717,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015620",
                "name": "nick",
                "type": "MemberExpression",
                "value": "member.nick"
            }
        },
        "undocumented": true,
        "name": "nick",
        "longname": "<anonymous>~oldMember.nick",
        "kind": "member",
        "memberof": "<anonymous>~oldMember",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35075,
                35121
            ],
            "filename": "Shard.js",
            "lineno": 720,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015625",
                "name": "member",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n                * Fired when a member's roles or nickname are updated\n                * @event Client#guildMemberUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Member} member The updated member\n                * @prop {Object?} oldMember The old member data\n                * @prop {String[]} oldMember.roles An array of role IDs this member is a part of\n                * @prop {String?} oldMember.nick The server nickname of the member\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 721,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a member's roles or nickname are updated",
        "kind": "event",
        "name": "guildMemberUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "description": "The updated member",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The old member data",
                "name": "oldMember"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "An array of role IDs this member is a part of",
                "name": "oldMember.roles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The server nickname of the member",
                "name": "oldMember.nick"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildMemberUpdate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                35947,
                35996
            ],
            "filename": "Shard.js",
            "lineno": 737,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015669",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36125,
                36155
            ],
            "filename": "Shard.js",
            "lineno": 742,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015695",
                "name": "packet.d.id",
                "type": "MemberExpression",
                "value": "packet.d.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "packet.d.id",
        "kind": "member",
        "memberof": "packet.d",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when a member leaves a server\n                * @event Client#guildMemberRemove\n                * @prop {Guild} guild The guild\n                * @prop {Member | Object} member The member. If the member is not cached, this will be an object with `id` and `user` key\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 743,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a member leaves a server",
        "kind": "event",
        "name": "guildMemberRemove",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Member",
                        "Object"
                    ]
                },
                "description": "The member. If the member is not cached, this will be an object with `id` and `user` key",
                "name": "member"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildMemberRemove",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36596,
                36611
            ],
            "filename": "Shard.js",
            "lineno": 750,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015726",
                "name": "id",
                "type": "MemberExpression",
                "value": "packet.d.id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36633,
                36675
            ],
            "filename": "Shard.js",
            "lineno": 751,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015732",
                "name": "user",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "user",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                36838,
                36872
            ],
            "filename": "Shard.js",
            "lineno": 757,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015756",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n                            * Fired when a guild becomes available\n                            * @event Client#guildAvailable\n                            * @prop {Guild} guild The guild\n                            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 760,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild becomes available",
        "kind": "event",
        "name": "guildAvailable",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildAvailable",
        "scope": "instance"
    },
    {
        "comment": "/**\n                            * Fired when a guild is created. This happens when:\n                            * - the client creates a guild\n                            * - the client joins a guild\n                            * @event Client#guildCreate\n                            * @prop {Guild} guild The guild\n                            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 767,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild is created. This happens when:\n- the client creates a guild\n- the client joins a guild",
        "kind": "event",
        "name": "guildCreate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildCreate",
        "scope": "instance"
    },
    {
        "comment": "/**\n                    * Fired when an unavailable guild is created\n                    * @event Client#unavailableGuildCreate\n                    * @prop {UnavailableGuild} guild The unavailable guild\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 782,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when an unavailable guild is created",
        "kind": "event",
        "name": "unavailableGuildCreate",
        "properties": [
            {
                "type": {
                    "names": [
                        "UnavailableGuild"
                    ]
                },
                "description": "The unavailable guild",
                "name": "guild"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:unavailableGuildCreate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38532,
                38575
            ],
            "filename": "Shard.js",
            "lineno": 792,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015854",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38761,
                38776
            ],
            "filename": "Shard.js",
            "lineno": 797,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015889",
                "name": "oldGuild",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "oldGuild",
        "longname": "<anonymous>~oldGuild",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38794,
                39597
            ],
            "filename": "Shard.js",
            "lineno": 798,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015893",
                "name": "oldGuild",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"name\":\"\",\"verificationLevel\":\"\",\"splash\":\"\",\"banner\":\"\",\"region\":\"\",\"ownerID\":\"\",\"icon\":\"\",\"features\":\"\",\"emojis\":\"\",\"afkChannelID\":\"\",\"afkTimeout\":\"\",\"mfaLevel\":\"\",\"large\":\"\",\"maxPresences\":\"\",\"explicitContentFilter\":\"\",\"systemChannelID\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "oldGuild",
        "longname": "<anonymous>~oldGuild",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38827,
                38843
            ],
            "filename": "Shard.js",
            "lineno": 799,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015896",
                "name": "name",
                "type": "MemberExpression",
                "value": "guild.name"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "<anonymous>~oldGuild.name",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38865,
                38907
            ],
            "filename": "Shard.js",
            "lineno": 800,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015900",
                "name": "verificationLevel",
                "type": "MemberExpression",
                "value": "guild.verificationLevel"
            }
        },
        "undocumented": true,
        "name": "verificationLevel",
        "longname": "<anonymous>~oldGuild.verificationLevel",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38929,
                38949
            ],
            "filename": "Shard.js",
            "lineno": 801,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015904",
                "name": "splash",
                "type": "MemberExpression",
                "value": "guild.splash"
            }
        },
        "undocumented": true,
        "name": "splash",
        "longname": "<anonymous>~oldGuild.splash",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                38971,
                38991
            ],
            "filename": "Shard.js",
            "lineno": 802,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015908",
                "name": "banner",
                "type": "MemberExpression",
                "value": "guild.banner"
            }
        },
        "undocumented": true,
        "name": "banner",
        "longname": "<anonymous>~oldGuild.banner",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39013,
                39033
            ],
            "filename": "Shard.js",
            "lineno": 803,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015912",
                "name": "region",
                "type": "MemberExpression",
                "value": "guild.region"
            }
        },
        "undocumented": true,
        "name": "region",
        "longname": "<anonymous>~oldGuild.region",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39055,
                39077
            ],
            "filename": "Shard.js",
            "lineno": 804,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015916",
                "name": "ownerID",
                "type": "MemberExpression",
                "value": "guild.ownerID"
            }
        },
        "undocumented": true,
        "name": "ownerID",
        "longname": "<anonymous>~oldGuild.ownerID",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39099,
                39115
            ],
            "filename": "Shard.js",
            "lineno": 805,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015920",
                "name": "icon",
                "type": "MemberExpression",
                "value": "guild.icon"
            }
        },
        "undocumented": true,
        "name": "icon",
        "longname": "<anonymous>~oldGuild.icon",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39137,
                39161
            ],
            "filename": "Shard.js",
            "lineno": 806,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015924",
                "name": "features",
                "type": "MemberExpression",
                "value": "guild.features"
            }
        },
        "undocumented": true,
        "name": "features",
        "longname": "<anonymous>~oldGuild.features",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39183,
                39203
            ],
            "filename": "Shard.js",
            "lineno": 807,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015928",
                "name": "emojis",
                "type": "MemberExpression",
                "value": "guild.emojis"
            }
        },
        "undocumented": true,
        "name": "emojis",
        "longname": "<anonymous>~oldGuild.emojis",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39225,
                39257
            ],
            "filename": "Shard.js",
            "lineno": 808,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015932",
                "name": "afkChannelID",
                "type": "MemberExpression",
                "value": "guild.afkChannelID"
            }
        },
        "undocumented": true,
        "name": "afkChannelID",
        "longname": "<anonymous>~oldGuild.afkChannelID",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39279,
                39307
            ],
            "filename": "Shard.js",
            "lineno": 809,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015936",
                "name": "afkTimeout",
                "type": "MemberExpression",
                "value": "guild.afkTimeout"
            }
        },
        "undocumented": true,
        "name": "afkTimeout",
        "longname": "<anonymous>~oldGuild.afkTimeout",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39329,
                39353
            ],
            "filename": "Shard.js",
            "lineno": 810,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015940",
                "name": "mfaLevel",
                "type": "MemberExpression",
                "value": "guild.mfaLevel"
            }
        },
        "undocumented": true,
        "name": "mfaLevel",
        "longname": "<anonymous>~oldGuild.mfaLevel",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39375,
                39393
            ],
            "filename": "Shard.js",
            "lineno": 811,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015944",
                "name": "large",
                "type": "MemberExpression",
                "value": "guild.large"
            }
        },
        "undocumented": true,
        "name": "large",
        "longname": "<anonymous>~oldGuild.large",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39415,
                39447
            ],
            "filename": "Shard.js",
            "lineno": 812,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015948",
                "name": "maxPresences",
                "type": "MemberExpression",
                "value": "guild.maxPresences"
            }
        },
        "undocumented": true,
        "name": "maxPresences",
        "longname": "<anonymous>~oldGuild.maxPresences",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39469,
                39519
            ],
            "filename": "Shard.js",
            "lineno": 813,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015952",
                "name": "explicitContentFilter",
                "type": "MemberExpression",
                "value": "guild.explicitContentFilter"
            }
        },
        "undocumented": true,
        "name": "explicitContentFilter",
        "longname": "<anonymous>~oldGuild.explicitContentFilter",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                39541,
                39579
            ],
            "filename": "Shard.js",
            "lineno": 814,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015956",
                "name": "systemChannelID",
                "type": "MemberExpression",
                "value": "guild.systemChannelID"
            }
        },
        "undocumented": true,
        "name": "systemChannelID",
        "longname": "<anonymous>~oldGuild.systemChannelID",
        "kind": "member",
        "memberof": "<anonymous>~oldGuild",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when a guild is updated\n                * @event Client#guildUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Object} oldGuild The old guild data\n                * @prop {String} oldGuild.name The name of the guild\n                * @prop {Number} oldGuild.verificationLevel The guild verification level\n                * @prop {String} oldGuild.region The region of the guild\n                * @prop {String?} oldGuild.icon The hash of the guild icon, or null if no icon\n                * @prop {String} oldGuild.afkChannelID The ID of the AFK voice channel\n                * @prop {Number} oldGuild.afkTimeout The AFK timeout in seconds\n                * @prop {String} oldGuild.ownerID The ID of the user that is the guild owner\n                * @prop {String?} oldGuild.splash The hash of the guild splash image, or null if no splash (VIP only)\n                * @prop {String?} oldGuild.banner The hash of the guild banner image, or null if no splash (VIP only)\n                * @prop {Object[]} oldGuild.features An array of guild features\n                * @prop {Object[]} oldGuild.emojis An array of guild emojis\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 816,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild is updated",
        "kind": "event",
        "name": "guildUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The old guild data",
                "name": "oldGuild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the guild",
                "name": "oldGuild.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The guild verification level",
                "name": "oldGuild.verificationLevel"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The region of the guild",
                "name": "oldGuild.region"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild icon, or null if no icon",
                "name": "oldGuild.icon"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the AFK voice channel",
                "name": "oldGuild.afkChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The AFK timeout in seconds",
                "name": "oldGuild.afkTimeout"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that is the guild owner",
                "name": "oldGuild.ownerID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild splash image, or null if no splash (VIP only)",
                "name": "oldGuild.splash"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild banner image, or null if no splash (VIP only)",
                "name": "oldGuild.banner"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "An array of guild features",
                "name": "oldGuild.features"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "An array of guild emojis",
                "name": "oldGuild.emojis"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildUpdate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                41013,
                41076
            ],
            "filename": "Shard.js",
            "lineno": 837,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100015986",
                "name": "voiceConnection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "voiceConnection",
        "longname": "<anonymous>~voiceConnection",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                41478,
                41521
            ],
            "filename": "Shard.js",
            "lineno": 847,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016048",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n                    * Fired when a guild becomes unavailable\n                    * @event Client#guildUnavailable\n                    * @prop {Guild} guild The guild\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 854,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild becomes unavailable",
        "kind": "event",
        "name": "guildUnavailable",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildUnavailable",
        "scope": "instance"
    },
    {
        "comment": "/**\n                    * Fired when a guild is deleted. This happens when:\n                    * - the client left the guild\n                    * - the client was kicked/banned from the guild\n                    * - the guild was literally deleted\n                    * @event Client#guildDelete\n                    * @prop {Guild} guild The guild\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 861,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild is deleted. This happens when:\n- the client left the guild\n- the client was kicked/banned from the guild\n- the guild was literally deleted",
        "kind": "event",
        "name": "guildDelete",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildDelete",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                42669,
                42684
            ],
            "filename": "Shard.js",
            "lineno": 870,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016122",
                "name": "id",
                "type": "MemberExpression",
                "value": "packet.d.id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n                * Fired when a user is banned from a guild\n                * @event Client#guildBanAdd\n                * @prop {Guild} guild The guild\n                * @prop {User} user The banned user\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 876,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a user is banned from a guild",
        "kind": "event",
        "name": "guildBanAdd",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The banned user",
                "name": "user"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildBanAdd",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired when a user is unbanned from a guild\n                * @event Client#guildBanRemove\n                * @prop {Guild} guild The guild\n                * @prop {User} user The banned user\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 886,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a user is unbanned from a guild",
        "kind": "event",
        "name": "guildBanRemove",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The banned user",
                "name": "user"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildBanRemove",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired when a guild role is created\n                * @event Client#guildRoleCreate\n                * @prop {Guild} guild The guild\n                * @prop {Role} role The role\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 896,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild role is created",
        "kind": "event",
        "name": "guildRoleCreate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Role"
                    ]
                },
                "description": "The role",
                "name": "role"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildRoleCreate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43978,
                44027
            ],
            "filename": "Shard.js",
            "lineno": 902,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016211",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                44393,
                44442
            ],
            "filename": "Shard.js",
            "lineno": 911,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016269",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                44641,
                44685
            ],
            "filename": "Shard.js",
            "lineno": 916,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016304",
                "name": "role",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "role",
        "longname": "<anonymous>~role",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                44906,
                44920
            ],
            "filename": "Shard.js",
            "lineno": 921,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016344",
                "name": "oldRole",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "oldRole",
        "longname": "<anonymous>~oldRole",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                44969,
                45334
            ],
            "filename": "Shard.js",
            "lineno": 923,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016351",
                "name": "oldRole",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"color\":\"\",\"hoist\":\"\",\"managed\":\"\",\"name\":\"\",\"permissions\":\"\",\"position\":\"\",\"mentionable\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "oldRole",
        "longname": "<anonymous>~oldRole",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45005,
                45022
            ],
            "filename": "Shard.js",
            "lineno": 924,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016354",
                "name": "color",
                "type": "MemberExpression",
                "value": "role.color"
            }
        },
        "undocumented": true,
        "name": "color",
        "longname": "<anonymous>~oldRole.color",
        "kind": "member",
        "memberof": "<anonymous>~oldRole",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45048,
                45065
            ],
            "filename": "Shard.js",
            "lineno": 925,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016358",
                "name": "hoist",
                "type": "MemberExpression",
                "value": "role.hoist"
            }
        },
        "undocumented": true,
        "name": "hoist",
        "longname": "<anonymous>~oldRole.hoist",
        "kind": "member",
        "memberof": "<anonymous>~oldRole",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45091,
                45112
            ],
            "filename": "Shard.js",
            "lineno": 926,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016362",
                "name": "managed",
                "type": "MemberExpression",
                "value": "role.managed"
            }
        },
        "undocumented": true,
        "name": "managed",
        "longname": "<anonymous>~oldRole.managed",
        "kind": "member",
        "memberof": "<anonymous>~oldRole",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45138,
                45153
            ],
            "filename": "Shard.js",
            "lineno": 927,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016366",
                "name": "name",
                "type": "MemberExpression",
                "value": "role.name"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "<anonymous>~oldRole.name",
        "kind": "member",
        "memberof": "<anonymous>~oldRole",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45179,
                45208
            ],
            "filename": "Shard.js",
            "lineno": 928,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016370",
                "name": "permissions",
                "type": "MemberExpression",
                "value": "role.permissions"
            }
        },
        "undocumented": true,
        "name": "permissions",
        "longname": "<anonymous>~oldRole.permissions",
        "kind": "member",
        "memberof": "<anonymous>~oldRole",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45234,
                45257
            ],
            "filename": "Shard.js",
            "lineno": 929,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016374",
                "name": "position",
                "type": "MemberExpression",
                "value": "role.position"
            }
        },
        "undocumented": true,
        "name": "position",
        "longname": "<anonymous>~oldRole.position",
        "kind": "member",
        "memberof": "<anonymous>~oldRole",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                45283,
                45312
            ],
            "filename": "Shard.js",
            "lineno": 930,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016378",
                "name": "mentionable",
                "type": "MemberExpression",
                "value": "role.mentionable"
            }
        },
        "undocumented": true,
        "name": "mentionable",
        "longname": "<anonymous>~oldRole.mentionable",
        "kind": "member",
        "memberof": "<anonymous>~oldRole",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when a guild role is updated\n                * @event Client#guildRoleUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Role} role The updated role\n                * @prop {Object} oldRole The old role data\n                * @prop {String} oldRole.name The name of the role\n                * @prop {Boolean} oldRole.mentionable Whether the role is mentionable or not\n                * @prop {Boolean} oldRole.managed Whether a guild integration manages this role or not\n                * @prop {Boolean} oldRole.hoist Whether users with this role are hoisted in the user list or not\n                * @prop {Number} oldRole.color The hex color of the role in base 10\n                * @prop {Number} oldRole.position The position of the role\n                * @prop {Permission} oldRole.permissions The permissions number of the role\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 933,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild role is updated",
        "kind": "event",
        "name": "guildRoleUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Role"
                    ]
                },
                "description": "The updated role",
                "name": "role"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The old role data",
                "name": "oldRole"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the role",
                "name": "oldRole.name"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the role is mentionable or not",
                "name": "oldRole.mentionable"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether a guild integration manages this role or not",
                "name": "oldRole.managed"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether users with this role are hoisted in the user list or not",
                "name": "oldRole.hoist"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The hex color of the role in base 10",
                "name": "oldRole.color"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the role",
                "name": "oldRole.position"
            },
            {
                "type": {
                    "names": [
                        "Permission"
                    ]
                },
                "description": "The permissions number of the role",
                "name": "oldRole.permissions"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildRoleUpdate",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired when a guild role is deleted\n                * @event Client#guildRoleDelete\n                * @prop {Guild} guild The guild\n                * @prop {Role} role The role\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 951,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild role is deleted",
        "kind": "event",
        "name": "guildRoleDelete",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Role"
                    ]
                },
                "description": "The role",
                "name": "role"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildRoleDelete",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46717,
                46766
            ],
            "filename": "Shard.js",
            "lineno": 957,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016407",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                47212,
                47232
            ],
            "filename": "Shard.js",
            "lineno": 966,
            "columnno": 72,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016484",
                "name": "id",
                "type": "MemberExpression",
                "value": "packet.d.role_id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                47332,
                47381
            ],
            "filename": "Shard.js",
            "lineno": 970,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016495",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                47574,
                47627
            ],
            "filename": "Shard.js",
            "lineno": 975,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016530",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n                * Fired when a guild invite is created\n                * @event Client#inviteCreate\n                * @prop {Guild} guild The guild this invite was created in.\n                * @prop {Invite} invite The invite that was created\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 980,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild invite is created",
        "kind": "event",
        "name": "inviteCreate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild this invite was created in.",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Invite"
                    ]
                },
                "description": "The invite that was created",
                "name": "invite"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:inviteCreate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48202,
                48207
            ],
            "filename": "Shard.js",
            "lineno": 988,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016576",
                "name": "guild",
                "type": "Identifier",
                "value": "guild"
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "guild",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48229,
                48236
            ],
            "filename": "Shard.js",
            "lineno": 989,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016578",
                "name": "channel",
                "type": "Identifier",
                "value": "channel"
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "channel",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48366,
                48415
            ],
            "filename": "Shard.js",
            "lineno": 994,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016588",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                48608,
                48661
            ],
            "filename": "Shard.js",
            "lineno": 999,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016623",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n                * Fired when a guild invite is deleted\n                * @event Client#inviteDelete\n                * @prop {Guild} guild The guild this invite was created in.\n                * @prop {Invite} invite The invite that was deleted\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1004,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild invite is deleted",
        "kind": "event",
        "name": "inviteDelete",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild this invite was created in.",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Invite"
                    ]
                },
                "description": "The invite that was deleted",
                "name": "invite"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:inviteDelete",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49236,
                49241
            ],
            "filename": "Shard.js",
            "lineno": 1012,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016669",
                "name": "guild",
                "type": "Identifier",
                "value": "guild"
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "guild",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49263,
                49270
            ],
            "filename": "Shard.js",
            "lineno": 1013,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016671",
                "name": "channel",
                "type": "Identifier",
                "value": "channel"
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "channel",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49401,
                49446
            ],
            "filename": "Shard.js",
            "lineno": 1018,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016681",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49553,
                49610
            ],
            "filename": "Shard.js",
            "lineno": 1021,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016707",
                "name": "channel.guild",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~channel.guild",
        "kind": "member",
        "memberof": "<anonymous>~channel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                49955,
                50015
            ],
            "filename": "Shard.js",
            "lineno": 1028,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016759",
                "name": "this.client.channelGuildMap[undefined]",
                "type": "MemberExpression",
                "value": "packet.d.guild_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channelGuildMap[undefined]",
        "longname": "Shard#client.channelGuildMap[undefined]",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "/**\n                    * Fired when a channel is created\n                    * @event Client#channelCreate\n                    * @prop {TextChannel | VoiceChannel | CategoryChannel | StoreChannel | NewsChannel | GuildChannel | PrivateChannel} channel The channel\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1029,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a channel is created",
        "kind": "event",
        "name": "channelCreate",
        "properties": [
            {
                "type": {
                    "names": [
                        "TextChannel",
                        "VoiceChannel",
                        "CategoryChannel",
                        "StoreChannel",
                        "NewsChannel",
                        "GuildChannel",
                        "PrivateChannel"
                    ]
                },
                "description": "The channel",
                "name": "channel"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:channelCreate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                50711,
                50781
            ],
            "filename": "Shard.js",
            "lineno": 1040,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016821",
                "name": "this.client.privateChannelMap[undefined]",
                "type": "MemberExpression",
                "value": "packet.d.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "privateChannelMap[undefined]",
        "longname": "Shard#client.privateChannelMap[undefined]",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51211,
                51256
            ],
            "filename": "Shard.js",
            "lineno": 1052,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016880",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51354,
                51364
            ],
            "filename": "Shard.js",
            "lineno": 1056,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016899",
                "name": "oldChannel"
            }
        },
        "undocumented": true,
        "name": "oldChannel",
        "longname": "<anonymous>~oldChannel",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51440,
                51613
            ],
            "filename": "Shard.js",
            "lineno": 1058,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016907",
                "name": "oldChannel",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"name\":\"\",\"ownerID\":\"\",\"icon\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "oldChannel",
        "longname": "<anonymous>~oldChannel",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51479,
                51497
            ],
            "filename": "Shard.js",
            "lineno": 1059,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016910",
                "name": "name",
                "type": "MemberExpression",
                "value": "channel.name"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "<anonymous>~oldChannel.name",
        "kind": "member",
        "memberof": "<anonymous>~oldChannel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51523,
                51547
            ],
            "filename": "Shard.js",
            "lineno": 1060,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016914",
                "name": "ownerID",
                "type": "MemberExpression",
                "value": "channel.ownerID"
            }
        },
        "undocumented": true,
        "name": "ownerID",
        "longname": "<anonymous>~oldChannel.ownerID",
        "kind": "member",
        "memberof": "<anonymous>~oldChannel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51573,
                51591
            ],
            "filename": "Shard.js",
            "lineno": 1061,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016918",
                "name": "icon",
                "type": "MemberExpression",
                "value": "channel.icon"
            }
        },
        "undocumented": true,
        "name": "icon",
        "longname": "<anonymous>~oldChannel.icon",
        "kind": "member",
        "memberof": "<anonymous>~oldChannel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51696,
                52207
            ],
            "filename": "Shard.js",
            "lineno": 1064,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016928",
                "name": "oldChannel",
                "type": "ObjectExpression",
                "funcscope": "<anonymous>",
                "value": "{\"name\":\"\",\"topic\":\"\",\"type\":\"\",\"position\":\"\",\"bitrate\":\"\",\"nsfw\":\"\",\"permissionOverwrites\":\"\",\"parentID\":\"\",\"rateLimitPerUser\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "oldChannel",
        "longname": "<anonymous>~oldChannel",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51735,
                51753
            ],
            "filename": "Shard.js",
            "lineno": 1065,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016931",
                "name": "name",
                "type": "MemberExpression",
                "value": "channel.name"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "<anonymous>~oldChannel.name",
        "kind": "member",
        "memberof": "<anonymous>~oldChannel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51779,
                51799
            ],
            "filename": "Shard.js",
            "lineno": 1066,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016935",
                "name": "topic",
                "type": "MemberExpression",
                "value": "channel.topic"
            }
        },
        "undocumented": true,
        "name": "topic",
        "longname": "<anonymous>~oldChannel.topic",
        "kind": "member",
        "memberof": "<anonymous>~oldChannel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51825,
                51843
            ],
            "filename": "Shard.js",
            "lineno": 1067,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016939",
                "name": "type",
                "type": "MemberExpression",
                "value": "channel.type"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "<anonymous>~oldChannel.type",
        "kind": "member",
        "memberof": "<anonymous>~oldChannel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51869,
                51895
            ],
            "filename": "Shard.js",
            "lineno": 1068,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016943",
                "name": "position",
                "type": "MemberExpression",
                "value": "channel.position"
            }
        },
        "undocumented": true,
        "name": "position",
        "longname": "<anonymous>~oldChannel.position",
        "kind": "member",
        "memberof": "<anonymous>~oldChannel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51921,
                51945
            ],
            "filename": "Shard.js",
            "lineno": 1069,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016947",
                "name": "bitrate",
                "type": "MemberExpression",
                "value": "channel.bitrate"
            }
        },
        "undocumented": true,
        "name": "bitrate",
        "longname": "<anonymous>~oldChannel.bitrate",
        "kind": "member",
        "memberof": "<anonymous>~oldChannel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                51971,
                51989
            ],
            "filename": "Shard.js",
            "lineno": 1070,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016951",
                "name": "nsfw",
                "type": "MemberExpression",
                "value": "channel.nsfw"
            }
        },
        "undocumented": true,
        "name": "nsfw",
        "longname": "<anonymous>~oldChannel.nsfw",
        "kind": "member",
        "memberof": "<anonymous>~oldChannel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52015,
                52065
            ],
            "filename": "Shard.js",
            "lineno": 1071,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016955",
                "name": "permissionOverwrites",
                "type": "MemberExpression",
                "value": "channel.permissionOverwrites"
            }
        },
        "undocumented": true,
        "name": "permissionOverwrites",
        "longname": "<anonymous>~oldChannel.permissionOverwrites",
        "kind": "member",
        "memberof": "<anonymous>~oldChannel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52091,
                52117
            ],
            "filename": "Shard.js",
            "lineno": 1072,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016959",
                "name": "parentID",
                "type": "MemberExpression",
                "value": "channel.parentID"
            }
        },
        "undocumented": true,
        "name": "parentID",
        "longname": "<anonymous>~oldChannel.parentID",
        "kind": "member",
        "memberof": "<anonymous>~oldChannel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52143,
                52185
            ],
            "filename": "Shard.js",
            "lineno": 1073,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016963",
                "name": "rateLimitPerUser",
                "type": "MemberExpression",
                "value": "channel.rateLimitPerUser"
            }
        },
        "undocumented": true,
        "name": "rateLimitPerUser",
        "longname": "<anonymous>~oldChannel.rateLimitPerUser",
        "kind": "member",
        "memberof": "<anonymous>~oldChannel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52390,
                52412
            ],
            "filename": "Shard.js",
            "lineno": 1078,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100016985",
                "name": "oldType",
                "type": "MemberExpression",
                "value": "channel.type"
            }
        },
        "undocumented": true,
        "name": "oldType",
        "longname": "<anonymous>~oldType",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52674,
                52722
            ],
            "filename": "Shard.js",
            "lineno": 1083,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017031",
                "name": "newChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "newChannel",
        "longname": "<anonymous>~newChannel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                52798,
                52847
            ],
            "filename": "Shard.js",
            "lineno": 1085,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017051",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53924,
                53944
            ],
            "filename": "Shard.js",
            "lineno": 1104,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017181",
                "name": "channel",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "newChannel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n                * Fired when a channel is updated\n                * @event Client#channelUpdate\n                * @prop {TextChannel | VoiceChannel | CategoryChannel | StoreChannel | NewsChannel | GuildChannel | PrivateChannel} channel The updated channel\n                * @prop {Object} oldChannel The old channel data\n                * @prop {String} oldChannel.name The name of the channel\n                * @prop {Number} oldChannel.position The position of the channel\n                * @prop {Boolean} oldChannel.nsfw Whether the channel is NSFW or not\n                * @prop {String?} oldChannel.topic The topic of the channel (text channels only)\n                * @prop {Number} oldChannel.type The type of the old channel\n                * @prop {Number?} oldChannel.bitrate The bitrate of the channel (voice channels only)\n                * @prop {Collection} oldChannel.permissionOverwrites Collection of PermissionOverwrites in this channel\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1107,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a channel is updated",
        "kind": "event",
        "name": "channelUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "TextChannel",
                        "VoiceChannel",
                        "CategoryChannel",
                        "StoreChannel",
                        "NewsChannel",
                        "GuildChannel",
                        "PrivateChannel"
                    ]
                },
                "description": "The updated channel",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The old channel data",
                "name": "oldChannel"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "oldChannel.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the channel",
                "name": "oldChannel.position"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the channel is NSFW or not",
                "name": "oldChannel.nsfw"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The topic of the channel (text channels only)",
                "name": "oldChannel.topic"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the old channel",
                "name": "oldChannel.type"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The bitrate of the channel (voice channels only)",
                "name": "oldChannel.bitrate"
            },
            {
                "type": {
                    "names": [
                        "Collection"
                    ]
                },
                "description": "Collection of PermissionOverwrites in this channel",
                "name": "oldChannel.permissionOverwrites"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:channelUpdate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                55256,
                55310
            ],
            "filename": "Shard.js",
            "lineno": 1126,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017223",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n                            * Fired when a channel is deleted\n                            * @event Client#channelDelete\n                            * @prop {PrivateChannel | TextChannel | VoiceChannel | CategoryChannel} channel The channel\n                            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1129,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a channel is deleted",
        "kind": "event",
        "name": "channelDelete",
        "properties": [
            {
                "type": {
                    "names": [
                        "PrivateChannel",
                        "TextChannel",
                        "VoiceChannel",
                        "CategoryChannel"
                    ]
                },
                "description": "The channel",
                "name": "channel"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:channelDelete",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                55996,
                56045
            ],
            "filename": "Shard.js",
            "lineno": 1139,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017280",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                56259,
                56300
            ],
            "filename": "Shard.js",
            "lineno": 1144,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017315",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57250,
                57283
            ],
            "filename": "Shard.js",
            "lineno": 1165,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017431",
                "name": "packet.d.id",
                "type": "MemberExpression",
                "value": "packet.d.message_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "packet.d.id",
        "kind": "member",
        "memberof": "packet.d",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57307,
                57360
            ],
            "filename": "Shard.js",
            "lineno": 1166,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017443",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57493,
                57535
            ],
            "filename": "Shard.js",
            "lineno": 1170,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017473",
                "name": "channel.call",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "call",
        "longname": "<anonymous>~channel.call",
        "kind": "member",
        "memberof": "<anonymous>~channel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57561,
                57579
            ],
            "filename": "Shard.js",
            "lineno": 1171,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017484",
                "name": "incrementedID",
                "type": "Literal",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "incrementedID",
        "longname": "<anonymous>~incrementedID",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57605,
                57620
            ],
            "filename": "Shard.js",
            "lineno": 1172,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017488",
                "name": "overflow",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "overflow",
        "longname": "<anonymous>~overflow",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57648,
                57718
            ],
            "filename": "Shard.js",
            "lineno": 1173,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017492",
                "name": "chunks",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "chunks",
        "longname": "<anonymous>~chunks",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57748,
                57769
            ],
            "filename": "Shard.js",
            "lineno": 1174,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017513",
                "name": "i",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                57894,
                57910
            ],
            "filename": "Shard.js",
            "lineno": 1177,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017535",
                "name": "overflow",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "overflow",
        "longname": "<anonymous>~overflow",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58018,
                58033
            ],
            "filename": "Shard.js",
            "lineno": 1180,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017546",
                "name": "overflow",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "overflow",
        "longname": "<anonymous>~overflow",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58063,
                58106
            ],
            "filename": "Shard.js",
            "lineno": 1181,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017550",
                "name": "incrementedID",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "incrementedID",
        "longname": "<anonymous>~incrementedID",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58169,
                58210
            ],
            "filename": "Shard.js",
            "lineno": 1183,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017557",
                "name": "incrementedID",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "incrementedID",
        "longname": "<anonymous>~incrementedID",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58319,
                58359
            ],
            "filename": "Shard.js",
            "lineno": 1187,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017568",
                "name": "incrementedID",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "incrementedID",
        "longname": "<anonymous>~incrementedID",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n                * Fired when a call is created\n                * @event Client#callCreate\n                * @prop {Call} call The call\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1191,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a call is created",
        "kind": "event",
        "name": "callCreate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Call"
                    ]
                },
                "description": "The call",
                "name": "call"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:callCreate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                58798,
                58851
            ],
            "filename": "Shard.js",
            "lineno": 1200,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017599",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59005,
                59318
            ],
            "filename": "Shard.js",
            "lineno": 1204,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017623",
                "name": "oldCall",
                "type": "ObjectExpression",
                "value": "{\"participants\":\"\",\"ringing\":\"\",\"region\":\"\",\"endedTimestamp\":\"\",\"unavailable\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "oldCall",
        "longname": "<anonymous>~oldCall",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59037,
                59076
            ],
            "filename": "Shard.js",
            "lineno": 1205,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017626",
                "name": "participants",
                "type": "MemberExpression",
                "value": "channel.call.participants"
            }
        },
        "undocumented": true,
        "name": "participants",
        "longname": "<anonymous>~oldCall.participants",
        "kind": "member",
        "memberof": "<anonymous>~oldCall",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59098,
                59127
            ],
            "filename": "Shard.js",
            "lineno": 1206,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017632",
                "name": "ringing",
                "type": "MemberExpression",
                "value": "channel.call.ringing"
            }
        },
        "undocumented": true,
        "name": "ringing",
        "longname": "<anonymous>~oldCall.ringing",
        "kind": "member",
        "memberof": "<anonymous>~oldCall",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59149,
                59176
            ],
            "filename": "Shard.js",
            "lineno": 1207,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017638",
                "name": "region",
                "type": "MemberExpression",
                "value": "channel.call.region"
            }
        },
        "undocumented": true,
        "name": "region",
        "longname": "<anonymous>~oldCall.region",
        "kind": "member",
        "memberof": "<anonymous>~oldCall",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59198,
                59241
            ],
            "filename": "Shard.js",
            "lineno": 1208,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017644",
                "name": "endedTimestamp",
                "type": "MemberExpression",
                "value": "channel.call.endedTimestamp"
            }
        },
        "undocumented": true,
        "name": "endedTimestamp",
        "longname": "<anonymous>~oldCall.endedTimestamp",
        "kind": "member",
        "memberof": "<anonymous>~oldCall",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59263,
                59300
            ],
            "filename": "Shard.js",
            "lineno": 1209,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017650",
                "name": "unavailable",
                "type": "MemberExpression",
                "value": "channel.call.unavailable"
            }
        },
        "undocumented": true,
        "name": "unavailable",
        "longname": "<anonymous>~oldCall.unavailable",
        "kind": "member",
        "memberof": "<anonymous>~oldCall",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when a call is updated\n                * @event Client#callUpdate\n                * @prop {Call} call The updated call\n                * @prop {Object} oldCall The old call data\n                * @prop {String[]} oldCall.participants The IDs of the call participants\n                * @prop {Number?} oldCall.endedTimestamp The timestamp of the call end\n                * @prop {String[]?} oldCall.ringing The IDs of people that were being rung\n                * @prop {String?} oldCall.region The region of the call server\n                * @prop {Boolean} oldCall.unavailable Whether the call was unavailable or not\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1211,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a call is updated",
        "kind": "event",
        "name": "callUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Call"
                    ]
                },
                "description": "The updated call",
                "name": "call"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The old call data",
                "name": "oldCall"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "The IDs of the call participants",
                "name": "oldCall.participants"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The timestamp of the call end",
                "name": "oldCall.endedTimestamp"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "nullable": true,
                "description": "The IDs of people that were being rung",
                "name": "oldCall.ringing"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The region of the call server",
                "name": "oldCall.region"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the call was unavailable or not",
                "name": "oldCall.unavailable"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:callUpdate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60175,
                60228
            ],
            "filename": "Shard.js",
            "lineno": 1226,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017677",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60376,
                60407
            ],
            "filename": "Shard.js",
            "lineno": 1230,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017701",
                "name": "channel.lastCall",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "channel.call",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastCall",
        "longname": "<anonymous>~channel.lastCall",
        "kind": "member",
        "memberof": "<anonymous>~channel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60425,
                60444
            ],
            "filename": "Shard.js",
            "lineno": 1231,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017709",
                "name": "channel.call",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "call",
        "longname": "<anonymous>~channel.call",
        "kind": "member",
        "memberof": "<anonymous>~channel",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when a call is deleted\n                * @event Client#callDelete\n                * @prop {Call} call The call\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1232,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a call is deleted",
        "kind": "event",
        "name": "callDelete",
        "properties": [
            {
                "type": {
                    "names": [
                        "Call"
                    ]
                },
                "description": "The call",
                "name": "call"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:callDelete",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                60782,
                60842
            ],
            "filename": "Shard.js",
            "lineno": 1241,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017728",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n                * Fired when a user joins a group channel\n                * @event Client#channelRecipientAdd\n                * @prop {GroupChannel} channel The channel\n                * @prop {User} user The user\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1242,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a user joins a group channel",
        "kind": "event",
        "name": "channelRecipientAdd",
        "properties": [
            {
                "type": {
                    "names": [
                        "GroupChannel"
                    ]
                },
                "description": "The channel",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The user",
                "name": "user"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:channelRecipientAdd",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                61340,
                61400
            ],
            "filename": "Shard.js",
            "lineno": 1252,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017777",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n                * Fired when a user leaves a group channel\n                * @event Client#channelRecipientRemove\n                * @prop {GroupChannel} channel The channel\n                * @prop {User} user The user\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1253,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a user leaves a group channel",
        "kind": "event",
        "name": "channelRecipientRemove",
        "properties": [
            {
                "type": {
                    "names": [
                        "GroupChannel"
                    ]
                },
                "description": "The channel",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The user",
                "name": "user"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:channelRecipientRemove",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired when a client receives a friend suggestion\n                * @event Client#friendSuggestionCreate\n                * @prop {User} user The suggested user\n                * @prop {String[]} reasons Array of reasons why this suggestion was made\n                * @prop {Number} reasons.type Type of reason?\n                * @prop {String} reasons.platform_type Platform you share with the user\n                * @prop {String} reasons.name Username of suggested user on that platform\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1263,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a client receives a friend suggestion",
        "kind": "event",
        "name": "friendSuggestionCreate",
        "properties": [
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The suggested user",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of reasons why this suggestion was made",
                "name": "reasons"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Type of reason?",
                "name": "reasons.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Platform you share with the user",
                "name": "reasons.platform_type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Username of suggested user on that platform",
                "name": "reasons.name"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:friendSuggestionCreate",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired when a client's friend suggestion is removed for any reason\n                * @event Client#friendSuggestionDelete\n                * @prop {User} user The suggested user\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1276,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a client's friend suggestion is removed for any reason",
        "kind": "event",
        "name": "friendSuggestionDelete",
        "properties": [
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The suggested user",
                "name": "user"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:friendSuggestionDelete",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63032,
                63081
            ],
            "filename": "Shard.js",
            "lineno": 1285,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017863",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63382,
                63554
            ],
            "filename": "Shard.js",
            "lineno": 1291,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017918",
                "name": "members",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "members",
        "longname": "<anonymous>~members",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63447,
                63473
            ],
            "filename": "Shard.js",
            "lineno": 1292,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017932",
                "name": "member.id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "member.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~member.id",
        "kind": "member",
        "memberof": "<anonymous>~member",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63691,
                63735
            ],
            "filename": "Shard.js",
            "lineno": 1298,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100017970",
                "name": "member",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n                * Fired when Discord sends member chunks\n                * @event Client#guildMemberChunk\n                * @prop {Guild} guild The guild the chunked members are in\n                * @prop {Array<Member>} members The members in the chunk\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1321,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when Discord sends member chunks",
        "kind": "event",
        "name": "guildMemberChunk",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild the chunked members are in",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Array.<Member>"
                    ]
                },
                "description": "The members in the chunk",
                "name": "members"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildMemberChunk",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65144,
                65172
            ],
            "filename": "Shard.js",
            "lineno": 1329,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018133",
                "name": "this.lastHeartbeatAck",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastHeartbeatAck",
        "longname": "Shard#lastHeartbeatAck",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65299,
                65342
            ],
            "filename": "Shard.js",
            "lineno": 1334,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018143",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65370,
                65376
            ],
            "filename": "Shard.js",
            "lineno": 1335,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018160",
                "name": "member"
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65420,
                65446
            ],
            "filename": "Shard.js",
            "lineno": 1336,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018169",
                "name": "member.id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "member.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~member.id",
        "kind": "member",
        "memberof": "<anonymous>~member",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65546,
                65554
            ],
            "filename": "Shard.js",
            "lineno": 1339,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018189",
                "name": "presence"
            }
        },
        "undocumented": true,
        "name": "presence",
        "longname": "<anonymous>~presence",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65671,
                65721
            ],
            "filename": "Shard.js",
            "lineno": 1341,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018212",
                "name": "userData",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "userData",
        "longname": "<anonymous>~userData",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65790,
                65897
            ],
            "filename": "Shard.js",
            "lineno": 1343,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018231",
                "name": "userData",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "userData",
        "longname": "<anonymous>~userData",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66166,
                66196
            ],
            "filename": "Shard.js",
            "lineno": 1348,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018274",
                "name": "presence.id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "presence.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~presence.id",
        "kind": "member",
        "memberof": "<anonymous>~presence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66384,
                66394
            ],
            "filename": "Shard.js",
            "lineno": 1352,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018306",
                "name": "voiceState"
            }
        },
        "undocumented": true,
        "name": "voiceState",
        "longname": "<anonymous>~voiceState",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66583,
                66617
            ],
            "filename": "Shard.js",
            "lineno": 1356,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018326",
                "name": "voiceState.id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "voiceState.user_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~voiceState.id",
        "kind": "member",
        "memberof": "<anonymous>~voiceState",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                66649,
                66700
            ],
            "filename": "Shard.js",
            "lineno": 1357,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018334",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67492,
                67523
            ],
            "filename": "Shard.js",
            "lineno": 1368,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018434",
                "name": "guild.pendingVoiceStates",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pendingVoiceStates",
        "longname": "<anonymous>~guild.pendingVoiceStates",
        "kind": "member",
        "memberof": "<anonymous>~guild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67708,
                67732
            ],
            "filename": "Shard.js",
            "lineno": 1375,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018456",
                "name": "this.connectAttempts",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectAttempts",
        "longname": "Shard#connectAttempts",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67750,
                67779
            ],
            "filename": "Shard.js",
            "lineno": 1376,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018462",
                "name": "this.reconnectInterval",
                "type": "Literal",
                "value": 1000,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reconnectInterval",
        "longname": "Shard#reconnectInterval",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67798,
                67821
            ],
            "filename": "Shard.js",
            "lineno": 1378,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018468",
                "name": "this.connecting",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connecting",
        "longname": "Shard#connecting",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67954,
                67980
            ],
            "filename": "Shard.js",
            "lineno": 1382,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018485",
                "name": "this.connectTimeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectTimeout",
        "longname": "Shard#connectTimeout",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                67998,
                68019
            ],
            "filename": "Shard.js",
            "lineno": 1383,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018491",
                "name": "this.status",
                "type": "Literal",
                "value": "ready",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "Shard#status",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68037,
                68068
            ],
            "filename": "Shard.js",
            "lineno": 1384,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018497",
                "name": "this.presence.status",
                "type": "Literal",
                "value": "online",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "Shard#presence.status",
        "kind": "member",
        "memberof": "Shard#presence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68323,
                68343
            ],
            "filename": "Shard.js",
            "lineno": 1391,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018526",
                "name": "this.preReady",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "preReady",
        "longname": "Shard#preReady",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68365,
                68382
            ],
            "filename": "Shard.js",
            "lineno": 1392,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018532",
                "name": "this.ready",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ready",
        "longname": "Shard#ready",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "/**\n                    * Fired when a shard finishes resuming\n                    * @event Shard#resume\n                    * @prop {Number} id The ID of the shard\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1394,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a shard finishes resuming",
        "kind": "event",
        "name": "resume",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "memberof": "Shard",
        "longname": "Shard#event:resume",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68697,
                68799
            ],
            "filename": "Shard.js",
            "lineno": 1403,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018545",
                "name": "this.client.user",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "Shard#client.user",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68864,
                68886
            ],
            "filename": "Shard.js",
            "lineno": 1405,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018582",
                "name": "this.client.bot",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "bot",
        "longname": "Shard#client.bot",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68976,
                69022
            ],
            "filename": "Shard.js",
            "lineno": 1407,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018602",
                "name": "this.client.token",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "token",
        "longname": "Shard#client.token",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69091,
                69114
            ],
            "filename": "Shard.js",
            "lineno": 1410,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018617",
                "name": "this.client.bot",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "bot",
        "longname": "Shard#client.bot",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69136,
                69170
            ],
            "filename": "Shard.js",
            "lineno": 1411,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018625",
                "name": "this.client.userGuildSettings",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "userGuildSettings",
        "longname": "Shard#client.userGuildSettings",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69274,
                69343
            ],
            "filename": "Shard.js",
            "lineno": 1413,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018645",
                "name": "this.client.userGuildSettings[undefined]",
                "type": "Identifier",
                "value": "guildSettings",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "userGuildSettings[undefined]",
        "longname": "Shard#client.userGuildSettings[undefined]",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69389,
                69438
            ],
            "filename": "Shard.js",
            "lineno": 1415,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018657",
                "name": "this.client.userSettings",
                "type": "MemberExpression",
                "value": "packet.d.user_settings",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "userSettings",
        "longname": "Shard#client.userSettings",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69517,
                69558
            ],
            "filename": "Shard.js",
            "lineno": 1419,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018676",
                "name": "this.discordServerTrace",
                "type": "MemberExpression",
                "value": "packet.d._trace",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "discordServerTrace",
        "longname": "Shard#discordServerTrace",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69595,
                69631
            ],
            "filename": "Shard.js",
            "lineno": 1422,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018686",
                "name": "this.sessionID",
                "type": "MemberExpression",
                "value": "packet.d.session_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "Shard#sessionID",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70211,
                70279
            ],
            "filename": "Shard.js",
            "lineno": 1435,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018779",
                "name": "this.client.privateChannelMap[undefined]",
                "type": "MemberExpression",
                "value": "channel.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "privateChannelMap[undefined]",
        "longname": "Shard#client.privateChannelMap[undefined]",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71234,
                71264
            ],
            "filename": "Shard.js",
            "lineno": 1453,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018919",
                "name": "presence.id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "presence.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~presence.id",
        "kind": "member",
        "memberof": "<anonymous>~presence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71476,
                71510
            ],
            "filename": "Shard.js",
            "lineno": 1460,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018948",
                "name": "this.client.notes",
                "type": "MemberExpression",
                "value": "packet.d.notes",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "notes",
        "longname": "Shard#client.notes",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71547,
                71567
            ],
            "filename": "Shard.js",
            "lineno": 1463,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100018960",
                "name": "this.preReady",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "preReady",
        "longname": "Shard#preReady",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired when a shard finishes processing the ready packet\n                * @event Client#shardPreReady\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1464,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a shard finishes processing the ready packet",
        "kind": "event",
        "name": "shardPreReady",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:shardPreReady",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72161,
                72197
            ],
            "filename": "Shard.js",
            "lineno": 1480,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019011",
                "name": "packet.d.session_id",
                "type": "MemberExpression",
                "value": "this.sessionID",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "session_id",
        "longname": "packet.d.session_id",
        "kind": "member",
        "memberof": "packet.d",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72215,
                72253
            ],
            "filename": "Shard.js",
            "lineno": 1481,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019021",
                "name": "packet.d.user_id",
                "type": "MemberExpression",
                "value": "this.client.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user_id",
        "longname": "packet.d.user_id",
        "kind": "member",
        "memberof": "packet.d",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72271,
                72292
            ],
            "filename": "Shard.js",
            "lineno": 1482,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019035",
                "name": "packet.d.shard",
                "type": "ThisExpression",
                "value": "this",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "shard",
        "longname": "packet.d.shard",
        "kind": "member",
        "memberof": "packet.d",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72461,
                72502
            ],
            "filename": "Shard.js",
            "lineno": 1487,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019059",
                "name": "user",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "<anonymous>~user",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72526,
                72695
            ],
            "filename": "Shard.js",
            "lineno": 1488,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019075",
                "name": "oldUser",
                "type": "ObjectExpression",
                "value": "{\"username\":\"\",\"discriminator\":\"\",\"avatar\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "oldUser",
        "longname": "<anonymous>~oldUser",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72558,
                72581
            ],
            "filename": "Shard.js",
            "lineno": 1489,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019078",
                "name": "username",
                "type": "MemberExpression",
                "value": "user.username"
            }
        },
        "undocumented": true,
        "name": "username",
        "longname": "<anonymous>~oldUser.username",
        "kind": "member",
        "memberof": "<anonymous>~oldUser",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72603,
                72636
            ],
            "filename": "Shard.js",
            "lineno": 1490,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019082",
                "name": "discriminator",
                "type": "MemberExpression",
                "value": "user.discriminator"
            }
        },
        "undocumented": true,
        "name": "discriminator",
        "longname": "<anonymous>~oldUser.discriminator",
        "kind": "member",
        "memberof": "<anonymous>~oldUser",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72658,
                72677
            ],
            "filename": "Shard.js",
            "lineno": 1491,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019086",
                "name": "avatar",
                "type": "MemberExpression",
                "value": "user.avatar"
            }
        },
        "undocumented": true,
        "name": "avatar",
        "longname": "<anonymous>~oldUser.avatar",
        "kind": "member",
        "memberof": "<anonymous>~oldUser",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                72951,
                73008
            ],
            "filename": "Shard.js",
            "lineno": 1500,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019117",
                "name": "relationship",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "relationship",
        "longname": "<anonymous>~relationship",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73071,
                73160
            ],
            "filename": "Shard.js",
            "lineno": 1502,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019136",
                "name": "oldRelationship",
                "type": "ObjectExpression",
                "value": "{\"type\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "oldRelationship",
        "longname": "<anonymous>~oldRelationship",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                73115,
                73138
            ],
            "filename": "Shard.js",
            "lineno": 1503,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019139",
                "name": "type",
                "type": "MemberExpression",
                "value": "relationship.type"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "<anonymous>~oldRelationship.type",
        "kind": "member",
        "memberof": "<anonymous>~oldRelationship",
        "scope": "static"
    },
    {
        "comment": "/**\n                    * Fired when a relationship is updated\n                    * @event Client#relationshipUpdate\n                    * @prop {Relationship} relationship The relationship\n                    * @prop {Object} oldRelationship The old relationship data\n                    * @prop {Number} oldRelationship.type The old type of the relationship\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1505,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a relationship is updated",
        "kind": "event",
        "name": "relationshipUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Relationship"
                    ]
                },
                "description": "The relationship",
                "name": "relationship"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The old relationship data",
                "name": "oldRelationship"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The old type of the relationship",
                "name": "oldRelationship.type"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:relationshipUpdate",
        "scope": "instance"
    },
    {
        "comment": "/**\n                    * Fired when a relationship is added\n                    * @event Client#relationshipAdd\n                    * @prop {Relationship} relationship The relationship\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1514,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a relationship is added",
        "kind": "event",
        "name": "relationshipAdd",
        "properties": [
            {
                "type": {
                    "names": [
                        "Relationship"
                    ]
                },
                "description": "The relationship",
                "name": "relationship"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:relationshipAdd",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired when a relationship is removed\n                * @event Client#relationshipRemove\n                * @prop {Relationship} relationship The relationship\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1527,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a relationship is removed",
        "kind": "event",
        "name": "relationshipRemove",
        "properties": [
            {
                "type": {
                    "names": [
                        "Relationship"
                    ]
                },
                "description": "The relationship",
                "name": "relationship"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:relationshipRemove",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74626,
                74675
            ],
            "filename": "Shard.js",
            "lineno": 1536,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019216",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                74700,
                74717
            ],
            "filename": "Shard.js",
            "lineno": 1537,
            "columnno": 23,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019234",
                "name": "emojis",
                "type": "Identifier",
                "value": "oldEmojis"
            }
        },
        "undocumented": true,
        "name": "emojis",
        "longname": "emojis",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n                * Fired when a guild's emojis are updated\n                * @event Client#guildEmojisUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Array} emojis The updated emojis of the guild\n                * @prop {Array} oldEmojis The old emojis of the guild\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1539,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a guild's emojis are updated",
        "kind": "event",
        "name": "guildEmojisUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The updated emojis of the guild",
                "name": "emojis"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The old emojis of the guild",
                "name": "oldEmojis"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:guildEmojisUpdate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                75285,
                75338
            ],
            "filename": "Shard.js",
            "lineno": 1550,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019261",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                75549,
                75588
            ],
            "filename": "Shard.js",
            "lineno": 1555,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019294",
                "name": "oldTimestamp",
                "type": "MemberExpression",
                "value": "channel.lastPinTimestamp"
            }
        },
        "undocumented": true,
        "name": "oldTimestamp",
        "longname": "<anonymous>~oldTimestamp",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                75606,
                75672
            ],
            "filename": "Shard.js",
            "lineno": 1556,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019300",
                "name": "channel.lastPinTimestamp",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastPinTimestamp",
        "longname": "<anonymous>~channel.lastPinTimestamp",
        "kind": "member",
        "memberof": "<anonymous>~channel",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when a channel pin timestamp is updated\n                * @event Client#channelPinUpdate\n                * @prop {PrivateChannel | TextChannel} channel The channel\n                * @prop {Number} timestamp The new timestamp\n                * @prop {Number} oldTimestamp The old timestamp\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1557,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a channel pin timestamp is updated",
        "kind": "event",
        "name": "channelPinUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "PrivateChannel",
                        "TextChannel"
                    ]
                },
                "description": "The channel",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new timestamp",
                "name": "timestamp"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The old timestamp",
                "name": "oldTimestamp"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:channelPinUpdate",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired when a channel's webhooks are updated\n                * @event Client#webhooksUpdate\n                * @prop {Object} data The update data\n                * @prop {String} channelID The ID of the channel that webhooks were updated in\n                * @prop {String} guildID The ID of the guild that webhooks were updated in\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1568,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a channel's webhooks are updated",
        "kind": "event",
        "name": "webhooksUpdate",
        "properties": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The update data",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel that webhooks were updated in",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild that webhooks were updated in",
                "name": "guildID"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:webhooksUpdate",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76651,
                76681
            ],
            "filename": "Shard.js",
            "lineno": 1576,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019335",
                "name": "channelID",
                "type": "MemberExpression",
                "value": "packet.d.channel_id"
            }
        },
        "undocumented": true,
        "name": "channelID",
        "longname": "channelID",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76703,
                76729
            ],
            "filename": "Shard.js",
            "lineno": 1577,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019341",
                "name": "guildID",
                "type": "MemberExpression",
                "value": "packet.d.guild_id"
            }
        },
        "undocumented": true,
        "name": "guildID",
        "longname": "guildID",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76853,
                76861
            ],
            "filename": "Shard.js",
            "lineno": 1582,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019353",
                "name": "presence"
            }
        },
        "undocumented": true,
        "name": "presence",
        "longname": "<anonymous>~presence",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                76903,
                76952
            ],
            "filename": "Shard.js",
            "lineno": 1583,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019360",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77178,
                77222
            ],
            "filename": "Shard.js",
            "lineno": 1588,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019395",
                "name": "member",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77308,
                77338
            ],
            "filename": "Shard.js",
            "lineno": 1590,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019419",
                "name": "presence.id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "presence.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~presence.id",
        "kind": "member",
        "memberof": "<anonymous>~presence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77561,
                77607
            ],
            "filename": "Shard.js",
            "lineno": 1598,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019446",
                "name": "this.client.notes[undefined]",
                "type": "MemberExpression",
                "value": "packet.d.note",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "notes[undefined]",
        "longname": "Shard#client.notes[undefined]",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                77813,
                77872
            ],
            "filename": "Shard.js",
            "lineno": 1605,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019482",
                "name": "this.client.userGuildSettings[undefined]",
                "type": "MemberExpression",
                "value": "packet.d",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "userGuildSettings[undefined]",
        "longname": "Shard#client.userGuildSettings[undefined]",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when the shard encounters an unknown packet\n                * @event Client#unknown\n                * @prop {Object} packet The unknown packet\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1615,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when the shard encounters an unknown packet",
        "kind": "event",
        "name": "unknown",
        "properties": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The unknown packet",
                "name": "packet"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:unknown",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78553,
                79091
            ],
            "filename": "Shard.js",
            "lineno": 1627,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019521",
                "name": "Shard#syncGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "syncGuild",
        "longname": "Shard#syncGuild",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78776,
                78807
            ],
            "filename": "Shard.js",
            "lineno": 1630,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019548",
                "name": "this.guildSyncQueue",
                "type": "ArrayExpression",
                "value": "[\"guildID\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildSyncQueue",
        "longname": "Shard#guildSyncQueue",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                78821,
                78871
            ],
            "filename": "Shard.js",
            "lineno": 1631,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019555",
                "name": "this.guildSyncQueueLength",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildSyncQueueLength",
        "longname": "Shard#guildSyncQueueLength",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79027,
                79074
            ],
            "filename": "Shard.js",
            "lineno": 1636,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019588",
                "name": "this.guildSyncQueueLength",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildSyncQueueLength",
        "longname": "Shard#guildSyncQueueLength",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79097,
                79187
            ],
            "filename": "Shard.js",
            "lineno": 1640,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019597",
                "name": "Shard#requestGuildSync",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "requestGuildSync",
        "longname": "Shard#requestGuildSync",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79193,
                79636
            ],
            "filename": "Shard.js",
            "lineno": 1644,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019611",
                "name": "Shard#createGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "_guild"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "createGuild",
        "longname": "Shard#createGuild",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79223,
                79269
            ],
            "filename": "Shard.js",
            "lineno": 1645,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019617",
                "name": "this.client.guildShardMap[undefined]",
                "type": "MemberExpression",
                "value": "this.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildShardMap[undefined]",
        "longname": "Shard#client.guildShardMap[undefined]",
        "kind": "member",
        "memberof": "Shard#client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79285,
                79342
            ],
            "filename": "Shard.js",
            "lineno": 1646,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019631",
                "name": "guild",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~guild",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79642,
                80148
            ],
            "filename": "Shard.js",
            "lineno": 1657,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019697",
                "name": "Shard#restartGuildCreateTimeout",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "restartGuildCreateTimeout",
        "longname": "Shard#restartGuildCreateTimeout",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79773,
                79803
            ],
            "filename": "Shard.js",
            "lineno": 1660,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019713",
                "name": "this.guildCreateTimeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildCreateTimeout",
        "longname": "Shard#guildCreateTimeout",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                79997,
                80131
            ],
            "filename": "Shard.js",
            "lineno": 1666,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019747",
                "name": "this.guildCreateTimeout",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildCreateTimeout",
        "longname": "Shard#guildCreateTimeout",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                80154,
                81286
            ],
            "filename": "Shard.js",
            "lineno": 1672,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019767",
                "name": "Shard#getGuildMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "timeout"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "getGuildMembers",
        "longname": "Shard#getGuildMembers",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                80367,
                80404
            ],
            "filename": "Shard.js",
            "lineno": 1676,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019787",
                "name": "this.getAllUsersCount[undefined]",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getAllUsersCount[undefined]",
        "longname": "Shard#getAllUsersCount[undefined]",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81021,
                81054
            ],
            "filename": "Shard.js",
            "lineno": 1686,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019854",
                "name": "this.getAllUsersQueue",
                "type": "ArrayExpression",
                "value": "[\"guildID\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getAllUsersQueue",
        "longname": "Shard#getAllUsersQueue",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81072,
                81119
            ],
            "filename": "Shard.js",
            "lineno": 1687,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019861",
                "name": "this.getAllUsersLength",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getAllUsersLength",
        "longname": "Shard#getAllUsersLength",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81211,
                81255
            ],
            "filename": "Shard.js",
            "lineno": 1690,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019882",
                "name": "this.getAllUsersLength",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getAllUsersLength",
        "longname": "Shard#getAllUsersLength",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81292,
                82604
            ],
            "filename": "Shard.js",
            "lineno": 1695,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019891",
                "name": "Shard#requestGuildMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "requestGuildMembers",
        "longname": "Shard#requestGuildMembers",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81346,
                81665
            ],
            "filename": "Shard.js",
            "lineno": 1696,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019898",
                "name": "opts",
                "type": "ObjectExpression",
                "value": "{\"guild_id\":\"\",\"limit\":\"\",\"user_ids\":\"\",\"query\":\"\",\"nonce\":\"\",\"presences\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "opts",
        "longname": "<anonymous>~opts",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81367,
                81384
            ],
            "filename": "Shard.js",
            "lineno": 1697,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019901",
                "name": "guild_id",
                "type": "Identifier",
                "value": "guildID"
            }
        },
        "undocumented": true,
        "name": "guild_id",
        "longname": "<anonymous>~opts.guild_id",
        "kind": "member",
        "memberof": "<anonymous>~opts",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81398,
                81436
            ],
            "filename": "Shard.js",
            "lineno": 1698,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019903",
                "name": "limit",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "<anonymous>~opts.limit",
        "kind": "member",
        "memberof": "<anonymous>~opts",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81450,
                81486
            ],
            "filename": "Shard.js",
            "lineno": 1699,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019911",
                "name": "user_ids",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "user_ids",
        "longname": "<anonymous>~opts.user_ids",
        "kind": "member",
        "memberof": "<anonymous>~opts",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81500,
                81531
            ],
            "filename": "Shard.js",
            "lineno": 1700,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019917",
                "name": "query",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "query",
        "longname": "<anonymous>~opts.query",
        "kind": "member",
        "memberof": "<anonymous>~opts",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81545,
                81602
            ],
            "filename": "Shard.js",
            "lineno": 1701,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019923",
                "name": "nonce",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nonce",
        "longname": "<anonymous>~opts.nonce",
        "kind": "member",
        "memberof": "<anonymous>~opts",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81616,
                81655
            ],
            "filename": "Shard.js",
            "lineno": 1702,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019940",
                "name": "presences",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "presences",
        "longname": "<anonymous>~opts.presences",
        "kind": "member",
        "memberof": "<anonymous>~opts",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                81723,
                81738
            ],
            "filename": "Shard.js",
            "lineno": 1705,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100019958",
                "name": "opts.query",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "query",
        "longname": "<anonymous>~opts.query",
        "kind": "member",
        "memberof": "<anonymous>~opts",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82217,
                82596
            ],
            "filename": "Shard.js",
            "lineno": 1714,
            "columnno": 36,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020027",
                "name": "this.requestMembersPromise[undefined]",
                "type": "ObjectExpression",
                "value": "{\"res\":\"\",\"received\":0,\"members\":\"\",\"timeout\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "requestMembersPromise[undefined]",
        "longname": "Shard#requestMembersPromise[undefined]",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82272,
                82280
            ],
            "filename": "Shard.js",
            "lineno": 1715,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020036",
                "name": "res",
                "type": "Identifier",
                "value": "res"
            }
        },
        "undocumented": true,
        "name": "res",
        "longname": "Shard#requestMembersPromise[undefined].res",
        "kind": "member",
        "memberof": "Shard#requestMembersPromise[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82294,
                82305
            ],
            "filename": "Shard.js",
            "lineno": 1716,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020038",
                "name": "received",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "received",
        "longname": "Shard#requestMembersPromise[undefined].received",
        "kind": "member",
        "memberof": "Shard#requestMembersPromise[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82319,
                82330
            ],
            "filename": "Shard.js",
            "lineno": 1717,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020040",
                "name": "members",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "members",
        "longname": "Shard#requestMembersPromise[undefined].members",
        "kind": "member",
        "memberof": "Shard#requestMembersPromise[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82344,
                82586
            ],
            "filename": "Shard.js",
            "lineno": 1718,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020042",
                "name": "timeout",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "Shard#requestMembersPromise[undefined].timeout",
        "kind": "member",
        "memberof": "Shard#requestMembersPromise[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82610,
                83503
            ],
            "filename": "Shard.js",
            "lineno": 1725,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020081",
                "name": "Shard#checkReady",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "checkReady",
        "longname": "Shard#checkReady",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82776,
                82800
            ],
            "filename": "Shard.js",
            "lineno": 1729,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020109",
                "name": "this.guildSyncQueue",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildSyncQueue",
        "longname": "Shard#guildSyncQueue",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                82818,
                82847
            ],
            "filename": "Shard.js",
            "lineno": 1730,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020115",
                "name": "this.guildSyncQueueLength",
                "type": "Literal",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildSyncQueueLength",
        "longname": "Shard#guildSyncQueueLength",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83099,
                83125
            ],
            "filename": "Shard.js",
            "lineno": 1738,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020147",
                "name": "this.getAllUsersQueue",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getAllUsersQueue",
        "longname": "Shard#getAllUsersQueue",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83143,
                83169
            ],
            "filename": "Shard.js",
            "lineno": 1739,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020153",
                "name": "this.getAllUsersLength",
                "type": "Literal",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getAllUsersLength",
        "longname": "Shard#getAllUsersLength",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83291,
                83308
            ],
            "filename": "Shard.js",
            "lineno": 1743,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020173",
                "name": "this.ready",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ready",
        "longname": "Shard#ready",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired when the shard turns ready\n                * @event Shard#ready\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1744,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when the shard turns ready",
        "kind": "event",
        "name": "ready",
        "memberof": "Shard",
        "longname": "Shard#event:ready",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83509,
                83801
            ],
            "filename": "Shard.js",
            "lineno": 1753,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020184",
                "name": "Shard#_onWSOpen",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_onWSOpen",
        "longname": "Shard#_onWSOpen",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83531,
                83558
            ],
            "filename": "Shard.js",
            "lineno": 1754,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020189",
                "name": "this.status",
                "type": "Literal",
                "value": "handshaking",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "Shard#status",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "/**\n        * Fired when the shard establishes a connection\n        * @event Client#connect\n        * @prop {Number} id The ID of the shard\n        */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1755,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when the shard establishes a connection",
        "kind": "event",
        "name": "connect",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:connect",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83766,
                83794
            ],
            "filename": "Shard.js",
            "lineno": 1761,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020204",
                "name": "this.lastHeartbeatAck",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastHeartbeatAck",
        "longname": "Shard#lastHeartbeatAck",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83807,
                85273
            ],
            "filename": "Shard.js",
            "lineno": 1764,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020209",
                "name": "Shard#_onWSMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_onWSMessage",
        "longname": "Shard#_onWSMessage",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                83970,
                83994
            ],
            "filename": "Shard.js",
            "lineno": 1768,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020233",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                84098,
                84124
            ],
            "filename": "Shard.js",
            "lineno": 1771,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020248",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                84626,
                84667
            ],
            "filename": "Shard.js",
            "lineno": 1781,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020325",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85279,
                85344
            ],
            "filename": "Shard.js",
            "lineno": 1800,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020411",
                "name": "Shard#_onWSError",
                "type": "MethodDefinition",
                "paramnames": [
                    "err"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_onWSError",
        "longname": "Shard#_onWSError",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85350,
                88039
            ],
            "filename": "Shard.js",
            "lineno": 1804,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020426",
                "name": "Shard#_onWSClose",
                "type": "MethodDefinition",
                "paramnames": [
                    "code",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_onWSClose",
        "longname": "Shard#_onWSClose",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85455,
                85465
            ],
            "filename": "Shard.js",
            "lineno": 1806,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020445",
                "name": "code",
                "type": "Identifier",
                "value": "code"
            }
        },
        "undocumented": true,
        "name": "code",
        "longname": "code",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85479,
                85493
            ],
            "filename": "Shard.js",
            "lineno": 1807,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020447",
                "name": "reason",
                "type": "Identifier",
                "value": "reason"
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "reason",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85507,
                85526
            ],
            "filename": "Shard.js",
            "lineno": 1808,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020449",
                "name": "status",
                "type": "MemberExpression",
                "value": "this.status"
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "status",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85552,
                85621
            ],
            "filename": "Shard.js",
            "lineno": 1810,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020454",
                "name": "err",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85635,
                85653
            ],
            "filename": "Shard.js",
            "lineno": 1811,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020472",
                "name": "reconnect",
                "type": "Literal",
                "value": "auto"
            }
        },
        "undocumented": true,
        "name": "reconnect",
        "longname": "<anonymous>~reconnect",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85834,
                85885
            ],
            "filename": "Shard.js",
            "lineno": 1815,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020506",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                85942,
                85993
            ],
            "filename": "Shard.js",
            "lineno": 1817,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020517",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86050,
                86086
            ],
            "filename": "Shard.js",
            "lineno": 1819,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020528",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86104,
                86125
            ],
            "filename": "Shard.js",
            "lineno": 1820,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020534",
                "name": "this.sessionID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "Shard#sessionID",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86182,
                86222
            ],
            "filename": "Shard.js",
            "lineno": 1822,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020545",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86240,
                86261
            ],
            "filename": "Shard.js",
            "lineno": 1823,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020551",
                "name": "this.sessionID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "Shard#sessionID",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86279,
                86296
            ],
            "filename": "Shard.js",
            "lineno": 1824,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020557",
                "name": "reconnect",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reconnect",
        "longname": "<anonymous>~reconnect",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86433,
                86473
            ],
            "filename": "Shard.js",
            "lineno": 1827,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020580",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86547,
                86581
            ],
            "filename": "Shard.js",
            "lineno": 1829,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020595",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86599,
                86620
            ],
            "filename": "Shard.js",
            "lineno": 1830,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020601",
                "name": "this.sessionID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "Shard#sessionID",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86677,
                86732
            ],
            "filename": "Shard.js",
            "lineno": 1832,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020612",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86750,
                86762
            ],
            "filename": "Shard.js",
            "lineno": 1833,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020622",
                "name": "this.seq",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "seq",
        "longname": "Shard#seq",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86819,
                86872
            ],
            "filename": "Shard.js",
            "lineno": 1835,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020633",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86929,
                86965
            ],
            "filename": "Shard.js",
            "lineno": 1837,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020644",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86983,
                87004
            ],
            "filename": "Shard.js",
            "lineno": 1838,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020650",
                "name": "this.sessionID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "Shard#sessionID",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87022,
                87039
            ],
            "filename": "Shard.js",
            "lineno": 1839,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020656",
                "name": "reconnect",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reconnect",
        "longname": "<anonymous>~reconnect",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87096,
                87148
            ],
            "filename": "Shard.js",
            "lineno": 1841,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020665",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87166,
                87187
            ],
            "filename": "Shard.js",
            "lineno": 1842,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020671",
                "name": "this.sessionID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "Shard#sessionID",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87205,
                87222
            ],
            "filename": "Shard.js",
            "lineno": 1843,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020677",
                "name": "reconnect",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reconnect",
        "longname": "<anonymous>~reconnect",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87279,
                87323
            ],
            "filename": "Shard.js",
            "lineno": 1845,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020686",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87341,
                87362
            ],
            "filename": "Shard.js",
            "lineno": 1846,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020692",
                "name": "this.sessionID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "Shard#sessionID",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87380,
                87397
            ],
            "filename": "Shard.js",
            "lineno": 1847,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020698",
                "name": "reconnect",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reconnect",
        "longname": "<anonymous>~reconnect",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87454,
                87501
            ],
            "filename": "Shard.js",
            "lineno": 1849,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020707",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87519,
                87540
            ],
            "filename": "Shard.js",
            "lineno": 1850,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020713",
                "name": "this.sessionID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "Shard#sessionID",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87558,
                87575
            ],
            "filename": "Shard.js",
            "lineno": 1851,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020719",
                "name": "reconnect",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reconnect",
        "longname": "<anonymous>~reconnect",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87632,
                87675
            ],
            "filename": "Shard.js",
            "lineno": 1853,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020728",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87742,
                87779
            ],
            "filename": "Shard.js",
            "lineno": 1855,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020741",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                87833,
                87848
            ],
            "filename": "Shard.js",
            "lineno": 1858,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020754",
                "name": "err.code",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "code",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "code",
        "longname": "<anonymous>~err.code",
        "kind": "member",
        "memberof": "<anonymous>~err",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88007,
                88016
            ],
            "filename": "Shard.js",
            "lineno": 1864,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020778",
                "name": "reconnect",
                "type": "Identifier",
                "value": "reconnect"
            }
        },
        "undocumented": true,
        "name": "reconnect",
        "longname": "reconnect",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88045,
                88993
            ],
            "filename": "Shard.js",
            "lineno": 1868,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020781",
                "name": "Shard#initializeWS",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "initializeWS",
        "longname": "Shard#initializeWS",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88184,
                88210
            ],
            "filename": "Shard.js",
            "lineno": 1873,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020801",
                "name": "this.status",
                "type": "Literal",
                "value": "connecting",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "Shard#status",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88343,
                88435
            ],
            "filename": "Shard.js",
            "lineno": 1876,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020823",
                "name": "this._zlibSync",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_zlibSync",
        "longname": "Shard#_zlibSync",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88399,
                88420
            ],
            "filename": "Shard.js",
            "lineno": 1877,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020832",
                "name": "chunkSize",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "chunkSize",
        "longname": "chunkSize",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88455,
                88526
            ],
            "filename": "Shard.js",
            "lineno": 1880,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020837",
                "name": "this.ws",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ws",
        "longname": "Shard#ws",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88723,
                88986
            ],
            "filename": "Shard.js",
            "lineno": 1886,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020900",
                "name": "this.connectTimeout",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectTimeout",
        "longname": "Shard#connectTimeout",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88852,
                88869
            ],
            "filename": "Shard.js",
            "lineno": 1889,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020919",
                "name": "reconnect",
                "type": "Literal",
                "value": "auto"
            }
        },
        "undocumented": true,
        "name": "reconnect",
        "longname": "reconnect",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                88999,
                92470
            ],
            "filename": "Shard.js",
            "lineno": 1895,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100020931",
                "name": "Shard#onPacket",
                "type": "MethodDefinition",
                "paramnames": [
                    "packet"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "onPacket",
        "longname": "Shard#onPacket",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n            * Fired when the shard receives a websocket packet\n            * @event Client#rawWS\n            * @prop {Object} packet The packet\n            * @prop {Number} id The ID of the shard\n            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1897,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when the shard receives a websocket packet",
        "kind": "event",
        "name": "rawWS",
        "properties": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The packet",
                "name": "packet"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:rawWS",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired to warn of something weird but non-breaking happening\n                * @event Client#warn\n                * @prop {String} message The warning message\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1908,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired to warn of something weird but non-breaking happening",
        "kind": "event",
        "name": "warn",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The warning message",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:warn",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                89899,
                89918
            ],
            "filename": "Shard.js",
            "lineno": 1916,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021013",
                "name": "this.seq",
                "type": "MemberExpression",
                "value": "packet.s",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "seq",
        "longname": "Shard#seq",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                90347,
                90359
            ],
            "filename": "Shard.js",
            "lineno": 1931,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021067",
                "name": "this.seq",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "seq",
        "longname": "Shard#seq",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                90377,
                90398
            ],
            "filename": "Shard.js",
            "lineno": 1932,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021073",
                "name": "this.sessionID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "Shard#sessionID",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                90648,
                90665
            ],
            "filename": "Shard.js",
            "lineno": 1939,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021105",
                "name": "reconnect",
                "type": "Literal",
                "value": "auto"
            }
        },
        "undocumented": true,
        "name": "reconnect",
        "longname": "reconnect",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                90972,
                91065
            ],
            "filename": "Shard.js",
            "lineno": 1948,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021134",
                "name": "this.heartbeatInterval",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "heartbeatInterval",
        "longname": "Shard#heartbeatInterval",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                91102,
                91143
            ],
            "filename": "Shard.js",
            "lineno": 1951,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021152",
                "name": "this.discordServerTrace",
                "type": "MemberExpression",
                "value": "packet.d._trace",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "discordServerTrace",
        "longname": "Shard#discordServerTrace",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                91161,
                91184
            ],
            "filename": "Shard.js",
            "lineno": 1952,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021162",
                "name": "this.connecting",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connecting",
        "longname": "Shard#connecting",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                91317,
                91343
            ],
            "filename": "Shard.js",
            "lineno": 1956,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021179",
                "name": "this.connectTimeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectTimeout",
        "longname": "Shard#connectTimeout",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired when a shard receives an OP:10/HELLO packet\n                * @event Client#hello\n                * @prop {String[]} trace The Discord server trace of the gateway and session servers\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1965,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a shard receives an OP:10/HELLO packet",
        "kind": "event",
        "name": "hello",
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "The Discord server trace of the gateway and session servers",
                "name": "trace"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:hello",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                92122,
                92150
            ],
            "filename": "Shard.js",
            "lineno": 1975,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021226",
                "name": "this.lastHeartbeatAck",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastHeartbeatAck",
        "longname": "Shard#lastHeartbeatAck",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                92168,
                92217
            ],
            "filename": "Shard.js",
            "lineno": 1976,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021232",
                "name": "this.lastHeartbeatReceived",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastHeartbeatReceived",
        "longname": "Shard#lastHeartbeatReceived",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                92235,
                92301
            ],
            "filename": "Shard.js",
            "lineno": 1977,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021242",
                "name": "this.latency",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "latency",
        "longname": "Shard#latency",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                92476,
                93436
            ],
            "filename": "Shard.js",
            "lineno": 1987,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021267",
                "name": "Shard#heartbeat",
                "type": "MethodDefinition",
                "paramnames": [
                    "normal"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "heartbeat",
        "longname": "Shard#heartbeat",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                92808,
                92848
            ],
            "filename": "Shard.js",
            "lineno": 1995,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021302",
                "name": "lastReceived",
                "type": "MemberExpression",
                "value": "this.lastHeartbeatReceived"
            }
        },
        "undocumented": true,
        "name": "lastReceived",
        "longname": "lastReceived",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                92870,
                92902
            ],
            "filename": "Shard.js",
            "lineno": 1996,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021306",
                "name": "lastSent",
                "type": "MemberExpression",
                "value": "this.lastHeartbeatSent"
            }
        },
        "undocumented": true,
        "name": "lastSent",
        "longname": "lastSent",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                92924,
                92956
            ],
            "filename": "Shard.js",
            "lineno": 1997,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021310",
                "name": "interval",
                "type": "MemberExpression",
                "value": "this.heartbeatInterval"
            }
        },
        "undocumented": true,
        "name": "interval",
        "longname": "interval",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                92978,
                92997
            ],
            "filename": "Shard.js",
            "lineno": 1998,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021314",
                "name": "status",
                "type": "MemberExpression",
                "value": "this.status"
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "status",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93019,
                93040
            ],
            "filename": "Shard.js",
            "lineno": 1999,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021318",
                "name": "timestamp",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "timestamp",
        "longname": "timestamp",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93123,
                93140
            ],
            "filename": "Shard.js",
            "lineno": 2002,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021329",
                "name": "reconnect",
                "type": "Literal",
                "value": "auto"
            }
        },
        "undocumented": true,
        "name": "reconnect",
        "longname": "reconnect",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93272,
                93301
            ],
            "filename": "Shard.js",
            "lineno": 2005,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021335",
                "name": "this.lastHeartbeatAck",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastHeartbeatAck",
        "longname": "Shard#lastHeartbeatAck",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93321,
                93366
            ],
            "filename": "Shard.js",
            "lineno": 2007,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021341",
                "name": "this.lastHeartbeatSent",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastHeartbeatSent",
        "longname": "Shard#lastHeartbeatSent",
        "kind": "member",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93442,
                94217
            ],
            "filename": "Shard.js",
            "lineno": 2011,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021362",
                "name": "Shard#sendWS",
                "type": "MethodDefinition",
                "paramnames": [
                    "op",
                    "_data",
                    "priority"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "sendWS",
        "longname": "Shard#sendWS",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93559,
                93564
            ],
            "filename": "Shard.js",
            "lineno": 2013,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021387",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93582,
                93593
            ],
            "filename": "Shard.js",
            "lineno": 2014,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021391",
                "name": "waitFor",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "waitFor",
        "longname": "<anonymous>~waitFor",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93613,
                93987
            ],
            "filename": "Shard.js",
            "lineno": 2015,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021395",
                "name": "func",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "data": "<anonymous>~func~data"
            }
        },
        "undocumented": true,
        "name": "func",
        "longname": "<anonymous>~func",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93743,
                93829
            ],
            "filename": "Shard.js",
            "lineno": 2017,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021420",
                "name": "data",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~func~data",
        "kind": "constant",
        "memberof": "<anonymous>~func",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93774,
                93780
            ],
            "filename": "Shard.js",
            "lineno": 2017,
            "columnno": 57,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021429",
                "name": "op",
                "type": "Identifier",
                "value": "op"
            }
        },
        "undocumented": true,
        "name": "op",
        "longname": "op",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93782,
                93790
            ],
            "filename": "Shard.js",
            "lineno": 2017,
            "columnno": 65,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021431",
                "name": "d",
                "type": "Identifier",
                "value": "_data"
            }
        },
        "undocumented": true,
        "name": "d",
        "longname": "d",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93811,
                93817
            ],
            "filename": "Shard.js",
            "lineno": 2017,
            "columnno": 94,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021438",
                "name": "op",
                "type": "Identifier",
                "value": "op"
            }
        },
        "undocumented": true,
        "name": "op",
        "longname": "op",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93819,
                93827
            ],
            "filename": "Shard.js",
            "lineno": 2017,
            "columnno": 102,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021440",
                "name": "d",
                "type": "Identifier",
                "value": "_data"
            }
        },
        "undocumented": true,
        "name": "d",
        "longname": "d",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93926,
                93932
            ],
            "filename": "Shard.js",
            "lineno": 2019,
            "columnno": 55,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021461",
                "name": "op",
                "type": "Identifier",
                "value": "op"
            }
        },
        "undocumented": true,
        "name": "op",
        "longname": "op",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                93934,
                93942
            ],
            "filename": "Shard.js",
            "lineno": 2019,
            "columnno": 63,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021463",
                "name": "d",
                "type": "Identifier",
                "value": "_data"
            }
        },
        "undocumented": true,
        "name": "d",
        "longname": "d",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Update the bot's AFK status. Setting this to true will enable push notifications for userbots.\n    * @arg {Boolean} afk Whether the bot user is AFK or not\n    */",
        "meta": {
            "range": [
                94399,
                94488
            ],
            "filename": "Shard.js",
            "lineno": 2034,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021496",
                "name": "Shard#editAFK",
                "type": "MethodDefinition",
                "paramnames": [
                    "afk"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Update the bot's AFK status. Setting this to true will enable push notifications for userbots.",
        "params": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the bot user is AFK or not",
                "name": "afk"
            }
        ],
        "name": "editAFK",
        "longname": "Shard#editAFK",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                94422,
                94447
            ],
            "filename": "Shard.js",
            "lineno": 2035,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021502",
                "name": "this.presence.afk",
                "type": "UnaryExpression",
                "value": "!!afk",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "afk",
        "longname": "Shard#presence.afk",
        "kind": "member",
        "memberof": "Shard#presence",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Updates the bot's status on all guilds the shard is in\n    * @arg {String} [status] Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"\n    * @arg {Object} [game] Sets the bot's active game, null to clear\n    * @arg {String} game.name Sets the name of the bot's active game\n    * @arg {Number} [game.type] The type of game. 0 is default, 1 is streaming (Twitch only)\n    * @arg {String} [game.url] Sets the url of the shard's active game\n    */",
        "meta": {
            "range": [
                94971,
                95671
            ],
            "filename": "Shard.js",
            "lineno": 2048,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021516",
                "name": "Shard#editStatus",
                "type": "MethodDefinition",
                "paramnames": [
                    "status",
                    "game"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Updates the bot's status on all guilds the shard is in",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Sets the bot's active game, null to clear",
                "name": "game"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Sets the name of the bot's active game",
                "name": "game.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The type of game. 0 is default, 1 is streaming (Twitch only)",
                "name": "game.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Sets the url of the shard's active game",
                "name": "game.url"
            }
        ],
        "name": "editStatus",
        "longname": "Shard#editStatus",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                95073,
                95086
            ],
            "filename": "Shard.js",
            "lineno": 2050,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021533",
                "name": "game",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "status",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "game",
        "longname": "<anonymous>~game",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                95100,
                95118
            ],
            "filename": "Shard.js",
            "lineno": 2051,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021537",
                "name": "status",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "undefined",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "<anonymous>~status",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                95163,
                95192
            ],
            "filename": "Shard.js",
            "lineno": 2054,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021544",
                "name": "this.presence.status",
                "type": "Identifier",
                "value": "status",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "Shard#presence.status",
        "kind": "member",
        "memberof": "Shard#presence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                95317,
                95345
            ],
            "filename": "Shard.js",
            "lineno": 2058,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021569",
                "name": "game.type",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "<anonymous>~game.type",
        "kind": "member",
        "memberof": "<anonymous>~game",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                95397,
                95422
            ],
            "filename": "Shard.js",
            "lineno": 2060,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021580",
                "name": "this.presence.game",
                "type": "Identifier",
                "value": "game",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "game",
        "longname": "Shard#presence.game",
        "kind": "member",
        "memberof": "Shard#presence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                95677,
                95979
            ],
            "filename": "Shard.js",
            "lineno": 2072,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021635",
                "name": "Shard#sendStatusUpdate",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "sendStatusUpdate",
        "longname": "Shard#sendStatusUpdate",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                95762,
                95786
            ],
            "filename": "Shard.js",
            "lineno": 2074,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021648",
                "name": "afk",
                "type": "UnaryExpression",
                "value": "!!this.presence.afk"
            }
        },
        "undocumented": true,
        "name": "afk",
        "longname": "afk",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                95826,
                95850
            ],
            "filename": "Shard.js",
            "lineno": 2075,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021656",
                "name": "game",
                "type": "MemberExpression",
                "value": "this.presence.game"
            }
        },
        "undocumented": true,
        "name": "game",
        "longname": "game",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                95864,
                95919
            ],
            "filename": "Shard.js",
            "lineno": 2076,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021662",
                "name": "since",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "since",
        "longname": "since",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                95933,
                95961
            ],
            "filename": "Shard.js",
            "lineno": 2077,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021676",
                "name": "status",
                "type": "MemberExpression",
                "value": "this.presence.status"
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "status",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                95985,
                96054
            ],
            "filename": "Shard.js",
            "lineno": 2081,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021682",
                "name": "Shard#toString",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "Shard#toString",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                96060,
                96722
            ],
            "filename": "Shard.js",
            "lineno": 2085,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021696",
                "name": "Shard#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Shard#toJSON",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                96728,
                96947
            ],
            "filename": "Shard.js",
            "lineno": 2110,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021735",
                "name": "Shard#emit",
                "type": "MethodDefinition",
                "paramnames": [
                    "event",
                    "args"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "emit",
        "longname": "Shard#emit",
        "kind": "function",
        "memberof": "Shard",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                96951,
                96973
            ],
            "filename": "Shard.js",
            "lineno": 2118,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021784",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Shard",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                63
            ],
            "filename": "ShardManager.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021794",
                "name": "Collection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Collection",
        "longname": "Collection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                97
            ],
            "filename": "ShardManager.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021800",
                "name": "Shard",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Shard",
        "longname": "Shard",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                100,
                4028
            ],
            "filename": "ShardManager.js",
            "lineno": 6,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021805",
                "name": "ShardManager",
                "type": "ClassDeclaration",
                "paramnames": [
                    "client"
                ]
            }
        },
        "undocumented": true,
        "name": "ShardManager",
        "longname": "ShardManager",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                144,
                323
            ],
            "filename": "ShardManager.js",
            "lineno": 7,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021809",
                "name": "ShardManager",
                "type": "MethodDefinition",
                "paramnames": [
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "ShardManager",
        "longname": "ShardManager",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                196,
                217
            ],
            "filename": "ShardManager.js",
            "lineno": 9,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021819",
                "name": "this._client",
                "type": "Identifier",
                "value": "client",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_client",
        "longname": "ShardManager#_client",
        "kind": "member",
        "memberof": "ShardManager",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                228,
                250
            ],
            "filename": "ShardManager.js",
            "lineno": 11,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021825",
                "name": "this.connectQueue",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectQueue",
        "longname": "ShardManager#connectQueue",
        "kind": "member",
        "memberof": "ShardManager",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                260,
                280
            ],
            "filename": "ShardManager.js",
            "lineno": 12,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021831",
                "name": "this.lastConnect",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastConnect",
        "longname": "ShardManager#lastConnect",
        "kind": "member",
        "memberof": "ShardManager",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                290,
                316
            ],
            "filename": "ShardManager.js",
            "lineno": 13,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021837",
                "name": "this.connectTimeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectTimeout",
        "longname": "ShardManager#connectTimeout",
        "kind": "member",
        "memberof": "ShardManager",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                329,
                419
            ],
            "filename": "ShardManager.js",
            "lineno": 16,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021842",
                "name": "ShardManager#_readyPacketCB",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_readyPacketCB",
        "longname": "ShardManager#_readyPacketCB",
        "kind": "function",
        "memberof": "ShardManager",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                356,
                385
            ],
            "filename": "ShardManager.js",
            "lineno": 17,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021847",
                "name": "this.lastConnect",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastConnect",
        "longname": "ShardManager#lastConnect",
        "kind": "member",
        "memberof": "ShardManager",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                425,
                743
            ],
            "filename": "ShardManager.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021860",
                "name": "ShardManager#connect",
                "type": "MethodDefinition",
                "paramnames": [
                    "shard"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "connect",
        "longname": "ShardManager#connect",
        "kind": "function",
        "memberof": "ShardManager",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                599,
                635
            ],
            "filename": "ShardManager.js",
            "lineno": 24,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021898",
                "name": "this.lastConnect",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastConnect",
        "longname": "ShardManager#lastConnect",
        "kind": "member",
        "memberof": "ShardManager",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                749,
                1252
            ],
            "filename": "ShardManager.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021922",
                "name": "ShardManager#tryConnect",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "tryConnect",
        "longname": "ShardManager#tryConnect",
        "kind": "function",
        "memberof": "ShardManager",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                885,
                918
            ],
            "filename": "ShardManager.js",
            "lineno": 34,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021948",
                "name": "shard",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "shard",
        "longname": "<anonymous>~shard",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                969,
                1005
            ],
            "filename": "ShardManager.js",
            "lineno": 36,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021962",
                "name": "this.lastConnect",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastConnect",
        "longname": "ShardManager#lastConnect",
        "kind": "member",
        "memberof": "ShardManager",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1069,
                1221
            ],
            "filename": "ShardManager.js",
            "lineno": 38,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021979",
                "name": "this.connectTimeout",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectTimeout",
        "longname": "ShardManager#connectTimeout",
        "kind": "member",
        "memberof": "ShardManager",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1130,
                1156
            ],
            "filename": "ShardManager.js",
            "lineno": 39,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021988",
                "name": "this.connectTimeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectTimeout",
        "longname": "ShardManager#connectTimeout",
        "kind": "member",
        "memberof": "ShardManager",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1258,
                3773
            ],
            "filename": "ShardManager.js",
            "lineno": 46,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100021999",
                "name": "ShardManager#spawn",
                "type": "MethodDefinition",
                "paramnames": [
                    "id"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "spawn",
        "longname": "ShardManager#spawn",
        "kind": "function",
        "memberof": "ShardManager",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1282,
                1302
            ],
            "filename": "ShardManager.js",
            "lineno": 47,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022005",
                "name": "shard",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "shard",
        "longname": "<anonymous>~shard",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1337,
                1382
            ],
            "filename": "ShardManager.js",
            "lineno": 49,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022017",
                "name": "shard",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "shard",
        "longname": "<anonymous>~shard",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n                * Fired when a shard turns ready\n                * @event Client#shardReady\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "ShardManager.js",
            "lineno": 51,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a shard turns ready",
        "kind": "event",
        "name": "shardReady",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:shardReady",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1781,
                1786
            ],
            "filename": "ShardManager.js",
            "lineno": 60,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022062",
                "name": "other"
            }
        },
        "undocumented": true,
        "name": "other",
        "longname": "<anonymous>~other",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1934,
                1959
            ],
            "filename": "ShardManager.js",
            "lineno": 65,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022077",
                "name": "this._client.ready",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ready",
        "longname": "ShardManager#_client.ready",
        "kind": "member",
        "memberof": "ShardManager#_client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1977,
                2012
            ],
            "filename": "ShardManager.js",
            "lineno": 66,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022085",
                "name": "this._client.startTime",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "startTime",
        "longname": "ShardManager#_client.startTime",
        "kind": "member",
        "memberof": "ShardManager#_client",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when all shards turn ready\n                * @event Client#ready\n                */",
        "meta": {
            "filename": "ShardManager.js",
            "lineno": 67,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when all shards turn ready",
        "kind": "event",
        "name": "ready",
        "memberof": "Client",
        "longname": "Client#event:ready",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired when a shard resumes\n                * @event Client#shardResume\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "ShardManager.js",
            "lineno": 73,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a shard resumes",
        "kind": "event",
        "name": "shardResume",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:shardResume",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2579,
                2584
            ],
            "filename": "ShardManager.js",
            "lineno": 82,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022128",
                "name": "other"
            }
        },
        "undocumented": true,
        "name": "other",
        "longname": "<anonymous>~other",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2732,
                2757
            ],
            "filename": "ShardManager.js",
            "lineno": 87,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022143",
                "name": "this._client.ready",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ready",
        "longname": "ShardManager#_client.ready",
        "kind": "member",
        "memberof": "ShardManager#_client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2775,
                2810
            ],
            "filename": "ShardManager.js",
            "lineno": 88,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022151",
                "name": "this._client.startTime",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "startTime",
        "longname": "ShardManager#_client.startTime",
        "kind": "member",
        "memberof": "ShardManager#_client",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when a shard disconnects\n                * @event Client#shardDisconnect\n                * @prop {Error?} error The error, if any\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "ShardManager.js",
            "lineno": 91,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when a shard disconnects",
        "kind": "event",
        "name": "shardDisconnect",
        "properties": [
            {
                "type": {
                    "names": [
                        "Error"
                    ]
                },
                "nullable": true,
                "description": "The error, if any",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:shardDisconnect",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3247,
                3252
            ],
            "filename": "ShardManager.js",
            "lineno": 98,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022188",
                "name": "other"
            }
        },
        "undocumented": true,
        "name": "other",
        "longname": "<anonymous>~other",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3399,
                3425
            ],
            "filename": "ShardManager.js",
            "lineno": 103,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022202",
                "name": "this._client.ready",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ready",
        "longname": "ShardManager#_client.ready",
        "kind": "member",
        "memberof": "ShardManager#_client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3443,
                3469
            ],
            "filename": "ShardManager.js",
            "lineno": 104,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022210",
                "name": "this._client.startTime",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "startTime",
        "longname": "ShardManager#_client.startTime",
        "kind": "member",
        "memberof": "ShardManager#_client",
        "scope": "static"
    },
    {
        "comment": "/**\n                * Fired when all shards disconnect\n                * @event Client#disconnect\n                */",
        "meta": {
            "filename": "ShardManager.js",
            "lineno": 105,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "description": "Fired when all shards disconnect",
        "kind": "event",
        "name": "disconnect",
        "memberof": "Client",
        "longname": "Client#event:disconnect",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3779,
                3843
            ],
            "filename": "ShardManager.js",
            "lineno": 117,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022238",
                "name": "ShardManager#toString",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "ShardManager#toString",
        "kind": "function",
        "memberof": "ShardManager",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3849,
                4026
            ],
            "filename": "ShardManager.js",
            "lineno": 121,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022249",
                "name": "ShardManager#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "ShardManager#toJSON",
        "kind": "function",
        "memberof": "ShardManager",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4030,
                4059
            ],
            "filename": "ShardManager.js",
            "lineno": 131,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {
                "id": "astnode100022268",
                "name": "module.exports",
                "type": "Identifier",
                "value": "ShardManager",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22,
                34
            ],
            "filename": "Endpoints.js",
            "lineno": 3,
            "columnno": 7,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022280",
                "name": "REST_VERSION",
                "type": "Identifier",
                "value": "REST_VERSION"
            }
        },
        "undocumented": true,
        "name": "REST_VERSION",
        "longname": "REST_VERSION",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64,
                113
            ],
            "filename": "Endpoints.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022286",
                "name": "module.exports.BASE_URL",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "BASE_URL",
        "longname": "BASE_URL",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                115,
                168
            ],
            "filename": "Endpoints.js",
            "lineno": 6,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022296",
                "name": "module.exports.CDN_URL",
                "type": "Literal",
                "value": "https://cdn.discordapp.com",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "CDN_URL",
        "longname": "CDN_URL",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                171,
                276
            ],
            "filename": "Endpoints.js",
            "lineno": 8,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022304",
                "name": "module.exports.CHANNEL",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL",
        "longname": "CHANNEL",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                278,
                404
            ],
            "filename": "Endpoints.js",
            "lineno": 9,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022317",
                "name": "module.exports.CHANNEL_BULK_DELETE",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_BULK_DELETE",
        "longname": "CHANNEL_BULK_DELETE",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                406,
                521
            ],
            "filename": "Endpoints.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022330",
                "name": "module.exports.CHANNEL_CALL_RING",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_CALL_RING",
        "longname": "CHANNEL_CALL_RING",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                523,
                656
            ],
            "filename": "Endpoints.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022343",
                "name": "module.exports.CHANNEL_CROSSPOST",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID",
                    "msgID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_CROSSPOST",
        "longname": "CHANNEL_CROSSPOST",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                658,
                773
            ],
            "filename": "Endpoints.js",
            "lineno": 12,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022359",
                "name": "module.exports.CHANNEL_FOLLOW",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_FOLLOW",
        "longname": "CHANNEL_FOLLOW",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                775,
                888
            ],
            "filename": "Endpoints.js",
            "lineno": 13,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022372",
                "name": "module.exports.CHANNEL_INVITES",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_INVITES",
        "longname": "CHANNEL_INVITES",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                890,
                1035
            ],
            "filename": "Endpoints.js",
            "lineno": 14,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022385",
                "name": "module.exports.CHANNEL_MESSAGE_REACTION",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID",
                    "msgID",
                    "reaction"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_MESSAGE_REACTION",
        "longname": "CHANNEL_MESSAGE_REACTION",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1037,
                1192
            ],
            "filename": "Endpoints.js",
            "lineno": 15,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022404",
                "name": "module.exports.CHANNEL_MESSAGE_REACTION_USER",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID",
                    "msgID",
                    "reaction",
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_MESSAGE_REACTION_USER",
        "longname": "CHANNEL_MESSAGE_REACTION_USER",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1194,
                1327
            ],
            "filename": "Endpoints.js",
            "lineno": 16,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022426",
                "name": "module.exports.CHANNEL_MESSAGE_REACTIONS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID",
                    "msgID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_MESSAGE_REACTIONS",
        "longname": "CHANNEL_MESSAGE_REACTIONS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1329,
                1452
            ],
            "filename": "Endpoints.js",
            "lineno": 17,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022442",
                "name": "module.exports.CHANNEL_MESSAGE",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID",
                    "msgID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_MESSAGE",
        "longname": "CHANNEL_MESSAGE",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1454,
                1568
            ],
            "filename": "Endpoints.js",
            "lineno": 18,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022458",
                "name": "module.exports.CHANNEL_MESSAGES",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_MESSAGES",
        "longname": "CHANNEL_MESSAGES",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1570,
                1691
            ],
            "filename": "Endpoints.js",
            "lineno": 19,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022471",
                "name": "module.exports.CHANNEL_MESSAGES_SEARCH",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_MESSAGES_SEARCH",
        "longname": "CHANNEL_MESSAGES_SEARCH",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1693,
                1820
            ],
            "filename": "Endpoints.js",
            "lineno": 20,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022484",
                "name": "module.exports.CHANNEL_PERMISSION",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID",
                    "overID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_PERMISSION",
        "longname": "CHANNEL_PERMISSION",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1822,
                1939
            ],
            "filename": "Endpoints.js",
            "lineno": 21,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022500",
                "name": "module.exports.CHANNEL_PERMISSIONS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_PERMISSIONS",
        "longname": "CHANNEL_PERMISSIONS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1941,
                2060
            ],
            "filename": "Endpoints.js",
            "lineno": 22,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022513",
                "name": "module.exports.CHANNEL_PIN",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID",
                    "msgID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_PIN",
        "longname": "CHANNEL_PIN",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2062,
                2172
            ],
            "filename": "Endpoints.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022529",
                "name": "module.exports.CHANNEL_PINS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_PINS",
        "longname": "CHANNEL_PINS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2174,
                2301
            ],
            "filename": "Endpoints.js",
            "lineno": 24,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022542",
                "name": "module.exports.CHANNEL_RECIPIENT",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "groupID",
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_RECIPIENT",
        "longname": "CHANNEL_RECIPIENT",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2303,
                2415
            ],
            "filename": "Endpoints.js",
            "lineno": 25,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022558",
                "name": "module.exports.CHANNEL_TYPING",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_TYPING",
        "longname": "CHANNEL_TYPING",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2417,
                2531
            ],
            "filename": "Endpoints.js",
            "lineno": 26,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022571",
                "name": "module.exports.CHANNEL_WEBHOOKS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_WEBHOOKS",
        "longname": "CHANNEL_WEBHOOKS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2533,
                2628
            ],
            "filename": "Endpoints.js",
            "lineno": 27,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022584",
                "name": "module.exports.CHANNELS",
                "type": "Literal",
                "value": "/channels",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "CHANNELS",
        "longname": "CHANNELS",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2630,
                2724
            ],
            "filename": "Endpoints.js",
            "lineno": 28,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022592",
                "name": "module.exports.GATEWAY",
                "type": "Literal",
                "value": "/gateway",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "GATEWAY",
        "longname": "GATEWAY",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2726,
                2824
            ],
            "filename": "Endpoints.js",
            "lineno": 29,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022600",
                "name": "module.exports.GATEWAY_BOT",
                "type": "Literal",
                "value": "/gateway/bot",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "GATEWAY_BOT",
        "longname": "GATEWAY_BOT",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2826,
                2930
            ],
            "filename": "Endpoints.js",
            "lineno": 30,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022608",
                "name": "module.exports.GUILD",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD",
        "longname": "GUILD",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2932,
                3047
            ],
            "filename": "Endpoints.js",
            "lineno": 31,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022621",
                "name": "module.exports.GUILD_AUDIT_LOGS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_AUDIT_LOGS",
        "longname": "GUILD_AUDIT_LOGS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3049,
                3170
            ],
            "filename": "Endpoints.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022634",
                "name": "module.exports.GUILD_BAN",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID",
                    "memberID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_BAN",
        "longname": "GUILD_BAN",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3172,
                3281
            ],
            "filename": "Endpoints.js",
            "lineno": 33,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022650",
                "name": "module.exports.GUILD_BANS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_BANS",
        "longname": "GUILD_BANS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3283,
                3396
            ],
            "filename": "Endpoints.js",
            "lineno": 34,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022663",
                "name": "module.exports.GUILD_CHANNELS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_CHANNELS",
        "longname": "GUILD_CHANNELS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3398,
                3508
            ],
            "filename": "Endpoints.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022676",
                "name": "module.exports.GUILD_EMBED",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_EMBED",
        "longname": "GUILD_EMBED",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3510,
                3632
            ],
            "filename": "Endpoints.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022689",
                "name": "module.exports.GUILD_EMOJI",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID",
                    "emojiID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_EMOJI",
        "longname": "GUILD_EMOJI",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3634,
                3745
            ],
            "filename": "Endpoints.js",
            "lineno": 37,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022705",
                "name": "module.exports.GUILD_EMOJIS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_EMOJIS",
        "longname": "GUILD_EMOJIS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3747,
                3874
            ],
            "filename": "Endpoints.js",
            "lineno": 38,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022718",
                "name": "module.exports.GUILD_INTEGRATION",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID",
                    "inteID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_INTEGRATION",
        "longname": "GUILD_INTEGRATION",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3876,
                4008
            ],
            "filename": "Endpoints.js",
            "lineno": 39,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022734",
                "name": "module.exports.GUILD_INTEGRATION_SYNC",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID",
                    "inteID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_INTEGRATION_SYNC",
        "longname": "GUILD_INTEGRATION_SYNC",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4010,
                4127
            ],
            "filename": "Endpoints.js",
            "lineno": 40,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022750",
                "name": "module.exports.GUILD_INTEGRATIONS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_INTEGRATIONS",
        "longname": "GUILD_INTEGRATIONS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4129,
                4241
            ],
            "filename": "Endpoints.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022763",
                "name": "module.exports.GUILD_INVITES",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_INVITES",
        "longname": "GUILD_INVITES",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4243,
                4358
            ],
            "filename": "Endpoints.js",
            "lineno": 42,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022776",
                "name": "module.exports.GUILD_VANITY_URL",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_VANITY_URL",
        "longname": "GUILD_VANITY_URL",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4360,
                4484
            ],
            "filename": "Endpoints.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022789",
                "name": "module.exports.GUILD_MEMBER",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID",
                    "memberID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_MEMBER",
        "longname": "GUILD_MEMBER",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4486,
                4615
            ],
            "filename": "Endpoints.js",
            "lineno": 44,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022805",
                "name": "module.exports.GUILD_MEMBER_NICK",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID",
                    "memberID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_MEMBER_NICK",
        "longname": "GUILD_MEMBER_NICK",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4617,
                4757
            ],
            "filename": "Endpoints.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022821",
                "name": "module.exports.GUILD_MEMBER_ROLE",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID",
                    "memberID",
                    "roleID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_MEMBER_ROLE",
        "longname": "GUILD_MEMBER_ROLE",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4759,
                4871
            ],
            "filename": "Endpoints.js",
            "lineno": 46,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022840",
                "name": "module.exports.GUILD_MEMBERS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_MEMBERS",
        "longname": "GUILD_MEMBERS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4873,
                4992
            ],
            "filename": "Endpoints.js",
            "lineno": 47,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022853",
                "name": "module.exports.GUILD_MEMBERS_SEARCH",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_MEMBERS_SEARCH",
        "longname": "GUILD_MEMBERS_SEARCH",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4994,
                5114
            ],
            "filename": "Endpoints.js",
            "lineno": 48,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022866",
                "name": "module.exports.GUILD_MESSAGES_SEARCH",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_MESSAGES_SEARCH",
        "longname": "GUILD_MESSAGES_SEARCH",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5116,
                5228
            ],
            "filename": "Endpoints.js",
            "lineno": 49,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022879",
                "name": "module.exports.GUILD_PREVIEW",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_PREVIEW",
        "longname": "GUILD_PREVIEW",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5230,
                5340
            ],
            "filename": "Endpoints.js",
            "lineno": 50,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022892",
                "name": "module.exports.GUILD_PRUNE",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_PRUNE",
        "longname": "GUILD_PRUNE",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5342,
                5462
            ],
            "filename": "Endpoints.js",
            "lineno": 51,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022905",
                "name": "module.exports.GUILD_ROLE",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID",
                    "roleID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_ROLE",
        "longname": "GUILD_ROLE",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5464,
                5574
            ],
            "filename": "Endpoints.js",
            "lineno": 52,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022921",
                "name": "module.exports.GUILD_ROLES",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_ROLES",
        "longname": "GUILD_ROLES",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5576,
                5688
            ],
            "filename": "Endpoints.js",
            "lineno": 53,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022934",
                "name": "module.exports.GUILD_VOICE_REGIONS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_VOICE_REGIONS",
        "longname": "GUILD_VOICE_REGIONS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5690,
                5803
            ],
            "filename": "Endpoints.js",
            "lineno": 54,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022947",
                "name": "module.exports.GUILD_WEBHOOKS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_WEBHOOKS",
        "longname": "GUILD_WEBHOOKS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5805,
                5916
            ],
            "filename": "Endpoints.js",
            "lineno": 55,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022960",
                "name": "module.exports.GUILD_WIDGET",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_WIDGET",
        "longname": "GUILD_WIDGET",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5918,
                6011
            ],
            "filename": "Endpoints.js",
            "lineno": 56,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022973",
                "name": "module.exports.GUILDS",
                "type": "Literal",
                "value": "/guilds",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "GUILDS",
        "longname": "GUILDS",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6013,
                6118
            ],
            "filename": "Endpoints.js",
            "lineno": 57,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022981",
                "name": "module.exports.INVITE",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "inviteID"
                ]
            }
        },
        "undocumented": true,
        "name": "INVITE",
        "longname": "INVITE",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6120,
                6235
            ],
            "filename": "Endpoints.js",
            "lineno": 58,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100022994",
                "name": "module.exports.OAUTH2_APPLICATION",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "appID"
                ]
            }
        },
        "undocumented": true,
        "name": "OAUTH2_APPLICATION",
        "longname": "OAUTH2_APPLICATION",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6237,
                6339
            ],
            "filename": "Endpoints.js",
            "lineno": 59,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023007",
                "name": "module.exports.USER",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER",
        "longname": "USER",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6341,
                6451
            ],
            "filename": "Endpoints.js",
            "lineno": 60,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023020",
                "name": "module.exports.USER_BILLING",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_BILLING",
        "longname": "USER_BILLING",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6453,
                6572
            ],
            "filename": "Endpoints.js",
            "lineno": 61,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023033",
                "name": "module.exports.USER_BILLING_PAYMENTS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_BILLING_PAYMENTS",
        "longname": "USER_BILLING_PAYMENTS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6574,
                6705
            ],
            "filename": "Endpoints.js",
            "lineno": 62,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023046",
                "name": "module.exports.USER_BILLING_PREMIUM_SUBSCRIPTION",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_BILLING_PREMIUM_SUBSCRIPTION",
        "longname": "USER_BILLING_PREMIUM_SUBSCRIPTION",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6707,
                6818
            ],
            "filename": "Endpoints.js",
            "lineno": 63,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023059",
                "name": "module.exports.USER_CHANNELS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_CHANNELS",
        "longname": "USER_CHANNELS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6820,
                6934
            ],
            "filename": "Endpoints.js",
            "lineno": 64,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023072",
                "name": "module.exports.USER_CONNECTIONS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_CONNECTIONS",
        "longname": "USER_CONNECTIONS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6936,
                7068
            ],
            "filename": "Endpoints.js",
            "lineno": 65,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023085",
                "name": "module.exports.USER_CONNECTION_PLATFORM",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID",
                    "platform",
                    "id"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_CONNECTION_PLATFORM",
        "longname": "USER_CONNECTION_PLATFORM",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7070,
                7190
            ],
            "filename": "Endpoints.js",
            "lineno": 66,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023104",
                "name": "module.exports.USER_GUILD",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID",
                    "guildID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_GUILD",
        "longname": "USER_GUILD",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7192,
                7301
            ],
            "filename": "Endpoints.js",
            "lineno": 67,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023120",
                "name": "module.exports.USER_GUILDS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_GUILDS",
        "longname": "USER_GUILDS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7303,
                7415
            ],
            "filename": "Endpoints.js",
            "lineno": 68,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023133",
                "name": "module.exports.USER_MFA_CODES",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_MFA_CODES",
        "longname": "USER_MFA_CODES",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7417,
                7536
            ],
            "filename": "Endpoints.js",
            "lineno": 69,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023146",
                "name": "module.exports.USER_MFA_TOTP_DISABLE",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_MFA_TOTP_DISABLE",
        "longname": "USER_MFA_TOTP_DISABLE",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7538,
                7656
            ],
            "filename": "Endpoints.js",
            "lineno": 70,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023159",
                "name": "module.exports.USER_MFA_TOTP_ENABLE",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_MFA_TOTP_ENABLE",
        "longname": "USER_MFA_TOTP_ENABLE",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7658,
                7777
            ],
            "filename": "Endpoints.js",
            "lineno": 71,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023172",
                "name": "module.exports.USER_NOTE",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID",
                    "targetID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_NOTE",
        "longname": "USER_NOTE",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7779,
                7889
            ],
            "filename": "Endpoints.js",
            "lineno": 72,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023188",
                "name": "module.exports.USER_PROFILE",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_PROFILE",
        "longname": "USER_PROFILE",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7891,
                8016
            ],
            "filename": "Endpoints.js",
            "lineno": 73,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023201",
                "name": "module.exports.USER_RELATIONSHIP",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID",
                    "relID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_RELATIONSHIP",
        "longname": "USER_RELATIONSHIP",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8018,
                8129
            ],
            "filename": "Endpoints.js",
            "lineno": 74,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023217",
                "name": "module.exports.USER_SETTINGS",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_SETTINGS",
        "longname": "USER_SETTINGS",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8131,
                8223
            ],
            "filename": "Endpoints.js",
            "lineno": 75,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023230",
                "name": "module.exports.USERS",
                "type": "Literal",
                "value": "/users",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "USERS",
        "longname": "USERS",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8225,
                8325
            ],
            "filename": "Endpoints.js",
            "lineno": 76,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023238",
                "name": "module.exports.VOICE_REGIONS",
                "type": "Literal",
                "value": "/voice/regions",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "VOICE_REGIONS",
        "longname": "VOICE_REGIONS",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8327,
                8432
            ],
            "filename": "Endpoints.js",
            "lineno": 77,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023246",
                "name": "module.exports.WEBHOOK",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "hookID"
                ]
            }
        },
        "undocumented": true,
        "name": "WEBHOOK",
        "longname": "WEBHOOK",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8434,
                8545
            ],
            "filename": "Endpoints.js",
            "lineno": 78,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023259",
                "name": "module.exports.WEBHOOK_SLACK",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "hookID"
                ]
            }
        },
        "undocumented": true,
        "name": "WEBHOOK_SLACK",
        "longname": "WEBHOOK_SLACK",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8547,
                8661
            ],
            "filename": "Endpoints.js",
            "lineno": 79,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023272",
                "name": "module.exports.WEBHOOK_TOKEN",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "hookID",
                    "token"
                ]
            }
        },
        "undocumented": true,
        "name": "WEBHOOK_TOKEN",
        "longname": "WEBHOOK_TOKEN",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8663,
                8783
            ],
            "filename": "Endpoints.js",
            "lineno": 80,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023288",
                "name": "module.exports.WEBHOOK_TOKEN_SLACK",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "hookID",
                    "token"
                ]
            }
        },
        "undocumented": true,
        "name": "WEBHOOK_TOKEN_SLACK",
        "longname": "WEBHOOK_TOKEN_SLACK",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8803,
                8925
            ],
            "filename": "Endpoints.js",
            "lineno": 83,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023304",
                "name": "module.exports.CHANNEL_ICON",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "chanID",
                    "chanIcon"
                ]
            }
        },
        "undocumented": true,
        "name": "CHANNEL_ICON",
        "longname": "CHANNEL_ICON",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8927,
                9031
            ],
            "filename": "Endpoints.js",
            "lineno": 84,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023320",
                "name": "module.exports.CUSTOM_EMOJI",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "emojiID"
                ]
            }
        },
        "undocumented": true,
        "name": "CUSTOM_EMOJI",
        "longname": "CUSTOM_EMOJI",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9033,
                9154
            ],
            "filename": "Endpoints.js",
            "lineno": 85,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023333",
                "name": "module.exports.DEFAULT_USER_AVATAR",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userDiscriminator"
                ]
            }
        },
        "undocumented": true,
        "name": "DEFAULT_USER_AVATAR",
        "longname": "DEFAULT_USER_AVATAR",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9156,
                9276
            ],
            "filename": "Endpoints.js",
            "lineno": 86,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023346",
                "name": "module.exports.GUILD_BANNER",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID",
                    "guildBanner"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_BANNER",
        "longname": "GUILD_BANNER",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9278,
                9394
            ],
            "filename": "Endpoints.js",
            "lineno": 87,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023362",
                "name": "module.exports.GUILD_ICON",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID",
                    "guildIcon"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_ICON",
        "longname": "GUILD_ICON",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9396,
                9517
            ],
            "filename": "Endpoints.js",
            "lineno": 88,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023378",
                "name": "module.exports.GUILD_SPLASH",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "guildID",
                    "guildSplash"
                ]
            }
        },
        "undocumented": true,
        "name": "GUILD_SPLASH",
        "longname": "GUILD_SPLASH",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9519,
                9637
            ],
            "filename": "Endpoints.js",
            "lineno": 89,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023394",
                "name": "module.exports.USER_AVATAR",
                "type": "ArrowFunctionExpression",
                "paramnames": [
                    "userID",
                    "userAvatar"
                ]
            }
        },
        "undocumented": true,
        "name": "USER_AVATAR",
        "longname": "USER_AVATAR",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                57
            ],
            "filename": "RequestHandler.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023414",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                121
            ],
            "filename": "RequestHandler.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023420",
                "name": "DiscordHTTPError",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "DiscordHTTPError",
        "longname": "DiscordHTTPError",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                129,
                185
            ],
            "filename": "RequestHandler.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023426",
                "name": "DiscordRESTError",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "DiscordRESTError",
        "longname": "DiscordRESTError",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                193,
                227
            ],
            "filename": "RequestHandler.js",
            "lineno": 6,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023432",
                "name": "Endpoints",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Endpoints",
        "longname": "Endpoints",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                235,
                259
            ],
            "filename": "RequestHandler.js",
            "lineno": 7,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023438",
                "name": "HTTPS",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "HTTPS",
        "longname": "HTTPS",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                267,
                315
            ],
            "filename": "RequestHandler.js",
            "lineno": 8,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023444",
                "name": "MultipartData",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "MultipartData",
        "longname": "MultipartData",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                323,
                377
            ],
            "filename": "RequestHandler.js",
            "lineno": 9,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023450",
                "name": "SequentialBucket",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "SequentialBucket",
        "longname": "SequentialBucket",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                385,
                407
            ],
            "filename": "RequestHandler.js",
            "lineno": 10,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023456",
                "name": "Zlib",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Zlib",
        "longname": "Zlib",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Handles API requests\n*/",
        "meta": {
            "range": [
                440,
                19177
            ],
            "filename": "RequestHandler.js",
            "lineno": 15,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023461",
                "name": "RequestHandler",
                "type": "ClassDeclaration",
                "paramnames": [
                    "client",
                    "forceQueueing"
                ]
            }
        },
        "classdesc": "Handles API requests",
        "name": "RequestHandler",
        "longname": "RequestHandler",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                467,
                1322
            ],
            "filename": "RequestHandler.js",
            "lineno": 16,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023464",
                "name": "RequestHandler",
                "type": "MethodDefinition",
                "paramnames": [
                    "client",
                    "forceQueueing"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "RequestHandler",
        "longname": "RequestHandler",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Handles API requests\n*/",
        "meta": {
            "range": [
                440,
                19177
            ],
            "filename": "RequestHandler.js",
            "lineno": 15,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023461",
                "name": "RequestHandler",
                "type": "ClassDeclaration",
                "paramnames": [
                    "client",
                    "forceQueueing"
                ]
            }
        },
        "name": "RequestHandler",
        "longname": "RequestHandler",
        "kind": "class",
        "classdesc": "Handles API requests",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                512,
                533
            ],
            "filename": "RequestHandler.js",
            "lineno": 17,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023471",
                "name": "this._client",
                "type": "Identifier",
                "value": "client",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_client",
        "longname": "RequestHandler#_client",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                543,
                576
            ],
            "filename": "RequestHandler.js",
            "lineno": 18,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023477",
                "name": "this.baseURL",
                "type": "MemberExpression",
                "value": "Endpoints.BASE_URL",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "baseURL",
        "longname": "RequestHandler#baseURL",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                586,
                695
            ],
            "filename": "RequestHandler.js",
            "lineno": 19,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023485",
                "name": "this.userAgent",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "userAgent",
        "longname": "RequestHandler#userAgent",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                705,
                725
            ],
            "filename": "RequestHandler.js",
            "lineno": 20,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023498",
                "name": "this.ratelimits",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ratelimits",
        "longname": "RequestHandler#ratelimits",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                735,
                786
            ],
            "filename": "RequestHandler.js",
            "lineno": 21,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023504",
                "name": "this.requestTimeout",
                "type": "MemberExpression",
                "value": "client.options.requestTimeout",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "requestTimeout",
        "longname": "RequestHandler#requestTimeout",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                796,
                829
            ],
            "filename": "RequestHandler.js",
            "lineno": 22,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023514",
                "name": "this.agent",
                "type": "MemberExpression",
                "value": "client.options.agent",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "agent",
        "longname": "RequestHandler#agent",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                839,
                1100
            ],
            "filename": "RequestHandler.js",
            "lineno": 23,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023524",
                "name": "this.latencyRef",
                "type": "ObjectExpression",
                "value": "{\"latency\":500,\"offset\":\"\",\"raw\":\"\",\"timeOffset\":0,\"timeOffsets\":\"\",\"lastTimeOffsetCheck\":0}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "latencyRef",
        "longname": "RequestHandler#latencyRef",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                871,
                883
            ],
            "filename": "RequestHandler.js",
            "lineno": 24,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023529",
                "name": "latency",
                "type": "Literal",
                "value": 500
            }
        },
        "undocumented": true,
        "name": "latency",
        "longname": "RequestHandler#latencyRef.latency",
        "kind": "member",
        "memberof": "RequestHandler#latencyRef",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                897,
                937
            ],
            "filename": "RequestHandler.js",
            "lineno": 25,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023531",
                "name": "offset",
                "type": "MemberExpression",
                "value": "client.options.ratelimiterOffset"
            }
        },
        "undocumented": true,
        "name": "offset",
        "longname": "RequestHandler#latencyRef.offset",
        "kind": "member",
        "memberof": "RequestHandler#latencyRef",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                951,
                979
            ],
            "filename": "RequestHandler.js",
            "lineno": 26,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023537",
                "name": "raw",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "raw",
        "longname": "RequestHandler#latencyRef.raw",
        "kind": "member",
        "memberof": "RequestHandler#latencyRef",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                993,
                1006
            ],
            "filename": "RequestHandler.js",
            "lineno": 27,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023545",
                "name": "timeOffset",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "timeOffset",
        "longname": "RequestHandler#latencyRef.timeOffset",
        "kind": "member",
        "memberof": "RequestHandler#latencyRef",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1020,
                1054
            ],
            "filename": "RequestHandler.js",
            "lineno": 28,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023547",
                "name": "timeOffsets",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "timeOffsets",
        "longname": "RequestHandler#latencyRef.timeOffsets",
        "kind": "member",
        "memberof": "RequestHandler#latencyRef",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1068,
                1090
            ],
            "filename": "RequestHandler.js",
            "lineno": 29,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023555",
                "name": "lastTimeOffsetCheck",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "lastTimeOffsetCheck",
        "longname": "RequestHandler#latencyRef.lastTimeOffsetCheck",
        "kind": "member",
        "memberof": "RequestHandler#latencyRef",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1110,
                1134
            ],
            "filename": "RequestHandler.js",
            "lineno": 31,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023558",
                "name": "this.globalBlock",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "globalBlock",
        "longname": "RequestHandler#globalBlock",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1144,
                1164
            ],
            "filename": "RequestHandler.js",
            "lineno": 32,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023564",
                "name": "this.readyQueue",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "readyQueue",
        "longname": "RequestHandler#readyQueue",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1206,
                1229
            ],
            "filename": "RequestHandler.js",
            "lineno": 34,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023573",
                "name": "this.globalBlock",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "globalBlock",
        "longname": "RequestHandler#globalBlock",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1328,
                1478
            ],
            "filename": "RequestHandler.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023591",
                "name": "RequestHandler#globalUnblock",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "globalUnblock",
        "longname": "RequestHandler#globalUnblock",
        "kind": "function",
        "memberof": "RequestHandler",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1354,
                1378
            ],
            "filename": "RequestHandler.js",
            "lineno": 40,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023596",
                "name": "this.globalBlock",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "globalBlock",
        "longname": "RequestHandler#globalBlock",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1484,
                2017
            ],
            "filename": "RequestHandler.js",
            "lineno": 46,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023618",
                "name": "RequestHandler#routefy",
                "type": "MethodDefinition",
                "paramnames": [
                    "url",
                    "method"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "routefy",
        "longname": "RequestHandler#routefy",
        "kind": "function",
        "memberof": "RequestHandler",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1519,
                1823
            ],
            "filename": "RequestHandler.js",
            "lineno": 47,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023625",
                "name": "route",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "route",
        "longname": "<anonymous>~route",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1956,
                1978
            ],
            "filename": "RequestHandler.js",
            "lineno": 51,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023676",
                "name": "route",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "route",
        "longname": "<anonymous>~route",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n    * Make an API request\n    * @arg {String} method Uppercase HTTP method\n    * @arg {String} url URL of the endpoint\n    * @arg {Boolean} auth Whether to add the Authorization header and token or not\n    * @arg {Object} [body] Request payload\n    * @arg {Object} [file] File object\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Object>} Resolves with the returned JSON data\n    */",
        "meta": {
            "range": [
                2504,
                18797
            ],
            "filename": "RequestHandler.js",
            "lineno": 67,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023683",
                "name": "RequestHandler#request",
                "type": "MethodDefinition",
                "paramnames": [
                    "method",
                    "url",
                    "auth",
                    "body",
                    "file",
                    "_route",
                    "short"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Make an API request",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Uppercase HTTP method",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "URL of the endpoint",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether to add the Authorization header and token or not",
                "name": "auth"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Request payload",
                "name": "body"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "File object",
                "name": "file"
            },
            {
                "type": {
                    "names": [
                        "Buffer"
                    ]
                },
                "description": "A buffer containing file data",
                "name": "file.file"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "What to name the file",
                "name": "file.name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with the returned JSON data"
            }
        ],
        "name": "request",
        "longname": "RequestHandler#request",
        "kind": "function",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2574,
                2617
            ],
            "filename": "RequestHandler.js",
            "lineno": 68,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023695",
                "name": "route",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "route",
        "longname": "<anonymous>~route",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2634,
                2651
            ],
            "filename": "RequestHandler.js",
            "lineno": 70,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023706",
                "name": "_stackHolder",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "_stackHolder",
        "longname": "<anonymous>~_stackHolder",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2791,
                2803
            ],
            "filename": "RequestHandler.js",
            "lineno": 74,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023723",
                "name": "attempts",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "attempts",
        "longname": "<anonymous>~attempts",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2824,
                18186
            ],
            "filename": "RequestHandler.js",
            "lineno": 76,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023727",
                "name": "actualCall",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "headers": "<anonymous>~actualCall~headers",
                "data": "<anonymous>~actualCall~data",
                "finalURL": "<anonymous>~actualCall~finalURL",
                "headers.Authorization": "<anonymous>~actualCall~headers.Authorization",
                "headers[\"X-Audit-Log-Reason\"]": "<anonymous>~actualCall~headers.\"X-Audit-Log-Reason\"]",
                "headers[\"Content-Type\"]": "<anonymous>~actualCall~headers.\"Content-Type\"]",
                "": null,
                "qs": "<anonymous>~actualCall~qs",
                "req": "<anonymous>~actualCall~req",
                "reqError": "<anonymous>~actualCall~reqError",
                "latency": "<anonymous>~actualCall~latency",
                "chunk": "<anonymous>~actualCall~chunk"
            }
        },
        "undocumented": true,
        "name": "actualCall",
        "longname": "<anonymous>~actualCall",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2869,
                3062
            ],
            "filename": "RequestHandler.js",
            "lineno": 77,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023733",
                "name": "headers",
                "type": "ObjectExpression",
                "value": "{\"undefined\":\"millisecond\"}"
            }
        },
        "undocumented": true,
        "name": "headers",
        "longname": "<anonymous>~actualCall~headers",
        "kind": "constant",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2901,
                2929
            ],
            "filename": "RequestHandler.js",
            "lineno": 78,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023736",
                "name": "\"User-Agent\"",
                "type": "MemberExpression",
                "value": "this.userAgent"
            }
        },
        "undocumented": true,
        "name": "\"User-Agent\"",
        "longname": "<anonymous>~actualCall~headers.\"User-Agent\"",
        "kind": "member",
        "memberof": "<anonymous>~actualCall~headers",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2951,
                2984
            ],
            "filename": "RequestHandler.js",
            "lineno": 79,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023740",
                "name": "\"Accept-Encoding\"",
                "type": "Literal",
                "value": "gzip,deflate"
            }
        },
        "undocumented": true,
        "name": "\"Accept-Encoding\"",
        "longname": "<anonymous>~actualCall~headers.\"Accept-Encoding\"",
        "kind": "member",
        "memberof": "<anonymous>~actualCall~headers",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3006,
                3044
            ],
            "filename": "RequestHandler.js",
            "lineno": 80,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023742",
                "name": "\"X-RateLimit-Precision\"",
                "type": "Literal",
                "value": "millisecond"
            }
        },
        "undocumented": true,
        "name": "\"X-RateLimit-Precision\"",
        "longname": "<anonymous>~actualCall~headers.\"X-RateLimit-Precision\"",
        "kind": "member",
        "memberof": "<anonymous>~actualCall~headers",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3084,
                3088
            ],
            "filename": "RequestHandler.js",
            "lineno": 82,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023745",
                "name": "data"
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~actualCall~data",
        "kind": "member",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3110,
                3124
            ],
            "filename": "RequestHandler.js",
            "lineno": 83,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023748",
                "name": "finalURL",
                "type": "Identifier",
                "value": "url"
            }
        },
        "undocumented": true,
        "name": "finalURL",
        "longname": "<anonymous>~actualCall~finalURL",
        "kind": "member",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3204,
                3246
            ],
            "filename": "RequestHandler.js",
            "lineno": 87,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023757",
                "name": "headers.Authorization",
                "type": "MemberExpression",
                "funcscope": "<anonymous>~actualCall",
                "value": "this._client.token",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Authorization",
        "longname": "<anonymous>~actualCall~headers.Authorization",
        "kind": "member",
        "memberof": "<anonymous>~actualCall~headers",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3368,
                3411
            ],
            "filename": "RequestHandler.js",
            "lineno": 90,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023774",
                "name": "headers[\"X-Audit-Log-Reason\"]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>~actualCall",
                "value": "body.reason",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "\"X-Audit-Log-Reason\"]",
        "longname": "<anonymous>~actualCall~headers.\"X-Audit-Log-Reason\"]",
        "kind": "member",
        "memberof": "<anonymous>~actualCall~headers",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3693,
                3719
            ],
            "filename": "RequestHandler.js",
            "lineno": 97,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023809",
                "name": "data",
                "type": "NewExpression",
                "funcscope": "<anonymous>~actualCall",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~actualCall~data",
        "kind": "member",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3749,
                3823
            ],
            "filename": "RequestHandler.js",
            "lineno": 98,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023814",
                "name": "headers[\"Content-Type\"]",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>~actualCall",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "\"Content-Type\"]",
        "longname": "<anonymous>~actualCall~headers.\"Content-Type\"]",
        "kind": "member",
        "memberof": "<anonymous>~actualCall~headers",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4269,
                4289
            ],
            "filename": "RequestHandler.js",
            "lineno": 108,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023863",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>~actualCall",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~actualCall~data",
        "kind": "member",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4366,
                4392
            ],
            "filename": "RequestHandler.js",
            "lineno": 110,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023875",
                "name": "data",
                "type": "NewExpression",
                "funcscope": "<anonymous>~actualCall",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~actualCall~data",
        "kind": "member",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4422,
                4496
            ],
            "filename": "RequestHandler.js",
            "lineno": 111,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023880",
                "name": "headers[\"Content-Type\"]",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>~actualCall",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "\"Content-Type\"]",
        "longname": "<anonymous>~actualCall~headers.\"Content-Type\"]",
        "kind": "member",
        "memberof": "<anonymous>~actualCall~headers",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4733,
                4753
            ],
            "filename": "RequestHandler.js",
            "lineno": 116,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023912",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>~actualCall",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~actualCall~data",
        "kind": "member",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5022,
                5029
            ],
            "filename": "RequestHandler.js",
            "lineno": 122,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023936",
                "name": "qs",
                "type": "Literal",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "qs",
        "longname": "<anonymous>~actualCall~qs",
        "kind": "member",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5347,
                5409
            ],
            "filename": "RequestHandler.js",
            "lineno": 127,
            "columnno": 44,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023978",
                "name": "qs",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "qs",
        "longname": "<anonymous>~qs",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5540,
                5608
            ],
            "filename": "RequestHandler.js",
            "lineno": 130,
            "columnno": 40,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100023992",
                "name": "qs",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "qs",
        "longname": "<anonymous>~qs",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5742,
                5775
            ],
            "filename": "RequestHandler.js",
            "lineno": 134,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024007",
                "name": "finalURL",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>~actualCall",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "finalURL",
        "longname": "<anonymous>~actualCall~finalURL",
        "kind": "member",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5838,
                5865
            ],
            "filename": "RequestHandler.js",
            "lineno": 136,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024018",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>~actualCall",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~actualCall~data",
        "kind": "member",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5895,
                5939
            ],
            "filename": "RequestHandler.js",
            "lineno": 137,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024026",
                "name": "headers[\"Content-Type\"]",
                "type": "Literal",
                "funcscope": "<anonymous>~actualCall",
                "value": "application/json",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "\"Content-Type\"]",
        "longname": "<anonymous>~actualCall~headers.\"Content-Type\"]",
        "kind": "member",
        "memberof": "<anonymous>~actualCall~headers",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6148,
                6395
            ],
            "filename": "RequestHandler.js",
            "lineno": 146,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024041",
                "name": "req",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "req",
        "longname": "<anonymous>~actualCall~req",
        "kind": "constant",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6190,
                6204
            ],
            "filename": "RequestHandler.js",
            "lineno": 147,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024048",
                "name": "method",
                "type": "Identifier",
                "value": "method"
            }
        },
        "undocumented": true,
        "name": "method",
        "longname": "method",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6226,
                6248
            ],
            "filename": "RequestHandler.js",
            "lineno": 148,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024050",
                "name": "host",
                "type": "Literal",
                "value": "discordapp.com"
            }
        },
        "undocumented": true,
        "name": "host",
        "longname": "host",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6270,
                6299
            ],
            "filename": "RequestHandler.js",
            "lineno": 149,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024052",
                "name": "path",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "path",
        "longname": "path",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6321,
                6337
            ],
            "filename": "RequestHandler.js",
            "lineno": 150,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024058",
                "name": "headers",
                "type": "Identifier",
                "value": "headers"
            }
        },
        "undocumented": true,
        "name": "headers",
        "longname": "headers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6359,
                6376
            ],
            "filename": "RequestHandler.js",
            "lineno": 151,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024060",
                "name": "agent",
                "type": "MemberExpression",
                "value": "this.agent"
            }
        },
        "undocumented": true,
        "name": "agent",
        "longname": "agent",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6418,
                6426
            ],
            "filename": "RequestHandler.js",
            "lineno": 154,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024065",
                "name": "reqError"
            }
        },
        "undocumented": true,
        "name": "reqError",
        "longname": "<anonymous>~actualCall~reqError",
        "kind": "member",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6517,
                6598
            ],
            "filename": "RequestHandler.js",
            "lineno": 158,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024081",
                "name": "reqError",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reqError",
        "longname": "<anonymous>~reqError",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6620,
                6638
            ],
            "filename": "RequestHandler.js",
            "lineno": 159,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024094",
                "name": "reqError.req",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "req",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "req",
        "longname": "<anonymous>~reqError.req",
        "kind": "member",
        "memberof": "<anonymous>~reqError",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6742,
                6756
            ],
            "filename": "RequestHandler.js",
            "lineno": 162,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024109",
                "name": "reqError",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "err",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reqError",
        "longname": "<anonymous>~reqError",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6832,
                6852
            ],
            "filename": "RequestHandler.js",
            "lineno": 166,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024118",
                "name": "latency",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "latency",
        "longname": "<anonymous>~actualCall~latency",
        "kind": "member",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n                         * Fired when the Client's RuquestHandler receives a response\n                         * @event Client#rawREST\n                         * @arg {Object} [request] The data for the request.\n                         * @arg {String} request.method Uppercase HTTP method\n                         * @arg {String} request.url URL of the endpoint\n                         * @arg {Boolean} request.auth True if the request required an authorization token\n                         * @arg {Object} [request.body] The request payload\n                         * @arg {Object} [request.file] The file object sent in the request\n                         * @arg {Buffer} request.file.file A buffer containing file data\n                         * @arg {String} request.file.name The name of the file\n                         * @arg {String} request.route The calculated ratelimiting route for the request\n                         * @arg {Boolean} request.short Whether or not the request was prioritized in its ratelimiting queue\n                         * @arg {IncomingMessage} request.resp The HTTP response to the request\n                         */",
        "meta": {
            "filename": "RequestHandler.js",
            "lineno": 170,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {}
        },
        "description": "Fired when the Client's RuquestHandler receives a response",
        "kind": "event",
        "name": "rawREST",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "The data for the request.",
                "name": "request"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Uppercase HTTP method",
                "name": "request.method"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "URL of the endpoint",
                "name": "request.url"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "True if the request required an authorization token",
                "name": "request.auth"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "The request payload",
                "name": "request.body"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "The file object sent in the request",
                "name": "request.file"
            },
            {
                "type": {
                    "names": [
                        "Buffer"
                    ]
                },
                "description": "A buffer containing file data",
                "name": "request.file.file"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the file",
                "name": "request.file.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The calculated ratelimiting route for the request",
                "name": "request.route"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether or not the request was prioritized in its ratelimiting queue",
                "name": "request.short"
            },
            {
                "type": {
                    "names": [
                        "IncomingMessage"
                    ]
                },
                "description": "The HTTP response to the request",
                "name": "request.resp"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:rawREST",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8214,
                8220
            ],
            "filename": "RequestHandler.js",
            "lineno": 185,
            "columnno": 54,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024153",
                "name": "method",
                "type": "Identifier",
                "value": "method"
            }
        },
        "undocumented": true,
        "name": "method",
        "longname": "method",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8222,
                8225
            ],
            "filename": "RequestHandler.js",
            "lineno": 185,
            "columnno": 62,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024155",
                "name": "url",
                "type": "Identifier",
                "value": "url"
            }
        },
        "undocumented": true,
        "name": "url",
        "longname": "url",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8227,
                8231
            ],
            "filename": "RequestHandler.js",
            "lineno": 185,
            "columnno": 67,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024157",
                "name": "auth",
                "type": "Identifier",
                "value": "auth"
            }
        },
        "undocumented": true,
        "name": "auth",
        "longname": "auth",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8233,
                8237
            ],
            "filename": "RequestHandler.js",
            "lineno": 185,
            "columnno": 73,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024159",
                "name": "body",
                "type": "Identifier",
                "value": "body"
            }
        },
        "undocumented": true,
        "name": "body",
        "longname": "body",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8239,
                8243
            ],
            "filename": "RequestHandler.js",
            "lineno": 185,
            "columnno": 79,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024161",
                "name": "file",
                "type": "Identifier",
                "value": "file"
            }
        },
        "undocumented": true,
        "name": "file",
        "longname": "file",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8245,
                8250
            ],
            "filename": "RequestHandler.js",
            "lineno": 185,
            "columnno": 85,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024163",
                "name": "route",
                "type": "Identifier",
                "value": "route"
            }
        },
        "undocumented": true,
        "name": "route",
        "longname": "route",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8252,
                8257
            ],
            "filename": "RequestHandler.js",
            "lineno": 185,
            "columnno": 92,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024165",
                "name": "short",
                "type": "Identifier",
                "value": "short"
            }
        },
        "undocumented": true,
        "name": "short",
        "longname": "short",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8259,
                8263
            ],
            "filename": "RequestHandler.js",
            "lineno": 185,
            "columnno": 99,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024167",
                "name": "resp",
                "type": "Identifier",
                "value": "resp"
            }
        },
        "undocumented": true,
        "name": "resp",
        "longname": "resp",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8309,
                8339
            ],
            "filename": "RequestHandler.js",
            "lineno": 187,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024170",
                "name": "latency",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "latency",
        "longname": "<anonymous>~latency",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8416,
                8523
            ],
            "filename": "RequestHandler.js",
            "lineno": 189,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024189",
                "name": "this.latencyRef.latency",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "latency",
        "longname": "<anonymous>#latencyRef.latency",
        "kind": "member",
        "memberof": "<anonymous>#latencyRef",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8552,
                8596
            ],
            "filename": "RequestHandler.js",
            "lineno": 191,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024220",
                "name": "headerNow",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "headerNow",
        "longname": "<anonymous>~headerNow",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8710,
                8791
            ],
            "filename": "RequestHandler.js",
            "lineno": 193,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024246",
                "name": "timeOffset",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "timeOffset",
        "longname": "<anonymous>~timeOffset",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8742,
                8790
            ],
            "filename": "RequestHandler.js",
            "lineno": 193,
            "columnno": 62,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024252",
                "name": "this.latencyRef.lastTimeOffsetCheck",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastTimeOffsetCheck",
        "longname": "<anonymous>#latencyRef.lastTimeOffsetCheck",
        "kind": "member",
        "memberof": "<anonymous>#latencyRef",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9240,
                9364
            ],
            "filename": "RequestHandler.js",
            "lineno": 197,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024318",
                "name": "this.latencyRef.timeOffset",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timeOffset",
        "longname": "<anonymous>#latencyRef.timeOffset",
        "kind": "member",
        "memberof": "<anonymous>#latencyRef",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9562,
                9643
            ],
            "filename": "RequestHandler.js",
            "lineno": 203,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024370",
                "name": "reqError",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reqError",
        "longname": "<anonymous>~reqError",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9669,
                9687
            ],
            "filename": "RequestHandler.js",
            "lineno": 204,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024383",
                "name": "reqError.req",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "req",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "req",
        "longname": "<anonymous>~reqError.req",
        "kind": "member",
        "memberof": "<anonymous>~reqError",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9780,
                9793
            ],
            "filename": "RequestHandler.js",
            "lineno": 208,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024393",
                "name": "response",
                "type": "Literal",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "response",
        "longname": "<anonymous>~response",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9820,
                9838
            ],
            "filename": "RequestHandler.js",
            "lineno": 210,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024397",
                "name": "_respStream",
                "type": "Identifier",
                "value": "resp"
            }
        },
        "undocumented": true,
        "name": "_respStream",
        "longname": "<anonymous>~_respStream",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10007,
                10051
            ],
            "filename": "RequestHandler.js",
            "lineno": 213,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024419",
                "name": "_respStream",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_respStream",
        "longname": "<anonymous>~_respStream",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10171,
                10216
            ],
            "filename": "RequestHandler.js",
            "lineno": 215,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024441",
                "name": "_respStream",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_respStream",
        "longname": "<anonymous>~_respStream",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10345,
                10360
            ],
            "filename": "RequestHandler.js",
            "lineno": 220,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024465",
                "name": "response",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "str",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "response",
        "longname": "<anonymous>~response",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10432,
                10446
            ],
            "filename": "RequestHandler.js",
            "lineno": 222,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024474",
                "name": "reqError",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "err",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reqError",
        "longname": "<anonymous>~reqError",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10558,
                10574
            ],
            "filename": "RequestHandler.js",
            "lineno": 225,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024487",
                "name": "now",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "now",
        "longname": "<anonymous>~now",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10669,
                10734
            ],
            "filename": "RequestHandler.js",
            "lineno": 228,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024501",
                "name": "this.ratelimits[undefined].limit",
                "type": "UnaryExpression",
                "value": "+resp.headers[\"x-ratelimit-limit\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "<anonymous>#ratelimits[undefined].limit",
        "kind": "member",
        "memberof": "<anonymous>#ratelimits[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11807,
                11943
            ],
            "filename": "RequestHandler.js",
            "lineno": 241,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024639",
                "name": "this.ratelimits[undefined].remaining",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "remaining",
        "longname": "<anonymous>#ratelimits[undefined].remaining",
        "kind": "member",
        "memberof": "<anonymous>#ratelimits[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11974,
                12024
            ],
            "filename": "RequestHandler.js",
            "lineno": 243,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024665",
                "name": "retryAfter",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "retryAfter",
        "longname": "<anonymous>~retryAfter",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12386,
                12404
            ],
            "filename": "RequestHandler.js",
            "lineno": 247,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024698",
                "name": "retryAfter",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 1000,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "retryAfter",
        "longname": "<anonymous>~retryAfter",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12853,
                12876
            ],
            "filename": "RequestHandler.js",
            "lineno": 254,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024743",
                "name": "this.globalBlock",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "globalBlock",
        "longname": "<anonymous>#globalBlock",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13036,
                13090
            ],
            "filename": "RequestHandler.js",
            "lineno": 257,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024761",
                "name": "this.ratelimits[undefined].reset",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reset",
        "longname": "<anonymous>#ratelimits[undefined].reset",
        "kind": "member",
        "memberof": "<anonymous>#ratelimits[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13366,
                13406
            ],
            "filename": "RequestHandler.js",
            "lineno": 261,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024803",
                "name": "this.ratelimits[undefined].reset",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reset",
        "longname": "<anonymous>#ratelimits[undefined].reset",
        "kind": "member",
        "memberof": "<anonymous>#ratelimits[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13477,
                13593
            ],
            "filename": "RequestHandler.js",
            "lineno": 263,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024816",
                "name": "this.ratelimits[undefined].reset",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reset",
        "longname": "<anonymous>#ratelimits[undefined].reset",
        "kind": "member",
        "memberof": "<anonymous>#ratelimits[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13686,
                13720
            ],
            "filename": "RequestHandler.js",
            "lineno": 266,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100024845",
                "name": "this.ratelimits[undefined].reset",
                "type": "Identifier",
                "value": "now",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reset",
        "longname": "<anonymous>#ratelimits[undefined].reset",
        "kind": "member",
        "memberof": "<anonymous>#ratelimits[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16124,
                16155
            ],
            "filename": "RequestHandler.js",
            "lineno": 299,
            "columnno": 40,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025159",
                "name": "response",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "response",
        "longname": "<anonymous>~response",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16445,
                16450
            ],
            "filename": "RequestHandler.js",
            "lineno": 307,
            "columnno": 33,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025175",
                "name": "stack",
                "type": "Identifier",
                "value": "stack"
            }
        },
        "undocumented": true,
        "name": "stack",
        "longname": "stack",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16562,
                16588
            ],
            "filename": "RequestHandler.js",
            "lineno": 309,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025186",
                "name": "stack",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "stack",
        "longname": "<anonymous>~stack",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16652,
                16655
            ],
            "filename": "RequestHandler.js",
            "lineno": 311,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025194",
                "name": "err"
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16737,
                16791
            ],
            "filename": "RequestHandler.js",
            "lineno": 313,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025202",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16862,
                16916
            ],
            "filename": "RequestHandler.js",
            "lineno": 315,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025212",
                "name": "err",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17262,
                17293
            ],
            "filename": "RequestHandler.js",
            "lineno": 324,
            "columnno": 36,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025244",
                "name": "response",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "response",
        "longname": "<anonymous>~response",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17766,
                17855
            ],
            "filename": "RequestHandler.js",
            "lineno": 339,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025278",
                "name": "reqError",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reqError",
        "longname": "<anonymous>~reqError",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17983,
                17988
            ],
            "filename": "RequestHandler.js",
            "lineno": 344,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025306",
                "name": "chunk"
            }
        },
        "undocumented": true,
        "name": "chunk",
        "longname": "<anonymous>~actualCall~chunk",
        "kind": "constant",
        "memberof": "<anonymous>~actualCall",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18351,
                18416
            ],
            "filename": "RequestHandler.js",
            "lineno": 356,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025353",
                "name": "this.ratelimits[undefined]",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ratelimits[undefined]",
        "longname": "RequestHandler#ratelimits[undefined]",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18616,
                18681
            ],
            "filename": "RequestHandler.js",
            "lineno": 362,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025386",
                "name": "this.ratelimits[undefined]",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ratelimits[undefined]",
        "longname": "RequestHandler#ratelimits[undefined]",
        "kind": "member",
        "memberof": "RequestHandler",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18803,
                18856
            ],
            "filename": "RequestHandler.js",
            "lineno": 369,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025409",
                "name": "RequestHandler#toString",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "RequestHandler#toString",
        "kind": "function",
        "memberof": "RequestHandler",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18862,
                19175
            ],
            "filename": "RequestHandler.js",
            "lineno": 373,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025415",
                "name": "RequestHandler#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "RequestHandler#toJSON",
        "kind": "function",
        "memberof": "RequestHandler",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19179,
                19210
            ],
            "filename": "RequestHandler.js",
            "lineno": 388,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {
                "id": "astnode100025444",
                "name": "module.exports",
                "type": "Identifier",
                "value": "RequestHandler",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                43
            ],
            "filename": "Base.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025454",
                "name": "util",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "util",
        "longname": "util",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                46,
                1476
            ],
            "filename": "Base.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025459",
                "name": "Base",
                "type": "ClassDeclaration",
                "paramnames": [
                    "id"
                ]
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                63,
                139
            ],
            "filename": "Base.js",
            "lineno": 6,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025462",
                "name": "Base",
                "type": "MethodDefinition",
                "paramnames": [
                    "id"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                110,
                122
            ],
            "filename": "Base.js",
            "lineno": 8,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025471",
                "name": "this.id",
                "type": "Identifier",
                "value": "id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "Base#id",
        "kind": "member",
        "memberof": "Base",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                145,
                230
            ],
            "filename": "Base.js",
            "lineno": 12,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025476",
                "name": "Base#createdAt",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "createdAt",
        "longname": "Base#createdAt",
        "kind": "member",
        "memberof": "Base",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                236,
                310
            ],
            "filename": "Base.js",
            "lineno": 16,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025492",
                "name": "Base#toString",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "Base#toString",
        "kind": "function",
        "memberof": "Base",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                316,
                1049
            ],
            "filename": "Base.js",
            "lineno": 20,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025509",
                "name": "Base#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Base#toJSON",
        "kind": "function",
        "memberof": "Base",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                351,
                360
            ],
            "filename": "Base.js",
            "lineno": 21,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025517",
                "name": "json",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "json",
        "longname": "<anonymous>~json",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                396,
                413
            ],
            "filename": "Base.js",
            "lineno": 23,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025526",
                "name": "json.id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~json.id",
        "kind": "member",
        "memberof": "<anonymous>~json",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                443,
                447
            ],
            "filename": "Base.js",
            "lineno": 25,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025535",
                "name": "prop"
            }
        },
        "undocumented": true,
        "name": "prop",
        "longname": "<anonymous>~prop",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                478,
                496
            ],
            "filename": "Base.js",
            "lineno": 26,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025540",
                "name": "value",
                "type": "MemberExpression",
                "value": "this[undefined]"
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "<anonymous>~value",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                516,
                535
            ],
            "filename": "Base.js",
            "lineno": 27,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025546",
                "name": "type",
                "type": "UnaryExpression",
                "value": "typeofvalue"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "<anonymous>~type",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                701,
                719
            ],
            "filename": "Base.js",
            "lineno": 31,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025570",
                "name": "json[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~json.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~json",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                789,
                816
            ],
            "filename": "Base.js",
            "lineno": 33,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025583",
                "name": "json[undefined]",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~json.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~json",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                886,
                918
            ],
            "filename": "Base.js",
            "lineno": 35,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025599",
                "name": "json[undefined]",
                "type": "ArrayExpression",
                "funcscope": "<anonymous>",
                "value": "[\"\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~json.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~json",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                979,
                997
            ],
            "filename": "Base.js",
            "lineno": 37,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025615",
                "name": "json[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~json.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~json",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1055,
                1474
            ],
            "filename": "Base.js",
            "lineno": 43,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025622",
                "name": "Base#util.inspect.custom",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "custom",
        "longname": "Base#util.inspect.custom",
        "kind": "function",
        "memberof": "Base#util.inspect",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1185,
                1256
            ],
            "filename": "Base.js",
            "lineno": 45,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025631",
                "name": "copy",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "copy",
        "longname": "<anonymous>~copy",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1197,
                1230
            ],
            "filename": "Base.js",
            "lineno": 45,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025636",
                "name": "\"this.constructor.name\"",
                "type": "ClassExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "\"this.constructor.name\"",
        "longname": "\"this.constructor.name\"",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1276,
                1279
            ],
            "filename": "Base.js",
            "lineno": 46,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025646",
                "name": "key"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1401,
                1422
            ],
            "filename": "Base.js",
            "lineno": 48,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025671",
                "name": "copy[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~copy.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~copy",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1478,
                1499
            ],
            "filename": "Base.js",
            "lineno": 55,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025681",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Base",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "Call.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025691",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53,
                95
            ],
            "filename": "Call.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025697",
                "name": "Collection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Collection",
        "longname": "Collection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103,
                139
            ],
            "filename": "Call.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025703",
                "name": "VoiceState",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "VoiceState",
        "longname": "VoiceState",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a call\n* @prop {String} id The ID of the call\n* @prop {Number} createdAt Timestamp of the call's creation\n* @prop {GroupChannel} channel The call channel\n* @prop {Collection<VoiceState>} voiceStates The voice states of the call participants\n* @prop {String[]} participants The IDs of the call participants\n* @prop {Number?} endedTimestamp The timestamp of the call end\n* @prop {String[]?} ringing The IDs of people that still have not responded to the call request\n* @prop {String?} region The region of the call server\n* @prop {Boolean} unavailable Whether the call is unavailable or not\n*/",
        "meta": {
            "range": [
                751,
                2486
            ],
            "filename": "Call.js",
            "lineno": 19,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025708",
                "name": "Call",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "channel"
                ]
            }
        },
        "classdesc": "Represents a call",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the call",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of the call's creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "GroupChannel"
                    ]
                },
                "description": "The call channel",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "Collection.<VoiceState>"
                    ]
                },
                "description": "The voice states of the call participants",
                "name": "voiceStates"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "The IDs of the call participants",
                "name": "participants"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The timestamp of the call end",
                "name": "endedTimestamp"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "nullable": true,
                "description": "The IDs of people that still have not responded to the call request",
                "name": "ringing"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The region of the call server",
                "name": "region"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the call is unavailable or not",
                "name": "unavailable"
            }
        ],
        "name": "Call",
        "longname": "Call",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                781,
                1109
            ],
            "filename": "Call.js",
            "lineno": 20,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025712",
                "name": "Call",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "channel"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Call",
        "longname": "Call",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a call\n* @prop {String} id The ID of the call\n* @prop {Number} createdAt Timestamp of the call's creation\n* @prop {GroupChannel} channel The call channel\n* @prop {Collection<VoiceState>} voiceStates The voice states of the call participants\n* @prop {String[]} participants The IDs of the call participants\n* @prop {Number?} endedTimestamp The timestamp of the call end\n* @prop {String[]?} ringing The IDs of people that still have not responded to the call request\n* @prop {String?} region The region of the call server\n* @prop {Boolean} unavailable Whether the call is unavailable or not\n*/",
        "meta": {
            "range": [
                751,
                2486
            ],
            "filename": "Call.js",
            "lineno": 19,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025708",
                "name": "Call",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "channel"
                ]
            }
        },
        "name": "Call",
        "longname": "Call",
        "kind": "class",
        "classdesc": "Represents a call",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the call",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of the call's creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "GroupChannel"
                    ]
                },
                "description": "The call channel",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "Collection.<VoiceState>"
                    ]
                },
                "description": "The voice states of the call participants",
                "name": "voiceStates"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "The IDs of the call participants",
                "name": "participants"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The timestamp of the call end",
                "name": "endedTimestamp"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "nullable": true,
                "description": "The IDs of people that still have not responded to the call request",
                "name": "ringing"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The region of the call server",
                "name": "region"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the call is unavailable or not",
                "name": "unavailable"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                842,
                864
            ],
            "filename": "Call.js",
            "lineno": 22,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025725",
                "name": "this.channel",
                "type": "Identifier",
                "value": "channel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "Call#channel",
        "kind": "member",
        "memberof": "Call",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                874,
                919
            ],
            "filename": "Call.js",
            "lineno": 23,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025731",
                "name": "this.voiceStates",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "voiceStates",
        "longname": "Call#voiceStates",
        "kind": "member",
        "memberof": "Call",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                929,
                946
            ],
            "filename": "Call.js",
            "lineno": 24,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025739",
                "name": "this.ringing",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ringing",
        "longname": "Call#ringing",
        "kind": "member",
        "memberof": "Call",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                956,
                978
            ],
            "filename": "Call.js",
            "lineno": 25,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025745",
                "name": "this.participants",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "participants",
        "longname": "Call#participants",
        "kind": "member",
        "memberof": "Call",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                988,
                1006
            ],
            "filename": "Call.js",
            "lineno": 26,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025751",
                "name": "this.region",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "region",
        "longname": "Call#region",
        "kind": "member",
        "memberof": "Call",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1016,
                1042
            ],
            "filename": "Call.js",
            "lineno": 27,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025757",
                "name": "this.endedTimestamp",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "endedTimestamp",
        "longname": "Call#endedTimestamp",
        "kind": "member",
        "memberof": "Call",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1052,
                1075
            ],
            "filename": "Call.js",
            "lineno": 28,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025763",
                "name": "this.unavailable",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unavailable",
        "longname": "Call#unavailable",
        "kind": "member",
        "memberof": "Call",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1115,
                2232
            ],
            "filename": "Call.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025774",
                "name": "Call#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "Call#update",
        "kind": "function",
        "memberof": "Call",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1188,
                1225
            ],
            "filename": "Call.js",
            "lineno": 34,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025787",
                "name": "this.participants",
                "type": "MemberExpression",
                "value": "data.participants",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "participants",
        "longname": "Call#participants",
        "kind": "member",
        "memberof": "Call",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1350,
                1377
            ],
            "filename": "Call.js",
            "lineno": 37,
            "columnno": 72,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025821",
                "name": "this.ringing",
                "type": "MemberExpression",
                "value": "data.ringing",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ringing",
        "longname": "Call#ringing",
        "kind": "member",
        "memberof": "Call",
        "scope": "instance"
    },
    {
        "comment": "/**\n                * Fired when the bot user is rung in a call\n                * @event Client#callRing\n                * @prop {Call} call The call\n                */",
        "meta": {
            "filename": "Call.js",
            "lineno": 38,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {}
        },
        "description": "Fired when the bot user is rung in a call",
        "kind": "event",
        "name": "callRing",
        "properties": [
            {
                "type": {
                    "names": [
                        "Call"
                    ]
                },
                "description": "The call",
                "name": "call"
            }
        ],
        "memberof": "Client",
        "longname": "Client#event:callRing",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1743,
                1768
            ],
            "filename": "Call.js",
            "lineno": 47,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025858",
                "name": "this.region",
                "type": "MemberExpression",
                "value": "data.region",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "region",
        "longname": "Call#region",
        "kind": "member",
        "memberof": "Call",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1841,
                1895
            ],
            "filename": "Call.js",
            "lineno": 50,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025873",
                "name": "this.endedTimestamp",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "endedTimestamp",
        "longname": "Call#endedTimestamp",
        "kind": "member",
        "memberof": "Call",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1964,
                1999
            ],
            "filename": "Call.js",
            "lineno": 53,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025892",
                "name": "this.unavailable",
                "type": "MemberExpression",
                "value": "data.unavailable",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unavailable",
        "longname": "Call#unavailable",
        "kind": "member",
        "memberof": "Call",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2115,
                2149
            ],
            "filename": "Call.js",
            "lineno": 57,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025915",
                "name": "voiceState.id",
                "type": "MemberExpression",
                "value": "voiceState.user_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "voiceState.id",
        "kind": "member",
        "memberof": "voiceState",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2238,
                2484
            ],
            "filename": "Call.js",
            "lineno": 63,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025930",
                "name": "Call#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Call#toJSON",
        "kind": "function",
        "memberof": "Call",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2488,
                2509
            ],
            "filename": "Call.js",
            "lineno": 76,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025952",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Call",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                63
            ],
            "filename": "CategoryChannel.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025962",
                "name": "Collection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Collection",
        "longname": "Collection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                111
            ],
            "filename": "CategoryChannel.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025968",
                "name": "GuildChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GuildChannel",
        "longname": "GuildChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild category channel\n* @extends GuildChannel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Guild} guild The guild that owns the channel\n* @prop {String?} parentID The ID of the category this channel belongs to\n* @prop {String} name The name of the channel\n* @prop {Number} position The position of the channel\n* @prop {Boolean} nsfw Whether the channel is an NSFW channel or not\n* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel\n* @prop {Collection<GuildChannel>} channels A collection of guild channels that are part of this category\n*/",
        "meta": {
            "range": [
                848,
                1250
            ],
            "filename": "CategoryChannel.js",
            "lineno": 20,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025973",
                "name": "CategoryChannel",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "classdesc": "Represents a guild category channel",
        "augments": [
            "GuildChannel"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild that owns the channel",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the category this channel belongs to",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the channel",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the channel is an NSFW channel or not",
                "name": "nsfw"
            },
            {
                "type": {
                    "names": [
                        "Collection.<PermissionOverwrite>"
                    ]
                },
                "description": "Collection of PermissionOverwrites in this channel",
                "name": "permissionOverwrites"
            },
            {
                "type": {
                    "names": [
                        "Collection.<GuildChannel>"
                    ]
                },
                "description": "A collection of guild channels that are part of this category",
                "name": "channels"
            }
        ],
        "name": "CategoryChannel",
        "longname": "CategoryChannel",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                897,
                1248
            ],
            "filename": "CategoryChannel.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025977",
                "name": "CategoryChannel#channels",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "channels",
        "longname": "CategoryChannel#channels",
        "kind": "member",
        "memberof": "CategoryChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                928,
                967
            ],
            "filename": "CategoryChannel.js",
            "lineno": 22,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100025982",
                "name": "channels",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channels",
        "longname": "<anonymous>~channels",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1039,
                1046
            ],
            "filename": "CategoryChannel.js",
            "lineno": 24,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026000",
                "name": "channel"
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1252,
                1284
            ],
            "filename": "CategoryChannel.js",
            "lineno": 34,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026029",
                "name": "module.exports",
                "type": "Identifier",
                "value": "CategoryChannel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "Channel.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026039",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                54,
                66
            ],
            "filename": "Channel.js",
            "lineno": 4,
            "columnno": 7,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026047",
                "name": "ChannelTypes",
                "type": "Identifier",
                "value": "ChannelTypes"
            }
        },
        "undocumented": true,
        "name": "ChannelTypes",
        "longname": "ChannelTypes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n* Represents a channel. You also probably want to look at CategoryChannel, GroupChannel, NewsChannel, PrivateChannel, TextChannel, and VoiceChannel.\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Client} client The client that initialized the channel\n* @prop {Number} createdAt Timestamp of the channel's creation\n*/",
        "meta": {
            "range": [
                527,
                2311
            ],
            "filename": "Channel.js",
            "lineno": 14,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026052",
                "name": "Channel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "Represents a channel. You also probably want to look at CategoryChannel, GroupChannel, NewsChannel, PrivateChannel, TextChannel, and VoiceChannel.",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Client"
                    ]
                },
                "description": "The client that initialized the channel",
                "name": "client"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of the channel's creation",
                "name": "createdAt"
            }
        ],
        "name": "Channel",
        "longname": "Channel",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                560,
                678
            ],
            "filename": "Channel.js",
            "lineno": 15,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026056",
                "name": "Channel",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Channel",
        "longname": "Channel",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a channel. You also probably want to look at CategoryChannel, GroupChannel, NewsChannel, PrivateChannel, TextChannel, and VoiceChannel.\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Client} client The client that initialized the channel\n* @prop {Number} createdAt Timestamp of the channel's creation\n*/",
        "meta": {
            "range": [
                527,
                2311
            ],
            "filename": "Channel.js",
            "lineno": 14,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026052",
                "name": "Channel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "Channel",
        "longname": "Channel",
        "kind": "class",
        "classdesc": "Represents a channel. You also probably want to look at CategoryChannel, GroupChannel, NewsChannel, PrivateChannel, TextChannel, and VoiceChannel.",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Client"
                    ]
                },
                "description": "The client that initialized the channel",
                "name": "client"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of the channel's creation",
                "name": "createdAt"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                620,
                641
            ],
            "filename": "Channel.js",
            "lineno": 17,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026069",
                "name": "this.type",
                "type": "MemberExpression",
                "value": "data.type",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "Channel#type",
        "kind": "member",
        "memberof": "Channel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                651,
                671
            ],
            "filename": "Channel.js",
            "lineno": 18,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026077",
                "name": "this.client",
                "type": "Identifier",
                "value": "client",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "client",
        "longname": "Channel#client",
        "kind": "member",
        "memberof": "Channel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                684,
                737
            ],
            "filename": "Channel.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026082",
                "name": "Channel#mention",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "mention",
        "longname": "Channel#mention",
        "kind": "member",
        "memberof": "Channel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                743,
                2194
            ],
            "filename": "Channel.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026093",
                "name": "Channel.from",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "from",
        "longname": "Channel.from",
        "kind": "function",
        "memberof": "Channel",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2200,
                2309
            ],
            "filename": "Channel.js",
            "lineno": 61,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026260",
                "name": "Channel#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Channel#toJSON",
        "kind": "function",
        "memberof": "Channel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2313,
                2337
            ],
            "filename": "Channel.js",
            "lineno": 69,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026277",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Channel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2365,
                2411
            ],
            "filename": "Channel.js",
            "lineno": 72,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026283",
                "name": "CategoryChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "CategoryChannel",
        "longname": "CategoryChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2419,
                2459
            ],
            "filename": "Channel.js",
            "lineno": 73,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026289",
                "name": "GuildChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GuildChannel",
        "longname": "GuildChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2467,
                2507
            ],
            "filename": "Channel.js",
            "lineno": 74,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026295",
                "name": "GroupChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GroupChannel",
        "longname": "GroupChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2515,
                2553
            ],
            "filename": "Channel.js",
            "lineno": 75,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026301",
                "name": "NewsChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "NewsChannel",
        "longname": "NewsChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2561,
                2605
            ],
            "filename": "Channel.js",
            "lineno": 76,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026307",
                "name": "PrivateChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "PrivateChannel",
        "longname": "PrivateChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2613,
                2653
            ],
            "filename": "Channel.js",
            "lineno": 77,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026313",
                "name": "StoreChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "StoreChannel",
        "longname": "StoreChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2661,
                2699
            ],
            "filename": "Channel.js",
            "lineno": 78,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026319",
                "name": "TextChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "TextChannel",
        "longname": "TextChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2707,
                2747
            ],
            "filename": "Channel.js",
            "lineno": 79,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026325",
                "name": "VoiceChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "VoiceChannel",
        "longname": "VoiceChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "ExtendedUser.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026335",
                "name": "User",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "User",
        "longname": "User",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents an extended user\n* @extends User\n* @prop {String} email The email of the user\n* @prop {Boolean} verified Whether the account email has been verified\n* @prop {Boolean} mfaEnabled Whether the user has enabled two-factor authentication\n*/",
        "meta": {
            "range": [
                301,
                1049
            ],
            "filename": "ExtendedUser.js",
            "lineno": 12,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026340",
                "name": "ExtendedUser",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "Represents an extended user",
        "augments": [
            "User"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The email of the user",
                "name": "email"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the account email has been verified",
                "name": "verified"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the user has enabled two-factor authentication",
                "name": "mfaEnabled"
            }
        ],
        "name": "ExtendedUser",
        "longname": "ExtendedUser",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                339,
                428
            ],
            "filename": "ExtendedUser.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026344",
                "name": "ExtendedUser",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "ExtendedUser",
        "longname": "ExtendedUser",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents an extended user\n* @extends User\n* @prop {String} email The email of the user\n* @prop {Boolean} verified Whether the account email has been verified\n* @prop {Boolean} mfaEnabled Whether the user has enabled two-factor authentication\n*/",
        "meta": {
            "range": [
                301,
                1049
            ],
            "filename": "ExtendedUser.js",
            "lineno": 12,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026340",
                "name": "ExtendedUser",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "ExtendedUser",
        "longname": "ExtendedUser",
        "kind": "class",
        "classdesc": "Represents an extended user",
        "augments": [
            "User"
        ],
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The email of the user",
                "name": "email"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the account email has been verified",
                "name": "verified"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the user has enabled two-factor authentication",
                "name": "mfaEnabled"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                434,
                858
            ],
            "filename": "ExtendedUser.js",
            "lineno": 18,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026361",
                "name": "ExtendedUser#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "ExtendedUser#update",
        "kind": "function",
        "memberof": "ExtendedUser",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                528,
                551
            ],
            "filename": "ExtendedUser.js",
            "lineno": 21,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026380",
                "name": "this.email",
                "type": "MemberExpression",
                "value": "data.email",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "email",
        "longname": "ExtendedUser#email",
        "kind": "member",
        "memberof": "ExtendedUser",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                617,
                646
            ],
            "filename": "ExtendedUser.js",
            "lineno": 24,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026395",
                "name": "this.verified",
                "type": "MemberExpression",
                "value": "data.verified",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "verified",
        "longname": "ExtendedUser#verified",
        "kind": "member",
        "memberof": "ExtendedUser",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                715,
                749
            ],
            "filename": "ExtendedUser.js",
            "lineno": 27,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026410",
                "name": "this.mfaEnabled",
                "type": "MemberExpression",
                "value": "data.mfa_enabled",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mfaEnabled",
        "longname": "ExtendedUser#mfaEnabled",
        "kind": "member",
        "memberof": "ExtendedUser",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                814,
                841
            ],
            "filename": "ExtendedUser.js",
            "lineno": 30,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026425",
                "name": "this.premium",
                "type": "MemberExpression",
                "value": "data.premium",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "premium",
        "longname": "ExtendedUser#premium",
        "kind": "member",
        "memberof": "ExtendedUser",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                864,
                1047
            ],
            "filename": "ExtendedUser.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026432",
                "name": "ExtendedUser#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "ExtendedUser#toJSON",
        "kind": "function",
        "memberof": "ExtendedUser",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1051,
                1080
            ],
            "filename": "ExtendedUser.js",
            "lineno": 45,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026452",
                "name": "module.exports",
                "type": "Identifier",
                "value": "ExtendedUser",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                63
            ],
            "filename": "GroupChannel.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026462",
                "name": "Collection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Collection",
        "longname": "Collection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                111
            ],
            "filename": "GroupChannel.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026468",
                "name": "Endpoints",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Endpoints",
        "longname": "Endpoints",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                163
            ],
            "filename": "GroupChannel.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026474",
                "name": "PrivateChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "PrivateChannel",
        "longname": "PrivateChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                171,
                195
            ],
            "filename": "GroupChannel.js",
            "lineno": 6,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026480",
                "name": "User",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "User",
        "longname": "User",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* [USER ACCOUNT] Represents a group channel. See PrivateChannel docs for additional properties.\n* @extends PrivateChannel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Call?} call The current group call, if any\n* @prop {Call?} lastCall The previous group call, if any\n* @prop {Collection<User>} recipients The recipients in this private channel\n* @prop {String} name The name of the group channel\n* @prop {String?} icon The hash of the group channel icon\n* @prop {String?} iconURL The URL of the group channel icon\n* @prop {String} ownerID The ID of the user that is the group owner\n*/",
        "meta": {
            "range": [
                853,
                3344
            ],
            "filename": "GroupChannel.js",
            "lineno": 21,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026485",
                "name": "GroupChannel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "[USER ACCOUNT] Represents a group channel. See PrivateChannel docs for additional properties.",
        "augments": [
            "PrivateChannel"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Call"
                    ]
                },
                "nullable": true,
                "description": "The current group call, if any",
                "name": "call"
            },
            {
                "type": {
                    "names": [
                        "Call"
                    ]
                },
                "nullable": true,
                "description": "The previous group call, if any",
                "name": "lastCall"
            },
            {
                "type": {
                    "names": [
                        "Collection.<User>"
                    ]
                },
                "description": "The recipients in this private channel",
                "name": "recipients"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the group channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the group channel icon",
                "name": "icon"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The URL of the group channel icon",
                "name": "iconURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that is the group owner",
                "name": "ownerID"
            }
        ],
        "name": "GroupChannel",
        "longname": "GroupChannel",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                917,
                1241
            ],
            "filename": "GroupChannel.js",
            "lineno": 22,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026489",
                "name": "GroupChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "GroupChannel",
        "longname": "GroupChannel",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* [USER ACCOUNT] Represents a group channel. See PrivateChannel docs for additional properties.\n* @extends PrivateChannel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Call?} call The current group call, if any\n* @prop {Call?} lastCall The previous group call, if any\n* @prop {Collection<User>} recipients The recipients in this private channel\n* @prop {String} name The name of the group channel\n* @prop {String?} icon The hash of the group channel icon\n* @prop {String?} iconURL The URL of the group channel icon\n* @prop {String} ownerID The ID of the user that is the group owner\n*/",
        "meta": {
            "range": [
                853,
                3344
            ],
            "filename": "GroupChannel.js",
            "lineno": 21,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026485",
                "name": "GroupChannel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "GroupChannel",
        "longname": "GroupChannel",
        "kind": "class",
        "classdesc": "[USER ACCOUNT] Represents a group channel. See PrivateChannel docs for additional properties.",
        "augments": [
            "PrivateChannel"
        ],
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Call"
                    ]
                },
                "nullable": true,
                "description": "The current group call, if any",
                "name": "call"
            },
            {
                "type": {
                    "names": [
                        "Call"
                    ]
                },
                "nullable": true,
                "description": "The previous group call, if any",
                "name": "lastCall"
            },
            {
                "type": {
                    "names": [
                        "Collection.<User>"
                    ]
                },
                "description": "The recipients in this private channel",
                "name": "recipients"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the group channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the group channel icon",
                "name": "icon"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The URL of the group channel icon",
                "name": "iconURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that is the group owner",
                "name": "ownerID"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                982,
                1020
            ],
            "filename": "GroupChannel.js",
            "lineno": 24,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026501",
                "name": "this.recipients",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "recipients",
        "longname": "GroupChannel#recipients",
        "kind": "member",
        "memberof": "GroupChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1247,
                1527
            ],
            "filename": "GroupChannel.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026549",
                "name": "GroupChannel#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "GroupChannel#update",
        "kind": "function",
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1312,
                1333
            ],
            "filename": "GroupChannel.js",
            "lineno": 33,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026562",
                "name": "this.name",
                "type": "MemberExpression",
                "value": "data.name",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "GroupChannel#name",
        "kind": "member",
        "memberof": "GroupChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1399,
                1427
            ],
            "filename": "GroupChannel.js",
            "lineno": 36,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026577",
                "name": "this.ownerID",
                "type": "MemberExpression",
                "value": "data.owner_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ownerID",
        "longname": "GroupChannel#ownerID",
        "kind": "member",
        "memberof": "GroupChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1489,
                1510
            ],
            "filename": "GroupChannel.js",
            "lineno": 39,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026592",
                "name": "this.icon",
                "type": "MemberExpression",
                "value": "data.icon",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "icon",
        "longname": "GroupChannel#icon",
        "kind": "member",
        "memberof": "GroupChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.icon] The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.ownerID] The ID of the channel owner (group channels only)\n    * @returns {Promise<GroupChannel>}\n    */",
        "meta": {
            "range": [
                1998,
                2095
            ],
            "filename": "GroupChannel.js",
            "lineno": 51,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026599",
                "name": "GroupChannel#edit",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Edit the channel's properties",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the channel",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings",
                "name": "options.icon"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the channel owner (group channels only)",
                "name": "options.ownerID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<GroupChannel>"
                    ]
                }
            }
        ],
        "name": "edit",
        "longname": "GroupChannel#edit",
        "kind": "function",
        "memberof": "GroupChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Add a user to the group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                2239,
                2348
            ],
            "filename": "GroupChannel.js",
            "lineno": 60,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026620",
                "name": "GroupChannel#addRecipient",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Add a user to the group",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "addRecipient",
        "longname": "GroupChannel#addRecipient",
        "kind": "function",
        "memberof": "GroupChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Remove a user from the group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                2497,
                2612
            ],
            "filename": "GroupChannel.js",
            "lineno": 69,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026641",
                "name": "GroupChannel#removeRecipient",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Remove a user from the group",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeRecipient",
        "longname": "GroupChannel#removeRecipient",
        "kind": "function",
        "memberof": "GroupChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2618,
                2743
            ],
            "filename": "GroupChannel.js",
            "lineno": 73,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026662",
                "name": "GroupChannel#iconURL",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "iconURL",
        "longname": "GroupChannel#iconURL",
        "kind": "member",
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get the group's icon with the given format and size\n    * @arg {String} [format] The filetype of the icon (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")\n    * @arg {Number} [size] The size of the icon (any power of two between 16 and 4096)\n    */",
        "meta": {
            "range": [
                3004,
                3158
            ],
            "filename": "GroupChannel.js",
            "lineno": 82,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026688",
                "name": "GroupChannel#dynamicIconURL",
                "type": "MethodDefinition",
                "paramnames": [
                    "format",
                    "size"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the group's icon with the given format and size",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The filetype of the icon (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")",
                "name": "format"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The size of the icon (any power of two between 16 and 4096)",
                "name": "size"
            }
        ],
        "name": "dynamicIconURL",
        "longname": "GroupChannel#dynamicIconURL",
        "kind": "function",
        "memberof": "GroupChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3164,
                3342
            ],
            "filename": "GroupChannel.js",
            "lineno": 86,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026718",
                "name": "GroupChannel#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "GroupChannel#toJSON",
        "kind": "function",
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3346,
                3375
            ],
            "filename": "GroupChannel.js",
            "lineno": 97,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026738",
                "name": "module.exports",
                "type": "Identifier",
                "value": "GroupChannel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "Guild.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026748",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53,
                83
            ],
            "filename": "Guild.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026754",
                "name": "Channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Channel",
        "longname": "Channel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                91,
                131
            ],
            "filename": "Guild.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026760",
                "name": "Endpoints",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Endpoints",
        "longname": "Endpoints",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                139,
                181
            ],
            "filename": "Guild.js",
            "lineno": 6,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026766",
                "name": "Collection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Collection",
        "longname": "Collection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                189,
                229
            ],
            "filename": "Guild.js",
            "lineno": 7,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026772",
                "name": "GuildChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GuildChannel",
        "longname": "GuildChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                237,
                265
            ],
            "filename": "Guild.js",
            "lineno": 8,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026778",
                "name": "Member",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Member",
        "longname": "Member",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                273,
                297
            ],
            "filename": "Guild.js",
            "lineno": 9,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026784",
                "name": "Role",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Role",
        "longname": "Role",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                305,
                341
            ],
            "filename": "Guild.js",
            "lineno": 10,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026790",
                "name": "VoiceState",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "VoiceState",
        "longname": "VoiceState",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild\n* @prop {String} id The ID of the guild\n* @prop {Number} createdAt Timestamp of the guild's creation\n* @prop {String} name The name of the guild\n* @prop {Number} verificationLevel The guild verification level\n* @prop {String} region The region of the guild\n* @prop {String?} icon The hash of the guild icon, or null if no icon\n* @prop {String?} afkChannelID The ID of the AFK voice channel\n* @prop {Number} afkTimeout The AFK timeout in seconds\n* @prop {Number} defaultNotifications The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\"\n* @prop {Number} mfaLevel The admin 2FA level for the guild. 0 is not required, 1 is required\n* @prop {Number} joinedAt Timestamp of when the bot account joined the guild\n* @prop {String} ownerID The ID of the user that is the guild owner\n* @prop {String?} systemChannelID The ID of the default channel for system messages (built-in join messages and boost messages)\n* @prop {String?} splash The hash of the guild splash image, or null if no splash (VIP only)\n* @prop {String?} banner The hash of the guild banner image, or null if no banner (VIP only)\n* @prop {Boolean} unavailable Whether the guild is unavailable or not\n* @prop {Boolean} large Whether the guild is \"large\" by \"some Discord standard\"\n* @prop {Number} maxPresences The maximum number of people that can be online in a guild at once (returned from REST API only)\n* @prop {Collection<VoiceState>} voiceStates Collection of voice states in the guild\n* @prop {Collection<GuildChannel>} channels Collection of Channels in the guild\n* @prop {Collection<Member>} members Collection of Members in the guild\n* @prop {Number} memberCount Number of members in the guild\n* @prop {Collection<Role>} roles Collection of Roles in the guild\n* @prop {Shard} shard The Shard that owns the guild\n* @prop {String[]} features An array of guild feature strings\n* @prop {Object[]} emojis An array of guild emoji objects\n* @prop {String?} iconURL The URL of the guild's icon\n* @prop {String?} bannerURL The URL of the guild's banner image\n* @prop {String?} splashURL The URL of the guild's splash image\n* @prop {Number} explicitContentFilter The explicit content filter level for the guild. 0 is off, 1 is on for people without roles, 2 is on for all\n* @prop {Number} premiumTier Nitro boost level of the guild\n* @prop {Number?} premiumSubscriptionCount The total number of users currently boosting this guild\n* @prop {String?} vanityURL The vanity URL of the guild (VIP only)\n* @prop {String} preferredLocale Preferred \"PUBLIC\" guild language used in server discovery and notices from Discord\n* @prop {String?} description The description for the guild (VIP only)\n* @prop {Number} maxMembers The maximum amount of members for the guild\n* @prop {String?} publicUpdatesChannelID ID of the guild's updates channel if the guild has \"PUBLIC\" features\n* @prop {String?} rulesChannelID The channel where \"PUBLIC\" guilds display rules and/or guidelines\n* @prop {Number?} maxVideoChannelUsers The max number of users allowed in a video channel\n* @prop {Boolean?} widgetEnabled Whether the guild widget is enabled. REST only.\n* @prop {Number?} widgetChannelID The channel id that the widget will generate an invite to. REST only.\n* @prop {Number?} approximateMemberCount The approximate number of members in the guild (REST only)\n* @prop {Number?} approximatePresenceCount The approximate number of presences in the guild (REST only)\n*/",
        "meta": {
            "range": [
                3816,
                31673
            ],
            "filename": "Guild.js",
            "lineno": 58,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026795",
                "name": "Guild",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "Represents a guild",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of the guild's creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the guild",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The guild verification level",
                "name": "verificationLevel"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The region of the guild",
                "name": "region"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild icon, or null if no icon",
                "name": "icon"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the AFK voice channel",
                "name": "afkChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The AFK timeout in seconds",
                "name": "afkTimeout"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\"",
                "name": "defaultNotifications"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The admin 2FA level for the guild. 0 is not required, 1 is required",
                "name": "mfaLevel"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of when the bot account joined the guild",
                "name": "joinedAt"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that is the guild owner",
                "name": "ownerID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the default channel for system messages (built-in join messages and boost messages)",
                "name": "systemChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild splash image, or null if no splash (VIP only)",
                "name": "splash"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild banner image, or null if no banner (VIP only)",
                "name": "banner"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the guild is unavailable or not",
                "name": "unavailable"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the guild is \"large\" by \"some Discord standard\"",
                "name": "large"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The maximum number of people that can be online in a guild at once (returned from REST API only)",
                "name": "maxPresences"
            },
            {
                "type": {
                    "names": [
                        "Collection.<VoiceState>"
                    ]
                },
                "description": "Collection of voice states in the guild",
                "name": "voiceStates"
            },
            {
                "type": {
                    "names": [
                        "Collection.<GuildChannel>"
                    ]
                },
                "description": "Collection of Channels in the guild",
                "name": "channels"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Member>"
                    ]
                },
                "description": "Collection of Members in the guild",
                "name": "members"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Number of members in the guild",
                "name": "memberCount"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Role>"
                    ]
                },
                "description": "Collection of Roles in the guild",
                "name": "roles"
            },
            {
                "type": {
                    "names": [
                        "Shard"
                    ]
                },
                "description": "The Shard that owns the guild",
                "name": "shard"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "An array of guild feature strings",
                "name": "features"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "An array of guild emoji objects",
                "name": "emojis"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The URL of the guild's icon",
                "name": "iconURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The URL of the guild's banner image",
                "name": "bannerURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The URL of the guild's splash image",
                "name": "splashURL"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The explicit content filter level for the guild. 0 is off, 1 is on for people without roles, 2 is on for all",
                "name": "explicitContentFilter"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Nitro boost level of the guild",
                "name": "premiumTier"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The total number of users currently boosting this guild",
                "name": "premiumSubscriptionCount"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The vanity URL of the guild (VIP only)",
                "name": "vanityURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Preferred \"PUBLIC\" guild language used in server discovery and notices from Discord",
                "name": "preferredLocale"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The description for the guild (VIP only)",
                "name": "description"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The maximum amount of members for the guild",
                "name": "maxMembers"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "ID of the guild's updates channel if the guild has \"PUBLIC\" features",
                "name": "publicUpdatesChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The channel where \"PUBLIC\" guilds display rules and/or guidelines",
                "name": "rulesChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The max number of users allowed in a video channel",
                "name": "maxVideoChannelUsers"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "nullable": true,
                "description": "Whether the guild widget is enabled. REST only.",
                "name": "widgetEnabled"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The channel id that the widget will generate an invite to. REST only.",
                "name": "widgetChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The approximate number of members in the guild (REST only)",
                "name": "approximateMemberCount"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The approximate number of presences in the guild (REST only)",
                "name": "approximatePresenceCount"
            }
        ],
        "name": "Guild",
        "longname": "Guild",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3847,
                7326
            ],
            "filename": "Guild.js",
            "lineno": 59,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026799",
                "name": "Guild",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Guild",
        "longname": "Guild",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild\n* @prop {String} id The ID of the guild\n* @prop {Number} createdAt Timestamp of the guild's creation\n* @prop {String} name The name of the guild\n* @prop {Number} verificationLevel The guild verification level\n* @prop {String} region The region of the guild\n* @prop {String?} icon The hash of the guild icon, or null if no icon\n* @prop {String?} afkChannelID The ID of the AFK voice channel\n* @prop {Number} afkTimeout The AFK timeout in seconds\n* @prop {Number} defaultNotifications The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\"\n* @prop {Number} mfaLevel The admin 2FA level for the guild. 0 is not required, 1 is required\n* @prop {Number} joinedAt Timestamp of when the bot account joined the guild\n* @prop {String} ownerID The ID of the user that is the guild owner\n* @prop {String?} systemChannelID The ID of the default channel for system messages (built-in join messages and boost messages)\n* @prop {String?} splash The hash of the guild splash image, or null if no splash (VIP only)\n* @prop {String?} banner The hash of the guild banner image, or null if no banner (VIP only)\n* @prop {Boolean} unavailable Whether the guild is unavailable or not\n* @prop {Boolean} large Whether the guild is \"large\" by \"some Discord standard\"\n* @prop {Number} maxPresences The maximum number of people that can be online in a guild at once (returned from REST API only)\n* @prop {Collection<VoiceState>} voiceStates Collection of voice states in the guild\n* @prop {Collection<GuildChannel>} channels Collection of Channels in the guild\n* @prop {Collection<Member>} members Collection of Members in the guild\n* @prop {Number} memberCount Number of members in the guild\n* @prop {Collection<Role>} roles Collection of Roles in the guild\n* @prop {Shard} shard The Shard that owns the guild\n* @prop {String[]} features An array of guild feature strings\n* @prop {Object[]} emojis An array of guild emoji objects\n* @prop {String?} iconURL The URL of the guild's icon\n* @prop {String?} bannerURL The URL of the guild's banner image\n* @prop {String?} splashURL The URL of the guild's splash image\n* @prop {Number} explicitContentFilter The explicit content filter level for the guild. 0 is off, 1 is on for people without roles, 2 is on for all\n* @prop {Number} premiumTier Nitro boost level of the guild\n* @prop {Number?} premiumSubscriptionCount The total number of users currently boosting this guild\n* @prop {String?} vanityURL The vanity URL of the guild (VIP only)\n* @prop {String} preferredLocale Preferred \"PUBLIC\" guild language used in server discovery and notices from Discord\n* @prop {String?} description The description for the guild (VIP only)\n* @prop {Number} maxMembers The maximum amount of members for the guild\n* @prop {String?} publicUpdatesChannelID ID of the guild's updates channel if the guild has \"PUBLIC\" features\n* @prop {String?} rulesChannelID The channel where \"PUBLIC\" guilds display rules and/or guidelines\n* @prop {Number?} maxVideoChannelUsers The max number of users allowed in a video channel\n* @prop {Boolean?} widgetEnabled Whether the guild widget is enabled. REST only.\n* @prop {Number?} widgetChannelID The channel id that the widget will generate an invite to. REST only.\n* @prop {Number?} approximateMemberCount The approximate number of members in the guild (REST only)\n* @prop {Number?} approximatePresenceCount The approximate number of presences in the guild (REST only)\n*/",
        "meta": {
            "range": [
                3816,
                31673
            ],
            "filename": "Guild.js",
            "lineno": 58,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026795",
                "name": "Guild",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "Guild",
        "longname": "Guild",
        "kind": "class",
        "classdesc": "Represents a guild",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of the guild's creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the guild",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The guild verification level",
                "name": "verificationLevel"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The region of the guild",
                "name": "region"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild icon, or null if no icon",
                "name": "icon"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the AFK voice channel",
                "name": "afkChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The AFK timeout in seconds",
                "name": "afkTimeout"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\"",
                "name": "defaultNotifications"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The admin 2FA level for the guild. 0 is not required, 1 is required",
                "name": "mfaLevel"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of when the bot account joined the guild",
                "name": "joinedAt"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that is the guild owner",
                "name": "ownerID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the default channel for system messages (built-in join messages and boost messages)",
                "name": "systemChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild splash image, or null if no splash (VIP only)",
                "name": "splash"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild banner image, or null if no banner (VIP only)",
                "name": "banner"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the guild is unavailable or not",
                "name": "unavailable"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the guild is \"large\" by \"some Discord standard\"",
                "name": "large"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The maximum number of people that can be online in a guild at once (returned from REST API only)",
                "name": "maxPresences"
            },
            {
                "type": {
                    "names": [
                        "Collection.<VoiceState>"
                    ]
                },
                "description": "Collection of voice states in the guild",
                "name": "voiceStates"
            },
            {
                "type": {
                    "names": [
                        "Collection.<GuildChannel>"
                    ]
                },
                "description": "Collection of Channels in the guild",
                "name": "channels"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Member>"
                    ]
                },
                "description": "Collection of Members in the guild",
                "name": "members"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Number of members in the guild",
                "name": "memberCount"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Role>"
                    ]
                },
                "description": "Collection of Roles in the guild",
                "name": "roles"
            },
            {
                "type": {
                    "names": [
                        "Shard"
                    ]
                },
                "description": "The Shard that owns the guild",
                "name": "shard"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "An array of guild feature strings",
                "name": "features"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "An array of guild emoji objects",
                "name": "emojis"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The URL of the guild's icon",
                "name": "iconURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The URL of the guild's banner image",
                "name": "bannerURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The URL of the guild's splash image",
                "name": "splashURL"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The explicit content filter level for the guild. 0 is off, 1 is on for people without roles, 2 is on for all",
                "name": "explicitContentFilter"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Nitro boost level of the guild",
                "name": "premiumTier"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The total number of users currently boosting this guild",
                "name": "premiumSubscriptionCount"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The vanity URL of the guild (VIP only)",
                "name": "vanityURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Preferred \"PUBLIC\" guild language used in server discovery and notices from Discord",
                "name": "preferredLocale"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The description for the guild (VIP only)",
                "name": "description"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The maximum amount of members for the guild",
                "name": "maxMembers"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "ID of the guild's updates channel if the guild has \"PUBLIC\" features",
                "name": "publicUpdatesChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The channel where \"PUBLIC\" guilds display rules and/or guidelines",
                "name": "rulesChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The max number of users allowed in a video channel",
                "name": "maxVideoChannelUsers"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "nullable": true,
                "description": "Whether the guild widget is enabled. REST only.",
                "name": "widgetEnabled"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The channel id that the widget will generate an invite to. REST only.",
                "name": "widgetChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The approximate number of members in the guild (REST only)",
                "name": "approximateMemberCount"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The approximate number of presences in the guild (REST only)",
                "name": "approximatePresenceCount"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3907,
                3928
            ],
            "filename": "Guild.js",
            "lineno": 61,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026812",
                "name": "this._client",
                "type": "Identifier",
                "value": "client",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_client",
        "longname": "Guild#_client",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3938,
                3999
            ],
            "filename": "Guild.js",
            "lineno": 62,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026818",
                "name": "this.shard",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "shard",
        "longname": "Guild#shard",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4009,
                4046
            ],
            "filename": "Guild.js",
            "lineno": 63,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026836",
                "name": "this.unavailable",
                "type": "UnaryExpression",
                "value": "!!data.unavailable",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unavailable",
        "longname": "Guild#unavailable",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4056,
                4098
            ],
            "filename": "Guild.js",
            "lineno": 64,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026846",
                "name": "this.joinedAt",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "joinedAt",
        "longname": "Guild#joinedAt",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4108,
                4153
            ],
            "filename": "Guild.js",
            "lineno": 65,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026858",
                "name": "this.voiceStates",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "voiceStates",
        "longname": "Guild#voiceStates",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4163,
                4207
            ],
            "filename": "Guild.js",
            "lineno": 66,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026866",
                "name": "this.channels",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channels",
        "longname": "Guild#channels",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4217,
                4254
            ],
            "filename": "Guild.js",
            "lineno": 67,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026874",
                "name": "this.members",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "members",
        "longname": "Guild#members",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4264,
                4300
            ],
            "filename": "Guild.js",
            "lineno": 68,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026882",
                "name": "this.memberCount",
                "type": "MemberExpression",
                "value": "data.member_count",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "memberCount",
        "longname": "Guild#memberCount",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4310,
                4343
            ],
            "filename": "Guild.js",
            "lineno": 69,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026890",
                "name": "this.roles",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "roles",
        "longname": "Guild#roles",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4406,
                4446
            ],
            "filename": "Guild.js",
            "lineno": 72,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026905",
                "name": "this.widgetEnabled",
                "type": "MemberExpression",
                "value": "data.widget_enabled",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "widgetEnabled",
        "longname": "Guild#widgetEnabled",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4521,
                4566
            ],
            "filename": "Guild.js",
            "lineno": 75,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026920",
                "name": "this.widgetChannelID",
                "type": "MemberExpression",
                "value": "data.widget_channel_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "widgetChannelID",
        "longname": "Guild#widgetChannelID",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4649,
                4708
            ],
            "filename": "Guild.js",
            "lineno": 79,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026935",
                "name": "this.approximateMemberCount",
                "type": "MemberExpression",
                "value": "data.approximate_member_count",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "approximateMemberCount",
        "longname": "Guild#approximateMemberCount",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4792,
                4855
            ],
            "filename": "Guild.js",
            "lineno": 82,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026950",
                "name": "this.approximatePresenceCount",
                "type": "MemberExpression",
                "value": "data.approximate_presence_count",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "approximatePresenceCount",
        "longname": "Guild#approximatePresenceCount",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4915,
                4919
            ],
            "filename": "Guild.js",
            "lineno": 86,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026964",
                "name": "role"
            }
        },
        "undocumented": true,
        "name": "role",
        "longname": "<anonymous>~role",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5056,
                5067
            ],
            "filename": "Guild.js",
            "lineno": 92,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026986",
                "name": "channelData"
            }
        },
        "undocumented": true,
        "name": "channelData",
        "longname": "<anonymous>~channelData",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5104,
                5134
            ],
            "filename": "Guild.js",
            "lineno": 93,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100026993",
                "name": "channelData.guild_id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guild_id",
        "longname": "<anonymous>~channelData.guild_id",
        "kind": "member",
        "memberof": "<anonymous>~channelData",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5158,
                5201
            ],
            "filename": "Guild.js",
            "lineno": 94,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027001",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5219,
                5239
            ],
            "filename": "Guild.js",
            "lineno": 95,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027010",
                "name": "channel.guild",
                "type": "ThisExpression",
                "funcscope": "<anonymous>",
                "value": "this",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "<anonymous>~channel.guild",
        "kind": "member",
        "memberof": "<anonymous>~channel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5309,
                5353
            ],
            "filename": "Guild.js",
            "lineno": 97,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027025",
                "name": "client.channelGuildMap[undefined]",
                "type": "MemberExpression",
                "value": "this.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channelGuildMap[undefined]",
        "longname": "client.channelGuildMap[undefined]",
        "kind": "member",
        "memberof": "client",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5429,
                5435
            ],
            "filename": "Guild.js",
            "lineno": 102,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027043",
                "name": "member"
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5471,
                5497
            ],
            "filename": "Guild.js",
            "lineno": 103,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027050",
                "name": "member.id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "member.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~member.id",
        "kind": "member",
        "memberof": "<anonymous>~member",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5623,
                5631
            ],
            "filename": "Guild.js",
            "lineno": 109,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027075",
                "name": "presence"
            }
        },
        "undocumented": true,
        "name": "presence",
        "longname": "<anonymous>~presence",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5735,
                5780
            ],
            "filename": "Guild.js",
            "lineno": 111,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027096",
                "name": "userData",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "userData",
        "longname": "<anonymous>~userData",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5841,
                5948
            ],
            "filename": "Guild.js",
            "lineno": 113,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027113",
                "name": "userData",
                "type": "TemplateLiteral",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "userData",
        "longname": "<anonymous>~userData",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6205,
                6235
            ],
            "filename": "Guild.js",
            "lineno": 118,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027158",
                "name": "presence.id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "presence.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~presence.id",
        "kind": "member",
        "memberof": "<anonymous>~presence",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6387,
                6430
            ],
            "filename": "Guild.js",
            "lineno": 125,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027187",
                "name": "this.pendingVoiceStates",
                "type": "MemberExpression",
                "value": "data.voice_states",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pendingVoiceStates",
        "longname": "Guild#pendingVoiceStates",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6479,
                6489
            ],
            "filename": "Guild.js",
            "lineno": 127,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027197",
                "name": "voiceState"
            }
        },
        "undocumented": true,
        "name": "voiceState",
        "longname": "<anonymous>~voiceState",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6654,
                6688
            ],
            "filename": "Guild.js",
            "lineno": 131,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027217",
                "name": "voiceState.id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "voiceState.user_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~voiceState.id",
        "kind": "member",
        "memberof": "<anonymous>~voiceState",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7332,
                10185
            ],
            "filename": "Guild.js",
            "lineno": 147,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027311",
                "name": "Guild#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "Guild#update",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7397,
                7418
            ],
            "filename": "Guild.js",
            "lineno": 149,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027324",
                "name": "this.name",
                "type": "MemberExpression",
                "value": "data.name",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "Guild#name",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7494,
                7542
            ],
            "filename": "Guild.js",
            "lineno": 152,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027339",
                "name": "this.verificationLevel",
                "type": "MemberExpression",
                "value": "data.verification_level",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "verificationLevel",
        "longname": "Guild#verificationLevel",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7606,
                7631
            ],
            "filename": "Guild.js",
            "lineno": 155,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027354",
                "name": "this.splash",
                "type": "MemberExpression",
                "value": "data.splash",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "splash",
        "longname": "Guild#splash",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7695,
                7720
            ],
            "filename": "Guild.js",
            "lineno": 158,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027369",
                "name": "this.banner",
                "type": "MemberExpression",
                "value": "data.banner",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "banner",
        "longname": "Guild#banner",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7784,
                7809
            ],
            "filename": "Guild.js",
            "lineno": 161,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027384",
                "name": "this.region",
                "type": "MemberExpression",
                "value": "data.region",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "region",
        "longname": "Guild#region",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7875,
                7903
            ],
            "filename": "Guild.js",
            "lineno": 164,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027399",
                "name": "this.ownerID",
                "type": "MemberExpression",
                "value": "data.owner_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ownerID",
        "longname": "Guild#ownerID",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7965,
                7986
            ],
            "filename": "Guild.js",
            "lineno": 167,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027414",
                "name": "this.icon",
                "type": "MemberExpression",
                "value": "data.icon",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "icon",
        "longname": "Guild#icon",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8052,
                8081
            ],
            "filename": "Guild.js",
            "lineno": 170,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027429",
                "name": "this.features",
                "type": "MemberExpression",
                "value": "data.features",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "features",
        "longname": "Guild#features",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8145,
                8170
            ],
            "filename": "Guild.js",
            "lineno": 173,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027444",
                "name": "this.emojis",
                "type": "MemberExpression",
                "value": "data.emojis",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "emojis",
        "longname": "Guild#emojis",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8242,
                8281
            ],
            "filename": "Guild.js",
            "lineno": 176,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027459",
                "name": "this.afkChannelID",
                "type": "MemberExpression",
                "value": "data.afk_channel_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "afkChannelID",
        "longname": "Guild#afkChannelID",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8350,
                8384
            ],
            "filename": "Guild.js",
            "lineno": 179,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027474",
                "name": "this.afkTimeout",
                "type": "MemberExpression",
                "value": "data.afk_timeout",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "afkTimeout",
        "longname": "Guild#afkTimeout",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8471,
                8533
            ],
            "filename": "Guild.js",
            "lineno": 182,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027489",
                "name": "this.defaultNotifications",
                "type": "MemberExpression",
                "value": "data.default_message_notifications",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "defaultNotifications",
        "longname": "Guild#defaultNotifications",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8600,
                8630
            ],
            "filename": "Guild.js",
            "lineno": 185,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027504",
                "name": "this.mfaLevel",
                "type": "MemberExpression",
                "value": "data.mfa_level",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mfaLevel",
        "longname": "Guild#mfaLevel",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8693,
                8716
            ],
            "filename": "Guild.js",
            "lineno": 188,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027519",
                "name": "this.large",
                "type": "MemberExpression",
                "value": "data.large",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "large",
        "longname": "Guild#large",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8787,
                8825
            ],
            "filename": "Guild.js",
            "lineno": 191,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027534",
                "name": "this.maxPresences",
                "type": "MemberExpression",
                "value": "data.max_presences",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "maxPresences",
        "longname": "Guild#maxPresences",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8906,
                8963
            ],
            "filename": "Guild.js",
            "lineno": 194,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027549",
                "name": "this.explicitContentFilter",
                "type": "MemberExpression",
                "value": "data.explicit_content_filter",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "explicitContentFilter",
        "longname": "Guild#explicitContentFilter",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9038,
                9083
            ],
            "filename": "Guild.js",
            "lineno": 197,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027564",
                "name": "this.systemChannelID",
                "type": "MemberExpression",
                "value": "data.system_channel_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "systemChannelID",
        "longname": "Guild#systemChannelID",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9153,
                9189
            ],
            "filename": "Guild.js",
            "lineno": 200,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027579",
                "name": "this.premiumTier",
                "type": "MemberExpression",
                "value": "data.premium_tier",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "premiumTier",
        "longname": "Guild#premiumTier",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9273,
                9336
            ],
            "filename": "Guild.js",
            "lineno": 203,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027594",
                "name": "this.premiumSubscriptionCount",
                "type": "MemberExpression",
                "value": "data.premium_subscription_count",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "premiumSubscriptionCount",
        "longname": "Guild#premiumSubscriptionCount",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9409,
                9446
            ],
            "filename": "Guild.js",
            "lineno": 206,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027609",
                "name": "this.vanityURL",
                "type": "MemberExpression",
                "value": "data.vanity_url_code",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "vanityURL",
        "longname": "Guild#vanityURL",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9520,
                9564
            ],
            "filename": "Guild.js",
            "lineno": 209,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027624",
                "name": "this.preferredLocale",
                "type": "MemberExpression",
                "value": "data.preferred_locale",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "preferredLocale",
        "longname": "Guild#preferredLocale",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9633,
                9668
            ],
            "filename": "Guild.js",
            "lineno": 212,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027639",
                "name": "this.description",
                "type": "MemberExpression",
                "value": "data.description",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "description",
        "longname": "Guild#description",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9737,
                9771
            ],
            "filename": "Guild.js",
            "lineno": 215,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027654",
                "name": "this.maxMembers",
                "type": "MemberExpression",
                "value": "data.max_members",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "maxMembers",
        "longname": "Guild#maxMembers",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9854,
                9914
            ],
            "filename": "Guild.js",
            "lineno": 218,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027669",
                "name": "this.publicUpdatesChannelID",
                "type": "MemberExpression",
                "value": "data.public_updates_channel_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "publicUpdatesChannelID",
        "longname": "Guild#publicUpdatesChannelID",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9988,
                10031
            ],
            "filename": "Guild.js",
            "lineno": 221,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027684",
                "name": "this.rulesChannelID",
                "type": "MemberExpression",
                "value": "data.rules_channel_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "rulesChannelID",
        "longname": "Guild#rulesChannelID",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10112,
                10168
            ],
            "filename": "Guild.js",
            "lineno": 224,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027699",
                "name": "this.maxVideoChannelUsers",
                "type": "MemberExpression",
                "value": "data.max_video_channel_users",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "maxVideoChannelUsers",
        "longname": "Guild#maxVideoChannelUsers",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Request all guild members from Discord\n    * @arg {Number} [timeout] The number of milliseconds to wait before resolving early. Defaults to the `requestTimeout` client option\n    * @returns {Promise<Number>} Resolves with the total number of fetched members.\n    */",
        "meta": {
            "range": [
                10471,
                10592
            ],
            "filename": "Guild.js",
            "lineno": 233,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027706",
                "name": "Guild#fetchAllMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "timeout"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Request all guild members from Discord",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The number of milliseconds to wait before resolving early. Defaults to the `requestTimeout` client option",
                "name": "timeout"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Number>"
                    ]
                },
                "description": "Resolves with the total number of fetched members."
            }
        ],
        "name": "fetchAllMembers",
        "longname": "Guild#fetchAllMembers",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10545,
                10552
            ],
            "filename": "Guild.js",
            "lineno": 235,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027719",
                "name": "timeout",
                "type": "Identifier",
                "value": "timeout"
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "timeout",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Request specific guild members through the gateway connection\n    * @arg {Object} [options] Options for fetching the members\n    * @arg {String} [options.query] The query used for looking up the members. When using intents, `GUILD_MEMBERS` is required to fetch all members.\n    * @arg {String[]} [options.userIDs] The IDs of members to fetch\n    * @arg {Number} [options.limit] The maximum number of members to fetch\n    * @arg {Number} [options.timeout] The number of milliseconds to wait before resolving early. Defaults to the `requestTimeout` client option\n    * @arg {Boolean} [options.presences] Whether to request member presences or not. When using intents, the `GUILD_PRESENCES` intent is required.\n    * @returns {Promise<Member[]>} Resolves with the fetched members.\n    */",
        "meta": {
            "range": [
                11397,
                11491
            ],
            "filename": "Guild.js",
            "lineno": 249,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027727",
                "name": "Guild#fetchMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Request specific guild members through the gateway connection",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Options for fetching the members",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The query used for looking up the members. When using intents, `GUILD_MEMBERS` is required to fetch all members.",
                "name": "options.query"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "The IDs of members to fetch",
                "name": "options.userIDs"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The maximum number of members to fetch",
                "name": "options.limit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The number of milliseconds to wait before resolving early. Defaults to the `requestTimeout` client option",
                "name": "options.timeout"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to request member presences or not. When using intents, the `GUILD_PRESENCES` intent is required.",
                "name": "options.presences"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Member>>"
                    ]
                },
                "description": "Resolves with the fetched members."
            }
        ],
        "name": "fetchMembers",
        "longname": "Guild#fetchMembers",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11497,
                11621
            ],
            "filename": "Guild.js",
            "lineno": 253,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027743",
                "name": "Guild#iconURL",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "iconURL",
        "longname": "Guild#iconURL",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get the guild's icon with the given format and size\n    * @arg {String} [format] The filetype of the icon (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")\n    * @arg {Number} [size] The size of the icon (any power of two between 16 and 4096)\n    */",
        "meta": {
            "range": [
                11882,
                12035
            ],
            "filename": "Guild.js",
            "lineno": 262,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027769",
                "name": "Guild#dynamicIconURL",
                "type": "MethodDefinition",
                "paramnames": [
                    "format",
                    "size"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the guild's icon with the given format and size",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The filetype of the icon (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")",
                "name": "format"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The size of the icon (any power of two between 16 and 4096)",
                "name": "size"
            }
        ],
        "name": "dynamicIconURL",
        "longname": "Guild#dynamicIconURL",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12041,
                12173
            ],
            "filename": "Guild.js",
            "lineno": 266,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027799",
                "name": "Guild#splashURL",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "splashURL",
        "longname": "Guild#splashURL",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12179,
                12311
            ],
            "filename": "Guild.js",
            "lineno": 270,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027825",
                "name": "Guild#bannerURL",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "bannerURL",
        "longname": "Guild#bannerURL",
        "kind": "member",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get the guild's splash with the given format and size\n    * @arg {String} [format] The filetype of the icon (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")\n    * @param {Number} [size] The size of the icon (any power of two between 16 and 4096)\n    */",
        "meta": {
            "range": [
                12576,
                12737
            ],
            "filename": "Guild.js",
            "lineno": 279,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027851",
                "name": "Guild#dynamicSplashURL",
                "type": "MethodDefinition",
                "paramnames": [
                    "format",
                    "size"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the guild's splash with the given format and size",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The filetype of the icon (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")",
                "name": "format"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The size of the icon (any power of two between 16 and 4096)",
                "name": "size"
            }
        ],
        "name": "dynamicSplashURL",
        "longname": "Guild#dynamicSplashURL",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get the guild's banner with the given format and size\n    * @arg {String} [format] The filetype of the icon (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")\n    * @param {Number} [size] The size of the icon (any power of two between 16 and 4096)\n    */",
        "meta": {
            "range": [
                13002,
                13163
            ],
            "filename": "Guild.js",
            "lineno": 288,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027881",
                "name": "Guild#dynamicBannerURL",
                "type": "MethodDefinition",
                "paramnames": [
                    "format",
                    "size"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the guild's banner with the given format and size",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The filetype of the icon (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")",
                "name": "format"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The size of the icon (any power of two between 16 and 4096)",
                "name": "size"
            }
        ],
        "name": "dynamicBannerURL",
        "longname": "Guild#dynamicBannerURL",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Create a channel in the guild\n    * @arg {String} name The name of the channel\n    * @arg {Number} [type=0] The type of the channel, either 0 (text), 2 (voice), or 4 (category)\n    * @arg {Object | String} [options] The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.\n    * @arg {String} [options.topic] The topic of the channel (text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number} [options.bitrate] The bitrate of the channel (voice channels only)\n    * @arg {String?} [options.parentID] The ID of the parent category channel for this channel\n    * @arg {Array} [options.permissionOverwrites] An array containing permission overwrite objects\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)\n    * @arg {String} [options.reason] The reason to be displayed in audit logs\n    * @arg {Number} [options.userLimit] The channel user limit (voice channels only)\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel>}\n    */",
        "meta": {
            "range": [
                14483,
                14633
            ],
            "filename": "Guild.js",
            "lineno": 307,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027911",
                "name": "Guild#createChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "name",
                    "type",
                    "reason",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a channel in the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The type of the channel, either 0 (text), 2 (voice), or 4 (category)",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Object",
                        "String"
                    ]
                },
                "optional": true,
                "description": "The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The topic of the channel (text channels only)",
                "name": "options.topic"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "The nsfw status of the channel",
                "name": "options.nsfw"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The bitrate of the channel (voice channels only)",
                "name": "options.bitrate"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "The ID of the parent category channel for this channel",
                "name": "options.parentID"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "optional": true,
                "description": "An array containing permission overwrite objects",
                "name": "options.permissionOverwrites"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)",
                "name": "options.rateLimitPerUser"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "options.reason"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The channel user limit (voice channels only)",
                "name": "options.userLimit"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|TextChannel|VoiceChannel)>"
                    ]
                }
            }
        ],
        "name": "createChannel",
        "longname": "Guild#createChannel",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Create a emoji in the guild\n    * @arg {Object} options Emoji options\n    * @arg {String} options.name The name of emoji\n    * @arg {String} options.image The base 64 encoded string\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
        "meta": {
            "range": [
                15041,
                15168
            ],
            "filename": "Guild.js",
            "lineno": 320,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027938",
                "name": "Guild#createEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a emoji in the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Emoji options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of emoji",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The base 64 encoded string",
                "name": "options.image"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "optional": true,
                "description": "An array containing authorized role IDs",
                "name": "options.roles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild emoji object"
            }
        ],
        "name": "createEmoji",
        "longname": "Guild#createEmoji",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Edit a emoji in the guild\n    * @arg {String} emojiID The ID of the emoji you want to modify\n    * @arg {Object} options Emoji options\n    * @arg {String} [options.name] The name of emoji\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
        "meta": {
            "range": [
                15582,
                15723
            ],
            "filename": "Guild.js",
            "lineno": 333,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027961",
                "name": "Guild#editEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "emojiID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a emoji in the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the emoji you want to modify",
                "name": "emojiID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Emoji options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of emoji",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "optional": true,
                "description": "An array containing authorized role IDs",
                "name": "options.roles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild emoji object"
            }
        ],
        "name": "editEmoji",
        "longname": "Guild#editEmoji",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Delete a emoji in the guild\n    * @arg {String} emojiID The ID of the emoji\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                15921,
                16048
            ],
            "filename": "Guild.js",
            "lineno": 343,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100027986",
                "name": "Guild#deleteEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "emojiID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a emoji in the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the emoji",
                "name": "emojiID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteEmoji",
        "longname": "Guild#deleteEmoji",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Create a guild role\n    * @arg {Object|Role} [options] An object or Role containing the properties to set\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
        "meta": {
            "range": [
                16681,
                16801
            ],
            "filename": "Guild.js",
            "lineno": 358,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028009",
                "name": "Guild#createRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a guild role",
        "params": [
            {
                "type": {
                    "names": [
                        "Object",
                        "Role"
                    ]
                },
                "optional": true,
                "description": "An object or Role containing the properties to set",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the role",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The role permissions number",
                "name": "options.permissions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)",
                "name": "options.color"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to hoist the role in the user list or not",
                "name": "options.hoist"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the role is mentionable or not",
                "name": "options.mentionable"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Role>"
                    ]
                }
            }
        ],
        "name": "createRole",
        "longname": "Guild#createRole",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get the prune count for the guild\n    * @arg {Number} [options] The options to use to get number of prune members\n    * @arg {Number} [options.days=7] The number of days of inactivity to prune for\n    * @arg {Array<String>} [options.includeRoles] An array of role IDs that members must have to be considered for pruning\n    * @returns {Promise<Number>} Resolves with the number of members that would be pruned\n    */",
        "meta": {
            "range": [
                17238,
                17348
            ],
            "filename": "Guild.js",
            "lineno": 369,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028032",
                "name": "Guild#getPruneCount",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the prune count for the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The options to use to get number of prune members",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 7,
                "description": "The number of days of inactivity to prune for",
                "name": "options.days"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of role IDs that members must have to be considered for pruning",
                "name": "options.includeRoles"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Number>"
                    ]
                },
                "description": "Resolves with the number of members that would be pruned"
            }
        ],
        "name": "getPruneCount",
        "longname": "Guild#getPruneCount",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Begin pruning the guild\n    * @arg {Number} [options] The options to pass to prune members\n    * @arg {Number} [options.days=7] The number of days of inactivity to prune for\n    * @arg {Array<String>} [options.includeRoles] An array of role IDs that members must have to be considered for pruning\n    * @arg {String} [options.reason] The reason to be displayed in audit logs\n    * @returns {Promise<Number>} Resolves with the number of pruned members\n    */",
        "meta": {
            "range": [
                17826,
                17934
            ],
            "filename": "Guild.js",
            "lineno": 381,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028053",
                "name": "Guild#pruneMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Begin pruning the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The options to pass to prune members",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 7,
                "description": "The number of days of inactivity to prune for",
                "name": "options.days"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of role IDs that members must have to be considered for pruning",
                "name": "options.includeRoles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "options.reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Number>"
                    ]
                },
                "description": "Resolves with the number of pruned members"
            }
        ],
        "name": "pruneMembers",
        "longname": "Guild#pruneMembers",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a guild's channels via the REST API. REST mode is required to use this endpoint.\n    * @returns {Promise<(CategoryChannel[] | TextChannel[] | VoiceChannel[])>}\n    */",
        "meta": {
            "range": [
                18125,
                18228
            ],
            "filename": "Guild.js",
            "lineno": 389,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028074",
                "name": "Guild#getRESTChannels",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's channels via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(Array.<CategoryChannel>|Array.<TextChannel>|Array.<VoiceChannel>)>"
                    ]
                }
            }
        ],
        "name": "getRESTChannels",
        "longname": "Guild#getRESTChannels",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get a guild's emojis via the REST API. REST mode is required to use this endpoint.\n    * @returns {Promise<Object[]>} An array of guild emoji objects\n    */",
        "meta": {
            "range": [
                18405,
                18504
            ],
            "filename": "Guild.js",
            "lineno": 397,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028093",
                "name": "Guild#getRESTEmojis",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's emojis via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "An array of guild emoji objects"
            }
        ],
        "name": "getRESTEmojis",
        "longname": "Guild#getRESTEmojis",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get a guild emoji via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} emojiID The ID of the emoji\n    * @returns {Promise<Object>} An emoji object\n    */",
        "meta": {
            "range": [
                18708,
                18821
            ],
            "filename": "Guild.js",
            "lineno": 406,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028112",
                "name": "Guild#getRESTEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "emojiID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild emoji via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the emoji",
                "name": "emojiID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "An emoji object"
            }
        ],
        "name": "getRESTEmoji",
        "longname": "Guild#getRESTEmoji",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {Number} [limit=1] The max number of members to get (1 to 1000)\n    * @arg {String} [after] The highest user ID of the previous page\n    * @returns {Promise<Member[]>}\n    */",
        "meta": {
            "range": [
                19111,
                19238
            ],
            "filename": "Guild.js",
            "lineno": 416,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028133",
                "name": "Guild#getRESTMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "limit",
                    "after"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The max number of members to get (1 to 1000)",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The highest user ID of the previous page",
                "name": "after"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Member>>"
                    ]
                }
            }
        ],
        "name": "getRESTMembers",
        "longname": "Guild#getRESTMembers",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} memberID The ID of the member\n    * @returns {Promise<Member>}\n    */",
        "meta": {
            "range": [
                19432,
                19549
            ],
            "filename": "Guild.js",
            "lineno": 425,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028156",
                "name": "Guild#getRESTMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "memberID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Member>"
                    ]
                }
            }
        ],
        "name": "getRESTMember",
        "longname": "Guild#getRESTMember",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a guild's roles via the REST API. REST mode is required to use this endpoint.\n    * @returns {Promise<Role[]>}\n    */",
        "meta": {
            "range": [
                19691,
                19788
            ],
            "filename": "Guild.js",
            "lineno": 433,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028177",
                "name": "Guild#getRESTRoles",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's roles via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Role>>"
                    ]
                }
            }
        ],
        "name": "getRESTRoles",
        "longname": "Guild#getRESTRoles",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * [DEPRECATED] Get a guild's embed object\n    * @returns {Promise<Object>} A guild embed object\n    */",
        "meta": {
            "range": [
                19909,
                19998
            ],
            "filename": "Guild.js",
            "lineno": 441,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028196",
                "name": "Guild#getEmbed",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "[DEPRECATED] Get a guild's embed object",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild embed object"
            }
        ],
        "name": "getEmbed",
        "longname": "Guild#getEmbed",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get a guild's widget object\n    * @returns {Promise<Object>} A guild widget object\n    */",
        "meta": {
            "range": [
                20108,
                20199
            ],
            "filename": "Guild.js",
            "lineno": 449,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028215",
                "name": "Guild#getWidget",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a guild's widget object",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild widget object"
            }
        ],
        "name": "getWidget",
        "longname": "Guild#getWidget",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Modify a guild's widget\n    * @arg {Object} options The widget object to modify (https://discord.com/developers/docs/resources/guild#modify-guild-widget)\n    * @returns {Promise<Object>} A guild widget object\n    */",
        "meta": {
            "range": [
                20435,
                20543
            ],
            "filename": "Guild.js",
            "lineno": 458,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028234",
                "name": "Guild#editWidget",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Modify a guild's widget",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The widget object to modify (https://discord.com/developers/docs/resources/guild#modify-guild-widget)",
                "name": "options"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild widget object"
            }
        ],
        "name": "editWidget",
        "longname": "Guild#editWidget",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get possible voice regions for a guild\n    * @returns {Promise<Object[]>} Resolves with an array of voice region objects\n    */",
        "meta": {
            "range": [
                20691,
                20789
            ],
            "filename": "Guild.js",
            "lineno": 466,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028255",
                "name": "Guild#getVoiceRegions",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get possible voice regions for a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of voice region objects"
            }
        ],
        "name": "getVoiceRegions",
        "longname": "Guild#getVoiceRegions",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Leaves the voice channel in this guild\n    */",
        "meta": {
            "range": [
                20855,
                20953
            ],
            "filename": "Guild.js",
            "lineno": 473,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028274",
                "name": "Guild#leaveVoiceChannel",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Leaves the voice channel in this guild",
        "name": "leaveVoiceChannel",
        "longname": "Guild#leaveVoiceChannel",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Edit the guild role\n    * @arg {String} roleID The ID of the role\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
        "meta": {
            "range": [
                21597,
                21729
            ],
            "filename": "Guild.js",
            "lineno": 489,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028293",
                "name": "Guild#editRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "roleID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit the guild role",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the role",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The role permissions number",
                "name": "options.permissions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)",
                "name": "options.color"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to hoist the role in the user list or not",
                "name": "options.hoist"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the role is mentionable or not",
                "name": "options.mentionable"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Role>"
                    ]
                }
            }
        ],
        "name": "editRole",
        "longname": "Guild#editRole",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Delete a role\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                21911,
                22029
            ],
            "filename": "Guild.js",
            "lineno": 499,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028318",
                "name": "Guild#deleteRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "roleID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a role",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteRole",
        "longname": "Guild#deleteRole",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get the audit logs for a guild\n    * @arg {Number} [limit=50] The maximum number of entries to return\n    * @arg {String} [before] Get entries before this entry ID\n    * @arg {Number} [actionType] Filter entries by action type\n    * @returns {Promise<Object>} Resolves with an Object containing `users` and `audit_log_entries` keys\n    */",
        "meta": {
            "range": [
                22388,
                22537
            ],
            "filename": "Guild.js",
            "lineno": 510,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028341",
                "name": "Guild#getAuditLogs",
                "type": "MethodDefinition",
                "paramnames": [
                    "limit",
                    "before",
                    "actionType"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the audit logs for a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 50,
                "description": "The maximum number of entries to return",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get entries before this entry ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "Filter entries by action type",
                "name": "actionType"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with an Object containing `users` and `audit_log_entries` keys"
            }
        ],
        "name": "getAuditLogs",
        "longname": "Guild#getAuditLogs",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a list of integrations for the guild\n    * @returns {Promise<GuildIntegration[]>}\n    */",
        "meta": {
            "range": [
                22650,
                22753
            ],
            "filename": "Guild.js",
            "lineno": 518,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028366",
                "name": "Guild#getIntegrations",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a list of integrations for the guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<GuildIntegration>>"
                    ]
                }
            }
        ],
        "name": "getIntegrations",
        "longname": "Guild#getIntegrations",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Edit a guild integration\n    * @arg {String} integrationID The ID of the integration\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.expireBehavior] What to do when a user's subscription runs out\n    * @arg {String} [options.expireGracePeriod] How long before the integration's role is removed from an unsubscribed user\n    * @arg {String} [options.enableEmoticons] Whether to enable integration emoticons or not\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                23250,
                23399
            ],
            "filename": "Guild.js",
            "lineno": 531,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028385",
                "name": "Guild#editIntegration",
                "type": "MethodDefinition",
                "paramnames": [
                    "integrationID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a guild integration",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration",
                "name": "integrationID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "What to do when a user's subscription runs out",
                "name": "options.expireBehavior"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "How long before the integration's role is removed from an unsubscribed user",
                "name": "options.expireGracePeriod"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Whether to enable integration emoticons or not",
                "name": "options.enableEmoticons"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editIntegration",
        "longname": "Guild#editIntegration",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Force a guild integration to sync\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                23545,
                23676
            ],
            "filename": "Guild.js",
            "lineno": 540,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028408",
                "name": "Guild#syncIntegration",
                "type": "MethodDefinition",
                "paramnames": [
                    "integrationID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Force a guild integration to sync",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration",
                "name": "integrationID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "syncIntegration",
        "longname": "Guild#syncIntegration",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Delete a guild integration\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                23815,
                23950
            ],
            "filename": "Guild.js",
            "lineno": 549,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028429",
                "name": "Guild#deleteIntegration",
                "type": "MethodDefinition",
                "paramnames": [
                    "integrationID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a guild integration",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration",
                "name": "integrationID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteIntegration",
        "longname": "Guild#deleteIntegration",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get all invites in the guild\n    * @returns {Promise<Invite[]>}\n    */",
        "meta": {
            "range": [
                24041,
                24134
            ],
            "filename": "Guild.js",
            "lineno": 557,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028450",
                "name": "Guild#getInvites",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all invites in the guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Invite>>"
                    ]
                }
            }
        ],
        "name": "getInvites",
        "longname": "Guild#getInvites",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Returns the vanity url of the guild\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                24222,
                24313
            ],
            "filename": "Guild.js",
            "lineno": 565,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028469",
                "name": "Guild#getVanity",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns the vanity url of the guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "getVanity",
        "longname": "Guild#getVanity",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Edit a guild member\n    * @arg {String} memberID The ID of the member\n    * @arg {Object} options The properties to edit\n    * @arg {String[]} [options.roles] The array of role IDs the member should have\n    * @arg {String} [options.nick] Set the member's guild nickname, \"\" to remove\n    * @arg {Boolean} [options.mute] Server mute the member\n    * @arg {Boolean} [options.deaf] Server deafen the member\n    * @arg {String} [options.channelID] The ID of the voice channel to move the member to (must be in voice)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                24949,
                25094
            ],
            "filename": "Guild.js",
            "lineno": 581,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028488",
                "name": "Guild#editMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "memberID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a guild member",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "The array of role IDs the member should have",
                "name": "options.roles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Set the member's guild nickname, \"\" to remove",
                "name": "options.nick"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Server mute the member",
                "name": "options.mute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Server deafen the member",
                "name": "options.deaf"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the voice channel to move the member to (must be in voice)",
                "name": "options.channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editMember",
        "longname": "Guild#editMember",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Add a role to a guild member\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                25341,
                25490
            ],
            "filename": "Guild.js",
            "lineno": 592,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028513",
                "name": "Guild#addMemberRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "memberID",
                    "roleID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Add a role to a guild member",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "addMemberRole",
        "longname": "Guild#addMemberRole",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Remove a role from a guild member\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                25742,
                25897
            ],
            "filename": "Guild.js",
            "lineno": 603,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028538",
                "name": "Guild#removeMemberRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "memberID",
                    "roleID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove a role from a guild member",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeMemberRole",
        "longname": "Guild#removeMemberRole",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Kick a member from the guild\n    * @arg {String} userID The ID of the member\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                26096,
                26219
            ],
            "filename": "Guild.js",
            "lineno": 613,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028563",
                "name": "Guild#kickMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Kick a member from the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "kickMember",
        "longname": "Guild#kickMember",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Ban a user from the guild\n    * @arg {String} userID The ID of the member\n    * @arg {Number} [deleteMessageDays=0] Number of days to delete messages for\n    * @arg {String} [reason] Reason for the ban\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                26473,
                26632
            ],
            "filename": "Guild.js",
            "lineno": 624,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028586",
                "name": "Guild#banMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID",
                    "deleteMessageDays",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Ban a user from the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Number of days to delete messages for",
                "name": "deleteMessageDays"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Reason for the ban",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "banMember",
        "longname": "Guild#banMember",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Unban a user from the guild\n    * @arg {String} userID The ID of the member\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                26830,
                26955
            ],
            "filename": "Guild.js",
            "lineno": 634,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028611",
                "name": "Guild#unbanMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Unban a user from the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "unbanMember",
        "longname": "Guild#unbanMember",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Edit the guild\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The ID of the guild\n    * @arg {String} [options.region] The region of the guild\n    * @arg {String} [options.icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {Number} [options.verificationLevel] The guild verification level\n    * @arg {Number} [options.defaultNotifications] The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".\n    * @arg {Number} [options.explicitContentFilter] The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.\n    * @arg {String} [options.systemChannelID] The ID of the system channel\n    * @arg {String} [options.rulesChannelID] The id of the channel where \"PUBLIC\" guilds display rules and/or guidelines\n    * @arg {String} [options.publicUpdatesChannelID] The id of the channel where admins and moderators of \"PUBLIC\" guilds receive notices from Discord\n    * @arg {String} [options.preferredLocale] Preferred \"PUBLIC\" guild language used in server discovery and notices from Discord\n    * @arg {String} [options.afkChannelID] The ID of the AFK voice channel\n    * @arg {Number} [options.afkTimeout] The AFK timeout in seconds\n    * @arg {String} [options.ownerID] The ID of the member to transfer guild ownership to (bot user must be owner)\n    * @arg {String} [options.splash] The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.banner] The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.description] The description for the guild (VIP only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Guild>}\n    */",
        "meta": {
            "range": [
                28991,
                29104
            ],
            "filename": "Guild.js",
            "lineno": 660,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028634",
                "name": "Guild#edit",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the guild",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The region of the guild",
                "name": "options.region"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.icon"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The guild verification level",
                "name": "options.verificationLevel"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".",
                "name": "options.defaultNotifications"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.",
                "name": "options.explicitContentFilter"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the system channel",
                "name": "options.systemChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The id of the channel where \"PUBLIC\" guilds display rules and/or guidelines",
                "name": "options.rulesChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The id of the channel where admins and moderators of \"PUBLIC\" guilds receive notices from Discord",
                "name": "options.publicUpdatesChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Preferred \"PUBLIC\" guild language used in server discovery and notices from Discord",
                "name": "options.preferredLocale"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the AFK voice channel",
                "name": "options.afkChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The AFK timeout in seconds",
                "name": "options.afkTimeout"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the member to transfer guild ownership to (bot user must be owner)",
                "name": "options.ownerID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
                "name": "options.splash"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
                "name": "options.banner"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The description for the guild (VIP only)",
                "name": "options.description"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Guild>"
                    ]
                }
            }
        ],
        "name": "edit",
        "longname": "Guild#edit",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Delete the guild (bot user must be owner)\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                29198,
                29283
            ],
            "filename": "Guild.js",
            "lineno": 668,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028657",
                "name": "Guild#delete",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete the guild (bot user must be owner)",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "delete",
        "longname": "Guild#delete",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Leave the guild\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                29351,
                29434
            ],
            "filename": "Guild.js",
            "lineno": 676,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028676",
                "name": "Guild#leave",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Leave the guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "leave",
        "longname": "Guild#leave",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get the ban list of the guild\n    * @returns {Promise<Object[]>} Resolves with an array of {reason: String, user: User}\n    */",
        "meta": {
            "range": [
                29581,
                29668
            ],
            "filename": "Guild.js",
            "lineno": 684,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028695",
                "name": "Guild#getBans",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the ban list of the guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of {reason: String, user: User}"
            }
        ],
        "name": "getBans",
        "longname": "Guild#getBans",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get a ban from the ban list of a guild\n    * @arg {String} userID The ID of the banned user\n    * @returns {Promise<Object>} Resolves with {reason: String, user: User}\n    */",
        "meta": {
            "range": [
                29863,
                29962
            ],
            "filename": "Guild.js",
            "lineno": 693,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028714",
                "name": "Guild#getBan",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a ban from the ban list of a guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the banned user",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with {reason: String, user: User}"
            }
        ],
        "name": "getBan",
        "longname": "Guild#getBan",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Edit the bot's nickname in the guild\n    * @arg {String} nick The nickname\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                30089,
                30191
            ],
            "filename": "Guild.js",
            "lineno": 702,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028735",
                "name": "Guild#editNickname",
                "type": "MethodDefinition",
                "paramnames": [
                    "nick"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit the bot's nickname in the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The nickname",
                "name": "nick"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editNickname",
        "longname": "Guild#editNickname",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get all the webhooks in the guild\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
        "meta": {
            "range": [
                30329,
                30424
            ],
            "filename": "Guild.js",
            "lineno": 710,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028756",
                "name": "Guild#getWebhooks",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all the webhooks in the guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of webhook objects"
            }
        ],
        "name": "getWebhooks",
        "longname": "Guild#getWebhooks",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Search for guild members by partial nickname/username\n    * @arg {String} query The query string to match username(s) and nickname(s) against\n    * @arg {Number} [limit=1] The maximum number of members you want returned, capped at 100\n    * @returns {Promise<Member[]>}\n    */",
        "meta": {
            "range": [
                30721,
                30846
            ],
            "filename": "Guild.js",
            "lineno": 720,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028775",
                "name": "Guild#searchMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "query",
                    "limit"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Search for guild members by partial nickname/username",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The query string to match username(s) and nickname(s) against",
                "name": "query"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The maximum number of members you want returned, capped at 100",
                "name": "limit"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Member>>"
                    ]
                }
            }
        ],
        "name": "searchMembers",
        "longname": "Guild#searchMembers",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                30852,
                31671
            ],
            "filename": "Guild.js",
            "lineno": 724,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028798",
                "name": "Guild#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Guild#toJSON",
        "kind": "function",
        "memberof": "Guild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                31675,
                31697
            ],
            "filename": "Guild.js",
            "lineno": 759,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028842",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Guild",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028852",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53,
                81
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028858",
                "name": "Invite",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Invite",
        "longname": "Invite",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                90,
                105
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 5,
            "columnno": 7,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028866",
                "name": "AuditLogActions",
                "type": "Identifier",
                "value": "AuditLogActions"
            }
        },
        "undocumented": true,
        "name": "AuditLogActions",
        "longname": "AuditLogActions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n* Represents a guild audit log entry describing a moderation action\n* @prop {String} id The ID of the entry\n* @prop {Guild} guild The guild containing the entry\n* @prop {Number} actionType The action type of the entry. See Constants.AuditLogActions for more details\n* @prop {String?} reason The reason for the action\n* @prop {User} user The user that performed the action\n* @prop {String} targetID The ID of the action target\n* @prop {(CategoryChannel | Guild | Member | Invite | Role | Object | TextChannel | VoiceChannel | NewsChannel)?} target The object of the action target\n* If the item is not cached, this property will be null\n* If the action targets a guild, this could be a Guild object\n* If the action targets a guild channel, this could be a CategoryChannel, TextChannel, or VoiceChannel object\n* If the action targets a member, this could be a Member object\n* If the action targets a role, this could be a Role object\n* If the action targets an invite, this is an Invite object\n* If the action targets a webhook, this is null\n* If the action targets a emoji, this could be an emoji Object\n* If the action targets a message, this is a User object\n* @prop {Object?} before The properties of the targeted object before the action was taken\n* For example, if a channel was renamed from #general to #potato, this would be `{name: \"general\"}``\n* @prop {Object?} after The properties of the targeted object after the action was taken\n* For example, if a channel was renamed from #general to #potato, this would be `{name: \"potato\"}``\n* @prop {Number?} count The number of messages deleted, action type 72 (MESSAGE_DELETE) only\n* @prop {(CategoryChannel | TextChannel | VoiceChannel)?} channel The channel containing the deleted messages, action type 72 (MESSAGE_DELETE) only\n* @prop {Number?} deleteMemberDays The number of days of inactivity to prune for, action type 21 (MEMBER_PRUNE) only\n* @prop {Number?} membersRemoved The number of members pruned from the server, action type 21 (MEMBER_PRUNE) only\n* @prop {(Member | Object)?} member The member described by the permission overwrite, action types 13-15 (CHANNEL\\_OVERWRITE\\_CREATE/UPDATE/DELETE) only. If the member is not cached, this could be {id: String}\n* @prop {(Role | Object)?} role The role described by the permission overwrite, action types 13-15 (CHANNEL\\_OVERWRITE\\_CREATE/UPDATE/DELETE) only. If the role is not cached, this could be {id: String, name: String}\n*/",
        "meta": {
            "range": [
                2580,
                6618
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028871",
                "name": "GuildAuditLogEntry",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "guild"
                ]
            }
        },
        "classdesc": "Represents a guild audit log entry describing a moderation action",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the entry",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild containing the entry",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The action type of the entry. See Constants.AuditLogActions for more details",
                "name": "actionType"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The reason for the action",
                "name": "reason"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The user that performed the action",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the action target",
                "name": "targetID"
            },
            {
                "type": {
                    "names": [
                        "CategoryChannel",
                        "Guild",
                        "Member",
                        "Invite",
                        "Role",
                        "Object",
                        "TextChannel",
                        "VoiceChannel",
                        "NewsChannel"
                    ]
                },
                "nullable": true,
                "description": "The object of the action target\nIf the item is not cached, this property will be null\nIf the action targets a guild, this could be a Guild object\nIf the action targets a guild channel, this could be a CategoryChannel, TextChannel, or VoiceChannel object\nIf the action targets a member, this could be a Member object\nIf the action targets a role, this could be a Role object\nIf the action targets an invite, this is an Invite object\nIf the action targets a webhook, this is null\nIf the action targets a emoji, this could be an emoji Object\nIf the action targets a message, this is a User object",
                "name": "target"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The properties of the targeted object before the action was taken\nFor example, if a channel was renamed from #general to #potato, this would be `{name: \"general\"}``",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The properties of the targeted object after the action was taken\nFor example, if a channel was renamed from #general to #potato, this would be `{name: \"potato\"}``",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The number of messages deleted, action type 72 (MESSAGE_DELETE) only",
                "name": "count"
            },
            {
                "type": {
                    "names": [
                        "CategoryChannel",
                        "TextChannel",
                        "VoiceChannel"
                    ]
                },
                "nullable": true,
                "description": "The channel containing the deleted messages, action type 72 (MESSAGE_DELETE) only",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The number of days of inactivity to prune for, action type 21 (MEMBER_PRUNE) only",
                "name": "deleteMemberDays"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The number of members pruned from the server, action type 21 (MEMBER_PRUNE) only",
                "name": "membersRemoved"
            },
            {
                "type": {
                    "names": [
                        "Member",
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The member described by the permission overwrite, action types 13-15 (CHANNEL\\_OVERWRITE\\_CREATE/UPDATE/DELETE) only. If the member is not cached, this could be {id: String}",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "Role",
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The role described by the permission overwrite, action types 13-15 (CHANNEL\\_OVERWRITE\\_CREATE/UPDATE/DELETE) only. If the role is not cached, this could be {id: String, name: String}",
                "name": "role"
            }
        ],
        "name": "GuildAuditLogEntry",
        "longname": "GuildAuditLogEntry",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2624,
                4413
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028875",
                "name": "GuildAuditLogEntry",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "guild"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "GuildAuditLogEntry",
        "longname": "GuildAuditLogEntry",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild audit log entry describing a moderation action\n* @prop {String} id The ID of the entry\n* @prop {Guild} guild The guild containing the entry\n* @prop {Number} actionType The action type of the entry. See Constants.AuditLogActions for more details\n* @prop {String?} reason The reason for the action\n* @prop {User} user The user that performed the action\n* @prop {String} targetID The ID of the action target\n* @prop {(CategoryChannel | Guild | Member | Invite | Role | Object | TextChannel | VoiceChannel | NewsChannel)?} target The object of the action target\n* If the item is not cached, this property will be null\n* If the action targets a guild, this could be a Guild object\n* If the action targets a guild channel, this could be a CategoryChannel, TextChannel, or VoiceChannel object\n* If the action targets a member, this could be a Member object\n* If the action targets a role, this could be a Role object\n* If the action targets an invite, this is an Invite object\n* If the action targets a webhook, this is null\n* If the action targets a emoji, this could be an emoji Object\n* If the action targets a message, this is a User object\n* @prop {Object?} before The properties of the targeted object before the action was taken\n* For example, if a channel was renamed from #general to #potato, this would be `{name: \"general\"}``\n* @prop {Object?} after The properties of the targeted object after the action was taken\n* For example, if a channel was renamed from #general to #potato, this would be `{name: \"potato\"}``\n* @prop {Number?} count The number of messages deleted, action type 72 (MESSAGE_DELETE) only\n* @prop {(CategoryChannel | TextChannel | VoiceChannel)?} channel The channel containing the deleted messages, action type 72 (MESSAGE_DELETE) only\n* @prop {Number?} deleteMemberDays The number of days of inactivity to prune for, action type 21 (MEMBER_PRUNE) only\n* @prop {Number?} membersRemoved The number of members pruned from the server, action type 21 (MEMBER_PRUNE) only\n* @prop {(Member | Object)?} member The member described by the permission overwrite, action types 13-15 (CHANNEL\\_OVERWRITE\\_CREATE/UPDATE/DELETE) only. If the member is not cached, this could be {id: String}\n* @prop {(Role | Object)?} role The role described by the permission overwrite, action types 13-15 (CHANNEL\\_OVERWRITE\\_CREATE/UPDATE/DELETE) only. If the role is not cached, this could be {id: String, name: String}\n*/",
        "meta": {
            "range": [
                2580,
                6618
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 36,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028871",
                "name": "GuildAuditLogEntry",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "guild"
                ]
            }
        },
        "name": "GuildAuditLogEntry",
        "longname": "GuildAuditLogEntry",
        "kind": "class",
        "classdesc": "Represents a guild audit log entry describing a moderation action",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the entry",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild containing the entry",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The action type of the entry. See Constants.AuditLogActions for more details",
                "name": "actionType"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The reason for the action",
                "name": "reason"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The user that performed the action",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the action target",
                "name": "targetID"
            },
            {
                "type": {
                    "names": [
                        "CategoryChannel",
                        "Guild",
                        "Member",
                        "Invite",
                        "Role",
                        "Object",
                        "TextChannel",
                        "VoiceChannel",
                        "NewsChannel"
                    ]
                },
                "nullable": true,
                "description": "The object of the action target\nIf the item is not cached, this property will be null\nIf the action targets a guild, this could be a Guild object\nIf the action targets a guild channel, this could be a CategoryChannel, TextChannel, or VoiceChannel object\nIf the action targets a member, this could be a Member object\nIf the action targets a role, this could be a Role object\nIf the action targets an invite, this is an Invite object\nIf the action targets a webhook, this is null\nIf the action targets a emoji, this could be an emoji Object\nIf the action targets a message, this is a User object",
                "name": "target"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The properties of the targeted object before the action was taken\nFor example, if a channel was renamed from #general to #potato, this would be `{name: \"general\"}``",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The properties of the targeted object after the action was taken\nFor example, if a channel was renamed from #general to #potato, this would be `{name: \"potato\"}``",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The number of messages deleted, action type 72 (MESSAGE_DELETE) only",
                "name": "count"
            },
            {
                "type": {
                    "names": [
                        "CategoryChannel",
                        "TextChannel",
                        "VoiceChannel"
                    ]
                },
                "nullable": true,
                "description": "The channel containing the deleted messages, action type 72 (MESSAGE_DELETE) only",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The number of days of inactivity to prune for, action type 21 (MEMBER_PRUNE) only",
                "name": "deleteMemberDays"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The number of members pruned from the server, action type 21 (MEMBER_PRUNE) only",
                "name": "membersRemoved"
            },
            {
                "type": {
                    "names": [
                        "Member",
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The member described by the permission overwrite, action types 13-15 (CHANNEL\\_OVERWRITE\\_CREATE/UPDATE/DELETE) only. If the member is not cached, this could be {id: String}",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "Role",
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The role described by the permission overwrite, action types 13-15 (CHANNEL\\_OVERWRITE\\_CREATE/UPDATE/DELETE) only. If the role is not cached, this could be {id: String, name: String}",
                "name": "role"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2683,
                2701
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 39,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028888",
                "name": "this.guild",
                "type": "Identifier",
                "value": "guild",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "GuildAuditLogEntry#guild",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2712,
                2746
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 41,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028894",
                "name": "this.actionType",
                "type": "MemberExpression",
                "value": "data.action_type",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "actionType",
        "longname": "GuildAuditLogEntry#actionType",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2756,
                2789
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 42,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028902",
                "name": "this.reason",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reason",
        "longname": "GuildAuditLogEntry#reason",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2799,
                2853
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 43,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028912",
                "name": "this.user",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "GuildAuditLogEntry#user",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2863,
                2881
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 44,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028930",
                "name": "this.before",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "before",
        "longname": "GuildAuditLogEntry#before",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2891,
                2908
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 45,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028936",
                "name": "this.after",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "after",
        "longname": "GuildAuditLogEntry#after",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2949,
                2965
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 47,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028947",
                "name": "this.before",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "before",
        "longname": "GuildAuditLogEntry#before",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2979,
                2994
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 48,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028953",
                "name": "this.after",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "after",
        "longname": "GuildAuditLogEntry#after",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3115,
                3157
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 51,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028976",
                "name": "this.before[undefined]",
                "type": "MemberExpression",
                "value": "change.old_value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "before[undefined]",
        "longname": "GuildAuditLogEntry#before[undefined]",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3249,
                3290
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 54,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100028995",
                "name": "this.after[undefined]",
                "type": "MemberExpression",
                "value": "change.new_value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "after[undefined]",
        "longname": "GuildAuditLogEntry#after[undefined]",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3378,
                3408
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 60,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029012",
                "name": "this.targetID",
                "type": "MemberExpression",
                "value": "data.target_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "targetID",
        "longname": "GuildAuditLogEntry#targetID",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3500,
                3532
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 64,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029032",
                "name": "this.count",
                "type": "UnaryExpression",
                "value": "+data.options.count",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "count",
        "longname": "GuildAuditLogEntry#count",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3606,
                3664
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 67,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029050",
                "name": "this.channel",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "GuildAuditLogEntry#channel",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3746,
                3802
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 70,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029073",
                "name": "this.deleteMemberDays",
                "type": "UnaryExpression",
                "value": "+data.options.delete_member_days",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "deleteMemberDays",
        "longname": "GuildAuditLogEntry#deleteMemberDays",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3820,
                3871
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 71,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029084",
                "name": "this.membersRemoved",
                "type": "UnaryExpression",
                "value": "+data.options.members_removed",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "membersRemoved",
        "longname": "GuildAuditLogEntry#membersRemoved",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3996,
                4115
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 75,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029111",
                "name": "this.member",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "GuildAuditLogEntry#member",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4074,
                4093
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 76,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029128",
                "name": "id",
                "type": "MemberExpression",
                "value": "data.options.id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4195,
                4364
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 79,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029144",
                "name": "this.role",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "role",
        "longname": "GuildAuditLogEntry#role",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4269,
                4288
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 80,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029161",
                "name": "id",
                "type": "MemberExpression",
                "value": "data.options.id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4314,
                4342
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 81,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029167",
                "name": "name",
                "type": "MemberExpression",
                "value": "data.options.role_name"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4419,
                6238
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 88,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029173",
                "name": "GuildAuditLogEntry#target",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "target",
        "longname": "GuildAuditLogEntry#target",
        "kind": "member",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5172,
                5231
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 101,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029284",
                "name": "changes",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "changes",
        "longname": "<anonymous>~changes",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5335,
                5353
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 103,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029302",
                "name": "code",
                "type": "MemberExpression",
                "value": "changes.code"
            }
        },
        "undocumented": true,
        "name": "code",
        "longname": "code",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5371,
                5395
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 104,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029306",
                "name": "channel",
                "type": "MemberExpression",
                "value": "changes.channel"
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "channel",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5413,
                5430
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 105,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029310",
                "name": "guild",
                "type": "MemberExpression",
                "value": "this.guild"
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "guild",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5448,
                5466
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 106,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029314",
                "name": "uses",
                "type": "MemberExpression",
                "value": "changes.uses"
            }
        },
        "undocumented": true,
        "name": "uses",
        "longname": "uses",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5484,
                5510
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 107,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029318",
                "name": "max_uses",
                "type": "MemberExpression",
                "value": "changes.max_uses"
            }
        },
        "undocumented": true,
        "name": "max_uses",
        "longname": "max_uses",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5528,
                5552
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 108,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029322",
                "name": "max_age",
                "type": "MemberExpression",
                "value": "changes.max_age"
            }
        },
        "undocumented": true,
        "name": "max_age",
        "longname": "max_age",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5570,
                5598
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 109,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029326",
                "name": "temporary",
                "type": "MemberExpression",
                "value": "changes.temporary"
            }
        },
        "undocumented": true,
        "name": "temporary",
        "longname": "temporary",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6244,
                6616
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 124,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029424",
                "name": "GuildAuditLogEntry#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "GuildAuditLogEntry#toJSON",
        "kind": "function",
        "memberof": "GuildAuditLogEntry",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6620,
                6655
            ],
            "filename": "GuildAuditLogEntry.js",
            "lineno": 143,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029452",
                "name": "module.exports",
                "type": "Identifier",
                "value": "GuildAuditLogEntry",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                51
            ],
            "filename": "GuildChannel.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029462",
                "name": "Channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Channel",
        "longname": "Channel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59,
                101
            ],
            "filename": "GuildChannel.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029468",
                "name": "Collection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Collection",
        "longname": "Collection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                109,
                145
            ],
            "filename": "GuildChannel.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029474",
                "name": "Permission",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Permission",
        "longname": "Permission",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                154,
                165
            ],
            "filename": "GuildChannel.js",
            "lineno": 6,
            "columnno": 7,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029482",
                "name": "Permissions",
                "type": "Identifier",
                "value": "Permissions"
            }
        },
        "undocumented": true,
        "name": "Permissions",
        "longname": "Permissions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                200,
                254
            ],
            "filename": "GuildChannel.js",
            "lineno": 7,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029488",
                "name": "PermissionOverwrite",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "PermissionOverwrite",
        "longname": "PermissionOverwrite",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild channel. You also probably want to look at CategoryChannel, NewsChannel, StoreChannel, TextChannel, and VoiceChannel.\n* @extends Channel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Guild} guild The guild that owns the channel\n* @prop {String?} parentID The ID of the category this channel belongs to\n* @prop {String} name The name of the channel\n* @prop {Number} position The position of the channel\n* @prop {Boolean} nsfw Whether the channel is an NSFW channel or not\n* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel\n*/",
        "meta": {
            "range": [
                981,
                6049
            ],
            "filename": "GuildChannel.js",
            "lineno": 22,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029493",
                "name": "GuildChannel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "Represents a guild channel. You also probably want to look at CategoryChannel, NewsChannel, StoreChannel, TextChannel, and VoiceChannel.",
        "augments": [
            "Channel"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild that owns the channel",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the category this channel belongs to",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the channel",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the channel is an NSFW channel or not",
                "name": "nsfw"
            },
            {
                "type": {
                    "names": [
                        "Collection.<PermissionOverwrite>"
                    ]
                },
                "description": "Collection of PermissionOverwrites in this channel",
                "name": "permissionOverwrites"
            }
        ],
        "name": "GuildChannel",
        "longname": "GuildChannel",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1022,
                1212
            ],
            "filename": "GuildChannel.js",
            "lineno": 23,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029497",
                "name": "GuildChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "GuildChannel",
        "longname": "GuildChannel",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild channel. You also probably want to look at CategoryChannel, NewsChannel, StoreChannel, TextChannel, and VoiceChannel.\n* @extends Channel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Guild} guild The guild that owns the channel\n* @prop {String?} parentID The ID of the category this channel belongs to\n* @prop {String} name The name of the channel\n* @prop {Number} position The position of the channel\n* @prop {Boolean} nsfw Whether the channel is an NSFW channel or not\n* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel\n*/",
        "meta": {
            "range": [
                981,
                6049
            ],
            "filename": "GuildChannel.js",
            "lineno": 22,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029493",
                "name": "GuildChannel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "GuildChannel",
        "longname": "GuildChannel",
        "kind": "class",
        "classdesc": "Represents a guild channel. You also probably want to look at CategoryChannel, NewsChannel, StoreChannel, TextChannel, and VoiceChannel.",
        "augments": [
            "Channel"
        ],
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild that owns the channel",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the category this channel belongs to",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the channel",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the channel is an NSFW channel or not",
                "name": "nsfw"
            },
            {
                "type": {
                    "names": [
                        "Collection.<PermissionOverwrite>"
                    ]
                },
                "description": "Collection of PermissionOverwrites in this channel",
                "name": "permissionOverwrites"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1087,
                1177
            ],
            "filename": "GuildChannel.js",
            "lineno": 25,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029509",
                "name": "this.guild",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "GuildChannel#guild",
        "kind": "member",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1150,
                1167
            ],
            "filename": "GuildChannel.js",
            "lineno": 26,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029524",
                "name": "id",
                "type": "MemberExpression",
                "value": "data.guild_id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1218,
                1976
            ],
            "filename": "GuildChannel.js",
            "lineno": 32,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029534",
                "name": "GuildChannel#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "GuildChannel#update",
        "kind": "function",
        "memberof": "GuildChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1283,
                1304
            ],
            "filename": "GuildChannel.js",
            "lineno": 34,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029547",
                "name": "this.type",
                "type": "MemberExpression",
                "value": "data.type",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "GuildChannel#type",
        "kind": "member",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1366,
                1387
            ],
            "filename": "GuildChannel.js",
            "lineno": 37,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029562",
                "name": "this.name",
                "type": "MemberExpression",
                "value": "data.name",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "GuildChannel#name",
        "kind": "member",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1453,
                1482
            ],
            "filename": "GuildChannel.js",
            "lineno": 40,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029577",
                "name": "this.position",
                "type": "MemberExpression",
                "value": "data.position",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "position",
        "longname": "GuildChannel#position",
        "kind": "member",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1549,
                1579
            ],
            "filename": "GuildChannel.js",
            "lineno": 43,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029592",
                "name": "this.parentID",
                "type": "MemberExpression",
                "value": "data.parent_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "parentID",
        "longname": "GuildChannel#parentID",
        "kind": "member",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1599,
                1703
            ],
            "filename": "GuildChannel.js",
            "lineno": 45,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029600",
                "name": "this.nsfw",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "nsfw",
        "longname": "GuildChannel#nsfw",
        "kind": "member",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1758,
                1821
            ],
            "filename": "GuildChannel.js",
            "lineno": 47,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029634",
                "name": "this.permissionOverwrites",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "permissionOverwrites",
        "longname": "GuildChannel#permissionOverwrites",
        "kind": "member",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get the channel-specific permissions of a member\n    * @arg {String} memberID The ID of the member\n    * @returns {Permission}\n    */",
        "meta": {
            "range": [
                2130,
                3091
            ],
            "filename": "GuildChannel.js",
            "lineno": 59,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029659",
                "name": "GuildChannel#permissionsOf",
                "type": "MethodDefinition",
                "paramnames": [
                    "memberID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the channel-specific permissions of a member",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Permission"
                    ]
                }
            }
        ],
        "name": "permissionsOf",
        "longname": "GuildChannel#permissionsOf",
        "kind": "function",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2170,
                2211
            ],
            "filename": "GuildChannel.js",
            "lineno": 60,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029665",
                "name": "member",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2225,
                2261
            ],
            "filename": "GuildChannel.js",
            "lineno": 61,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029677",
                "name": "permission",
                "type": "MemberExpression",
                "value": "member.permission.allow"
            }
        },
        "undocumented": true,
        "name": "permission",
        "longname": "<anonymous>~permission",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2390,
                2446
            ],
            "filename": "GuildChannel.js",
            "lineno": 65,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029698",
                "name": "overwrite",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "overwrite",
        "longname": "<anonymous>~overwrite",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2484,
                2545
            ],
            "filename": "GuildChannel.js",
            "lineno": 67,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029715",
                "name": "permission",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "permission",
        "longname": "<anonymous>~permission",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2569,
                2577
            ],
            "filename": "GuildChannel.js",
            "lineno": 69,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029728",
                "name": "deny",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "deny",
        "longname": "<anonymous>~deny",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2591,
                2600
            ],
            "filename": "GuildChannel.js",
            "lineno": 70,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029732",
                "name": "allow",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "allow",
        "longname": "<anonymous>~allow",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2620,
                2626
            ],
            "filename": "GuildChannel.js",
            "lineno": 71,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029737",
                "name": "roleID"
            }
        },
        "undocumented": true,
        "name": "roleID",
        "longname": "<anonymous>~roleID",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2662,
                2711
            ],
            "filename": "GuildChannel.js",
            "lineno": 72,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029744",
                "name": "overwrite",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "overwrite",
        "longname": "<anonymous>~overwrite",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2732,
                2754
            ],
            "filename": "GuildChannel.js",
            "lineno": 73,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029755",
                "name": "deny",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "overwrite.deny",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "deny",
        "longname": "<anonymous>~deny",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2772,
                2796
            ],
            "filename": "GuildChannel.js",
            "lineno": 74,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029761",
                "name": "allow",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "overwrite.allow",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "allow",
        "longname": "<anonymous>~allow",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2830,
                2871
            ],
            "filename": "GuildChannel.js",
            "lineno": 77,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029767",
                "name": "permission",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "permission",
        "longname": "<anonymous>~permission",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2881,
                2932
            ],
            "filename": "GuildChannel.js",
            "lineno": 78,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029776",
                "name": "overwrite",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "overwrite",
        "longname": "<anonymous>~overwrite",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2970,
                3031
            ],
            "filename": "GuildChannel.js",
            "lineno": 80,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029789",
                "name": "permission",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "permission",
        "longname": "<anonymous>~permission",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
        "meta": {
            "range": [
                4102,
                4215
            ],
            "filename": "GuildChannel.js",
            "lineno": 98,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029805",
                "name": "GuildChannel#edit",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit the channel's properties",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the channel",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The topic of the channel (guild text channels only)",
                "name": "options.topic"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The bitrate of the channel (guild voice channels only)",
                "name": "options.bitrate"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The channel user limit (guild voice channels only)",
                "name": "options.userLimit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
                "name": "options.rateLimitPerUser"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "The nsfw status of the channel",
                "name": "options.nsfw"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
                "name": "options.parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|TextChannel|VoiceChannel|NewsChannel)>"
                    ]
                }
            }
        ],
        "name": "edit",
        "longname": "GuildChannel#edit",
        "kind": "function",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4437,
                4552
            ],
            "filename": "GuildChannel.js",
            "lineno": 107,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029828",
                "name": "GuildChannel#editPosition",
                "type": "MethodDefinition",
                "paramnames": [
                    "position"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new position of the channel",
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editPosition",
        "longname": "GuildChannel#editPosition",
        "kind": "function",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Delete the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4693,
                4792
            ],
            "filename": "GuildChannel.js",
            "lineno": 116,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029849",
                "name": "GuildChannel#delete",
                "type": "MethodDefinition",
                "paramnames": [
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete the channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "delete",
        "longname": "GuildChannel#delete",
        "kind": "function",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<PermissionOverwrite>}\n    */",
        "meta": {
            "range": [
                5273,
                5452
            ],
            "filename": "GuildChannel.js",
            "lineno": 129,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029870",
                "name": "GuildChannel#editPermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "overwriteID",
                    "allow",
                    "deny",
                    "type",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a channel permission overwrite",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for allowed permissions",
                "name": "allow"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for denied permissions",
                "name": "deny"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The object type of the overwrite, either \"member\" or \"role\"",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<PermissionOverwrite>"
                    ]
                }
            }
        ],
        "name": "editPermission",
        "longname": "GuildChannel#editPermission",
        "kind": "function",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                5683,
                5828
            ],
            "filename": "GuildChannel.js",
            "lineno": 139,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029899",
                "name": "GuildChannel#deletePermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "overwriteID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a channel permission overwrite",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deletePermission",
        "longname": "GuildChannel#deletePermission",
        "kind": "function",
        "memberof": "GuildChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5834,
                6047
            ],
            "filename": "GuildChannel.js",
            "lineno": 143,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029922",
                "name": "GuildChannel#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "GuildChannel#toJSON",
        "kind": "function",
        "memberof": "GuildChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6051,
                6080
            ],
            "filename": "GuildChannel.js",
            "lineno": 155,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029943",
                "name": "module.exports",
                "type": "Identifier",
                "value": "GuildChannel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "GuildIntegration.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029953",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild integration\n* @prop {String} id The ID of the integration\n* @prop {Number} createdAt Timestamp of the guild integration's creation\n* @prop {String} name The name of the integration\n* @prop {String} type The type of the integration\n* @prop {String} roleID The ID of the role connected to the integration\n* @prop {User} user The user connected to the integration\n* @prop {Object} account Info on the integration account\n* @prop {String} account.id The ID of the integration account\n* @prop {String} account.name The name of the integration account\n* @prop {Boolean} enabled Whether the integration is enabled or not\n* @prop {Boolean} syncing Whether the integration is syncing or not\n* @prop {Number} expireBehavior behavior of expired subscriptions\n* @prop {Number} expireGracePeriod grace period for expired subscriptions\n* @prop {Boolean} enableEmoticons Whether integration emoticons are enabled or not\n* @prop {Number} subscriberCount number of subscribers\n* @prop {Number} syncedAt Unix timestamp of last integration sync\n*/",
        "meta": {
            "range": [
                1102,
                3274
            ],
            "filename": "GuildIntegration.js",
            "lineno": 24,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029958",
                "name": "GuildIntegration",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "guild"
                ]
            }
        },
        "classdesc": "Represents a guild integration",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of the guild integration's creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the integration",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The type of the integration",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role connected to the integration",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The user connected to the integration",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Info on the integration account",
                "name": "account"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration account",
                "name": "account.id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the integration account",
                "name": "account.name"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the integration is enabled or not",
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the integration is syncing or not",
                "name": "syncing"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "behavior of expired subscriptions",
                "name": "expireBehavior"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "grace period for expired subscriptions",
                "name": "expireGracePeriod"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether integration emoticons are enabled or not",
                "name": "enableEmoticons"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "number of subscribers",
                "name": "subscriberCount"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Unix timestamp of last integration sync",
                "name": "syncedAt"
            }
        ],
        "name": "GuildIntegration",
        "longname": "GuildIntegration",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1144,
                1503
            ],
            "filename": "GuildIntegration.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029962",
                "name": "GuildIntegration",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "guild"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "GuildIntegration",
        "longname": "GuildIntegration",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild integration\n* @prop {String} id The ID of the integration\n* @prop {Number} createdAt Timestamp of the guild integration's creation\n* @prop {String} name The name of the integration\n* @prop {String} type The type of the integration\n* @prop {String} roleID The ID of the role connected to the integration\n* @prop {User} user The user connected to the integration\n* @prop {Object} account Info on the integration account\n* @prop {String} account.id The ID of the integration account\n* @prop {String} account.name The name of the integration account\n* @prop {Boolean} enabled Whether the integration is enabled or not\n* @prop {Boolean} syncing Whether the integration is syncing or not\n* @prop {Number} expireBehavior behavior of expired subscriptions\n* @prop {Number} expireGracePeriod grace period for expired subscriptions\n* @prop {Boolean} enableEmoticons Whether integration emoticons are enabled or not\n* @prop {Number} subscriberCount number of subscribers\n* @prop {Number} syncedAt Unix timestamp of last integration sync\n*/",
        "meta": {
            "range": [
                1102,
                3274
            ],
            "filename": "GuildIntegration.js",
            "lineno": 24,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029958",
                "name": "GuildIntegration",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "guild"
                ]
            }
        },
        "name": "GuildIntegration",
        "longname": "GuildIntegration",
        "kind": "class",
        "classdesc": "Represents a guild integration",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of the guild integration's creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the integration",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The type of the integration",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role connected to the integration",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The user connected to the integration",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Info on the integration account",
                "name": "account"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration account",
                "name": "account.id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the integration account",
                "name": "account.name"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the integration is enabled or not",
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the integration is syncing or not",
                "name": "syncing"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "behavior of expired subscriptions",
                "name": "expireBehavior"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "grace period for expired subscriptions",
                "name": "expireGracePeriod"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether integration emoticons are enabled or not",
                "name": "enableEmoticons"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "number of subscribers",
                "name": "subscriberCount"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Unix timestamp of last integration sync",
                "name": "syncedAt"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1203,
                1221
            ],
            "filename": "GuildIntegration.js",
            "lineno": 27,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029975",
                "name": "this.guild",
                "type": "Identifier",
                "value": "guild",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "GuildIntegration#guild",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1231,
                1252
            ],
            "filename": "GuildIntegration.js",
            "lineno": 28,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029981",
                "name": "this.name",
                "type": "MemberExpression",
                "value": "data.name",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "GuildIntegration#name",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1262,
                1283
            ],
            "filename": "GuildIntegration.js",
            "lineno": 29,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029989",
                "name": "this.type",
                "type": "MemberExpression",
                "value": "data.type",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "GuildIntegration#type",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1293,
                1319
            ],
            "filename": "GuildIntegration.js",
            "lineno": 30,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029997",
                "name": "this.roleID",
                "type": "MemberExpression",
                "value": "data.role_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "roleID",
        "longname": "GuildIntegration#roleID",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1329,
                1400
            ],
            "filename": "GuildIntegration.js",
            "lineno": 31,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030005",
                "name": "this.user",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "GuildIntegration#user",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1410,
                1437
            ],
            "filename": "GuildIntegration.js",
            "lineno": 32,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030028",
                "name": "this.account",
                "type": "MemberExpression",
                "value": "data.account",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "account",
        "longname": "GuildIntegration#account",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1509,
                1862
            ],
            "filename": "GuildIntegration.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030041",
                "name": "GuildIntegration#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "GuildIntegration#update",
        "kind": "function",
        "memberof": "GuildIntegration",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1532,
                1559
            ],
            "filename": "GuildIntegration.js",
            "lineno": 37,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030047",
                "name": "this.enabled",
                "type": "MemberExpression",
                "value": "data.enabled",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "enabled",
        "longname": "GuildIntegration#enabled",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1569,
                1596
            ],
            "filename": "GuildIntegration.js",
            "lineno": 38,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030055",
                "name": "this.syncing",
                "type": "MemberExpression",
                "value": "data.syncing",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "syncing",
        "longname": "GuildIntegration#syncing",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1606,
                1648
            ],
            "filename": "GuildIntegration.js",
            "lineno": 39,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030063",
                "name": "this.expireBehavior",
                "type": "MemberExpression",
                "value": "data.expire_behavior",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "expireBehavior",
        "longname": "GuildIntegration#expireBehavior",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1658,
                1707
            ],
            "filename": "GuildIntegration.js",
            "lineno": 40,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030071",
                "name": "this.expireGracePeriod",
                "type": "MemberExpression",
                "value": "data.expire_grace_period",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "expireGracePeriod",
        "longname": "GuildIntegration#expireGracePeriod",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1717,
                1761
            ],
            "filename": "GuildIntegration.js",
            "lineno": 41,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030079",
                "name": "this.enableEmoticons",
                "type": "MemberExpression",
                "value": "data.enable_emoticons",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "enableEmoticons",
        "longname": "GuildIntegration#enableEmoticons",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1771,
                1815
            ],
            "filename": "GuildIntegration.js",
            "lineno": 42,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030087",
                "name": "this.subscriberCount",
                "type": "MemberExpression",
                "value": "data.subscriber_count",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "subscriberCount",
        "longname": "GuildIntegration#subscriberCount",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1825,
                1855
            ],
            "filename": "GuildIntegration.js",
            "lineno": 43,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030095",
                "name": "this.syncedAt",
                "type": "MemberExpression",
                "value": "data.synced_at",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "syncedAt",
        "longname": "GuildIntegration#syncedAt",
        "kind": "member",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Edit the guild integration\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.expireBehavior] What to do when a user's subscription runs out\n    * @arg {String} [options.expireGracePeriod] How long before the integration's role is removed from an unsubscribed user\n    * @arg {String} [options.enableEmoticons] Whether to enable integration emoticons or not\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                2301,
                2446
            ],
            "filename": "GuildIntegration.js",
            "lineno": 54,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030102",
                "name": "GuildIntegration#edit",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit the guild integration",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "What to do when a user's subscription runs out",
                "name": "options.expireBehavior"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "How long before the integration's role is removed from an unsubscribed user",
                "name": "options.expireGracePeriod"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Whether to enable integration emoticons or not",
                "name": "options.enableEmoticons"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "edit",
        "longname": "GuildIntegration#edit",
        "kind": "function",
        "memberof": "GuildIntegration",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Delete the guild integration\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                2527,
                2660
            ],
            "filename": "GuildIntegration.js",
            "lineno": 62,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030136",
                "name": "GuildIntegration#delete",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete the guild integration",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "delete",
        "longname": "GuildIntegration#delete",
        "kind": "function",
        "memberof": "GuildIntegration",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Force the guild integration to sync\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                2748,
                2877
            ],
            "filename": "GuildIntegration.js",
            "lineno": 70,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030168",
                "name": "GuildIntegration#sync",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Force the guild integration to sync",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "sync",
        "longname": "GuildIntegration#sync",
        "kind": "function",
        "memberof": "GuildIntegration",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2883,
                3272
            ],
            "filename": "GuildIntegration.js",
            "lineno": 74,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030200",
                "name": "GuildIntegration#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "GuildIntegration#toJSON",
        "kind": "function",
        "memberof": "GuildIntegration",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3276,
                3309
            ],
            "filename": "GuildIntegration.js",
            "lineno": 93,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030228",
                "name": "module.exports",
                "type": "Identifier",
                "value": "GuildIntegration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "GuildPreview.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030238",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53,
                96
            ],
            "filename": "GuildPreview.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030244",
                "name": "Endpoints",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Endpoints",
        "longname": "Endpoints",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a GuildPreview structure\n* @extends Base\n* @prop {String} id The ID of the guild\n* @prop {String} name The name of the guild\n\n* @prop {String?} icon The hash of the guild icon, or null if no icon\n* @prop {String?} description The description for the guild (VIP only)\n* @prop {String?} splash The hash of the guild splash image, or null if no splash (VIP only)\n* @prop {String?} discoverySplash The description for the guild (VIP only)\n* @prop {String[]} features An array of guild feature strings\n* @prop {Number} approximateMemberCount The **approximate** number of members in the guild\n* @prop {Number} approximatePresenceCount The **approximate** number of presences in the guild\n* @prop {Object[]} emojis An array of guild emoji objects\n* @prop {String?} iconURL The URL of the guild's icon\n*/",
        "meta": {
            "range": [
                914,
                2986
            ],
            "filename": "GuildPreview.js",
            "lineno": 22,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030249",
                "name": "GuildPreview",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "Represents a GuildPreview structure",
        "augments": [
            "Base"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the guild",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild icon, or null if no icon",
                "name": "icon"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The description for the guild (VIP only)",
                "name": "description"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild splash image, or null if no splash (VIP only)",
                "name": "splash"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The description for the guild (VIP only)",
                "name": "discoverySplash"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "An array of guild feature strings",
                "name": "features"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The **approximate** number of members in the guild",
                "name": "approximateMemberCount"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The **approximate** number of presences in the guild",
                "name": "approximatePresenceCount"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "An array of guild emoji objects",
                "name": "emojis"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The URL of the guild's icon",
                "name": "iconURL"
            }
        ],
        "name": "GuildPreview",
        "longname": "GuildPreview",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                952,
                1452
            ],
            "filename": "GuildPreview.js",
            "lineno": 23,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030253",
                "name": "GuildPreview",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "GuildPreview",
        "longname": "GuildPreview",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a GuildPreview structure\n* @extends Base\n* @prop {String} id The ID of the guild\n* @prop {String} name The name of the guild\n\n* @prop {String?} icon The hash of the guild icon, or null if no icon\n* @prop {String?} description The description for the guild (VIP only)\n* @prop {String?} splash The hash of the guild splash image, or null if no splash (VIP only)\n* @prop {String?} discoverySplash The description for the guild (VIP only)\n* @prop {String[]} features An array of guild feature strings\n* @prop {Number} approximateMemberCount The **approximate** number of members in the guild\n* @prop {Number} approximatePresenceCount The **approximate** number of presences in the guild\n* @prop {Object[]} emojis An array of guild emoji objects\n* @prop {String?} iconURL The URL of the guild's icon\n*/",
        "meta": {
            "range": [
                914,
                2986
            ],
            "filename": "GuildPreview.js",
            "lineno": 22,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030249",
                "name": "GuildPreview",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "GuildPreview",
        "longname": "GuildPreview",
        "kind": "class",
        "classdesc": "Represents a GuildPreview structure",
        "augments": [
            "Base"
        ],
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the guild",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild icon, or null if no icon",
                "name": "icon"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The description for the guild (VIP only)",
                "name": "description"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild splash image, or null if no splash (VIP only)",
                "name": "splash"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The description for the guild (VIP only)",
                "name": "discoverySplash"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "An array of guild feature strings",
                "name": "features"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The **approximate** number of members in the guild",
                "name": "approximateMemberCount"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The **approximate** number of presences in the guild",
                "name": "approximatePresenceCount"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "An array of guild emoji objects",
                "name": "emojis"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The URL of the guild's icon",
                "name": "iconURL"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1012,
                1033
            ],
            "filename": "GuildPreview.js",
            "lineno": 25,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030266",
                "name": "this._client",
                "type": "Identifier",
                "value": "client",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_client",
        "longname": "GuildPreview#_client",
        "kind": "member",
        "memberof": "GuildPreview",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1044,
                1065
            ],
            "filename": "GuildPreview.js",
            "lineno": 27,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030272",
                "name": "this.name",
                "type": "MemberExpression",
                "value": "data.name",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "GuildPreview#name",
        "kind": "member",
        "memberof": "GuildPreview",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1075,
                1096
            ],
            "filename": "GuildPreview.js",
            "lineno": 28,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030280",
                "name": "this.icon",
                "type": "MemberExpression",
                "value": "data.icon",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "icon",
        "longname": "GuildPreview#icon",
        "kind": "member",
        "memberof": "GuildPreview",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1106,
                1141
            ],
            "filename": "GuildPreview.js",
            "lineno": 29,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030288",
                "name": "this.description",
                "type": "MemberExpression",
                "value": "data.description",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "description",
        "longname": "GuildPreview#description",
        "kind": "member",
        "memberof": "GuildPreview",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1151,
                1176
            ],
            "filename": "GuildPreview.js",
            "lineno": 30,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030296",
                "name": "this.splash",
                "type": "MemberExpression",
                "value": "data.splash",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "splash",
        "longname": "GuildPreview#splash",
        "kind": "member",
        "memberof": "GuildPreview",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1186,
                1229
            ],
            "filename": "GuildPreview.js",
            "lineno": 31,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030304",
                "name": "this.discoverySplah",
                "type": "MemberExpression",
                "value": "data.discovery_splash",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "discoverySplah",
        "longname": "GuildPreview#discoverySplah",
        "kind": "member",
        "memberof": "GuildPreview",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1239,
                1268
            ],
            "filename": "GuildPreview.js",
            "lineno": 32,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030312",
                "name": "this.features",
                "type": "MemberExpression",
                "value": "data.features",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "features",
        "longname": "GuildPreview#features",
        "kind": "member",
        "memberof": "GuildPreview",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1278,
                1337
            ],
            "filename": "GuildPreview.js",
            "lineno": 33,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030320",
                "name": "this.approximateMemberCount",
                "type": "MemberExpression",
                "value": "data.approximate_member_count",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "approximateMemberCount",
        "longname": "GuildPreview#approximateMemberCount",
        "kind": "member",
        "memberof": "GuildPreview",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1347,
                1410
            ],
            "filename": "GuildPreview.js",
            "lineno": 34,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030328",
                "name": "this.approximatePresenceCount",
                "type": "MemberExpression",
                "value": "data.approximate_presence_count",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "approximatePresenceCount",
        "longname": "GuildPreview#approximatePresenceCount",
        "kind": "member",
        "memberof": "GuildPreview",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1420,
                1445
            ],
            "filename": "GuildPreview.js",
            "lineno": 35,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030336",
                "name": "this.emojis",
                "type": "MemberExpression",
                "value": "data.emojis",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "emojis",
        "longname": "GuildPreview#emojis",
        "kind": "member",
        "memberof": "GuildPreview",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1458,
                1582
            ],
            "filename": "GuildPreview.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030343",
                "name": "GuildPreview#iconURL",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "iconURL",
        "longname": "GuildPreview#iconURL",
        "kind": "member",
        "memberof": "GuildPreview",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1588,
                1720
            ],
            "filename": "GuildPreview.js",
            "lineno": 42,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030369",
                "name": "GuildPreview#splashURL",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "splashURL",
        "longname": "GuildPreview#splashURL",
        "kind": "member",
        "memberof": "GuildPreview",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get the guild's icon with the given format and size\n    * @arg {String} [format] The filetype of the icon (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")\n    * @arg {Number} [size] The size of the icon (any power of two between 16 and 4096)\n    */",
        "meta": {
            "range": [
                1981,
                2134
            ],
            "filename": "GuildPreview.js",
            "lineno": 51,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030395",
                "name": "GuildPreview#dynamicIconURL",
                "type": "MethodDefinition",
                "paramnames": [
                    "format",
                    "size"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the guild's icon with the given format and size",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The filetype of the icon (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")",
                "name": "format"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The size of the icon (any power of two between 16 and 4096)",
                "name": "size"
            }
        ],
        "name": "dynamicIconURL",
        "longname": "GuildPreview#dynamicIconURL",
        "kind": "function",
        "memberof": "GuildPreview",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get the guild's splash with the given format and size\n    * @arg {String} [format] The filetype of the icon (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")\n    * @param {Number} [size] The size of the icon (any power of two between 16 and 4096)\n    */",
        "meta": {
            "range": [
                2399,
                2560
            ],
            "filename": "GuildPreview.js",
            "lineno": 60,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030425",
                "name": "GuildPreview#dynamicSplashURL",
                "type": "MethodDefinition",
                "paramnames": [
                    "format",
                    "size"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the guild's splash with the given format and size",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The filetype of the icon (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")",
                "name": "format"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The size of the icon (any power of two between 16 and 4096)",
                "name": "size"
            }
        ],
        "name": "dynamicSplashURL",
        "longname": "GuildPreview#dynamicSplashURL",
        "kind": "function",
        "memberof": "GuildPreview",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2566,
                2628
            ],
            "filename": "GuildPreview.js",
            "lineno": 64,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030455",
                "name": "GuildPreview#toString",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "GuildPreview#toString",
        "kind": "function",
        "memberof": "GuildPreview",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2634,
                2984
            ],
            "filename": "GuildPreview.js",
            "lineno": 68,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030466",
                "name": "GuildPreview#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "GuildPreview#toJSON",
        "kind": "function",
        "memberof": "GuildPreview",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2988,
                3017
            ],
            "filename": "GuildPreview.js",
            "lineno": 85,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030492",
                "name": "module.exports",
                "type": "Identifier",
                "value": "GuildPreview",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "Invite.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030502",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents an invite. Some properties are only available when fetching invites from channels, which requires the Manage Channel permission.\n* @prop {String} code The invite code\n* @prop {Object} channel Info on the invite channel\n* @prop {String} channel.id The ID of the invite's channel\n* @prop {String?} channel.name The name of the invite's channel\n* @prop {Number} channel.type The type of the invite's channel\n* @prop {String?} channel.icon The icon of a channel (group dm)\n* @prop {Object?} guild Info on the invite guild\n* @prop {String} guild.id The ID of the invite's guild\n* @prop {String} guild.name The name of the invite's guild\n* @prop {String?} guild.splash The hash of the invite splash screen\n* @prop {String?} guild.banner The hash of the guild banner\n* @prop {String?} guild.description The description of the invite's guild\n* @prop {String?} guild.icon The hash of the guild icon\n* @prop {String[]} guild.features An array of the invite's guild's features\n* @prop {Number?} guild.verificationLevel The verification level of the invite's guild\n* @prop {String?} guild.vanityUrlCode The vanity url of the invite's guild\n* @prop {User?} inviter The invite creator\n* @prop {Number?} uses The number of invite uses\n* @prop {Number?} maxUses The max number of invite uses\n* @prop {Number?} maxAge How long the invite lasts in seconds\n* @prop {Boolean?} temporary Whether the invite grants temporary membership or not\n* @prop {Number?} createdAt Timestamp of invite creation\n* @prop {Number?} presenceCount The **approximate** presence count for the guild\n* @prop {Number?} memberCount The **approximate** member count for the guild\n*/",
        "meta": {
            "range": [
                1704,
                3811
            ],
            "filename": "Invite.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030507",
                "name": "Invite",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "Represents an invite. Some properties are only available when fetching invites from channels, which requires the Manage Channel permission.",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The invite code",
                "name": "code"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Info on the invite channel",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the invite's channel",
                "name": "channel.id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The name of the invite's channel",
                "name": "channel.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the invite's channel",
                "name": "channel.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The icon of a channel (group dm)",
                "name": "channel.icon"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "Info on the invite guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the invite's guild",
                "name": "guild.id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the invite's guild",
                "name": "guild.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the invite splash screen",
                "name": "guild.splash"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild banner",
                "name": "guild.banner"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The description of the invite's guild",
                "name": "guild.description"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild icon",
                "name": "guild.icon"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "An array of the invite's guild's features",
                "name": "guild.features"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The verification level of the invite's guild",
                "name": "guild.verificationLevel"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The vanity url of the invite's guild",
                "name": "guild.vanityUrlCode"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "nullable": true,
                "description": "The invite creator",
                "name": "inviter"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The number of invite uses",
                "name": "uses"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The max number of invite uses",
                "name": "maxUses"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "How long the invite lasts in seconds",
                "name": "maxAge"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "nullable": true,
                "description": "Whether the invite grants temporary membership or not",
                "name": "temporary"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "Timestamp of invite creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The **approximate** presence count for the guild",
                "name": "presenceCount"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The **approximate** member count for the guild",
                "name": "memberCount"
            }
        ],
        "name": "Invite",
        "longname": "Invite",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1736,
                3089
            ],
            "filename": "Invite.js",
            "lineno": 33,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030511",
                "name": "Invite",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Invite",
        "longname": "Invite",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents an invite. Some properties are only available when fetching invites from channels, which requires the Manage Channel permission.\n* @prop {String} code The invite code\n* @prop {Object} channel Info on the invite channel\n* @prop {String} channel.id The ID of the invite's channel\n* @prop {String?} channel.name The name of the invite's channel\n* @prop {Number} channel.type The type of the invite's channel\n* @prop {String?} channel.icon The icon of a channel (group dm)\n* @prop {Object?} guild Info on the invite guild\n* @prop {String} guild.id The ID of the invite's guild\n* @prop {String} guild.name The name of the invite's guild\n* @prop {String?} guild.splash The hash of the invite splash screen\n* @prop {String?} guild.banner The hash of the guild banner\n* @prop {String?} guild.description The description of the invite's guild\n* @prop {String?} guild.icon The hash of the guild icon\n* @prop {String[]} guild.features An array of the invite's guild's features\n* @prop {Number?} guild.verificationLevel The verification level of the invite's guild\n* @prop {String?} guild.vanityUrlCode The vanity url of the invite's guild\n* @prop {User?} inviter The invite creator\n* @prop {Number?} uses The number of invite uses\n* @prop {Number?} maxUses The max number of invite uses\n* @prop {Number?} maxAge How long the invite lasts in seconds\n* @prop {Boolean?} temporary Whether the invite grants temporary membership or not\n* @prop {Number?} createdAt Timestamp of invite creation\n* @prop {Number?} presenceCount The **approximate** presence count for the guild\n* @prop {Number?} memberCount The **approximate** member count for the guild\n*/",
        "meta": {
            "range": [
                1704,
                3811
            ],
            "filename": "Invite.js",
            "lineno": 32,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030507",
                "name": "Invite",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "Invite",
        "longname": "Invite",
        "kind": "class",
        "classdesc": "Represents an invite. Some properties are only available when fetching invites from channels, which requires the Manage Channel permission.",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The invite code",
                "name": "code"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Info on the invite channel",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the invite's channel",
                "name": "channel.id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The name of the invite's channel",
                "name": "channel.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the invite's channel",
                "name": "channel.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The icon of a channel (group dm)",
                "name": "channel.icon"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "Info on the invite guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the invite's guild",
                "name": "guild.id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the invite's guild",
                "name": "guild.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the invite splash screen",
                "name": "guild.splash"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild banner",
                "name": "guild.banner"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The description of the invite's guild",
                "name": "guild.description"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild icon",
                "name": "guild.icon"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "An array of the invite's guild's features",
                "name": "guild.features"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The verification level of the invite's guild",
                "name": "guild.verificationLevel"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The vanity url of the invite's guild",
                "name": "guild.vanityUrlCode"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "nullable": true,
                "description": "The invite creator",
                "name": "inviter"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The number of invite uses",
                "name": "uses"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The max number of invite uses",
                "name": "maxUses"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "How long the invite lasts in seconds",
                "name": "maxAge"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "nullable": true,
                "description": "Whether the invite grants temporary membership or not",
                "name": "temporary"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "Timestamp of invite creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The **approximate** presence count for the guild",
                "name": "presenceCount"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The **approximate** member count for the guild",
                "name": "memberCount"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1789,
                1810
            ],
            "filename": "Invite.js",
            "lineno": 35,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030521",
                "name": "this._client",
                "type": "Identifier",
                "value": "client",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_client",
        "longname": "Invite#_client",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1820,
                1841
            ],
            "filename": "Invite.js",
            "lineno": 36,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030527",
                "name": "this.code",
                "type": "MemberExpression",
                "value": "data.code",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "code",
        "longname": "Invite#code",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1851,
                1878
            ],
            "filename": "Invite.js",
            "lineno": 37,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030535",
                "name": "this.channel",
                "type": "MemberExpression",
                "value": "data.channel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "Invite#channel",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1917,
                2368
            ],
            "filename": "Invite.js",
            "lineno": 39,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030548",
                "name": "this.guild",
                "type": "ObjectExpression",
                "value": "{\"id\":\"\",\"name\":\"\",\"splash\":\"\",\"banner\":\"\",\"description\":\"\",\"icon\":\"\",\"features\":\"\",\"verificationLevel\":\"\",\"vanityUrlCode\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "Invite#guild",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1948,
                1965
            ],
            "filename": "Invite.js",
            "lineno": 40,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030553",
                "name": "id",
                "type": "MemberExpression",
                "value": "data.guild.id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "Invite#guild.id",
        "kind": "member",
        "memberof": "Invite#guild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1983,
                2004
            ],
            "filename": "Invite.js",
            "lineno": 41,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030559",
                "name": "name",
                "type": "MemberExpression",
                "value": "data.guild.name"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "Invite#guild.name",
        "kind": "member",
        "memberof": "Invite#guild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2022,
                2047
            ],
            "filename": "Invite.js",
            "lineno": 42,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030565",
                "name": "splash",
                "type": "MemberExpression",
                "value": "data.guild.splash"
            }
        },
        "undocumented": true,
        "name": "splash",
        "longname": "Invite#guild.splash",
        "kind": "member",
        "memberof": "Invite#guild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2065,
                2090
            ],
            "filename": "Invite.js",
            "lineno": 43,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030571",
                "name": "banner",
                "type": "MemberExpression",
                "value": "data.guild.banner"
            }
        },
        "undocumented": true,
        "name": "banner",
        "longname": "Invite#guild.banner",
        "kind": "member",
        "memberof": "Invite#guild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2108,
                2143
            ],
            "filename": "Invite.js",
            "lineno": 44,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030577",
                "name": "description",
                "type": "MemberExpression",
                "value": "data.guild.description"
            }
        },
        "undocumented": true,
        "name": "description",
        "longname": "Invite#guild.description",
        "kind": "member",
        "memberof": "Invite#guild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2161,
                2182
            ],
            "filename": "Invite.js",
            "lineno": 45,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030583",
                "name": "icon",
                "type": "MemberExpression",
                "value": "data.guild.icon"
            }
        },
        "undocumented": true,
        "name": "icon",
        "longname": "Invite#guild.icon",
        "kind": "member",
        "memberof": "Invite#guild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2200,
                2229
            ],
            "filename": "Invite.js",
            "lineno": 46,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030589",
                "name": "features",
                "type": "MemberExpression",
                "value": "data.guild.features"
            }
        },
        "undocumented": true,
        "name": "features",
        "longname": "Invite#guild.features",
        "kind": "member",
        "memberof": "Invite#guild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2247,
                2295
            ],
            "filename": "Invite.js",
            "lineno": 47,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030595",
                "name": "verificationLevel",
                "type": "MemberExpression",
                "value": "data.guild.verification_level"
            }
        },
        "undocumented": true,
        "name": "verificationLevel",
        "longname": "Invite#guild.verificationLevel",
        "kind": "member",
        "memberof": "Invite#guild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2313,
                2354
            ],
            "filename": "Invite.js",
            "lineno": 48,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030601",
                "name": "vanityUrlCode",
                "type": "MemberExpression",
                "value": "data.guild.vanity_url_code"
            }
        },
        "undocumented": true,
        "name": "vanityUrlCode",
        "longname": "Invite#guild.vanityUrlCode",
        "kind": "member",
        "memberof": "Invite#guild",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2419,
                2472
            ],
            "filename": "Invite.js",
            "lineno": 52,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030613",
                "name": "this.inviter",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "inviter",
        "longname": "Invite#inviter",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2492,
                2546
            ],
            "filename": "Invite.js",
            "lineno": 54,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030628",
                "name": "this.uses",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "uses",
        "longname": "Invite#uses",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2556,
                2621
            ],
            "filename": "Invite.js",
            "lineno": 55,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030643",
                "name": "this.maxUses",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "maxUses",
        "longname": "Invite#maxUses",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2631,
                2693
            ],
            "filename": "Invite.js",
            "lineno": 56,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030658",
                "name": "this.maxAge",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "maxAge",
        "longname": "Invite#maxAge",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2703,
                2772
            ],
            "filename": "Invite.js",
            "lineno": 57,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030673",
                "name": "this.temporary",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "temporary",
        "longname": "Invite#temporary",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2782,
                2854
            ],
            "filename": "Invite.js",
            "lineno": 58,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030688",
                "name": "this._createdAt",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_createdAt",
        "longname": "Invite#_createdAt",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2864,
                2971
            ],
            "filename": "Invite.js",
            "lineno": 59,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030703",
                "name": "this.presenceCount",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "presenceCount",
        "longname": "Invite#presenceCount",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2981,
                3082
            ],
            "filename": "Invite.js",
            "lineno": 60,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030718",
                "name": "this.memberCount",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "memberCount",
        "longname": "Invite#memberCount",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3095,
                3150
            ],
            "filename": "Invite.js",
            "lineno": 63,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030732",
                "name": "Invite#createdAt",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "createdAt",
        "longname": "Invite#createdAt",
        "kind": "member",
        "memberof": "Invite",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Delete the invite\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                3290,
                3392
            ],
            "filename": "Invite.js",
            "lineno": 72,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030740",
                "name": "Invite#delete",
                "type": "MethodDefinition",
                "paramnames": [
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete the invite",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "delete",
        "longname": "Invite#delete",
        "kind": "function",
        "memberof": "Invite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3398,
                3456
            ],
            "filename": "Invite.js",
            "lineno": 76,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030761",
                "name": "Invite#toString",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "Invite#toString",
        "kind": "function",
        "memberof": "Invite",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3462,
                3809
            ],
            "filename": "Invite.js",
            "lineno": 80,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030772",
                "name": "Invite#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Invite#toJSON",
        "kind": "function",
        "memberof": "Invite",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3813,
                3836
            ],
            "filename": "Invite.js",
            "lineno": 98,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030799",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Invite",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "Member.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030809",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53,
                89
            ],
            "filename": "Member.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030815",
                "name": "Permission",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Permission",
        "longname": "Permission",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                98,
                109
            ],
            "filename": "Member.js",
            "lineno": 5,
            "columnno": 7,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030823",
                "name": "Permissions",
                "type": "Identifier",
                "value": "Permissions"
            }
        },
        "undocumented": true,
        "name": "Permissions",
        "longname": "Permissions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                144,
                168
            ],
            "filename": "Member.js",
            "lineno": 6,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030829",
                "name": "User",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "User",
        "longname": "User",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                176,
                212
            ],
            "filename": "Member.js",
            "lineno": 7,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030835",
                "name": "VoiceState",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "VoiceState",
        "longname": "VoiceState",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a server member\n* @prop {String} id The ID of the member\n* @prop {String} mention A string that mentions the member\n* @prop {Guild} guild The guild the member is in\n* @prop {Number} joinedAt Timestamp of when the member joined the guild\n* @prop {String} status The member's status. Either \"online\", \"idle\", \"dnd\", or \"offline\"\n* @prop {Object?} clientStatus The member's per-client status\n* @prop {String} clientStatus.web The member's status on web. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"online\" for bots\n* @prop {String} clientStatus.desktop The member's status on desktop. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"offline\" for bots\n* @prop {String} clientStatus.mobile The member's status on mobile. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"offline\" for bots\n* @prop {Object[]?} activities The member's current activities\n* @prop {Object?} game The active game the member is playing\n* @prop {String} game.name The name of the active game\n* @prop {Number} game.type The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)\n* @prop {String?} game.url The url of the active game\n* @prop {VoiceState} voiceState The voice state of the member\n* @prop {String?} nick The server nickname of the member\n* @prop {String[]} roles An array of role IDs this member is a part of\n* @prop {User} user The user object of the member\n* @prop {Permission} permission The guild-wide permissions of the member\n* @prop {String} defaultAvatar The hash for the default avatar of a user if there is no avatar set\n* @prop {Number} createdAt Timestamp of user creation\n* @prop {Boolean} bot Whether the user is an OAuth bot or not\n* @prop {String} username The username of the user\n* @prop {String} discriminator The discriminator of the user\n* @prop {String?} avatar The hash of the user's avatar, or null if no avatar\n* @prop {String} defaultAvatarURL The URL of the user's default avatar\n* @prop {String} avatarURL The URL of the user's avatar which can be either a JPG or GIF\n* @prop {String} staticAvatarURL The URL of the user's avatar (always a JPG)\n* @prop {Number} premiumSince Timestamp of when the member boosted the guild\n*/",
        "meta": {
            "range": [
                2403,
                8945
            ],
            "filename": "Member.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030840",
                "name": "Member",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "guild",
                    "client"
                ]
            }
        },
        "classdesc": "Represents a server member",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the member",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild the member is in",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of when the member joined the guild",
                "name": "joinedAt"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The member's status. Either \"online\", \"idle\", \"dnd\", or \"offline\"",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The member's per-client status",
                "name": "clientStatus"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The member's status on web. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"online\" for bots",
                "name": "clientStatus.web"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The member's status on desktop. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"offline\" for bots",
                "name": "clientStatus.desktop"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The member's status on mobile. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"offline\" for bots",
                "name": "clientStatus.mobile"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "nullable": true,
                "description": "The member's current activities",
                "name": "activities"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The active game the member is playing",
                "name": "game"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the active game",
                "name": "game.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)",
                "name": "game.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The url of the active game",
                "name": "game.url"
            },
            {
                "type": {
                    "names": [
                        "VoiceState"
                    ]
                },
                "description": "The voice state of the member",
                "name": "voiceState"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The server nickname of the member",
                "name": "nick"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "An array of role IDs this member is a part of",
                "name": "roles"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The user object of the member",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Permission"
                    ]
                },
                "description": "The guild-wide permissions of the member",
                "name": "permission"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The hash for the default avatar of a user if there is no avatar set",
                "name": "defaultAvatar"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of user creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the user is an OAuth bot or not",
                "name": "bot"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The username of the user",
                "name": "username"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The discriminator of the user",
                "name": "discriminator"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the user's avatar, or null if no avatar",
                "name": "avatar"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The URL of the user's default avatar",
                "name": "defaultAvatarURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The URL of the user's avatar which can be either a JPG or GIF",
                "name": "avatarURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The URL of the user's avatar (always a JPG)",
                "name": "staticAvatarURL"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of when the member boosted the guild",
                "name": "premiumSince"
            }
        ],
        "name": "Member",
        "longname": "Member",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2435,
                3190
            ],
            "filename": "Member.js",
            "lineno": 42,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030844",
                "name": "Member",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "guild",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Member",
        "longname": "Member",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a server member\n* @prop {String} id The ID of the member\n* @prop {String} mention A string that mentions the member\n* @prop {Guild} guild The guild the member is in\n* @prop {Number} joinedAt Timestamp of when the member joined the guild\n* @prop {String} status The member's status. Either \"online\", \"idle\", \"dnd\", or \"offline\"\n* @prop {Object?} clientStatus The member's per-client status\n* @prop {String} clientStatus.web The member's status on web. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"online\" for bots\n* @prop {String} clientStatus.desktop The member's status on desktop. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"offline\" for bots\n* @prop {String} clientStatus.mobile The member's status on mobile. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"offline\" for bots\n* @prop {Object[]?} activities The member's current activities\n* @prop {Object?} game The active game the member is playing\n* @prop {String} game.name The name of the active game\n* @prop {Number} game.type The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)\n* @prop {String?} game.url The url of the active game\n* @prop {VoiceState} voiceState The voice state of the member\n* @prop {String?} nick The server nickname of the member\n* @prop {String[]} roles An array of role IDs this member is a part of\n* @prop {User} user The user object of the member\n* @prop {Permission} permission The guild-wide permissions of the member\n* @prop {String} defaultAvatar The hash for the default avatar of a user if there is no avatar set\n* @prop {Number} createdAt Timestamp of user creation\n* @prop {Boolean} bot Whether the user is an OAuth bot or not\n* @prop {String} username The username of the user\n* @prop {String} discriminator The discriminator of the user\n* @prop {String?} avatar The hash of the user's avatar, or null if no avatar\n* @prop {String} defaultAvatarURL The URL of the user's default avatar\n* @prop {String} avatarURL The URL of the user's avatar which can be either a JPG or GIF\n* @prop {String} staticAvatarURL The URL of the user's avatar (always a JPG)\n* @prop {Number} premiumSince Timestamp of when the member boosted the guild\n*/",
        "meta": {
            "range": [
                2403,
                8945
            ],
            "filename": "Member.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030840",
                "name": "Member",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "guild",
                    "client"
                ]
            }
        },
        "name": "Member",
        "longname": "Member",
        "kind": "class",
        "classdesc": "Represents a server member",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the member",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild the member is in",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of when the member joined the guild",
                "name": "joinedAt"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The member's status. Either \"online\", \"idle\", \"dnd\", or \"offline\"",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The member's per-client status",
                "name": "clientStatus"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The member's status on web. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"online\" for bots",
                "name": "clientStatus.web"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The member's status on desktop. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"offline\" for bots",
                "name": "clientStatus.desktop"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The member's status on mobile. Either \"online\", \"idle\", \"dnd\", or \"offline\". Will be \"offline\" for bots",
                "name": "clientStatus.mobile"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "nullable": true,
                "description": "The member's current activities",
                "name": "activities"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The active game the member is playing",
                "name": "game"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the active game",
                "name": "game.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)",
                "name": "game.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The url of the active game",
                "name": "game.url"
            },
            {
                "type": {
                    "names": [
                        "VoiceState"
                    ]
                },
                "description": "The voice state of the member",
                "name": "voiceState"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The server nickname of the member",
                "name": "nick"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "An array of role IDs this member is a part of",
                "name": "roles"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The user object of the member",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Permission"
                    ]
                },
                "description": "The guild-wide permissions of the member",
                "name": "permission"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The hash for the default avatar of a user if there is no avatar set",
                "name": "defaultAvatar"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of user creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the user is an OAuth bot or not",
                "name": "bot"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The username of the user",
                "name": "username"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The discriminator of the user",
                "name": "discriminator"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the user's avatar, or null if no avatar",
                "name": "avatar"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The URL of the user's default avatar",
                "name": "defaultAvatarURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The URL of the user's avatar which can be either a JPG or GIF",
                "name": "avatarURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The URL of the user's avatar (always a JPG)",
                "name": "staticAvatarURL"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of when the member boosted the guild",
                "name": "premiumSince"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2558,
                2580
            ],
            "filename": "Member.js",
            "lineno": 45,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030874",
                "name": "data.id",
                "type": "MemberExpression",
                "value": "data.user.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "data.id",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2604,
                2622
            ],
            "filename": "Member.js",
            "lineno": 47,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030884",
                "name": "this.guild",
                "type": "Identifier",
                "value": "guild",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "Member#guild",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2639,
                2688
            ],
            "filename": "Member.js",
            "lineno": 48,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030891",
                "name": "this.user",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "Member#user",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2748,
                2819
            ],
            "filename": "Member.js",
            "lineno": 50,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030919",
                "name": "this.user",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "Member#user",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3007,
                3046
            ],
            "filename": "Member.js",
            "lineno": 56,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030961",
                "name": "this.user",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "Member#user",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3077,
                3093
            ],
            "filename": "Member.js",
            "lineno": 58,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030973",
                "name": "this.user",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "Member#user",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3114,
                3130
            ],
            "filename": "Member.js",
            "lineno": 61,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030979",
                "name": "this.game",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "game",
        "longname": "Member#game",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3140,
                3156
            ],
            "filename": "Member.js",
            "lineno": 62,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030985",
                "name": "this.nick",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "nick",
        "longname": "Member#nick",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3196,
                4549
            ],
            "filename": "Member.js",
            "lineno": 66,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100030996",
                "name": "Member#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "Member#update",
        "kind": "function",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3263,
                3288
            ],
            "filename": "Member.js",
            "lineno": 68,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031009",
                "name": "this.status",
                "type": "MemberExpression",
                "value": "data.status",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "Member#status",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3350,
                3371
            ],
            "filename": "Member.js",
            "lineno": 71,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031024",
                "name": "this.game",
                "type": "MemberExpression",
                "value": "data.game",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "game",
        "longname": "Member#game",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3438,
                3480
            ],
            "filename": "Member.js",
            "lineno": 74,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031039",
                "name": "this.joinedAt",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "joinedAt",
        "longname": "Member#joinedAt",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3551,
                3661
            ],
            "filename": "Member.js",
            "lineno": 77,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031058",
                "name": "this.clientStatus",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "clientStatus",
        "longname": "Member#clientStatus",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3586,
                3600
            ],
            "filename": "Member.js",
            "lineno": 77,
            "columnno": 47,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031067",
                "name": "web",
                "type": "Literal",
                "value": "offline"
            }
        },
        "undocumented": true,
        "name": "web",
        "longname": "web",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3602,
                3620
            ],
            "filename": "Member.js",
            "lineno": 77,
            "columnno": 63,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031069",
                "name": "desktop",
                "type": "Literal",
                "value": "offline"
            }
        },
        "undocumented": true,
        "name": "desktop",
        "longname": "desktop",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3622,
                3639
            ],
            "filename": "Member.js",
            "lineno": 77,
            "columnno": 83,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031071",
                "name": "mobile",
                "type": "Literal",
                "value": "offline"
            }
        },
        "undocumented": true,
        "name": "mobile",
        "longname": "mobile",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3729,
                3762
            ],
            "filename": "Member.js",
            "lineno": 80,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031084",
                "name": "this.activities",
                "type": "MemberExpression",
                "value": "data.activities",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "activities",
        "longname": "Member#activities",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3833,
                3871
            ],
            "filename": "Member.js",
            "lineno": 83,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031099",
                "name": "this.premiumSince",
                "type": "MemberExpression",
                "value": "data.premium_since",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "premiumSince",
        "longname": "Member#premiumSince",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3957,
                4000
            ],
            "filename": "Member.js",
            "lineno": 86,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031118",
                "name": "state",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "state",
        "longname": "<anonymous>~state",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4425,
                4446
            ],
            "filename": "Member.js",
            "lineno": 96,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031209",
                "name": "this.nick",
                "type": "MemberExpression",
                "value": "data.nick",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "nick",
        "longname": "Member#nick",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4509,
                4532
            ],
            "filename": "Member.js",
            "lineno": 99,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031224",
                "name": "this.roles",
                "type": "MemberExpression",
                "value": "data.roles",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "roles",
        "longname": "Member#roles",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4555,
                4806
            ],
            "filename": "Member.js",
            "lineno": 103,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031231",
                "name": "Member#voiceState",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "voiceState",
        "longname": "Member#voiceState",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4763,
                4774
            ],
            "filename": "Member.js",
            "lineno": 108,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031269",
                "name": "id",
                "type": "MemberExpression",
                "value": "this.id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4812,
                5550
            ],
            "filename": "Member.js",
            "lineno": 113,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031273",
                "name": "Member#permission",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "permission",
        "longname": "Member#permission",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4961,
                5028
            ],
            "filename": "Member.js",
            "lineno": 117,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031296",
                "name": "permissions",
                "type": "MemberExpression",
                "value": ".permissions.allow"
            }
        },
        "undocumented": true,
        "name": "permissions",
        "longname": "<anonymous>~permissions",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5050,
                5054
            ],
            "filename": "Member.js",
            "lineno": 118,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031317",
                "name": "role"
            }
        },
        "undocumented": true,
        "name": "role",
        "longname": "<anonymous>~role",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5088,
                5121
            ],
            "filename": "Member.js",
            "lineno": 119,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031324",
                "name": "role",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "role",
        "longname": "<anonymous>~role",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5223,
                5234
            ],
            "filename": "Member.js",
            "lineno": 124,
            "columnno": 23,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031343",
                "name": "allow",
                "type": "Identifier",
                "value": "perm"
            }
        },
        "undocumented": true,
        "name": "allow",
        "longname": "allow",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5331,
                5360
            ],
            "filename": "Member.js",
            "lineno": 126,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031356",
                "name": "permissions",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "Permissions.all",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "permissions",
        "longname": "<anonymous>~permissions",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5434,
                5453
            ],
            "filename": "Member.js",
            "lineno": 129,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031364",
                "name": "permissions",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "perm",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "permissions",
        "longname": "<anonymous>~permissions",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5556,
                5613
            ],
            "filename": "Member.js",
            "lineno": 136,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031371",
                "name": "Member#username",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "username",
        "longname": "Member#username",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5619,
                5686
            ],
            "filename": "Member.js",
            "lineno": 140,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031381",
                "name": "Member#discriminator",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "discriminator",
        "longname": "Member#discriminator",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5692,
                5745
            ],
            "filename": "Member.js",
            "lineno": 144,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031391",
                "name": "Member#avatar",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "avatar",
        "longname": "Member#avatar",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5751,
                5798
            ],
            "filename": "Member.js",
            "lineno": 148,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031401",
                "name": "Member#bot",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "bot",
        "longname": "Member#bot",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5804,
                5863
            ],
            "filename": "Member.js",
            "lineno": 152,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031411",
                "name": "Member#createdAt",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "createdAt",
        "longname": "Member#createdAt",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5869,
                5936
            ],
            "filename": "Member.js",
            "lineno": 156,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031421",
                "name": "Member#defaultAvatar",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "defaultAvatar",
        "longname": "Member#defaultAvatar",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5942,
                6015
            ],
            "filename": "Member.js",
            "lineno": 160,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031431",
                "name": "Member#defaultAvatarURL",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "defaultAvatarURL",
        "longname": "Member#defaultAvatarURL",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6021,
                6091
            ],
            "filename": "Member.js",
            "lineno": 164,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031441",
                "name": "Member#staticAvatarURL",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "staticAvatarURL",
        "longname": "Member#staticAvatarURL",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6097,
                6156
            ],
            "filename": "Member.js",
            "lineno": 168,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031451",
                "name": "Member#avatarURL",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "avatarURL",
        "longname": "Member#avatarURL",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6162,
                6216
            ],
            "filename": "Member.js",
            "lineno": 172,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031461",
                "name": "Member#mention",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "mention",
        "longname": "Member#mention",
        "kind": "member",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Edit the guild member\n    * @arg {Object} options The properties to edit\n    * @arg {String[]} [options.roles] The array of role IDs the user should have\n    * @arg {String} [options.nick] Set the user's server nickname, \"\" to remove\n    * @arg {Boolean} [options.mute] Server mute the user\n    * @arg {Boolean} [options.deaf] Server deafen the user\n    * @arg {String} [options.channelID] The ID of the voice channel to move the user to (must be in voice)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                6795,
                6951
            ],
            "filename": "Member.js",
            "lineno": 187,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031472",
                "name": "Member#edit",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit the guild member",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "The array of role IDs the user should have",
                "name": "options.roles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Set the user's server nickname, \"\" to remove",
                "name": "options.nick"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Server mute the user",
                "name": "options.mute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Server deafen the user",
                "name": "options.deaf"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the voice channel to move the user to (must be in voice)",
                "name": "options.channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "edit",
        "longname": "Member#edit",
        "kind": "function",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Add a role to the guild member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                7150,
                7310
            ],
            "filename": "Member.js",
            "lineno": 197,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031508",
                "name": "Member#addRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "roleID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Add a role to the guild member",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "addRole",
        "longname": "Member#addRole",
        "kind": "function",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Remove a role from the guild member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                7514,
                7680
            ],
            "filename": "Member.js",
            "lineno": 207,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031544",
                "name": "Member#removeRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "roleID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove a role from the guild member",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeRole",
        "longname": "Member#removeRole",
        "kind": "function",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Kick the member from the guild\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                7833,
                7971
            ],
            "filename": "Member.js",
            "lineno": 216,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031580",
                "name": "Member#kick",
                "type": "MethodDefinition",
                "paramnames": [
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Kick the member from the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "kick",
        "longname": "Member#kick",
        "kind": "function",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Ban the user from the guild\n    * @arg {Number} [deleteMessageDays=0] Number of days to delete messages for\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                8201,
                8375
            ],
            "filename": "Member.js",
            "lineno": 226,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031614",
                "name": "Member#ban",
                "type": "MethodDefinition",
                "paramnames": [
                    "deleteMessageDays",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Ban the user from the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Number of days to delete messages for",
                "name": "deleteMessageDays"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "ban",
        "longname": "Member#ban",
        "kind": "function",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Unban the user from the guild\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                8527,
                8667
            ],
            "filename": "Member.js",
            "lineno": 235,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031650",
                "name": "Member#unban",
                "type": "MethodDefinition",
                "paramnames": [
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Unban the user from the guild",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "unban",
        "longname": "Member#unban",
        "kind": "function",
        "memberof": "Member",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8673,
                8943
            ],
            "filename": "Member.js",
            "lineno": 239,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031684",
                "name": "Member#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Member#toJSON",
        "kind": "function",
        "memberof": "Member",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8947,
                8970
            ],
            "filename": "Member.js",
            "lineno": 254,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031708",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Member",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "Message.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031718",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53,
                77
            ],
            "filename": "Message.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031724",
                "name": "Call",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Call",
        "longname": "Call",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                86,
                104
            ],
            "filename": "Message.js",
            "lineno": 5,
            "columnno": 7,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031732",
                "name": "SystemJoinMessages",
                "type": "Identifier",
                "value": "SystemJoinMessages"
            }
        },
        "undocumented": true,
        "name": "SystemJoinMessages",
        "longname": "SystemJoinMessages",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                106,
                118
            ],
            "filename": "Message.js",
            "lineno": 5,
            "columnno": 27,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031734",
                "name": "MessageTypes",
                "type": "Identifier",
                "value": "MessageTypes"
            }
        },
        "undocumented": true,
        "name": "MessageTypes",
        "longname": "MessageTypes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                153,
                177
            ],
            "filename": "Message.js",
            "lineno": 6,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031740",
                "name": "User",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "User",
        "longname": "User",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a message\n* @prop {String} id The ID of the message\n* @prop {PrivateChannel | TextChannel | NewsChannel} channel The channel the message is in\n* @prop {String} [guildID] The ID of the guild this message is in (undefined if in DMs)\n* @prop {Number} timestamp Timestamp of message creation\n* @prop {Number} type The type of the message\n* @prop {User} author The message author\n* @prop {Member?} member The message author with server-specific data\n* @prop {User[]} mentions Array of mentioned users\n* @prop {String} content Message content\n* @prop {String?} cleanContent Message content with mentions replaced by names, and @everyone/@here escaped\n* @prop {String[]} roleMentions Array of mentioned roles' ids\n* @prop {String[]} channelMentions Array of mentions channels' ids\n* @prop {Number?} editedTimestamp Timestamp of latest message edit\n* @prop {Boolean} tts Whether to play the message using TTS or not\n* @prop {Boolean} mentionEveryone Whether the message mentions everyone/here or not\n* @prop {Object?} messageReference An object containing the reference to the original message if it is a crossposted message\n* @prop {String} messageReference.messageID The id of the original message this message was crossposted from\n* @prop {String} messageReference.channelID The id of the channel this message was crossposted from\n* @prop {String} messageReference.guildID The id of the guild this message was crossposted from\n* @prop {Number} flags Message flags (see constants)\n* @prop {Object[]} attachments Array of attachments\n* @prop {Object[]} embeds Array of embeds\n* @prop {Object?} activity The activity specified in the message\n* @prop {Object?} application The application of the activity in the message\n* @prop {Object} reactions An object containing the reactions on the message\n* @prop {Number} reactions.count The number of times the reaction was used\n* @prop {String?} webhookID ID of the webhook that sent the message\n* @prop {Boolean} reactions.me Whether or not the bot user did the reaction\n* @prop {Boolean} pinned Whether the message is pinned or not\n* @prop {Command?} command The Command used in the Message, if any (CommandClient only)\n*/",
        "meta": {
            "range": [
                2357,
                16747
            ],
            "filename": "Message.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031745",
                "name": "Message",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "Represents a message",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PrivateChannel",
                        "TextChannel",
                        "NewsChannel"
                    ]
                },
                "description": "The channel the message is in",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the guild this message is in (undefined if in DMs)",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of message creation",
                "name": "timestamp"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the message",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The message author",
                "name": "author"
            },
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "nullable": true,
                "description": "The message author with server-specific data",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "Array.<User>"
                    ]
                },
                "description": "Array of mentioned users",
                "name": "mentions"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Message content",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "Message content with mentions replaced by names, and @everyone/@here escaped",
                "name": "cleanContent"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of mentioned roles' ids",
                "name": "roleMentions"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of mentions channels' ids",
                "name": "channelMentions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "Timestamp of latest message edit",
                "name": "editedTimestamp"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether to play the message using TTS or not",
                "name": "tts"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the message mentions everyone/here or not",
                "name": "mentionEveryone"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "An object containing the reference to the original message if it is a crossposted message",
                "name": "messageReference"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The id of the original message this message was crossposted from",
                "name": "messageReference.messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The id of the channel this message was crossposted from",
                "name": "messageReference.channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The id of the guild this message was crossposted from",
                "name": "messageReference.guildID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Message flags (see constants)",
                "name": "flags"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "Array of attachments",
                "name": "attachments"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "Array of embeds",
                "name": "embeds"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The activity specified in the message",
                "name": "activity"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The application of the activity in the message",
                "name": "application"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "An object containing the reactions on the message",
                "name": "reactions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The number of times the reaction was used",
                "name": "reactions.count"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "ID of the webhook that sent the message",
                "name": "webhookID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether or not the bot user did the reaction",
                "name": "reactions.me"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the message is pinned or not",
                "name": "pinned"
            },
            {
                "type": {
                    "names": [
                        "Command"
                    ]
                },
                "nullable": true,
                "description": "The Command used in the Message, if any (CommandClient only)",
                "name": "command"
            }
        ],
        "name": "Message",
        "longname": "Message",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2390,
                8200
            ],
            "filename": "Message.js",
            "lineno": 42,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031749",
                "name": "Message",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Message",
        "longname": "Message",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a message\n* @prop {String} id The ID of the message\n* @prop {PrivateChannel | TextChannel | NewsChannel} channel The channel the message is in\n* @prop {String} [guildID] The ID of the guild this message is in (undefined if in DMs)\n* @prop {Number} timestamp Timestamp of message creation\n* @prop {Number} type The type of the message\n* @prop {User} author The message author\n* @prop {Member?} member The message author with server-specific data\n* @prop {User[]} mentions Array of mentioned users\n* @prop {String} content Message content\n* @prop {String?} cleanContent Message content with mentions replaced by names, and @everyone/@here escaped\n* @prop {String[]} roleMentions Array of mentioned roles' ids\n* @prop {String[]} channelMentions Array of mentions channels' ids\n* @prop {Number?} editedTimestamp Timestamp of latest message edit\n* @prop {Boolean} tts Whether to play the message using TTS or not\n* @prop {Boolean} mentionEveryone Whether the message mentions everyone/here or not\n* @prop {Object?} messageReference An object containing the reference to the original message if it is a crossposted message\n* @prop {String} messageReference.messageID The id of the original message this message was crossposted from\n* @prop {String} messageReference.channelID The id of the channel this message was crossposted from\n* @prop {String} messageReference.guildID The id of the guild this message was crossposted from\n* @prop {Number} flags Message flags (see constants)\n* @prop {Object[]} attachments Array of attachments\n* @prop {Object[]} embeds Array of embeds\n* @prop {Object?} activity The activity specified in the message\n* @prop {Object?} application The application of the activity in the message\n* @prop {Object} reactions An object containing the reactions on the message\n* @prop {Number} reactions.count The number of times the reaction was used\n* @prop {String?} webhookID ID of the webhook that sent the message\n* @prop {Boolean} reactions.me Whether or not the bot user did the reaction\n* @prop {Boolean} pinned Whether the message is pinned or not\n* @prop {Command?} command The Command used in the Message, if any (CommandClient only)\n*/",
        "meta": {
            "range": [
                2357,
                16747
            ],
            "filename": "Message.js",
            "lineno": 41,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031745",
                "name": "Message",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "Message",
        "longname": "Message",
        "kind": "class",
        "classdesc": "Represents a message",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PrivateChannel",
                        "TextChannel",
                        "NewsChannel"
                    ]
                },
                "description": "The channel the message is in",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the guild this message is in (undefined if in DMs)",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of message creation",
                "name": "timestamp"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the message",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The message author",
                "name": "author"
            },
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "nullable": true,
                "description": "The message author with server-specific data",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "Array.<User>"
                    ]
                },
                "description": "Array of mentioned users",
                "name": "mentions"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Message content",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "Message content with mentions replaced by names, and @everyone/@here escaped",
                "name": "cleanContent"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of mentioned roles' ids",
                "name": "roleMentions"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of mentions channels' ids",
                "name": "channelMentions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "Timestamp of latest message edit",
                "name": "editedTimestamp"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether to play the message using TTS or not",
                "name": "tts"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the message mentions everyone/here or not",
                "name": "mentionEveryone"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "An object containing the reference to the original message if it is a crossposted message",
                "name": "messageReference"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The id of the original message this message was crossposted from",
                "name": "messageReference.messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The id of the channel this message was crossposted from",
                "name": "messageReference.channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The id of the guild this message was crossposted from",
                "name": "messageReference.guildID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Message flags (see constants)",
                "name": "flags"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "Array of attachments",
                "name": "attachments"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "Array of embeds",
                "name": "embeds"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The activity specified in the message",
                "name": "activity"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The application of the activity in the message",
                "name": "application"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "An object containing the reactions on the message",
                "name": "reactions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The number of times the reaction was used",
                "name": "reactions.count"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "ID of the webhook that sent the message",
                "name": "webhookID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether or not the bot user did the reaction",
                "name": "reactions.me"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the message is pinned or not",
                "name": "pinned"
            },
            {
                "type": {
                    "names": [
                        "Command"
                    ]
                },
                "nullable": true,
                "description": "The Command used in the Message, if any (CommandClient only)",
                "name": "command"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2450,
                2471
            ],
            "filename": "Message.js",
            "lineno": 44,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031762",
                "name": "this._client",
                "type": "Identifier",
                "value": "client",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_client",
        "longname": "Message#_client",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2481,
                2507
            ],
            "filename": "Message.js",
            "lineno": 45,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031768",
                "name": "this.type",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "Message#type",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2517,
                2560
            ],
            "filename": "Message.js",
            "lineno": 46,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031778",
                "name": "this.timestamp",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timestamp",
        "longname": "Message#timestamp",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2570,
                2666
            ],
            "filename": "Message.js",
            "lineno": 47,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031790",
                "name": "this.channel",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "Message#channel",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2637,
                2656
            ],
            "filename": "Message.js",
            "lineno": 48,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031803",
                "name": "id",
                "type": "MemberExpression",
                "value": "data.channel_id"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2676,
                2693
            ],
            "filename": "Message.js",
            "lineno": 50,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031808",
                "name": "this.content",
                "type": "Literal",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "Message#content",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2703,
                2724
            ],
            "filename": "Message.js",
            "lineno": 51,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031814",
                "name": "this.hit",
                "type": "UnaryExpression",
                "value": "!!data.hit",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "hit",
        "longname": "Message#hit",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2734,
                2753
            ],
            "filename": "Message.js",
            "lineno": 52,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031824",
                "name": "this.reactions",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reactions",
        "longname": "Message#reactions",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2763,
                2791
            ],
            "filename": "Message.js",
            "lineno": 53,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031830",
                "name": "this.guildID",
                "type": "MemberExpression",
                "value": "data.guild_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildID",
        "longname": "Message#guildID",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2801,
                2833
            ],
            "filename": "Message.js",
            "lineno": 54,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031838",
                "name": "this.webhookID",
                "type": "MemberExpression",
                "value": "data.webhook_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "webhookID",
        "longname": "Message#webhookID",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2885,
                3105
            ],
            "filename": "Message.js",
            "lineno": 57,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031851",
                "name": "this.messageReference",
                "type": "ObjectExpression",
                "value": "{\"messageID\":\"\",\"channelID\":\"\",\"guildID\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "messageReference",
        "longname": "Message#messageReference",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2927,
                2971
            ],
            "filename": "Message.js",
            "lineno": 58,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031856",
                "name": "messageID",
                "type": "MemberExpression",
                "value": "data.message_reference.message_id"
            }
        },
        "undocumented": true,
        "name": "messageID",
        "longname": "Message#messageReference.messageID",
        "kind": "member",
        "memberof": "Message#messageReference",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2989,
                3033
            ],
            "filename": "Message.js",
            "lineno": 59,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031862",
                "name": "channelID",
                "type": "MemberExpression",
                "value": "data.message_reference.channel_id"
            }
        },
        "undocumented": true,
        "name": "channelID",
        "longname": "Message#messageReference.channelID",
        "kind": "member",
        "memberof": "Message#messageReference",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3051,
                3091
            ],
            "filename": "Message.js",
            "lineno": 60,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031868",
                "name": "guildID",
                "type": "MemberExpression",
                "value": "data.message_reference.guild_id"
            }
        },
        "undocumented": true,
        "name": "guildID",
        "longname": "Message#messageReference.guildID",
        "kind": "member",
        "memberof": "Message#messageReference",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3136,
                3164
            ],
            "filename": "Message.js",
            "lineno": 63,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031876",
                "name": "this.messageReference",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "messageReference",
        "longname": "Message#messageReference",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3185,
                3213
            ],
            "filename": "Message.js",
            "lineno": 66,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031882",
                "name": "this.flags",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "flags",
        "longname": "Message#flags",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3313,
                3364
            ],
            "filename": "Message.js",
            "lineno": 70,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031906",
                "name": "this.author",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "author",
        "longname": "Message#author",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3403,
                3446
            ],
            "filename": "Message.js",
            "lineno": 72,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031922",
                "name": "this.author",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "author",
        "longname": "Message#author",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3694,
                3725
            ],
            "filename": "Message.js",
            "lineno": 79,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031965",
                "name": "data.member.id",
                "type": "MemberExpression",
                "value": "this.author.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "data.member.id",
        "kind": "member",
        "memberof": "data.member",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3743,
                3823
            ],
            "filename": "Message.js",
            "lineno": 80,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100031977",
                "name": "this.member",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "Message#member",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3913,
                3973
            ],
            "filename": "Message.js",
            "lineno": 82,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032017",
                "name": "this.member",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "Message#member",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4012,
                4030
            ],
            "filename": "Message.js",
            "lineno": 84,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032038",
                "name": "this.member",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "Message#member",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4095,
                4131
            ],
            "filename": "Message.js",
            "lineno": 88,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032050",
                "name": "this.guildID",
                "type": "MemberExpression",
                "value": "this.channel.guild.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guildID",
        "longname": "Message#guildID",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4176,
                4194
            ],
            "filename": "Message.js",
            "lineno": 91,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032063",
                "name": "this.member",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "Message#member",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4376,
                4448
            ],
            "filename": "Message.js",
            "lineno": 99,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032084",
                "name": "data.content",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4618,
                4675
            ],
            "filename": "Message.js",
            "lineno": 104,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032126",
                "name": "data.content",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4722,
                4800
            ],
            "filename": "Message.js",
            "lineno": 106,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032140",
                "name": "data.content",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5098,
                5120
            ],
            "filename": "Message.js",
            "lineno": 113,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032200",
                "name": "data.call.id",
                "type": "MemberExpression",
                "value": "this.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "data.call.id",
        "kind": "member",
        "memberof": "data.call",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5146,
                5203
            ],
            "filename": "Message.js",
            "lineno": 114,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032210",
                "name": "this.channel.lastCall",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastCall",
        "longname": "Message#channel.lastCall",
        "kind": "member",
        "memberof": "Message#channel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5325,
                5388
            ],
            "filename": "Message.js",
            "lineno": 117,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032240",
                "name": "data.content",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5443,
                5498
            ],
            "filename": "Message.js",
            "lineno": 119,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032254",
                "name": "data.content",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5616,
                5638
            ],
            "filename": "Message.js",
            "lineno": 123,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032276",
                "name": "data.call.id",
                "type": "MemberExpression",
                "value": "this.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "data.call.id",
        "kind": "member",
        "memberof": "data.call",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5664,
                5717
            ],
            "filename": "Message.js",
            "lineno": 124,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032286",
                "name": "this.channel.call",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "call",
        "longname": "Message#channel.call",
        "kind": "member",
        "memberof": "Message#channel",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5761,
                5833
            ],
            "filename": "Message.js",
            "lineno": 126,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032301",
                "name": "data.content",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5959,
                6040
            ],
            "filename": "Message.js",
            "lineno": 131,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032320",
                "name": "data.content",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6148,
                6213
            ],
            "filename": "Message.js",
            "lineno": 135,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032343",
                "name": "data.content",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6324,
                6415
            ],
            "filename": "Message.js",
            "lineno": 139,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032362",
                "name": "data.content",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6521,
                6642
            ],
            "filename": "Message.js",
            "lineno": 143,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032381",
                "name": "data.content",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6762,
                6826
            ],
            "filename": "Message.js",
            "lineno": 147,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032412",
                "name": "data.content",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7093,
                7262
            ],
            "filename": "Message.js",
            "lineno": 153,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032439",
                "name": "data.content",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7369,
                7450
            ],
            "filename": "Message.js",
            "lineno": 157,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032481",
                "name": "data.content",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7567,
                7726
            ],
            "filename": "Message.js",
            "lineno": 161,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032504",
                "name": "data.content",
                "type": "Literal",
                "value": "This server has been removed from Server Discovery because it no longer passes all the requirements. Check `Server Settings` for more details.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7842,
                7946
            ],
            "filename": "Message.js",
            "lineno": 165,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032516",
                "name": "data.content",
                "type": "Literal",
                "value": "This server is eligible for Server Discovery again and has been automatically relisted!",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "data.content",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8206,
                9990
            ],
            "filename": "Message.js",
            "lineno": 177,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032548",
                "name": "Message#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "Message#update",
        "kind": "function",
        "memberof": "Message",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8414,
                8447
            ],
            "filename": "Message.js",
            "lineno": 182,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032587",
                "name": "this.content",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "content",
        "longname": "Message#content",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8461,
                8507
            ],
            "filename": "Message.js",
            "lineno": 183,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032597",
                "name": "this.mentionEveryone",
                "type": "UnaryExpression",
                "value": "!!data.mention_everyone",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mentionEveryone",
        "longname": "Message#mentionEveryone",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8522,
                8898
            ],
            "filename": "Message.js",
            "lineno": 185,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032607",
                "name": "this.mentions",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mentions",
        "longname": "Message#mentions",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8593,
                8633
            ],
            "filename": "Message.js",
            "lineno": 186,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032621",
                "name": "user",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "<anonymous>~user",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8714,
                8744
            ],
            "filename": "Message.js",
            "lineno": 188,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032643",
                "name": "mention.member.id",
                "type": "MemberExpression",
                "value": "mention.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "mention.member.id",
        "kind": "member",
        "memberof": "mention.member",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8913,
                8951
            ],
            "filename": "Message.js",
            "lineno": 194,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032674",
                "name": "this.roleMentions",
                "type": "MemberExpression",
                "value": "data.mention_roles",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "roleMentions",
        "longname": "Message#roleMentions",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9016,
                9043
            ],
            "filename": "Message.js",
            "lineno": 198,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032689",
                "name": "this.pinned",
                "type": "UnaryExpression",
                "value": "!!data.pinned",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pinned",
        "longname": "Message#pinned",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9116,
                9172
            ],
            "filename": "Message.js",
            "lineno": 201,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032706",
                "name": "this.editedTimestamp",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "editedTimestamp",
        "longname": "Message#editedTimestamp",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9233,
                9252
            ],
            "filename": "Message.js",
            "lineno": 204,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032725",
                "name": "this.tts",
                "type": "MemberExpression",
                "value": "data.tts",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "tts",
        "longname": "Message#tts",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9321,
                9356
            ],
            "filename": "Message.js",
            "lineno": 207,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032740",
                "name": "this.attachments",
                "type": "MemberExpression",
                "value": "data.attachments",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "attachments",
        "longname": "Message#attachments",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9420,
                9445
            ],
            "filename": "Message.js",
            "lineno": 210,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032755",
                "name": "this.embeds",
                "type": "MemberExpression",
                "value": "data.embeds",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "embeds",
        "longname": "Message#embeds",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9511,
                9540
            ],
            "filename": "Message.js",
            "lineno": 213,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032770",
                "name": "this.activity",
                "type": "MemberExpression",
                "value": "data.activity",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "activity",
        "longname": "Message#activity",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9609,
                9644
            ],
            "filename": "Message.js",
            "lineno": 216,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032785",
                "name": "this.application",
                "type": "MemberExpression",
                "value": "data.application",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "application",
        "longname": "Message#application",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9753,
                9957
            ],
            "filename": "Message.js",
            "lineno": 221,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032808",
                "name": "this.reactions[undefined]",
                "type": "ObjectExpression",
                "value": "{\"count\":\"\",\"me\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reactions[undefined]",
        "longname": "Message#reactions[undefined]",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9881,
                9902
            ],
            "filename": "Message.js",
            "lineno": 222,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032839",
                "name": "count",
                "type": "MemberExpression",
                "value": "reaction.count"
            }
        },
        "undocumented": true,
        "name": "count",
        "longname": "Message#reactions[undefined].count",
        "kind": "member",
        "memberof": "Message#reactions[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9924,
                9939
            ],
            "filename": "Message.js",
            "lineno": 223,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032843",
                "name": "me",
                "type": "MemberExpression",
                "value": "reaction.me"
            }
        },
        "undocumented": true,
        "name": "me",
        "longname": "Message#reactions[undefined].me",
        "kind": "member",
        "memberof": "Message#reactions[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9996,
                11768
            ],
            "filename": "Message.js",
            "lineno": 229,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032847",
                "name": "Message#cleanContent",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "cleanContent",
        "longname": "Message#cleanContent",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10029,
                10090
            ],
            "filename": "Message.js",
            "lineno": 230,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032852",
                "name": "cleanContent",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "cleanContent",
        "longname": "<anonymous>~cleanContent",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10105,
                10138
            ],
            "filename": "Message.js",
            "lineno": 232,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032863",
                "name": "authorName",
                "type": "MemberExpression",
                "value": "this.author.username"
            }
        },
        "undocumented": true,
        "name": "authorName",
        "longname": "<anonymous>~authorName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10191,
                10246
            ],
            "filename": "Message.js",
            "lineno": 234,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032878",
                "name": "member",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10304,
                10328
            ],
            "filename": "Message.js",
            "lineno": 236,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032903",
                "name": "authorName",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "member.nick",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "authorName",
        "longname": "<anonymous>~authorName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10362,
                10458
            ],
            "filename": "Message.js",
            "lineno": 239,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032909",
                "name": "cleanContent",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cleanContent",
        "longname": "<anonymous>~cleanContent",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10605,
                10656
            ],
            "filename": "Message.js",
            "lineno": 244,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032952",
                "name": "member",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "member",
        "longname": "<anonymous>~member",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10730,
                10823
            ],
            "filename": "Message.js",
            "lineno": 246,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032975",
                "name": "cleanContent",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cleanContent",
        "longname": "<anonymous>~cleanContent",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10881,
                10979
            ],
            "filename": "Message.js",
            "lineno": 249,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100032996",
                "name": "cleanContent",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cleanContent",
        "longname": "<anonymous>~cleanContent",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11084,
                11090
            ],
            "filename": "Message.js",
            "lineno": 254,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033029",
                "name": "roleID"
            }
        },
        "undocumented": true,
        "name": "roleID",
        "longname": "<anonymous>~roleID",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11137,
                11180
            ],
            "filename": "Message.js",
            "lineno": 255,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033036",
                "name": "role",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "role",
        "longname": "<anonymous>~role",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11204,
                11248
            ],
            "filename": "Message.js",
            "lineno": 256,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033050",
                "name": "roleName",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "roleName",
        "longname": "<anonymous>~roleName",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11266,
                11351
            ],
            "filename": "Message.js",
            "lineno": 257,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033059",
                "name": "cleanContent",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cleanContent",
        "longname": "<anonymous>~cleanContent",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11443,
                11480
            ],
            "filename": "Message.js",
            "lineno": 262,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033086",
                "name": "channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel",
        "longname": "<anonymous>~channel",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11559,
                11631
            ],
            "filename": "Message.js",
            "lineno": 264,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033107",
                "name": "cleanContent",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cleanContent",
        "longname": "<anonymous>~cleanContent",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11774,
                12034
            ],
            "filename": "Message.js",
            "lineno": 271,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033133",
                "name": "Message#channelMentions",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "channelMentions",
        "longname": "Message#channelMentions",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11903,
                12026
            ],
            "filename": "Message.js",
            "lineno": 276,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033147",
                "name": "this._channelMentions",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_channelMentions",
        "longname": "Message#_channelMentions",
        "kind": "member",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Edit the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                13339,
                13455
            ],
            "filename": "Message.js",
            "lineno": 292,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033175",
                "name": "Message#edit",
                "type": "MethodDefinition",
                "paramnames": [
                    "content"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit the message",
        "params": [
            {
                "type": {
                    "names": [
                        "String",
                        "Array",
                        "Object"
                    ]
                },
                "description": "A string, array of strings, or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to filter @everyone/@here or not (overrides default)",
                "name": "content.disableEveryone"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
                "name": "content.flags"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "edit",
        "longname": "Message#edit",
        "kind": "function",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Pin the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                13523,
                13621
            ],
            "filename": "Message.js",
            "lineno": 300,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033201",
                "name": "Message#pin",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Pin the message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "pin",
        "longname": "Message#pin",
        "kind": "function",
        "memberof": "Message",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Unpin the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                13691,
                13793
            ],
            "filename": "Message.js",
            "lineno": 308,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033225",
                "name": "Message#unpin",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Unpin the message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "unpin",
        "longname": "Message#unpin",
        "kind": "function",
        "memberof": "Message",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
        "meta": {
            "range": [
                14206,
                14382
            ],
            "filename": "Message.js",
            "lineno": 320,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033249",
                "name": "Message#getReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "reaction",
                    "limit",
                    "before",
                    "after"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a list of users who reacted with a specific reaction",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 100,
                "description": "The maximum number of users to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users before this user ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users after this user ID",
                "name": "after"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<User>>"
                    ]
                }
            }
        ],
        "name": "getReaction",
        "longname": "Message#getReaction",
        "kind": "function",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                14641,
                14789
            ],
            "filename": "Message.js",
            "lineno": 330,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033281",
                "name": "Message#addReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Add a reaction to a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to react as",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "addReaction",
        "longname": "Message#addReaction",
        "kind": "function",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                15068,
                15222
            ],
            "filename": "Message.js",
            "lineno": 340,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033309",
                "name": "Message#removeReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove a reaction from a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to remove the reaction for",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeReaction",
        "longname": "Message#removeReaction",
        "kind": "function",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Remove all reactions from a message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                15310,
                15432
            ],
            "filename": "Message.js",
            "lineno": 348,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033337",
                "name": "Message#removeReactions",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove all reactions from a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeReactions",
        "longname": "Message#removeReactions",
        "kind": "function",
        "memberof": "Message",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Remove all reactions from a message for a single emoji\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                15652,
                15807
            ],
            "filename": "Message.js",
            "lineno": 357,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033361",
                "name": "Message#removeMessageReactionEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "reaction"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove all reactions from a message for a single emoji",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeMessageReactionEmoji",
        "longname": "Message#removeMessageReactionEmoji",
        "kind": "function",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Delete the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                15948,
                16066
            ],
            "filename": "Message.js",
            "lineno": 366,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033387",
                "name": "Message#delete",
                "type": "MethodDefinition",
                "paramnames": [
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete the message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "delete",
        "longname": "Message#delete",
        "kind": "function",
        "memberof": "Message",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Crosspost (publish) a message to subscribed channels (NewsChannel only)\n     * @returns {Promise<Message>}\n     */",
        "meta": {
            "range": [
                16202,
                16312
            ],
            "filename": "Message.js",
            "lineno": 374,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033413",
                "name": "Message#crosspost",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Crosspost (publish) a message to subscribed channels (NewsChannel only)",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "crosspost",
        "longname": "Message#crosspost",
        "kind": "function",
        "memberof": "Message",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16318,
                16745
            ],
            "filename": "Message.js",
            "lineno": 378,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033437",
                "name": "Message#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Message#toJSON",
        "kind": "function",
        "memberof": "Message",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16749,
                16773
            ],
            "filename": "Message.js",
            "lineno": 399,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033467",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Message",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                59
            ],
            "filename": "NewsChannel.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033477",
                "name": "TextChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "TextChannel",
        "longname": "TextChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild news channel\n* @extends TextChannel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Guild} guild The guild that owns the channel\n* @prop {String?} parentID The ID of the category this channel belongs to\n* @prop {String} name The name of the channel\n* @prop {Number} position The position of the channel\n* @prop {Boolean} nsfw Whether the channel is an NSFW channel or not\n* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel\n* @prop {Collection<Message>} messages Collection of Messages in this channel\n* @prop {String} lastMessageID The ID of the last message in this channel\n* @prop {Number} lastPinTimestamp The timestamp of the last pinned message\n* @prop {String?} topic The topic of the channel\n* @prop {Number} rateLimitPerUser The ratelimit of the channel, in seconds. 0 means no ratelimit is enabled. Always 0 in NewsChannel\n*/",
        "meta": {
            "range": [
                1094,
                1966
            ],
            "filename": "NewsChannel.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033482",
                "name": "NewsChannel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "guild",
                    "messageLimit"
                ]
            }
        },
        "classdesc": "Represents a guild news channel",
        "augments": [
            "TextChannel"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild that owns the channel",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the category this channel belongs to",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the channel",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the channel is an NSFW channel or not",
                "name": "nsfw"
            },
            {
                "type": {
                    "names": [
                        "Collection.<PermissionOverwrite>"
                    ]
                },
                "description": "Collection of PermissionOverwrites in this channel",
                "name": "permissionOverwrites"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Message>"
                    ]
                },
                "description": "Collection of Messages in this channel",
                "name": "messages"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the last message in this channel",
                "name": "lastMessageID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The timestamp of the last pinned message",
                "name": "lastPinTimestamp"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The topic of the channel",
                "name": "topic"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ratelimit of the channel, in seconds. 0 means no ratelimit is enabled. Always 0 in NewsChannel",
                "name": "rateLimitPerUser"
            }
        ],
        "name": "NewsChannel",
        "longname": "NewsChannel",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1138,
                1288
            ],
            "filename": "NewsChannel.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033486",
                "name": "NewsChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "guild",
                    "messageLimit"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "NewsChannel",
        "longname": "NewsChannel",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild news channel\n* @extends TextChannel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Guild} guild The guild that owns the channel\n* @prop {String?} parentID The ID of the category this channel belongs to\n* @prop {String} name The name of the channel\n* @prop {Number} position The position of the channel\n* @prop {Boolean} nsfw Whether the channel is an NSFW channel or not\n* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel\n* @prop {Collection<Message>} messages Collection of Messages in this channel\n* @prop {String} lastMessageID The ID of the last message in this channel\n* @prop {Number} lastPinTimestamp The timestamp of the last pinned message\n* @prop {String?} topic The topic of the channel\n* @prop {Number} rateLimitPerUser The ratelimit of the channel, in seconds. 0 means no ratelimit is enabled. Always 0 in NewsChannel\n*/",
        "meta": {
            "range": [
                1094,
                1966
            ],
            "filename": "NewsChannel.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033482",
                "name": "NewsChannel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "guild",
                    "messageLimit"
                ]
            }
        },
        "name": "NewsChannel",
        "longname": "NewsChannel",
        "kind": "class",
        "classdesc": "Represents a guild news channel",
        "augments": [
            "TextChannel"
        ],
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild that owns the channel",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the category this channel belongs to",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the channel",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the channel is an NSFW channel or not",
                "name": "nsfw"
            },
            {
                "type": {
                    "names": [
                        "Collection.<PermissionOverwrite>"
                    ]
                },
                "description": "Collection of PermissionOverwrites in this channel",
                "name": "permissionOverwrites"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Message>"
                    ]
                },
                "description": "Collection of Messages in this channel",
                "name": "messages"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the last message in this channel",
                "name": "lastMessageID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The timestamp of the last pinned message",
                "name": "lastPinTimestamp"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The topic of the channel",
                "name": "topic"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ratelimit of the channel, in seconds. 0 means no ratelimit is enabled. Always 0 in NewsChannel",
                "name": "rateLimitPerUser"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1229,
                1254
            ],
            "filename": "NewsChannel.js",
            "lineno": 26,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033500",
                "name": "this.rateLimitPerUser",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "rateLimitPerUser",
        "longname": "NewsChannel#rateLimitPerUser",
        "kind": "member",
        "memberof": "NewsChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Crosspost (publish) a message to subscribed channels\n     * @arg {String} messageID The ID of the message\n     * @returns {Promise<Message>}\n     */",
        "meta": {
            "range": [
                1457,
                1575
            ],
            "filename": "NewsChannel.js",
            "lineno": 34,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033511",
                "name": "NewsChannel#crosspostMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Crosspost (publish) a message to subscribed channels",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "crosspostMessage",
        "longname": "NewsChannel#crosspostMessage",
        "kind": "function",
        "memberof": "NewsChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Follow this channel in another channel. This creates a webhook in the target channel\n     * @arg {String} webhookChannelID The ID of the target channel\n     * @returns {Object} An object containing this channel's ID and the new webhook's ID\n     */",
        "meta": {
            "range": [
                1845,
                1964
            ],
            "filename": "NewsChannel.js",
            "lineno": 43,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033532",
                "name": "NewsChannel#follow",
                "type": "MethodDefinition",
                "paramnames": [
                    "webhookChannelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Follow this channel in another channel. This creates a webhook in the target channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target channel",
                "name": "webhookChannelID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "An object containing this channel's ID and the new webhook's ID"
            }
        ],
        "name": "follow",
        "longname": "NewsChannel#follow",
        "kind": "function",
        "memberof": "NewsChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1968,
                1996
            ],
            "filename": "NewsChannel.js",
            "lineno": 48,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033554",
                "name": "module.exports",
                "type": "Identifier",
                "value": "NewsChannel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "Permission.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033564",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                54,
                65
            ],
            "filename": "Permission.js",
            "lineno": 4,
            "columnno": 7,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033572",
                "name": "Permissions",
                "type": "Identifier",
                "value": "Permissions"
            }
        },
        "undocumented": true,
        "name": "Permissions",
        "longname": "Permissions",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n* Represents a calculated permissions number\n* @prop {Number} allow The allowed permissions number\n* @prop {Number} deny The denied permissions number\n* @prop {Object} json A JSON representation of the permissions number.\n* If a permission key isn't there, it is not set by this permission.\n* If a permission key is false, it is denied by the permission.\n* If a permission key is true, it is allowed by the permission.\n* i.e.:\n* {\n*   \"readMessages\": true,\n*   \"sendMessages\": true,\n*   \"manageMessages\": false\n* }\n* In the above example, readMessages and sendMessages are allowed permissions, and manageMessages is denied. Everything else is not explicitly set.\n* [A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)\n*/",
        "meta": {
            "range": [
                863,
                2033
            ],
            "filename": "Permission.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033577",
                "name": "Permission",
                "type": "ClassDeclaration",
                "paramnames": [
                    "allow",
                    "deny"
                ]
            }
        },
        "classdesc": "Represents a calculated permissions number",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The allowed permissions number",
                "name": "allow"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The denied permissions number",
                "name": "deny"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A JSON representation of the permissions number.\nIf a permission key isn't there, it is not set by this permission.\nIf a permission key is false, it is denied by the permission.\nIf a permission key is true, it is allowed by the permission.\ni.e.:\n{\n  \"readMessages\": true,\n  \"sendMessages\": true,\n  \"manageMessages\": false\n}\nIn the above example, readMessages and sendMessages are allowed permissions, and manageMessages is denied. Everything else is not explicitly set.\n[A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)",
                "name": "json"
            }
        ],
        "name": "Permission",
        "longname": "Permission",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                899,
                1006
            ],
            "filename": "Permission.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033581",
                "name": "Permission",
                "type": "MethodDefinition",
                "paramnames": [
                    "allow",
                    "deny"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Permission",
        "longname": "Permission",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a calculated permissions number\n* @prop {Number} allow The allowed permissions number\n* @prop {Number} deny The denied permissions number\n* @prop {Object} json A JSON representation of the permissions number.\n* If a permission key isn't there, it is not set by this permission.\n* If a permission key is false, it is denied by the permission.\n* If a permission key is true, it is allowed by the permission.\n* i.e.:\n* {\n*   \"readMessages\": true,\n*   \"sendMessages\": true,\n*   \"manageMessages\": false\n* }\n* In the above example, readMessages and sendMessages are allowed permissions, and manageMessages is denied. Everything else is not explicitly set.\n* [A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)\n*/",
        "meta": {
            "range": [
                863,
                2033
            ],
            "filename": "Permission.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033577",
                "name": "Permission",
                "type": "ClassDeclaration",
                "paramnames": [
                    "allow",
                    "deny"
                ]
            }
        },
        "name": "Permission",
        "longname": "Permission",
        "kind": "class",
        "classdesc": "Represents a calculated permissions number",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The allowed permissions number",
                "name": "allow"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The denied permissions number",
                "name": "deny"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A JSON representation of the permissions number.\nIf a permission key isn't there, it is not set by this permission.\nIf a permission key is false, it is denied by the permission.\nIf a permission key is true, it is allowed by the permission.\ni.e.:\n{\n  \"readMessages\": true,\n  \"sendMessages\": true,\n  \"manageMessages\": false\n}\nIn the above example, readMessages and sendMessages are allowed permissions, and manageMessages is denied. Everything else is not explicitly set.\n[A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)",
                "name": "json"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                955,
                973
            ],
            "filename": "Permission.js",
            "lineno": 26,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033593",
                "name": "this.allow",
                "type": "Identifier",
                "value": "allow",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "allow",
        "longname": "Permission#allow",
        "kind": "member",
        "memberof": "Permission",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                983,
                999
            ],
            "filename": "Permission.js",
            "lineno": 27,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033599",
                "name": "this.deny",
                "type": "Identifier",
                "value": "deny",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "deny",
        "longname": "Permission#deny",
        "kind": "member",
        "memberof": "Permission",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1012,
                1499
            ],
            "filename": "Permission.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033604",
                "name": "Permission#json",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "json",
        "longname": "Permission#json",
        "kind": "member",
        "memberof": "Permission",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1063,
                1078
            ],
            "filename": "Permission.js",
            "lineno": 32,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033615",
                "name": "this._json",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_json",
        "longname": "Permission#_json",
        "kind": "member",
        "memberof": "Permission",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1102,
                1106
            ],
            "filename": "Permission.js",
            "lineno": 33,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033622",
                "name": "perm"
            }
        },
        "undocumented": true,
        "name": "perm",
        "longname": "<anonymous>~perm",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1265,
                1288
            ],
            "filename": "Permission.js",
            "lineno": 36,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033648",
                "name": "this._json[undefined]",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_json[undefined]",
        "longname": "Permission#_json[undefined]",
        "kind": "member",
        "memberof": "Permission",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1377,
                1401
            ],
            "filename": "Permission.js",
            "lineno": 38,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033665",
                "name": "this._json[undefined]",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_json[undefined]",
        "longname": "Permission#_json[undefined]",
        "kind": "member",
        "memberof": "Permission",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Check if this permission allows a specific permission\n    * @arg {String} permission The name of the permission. [A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)\n    * @returns {Boolean} Whether the permission allows the specified permission\n    */",
        "meta": {
            "range": [
                1815,
                1895
            ],
            "filename": "Permission.js",
            "lineno": 51,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033676",
                "name": "Permission#has",
                "type": "MethodDefinition",
                "paramnames": [
                    "permission"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Check if this permission allows a specific permission",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the permission. [A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)",
                "name": "permission"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the permission allows the specified permission"
            }
        ],
        "name": "has",
        "longname": "Permission#has",
        "kind": "function",
        "memberof": "Permission",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1901,
                2031
            ],
            "filename": "Permission.js",
            "lineno": 55,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033691",
                "name": "Permission#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Permission#toJSON",
        "kind": "function",
        "memberof": "Permission",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2035,
                2062
            ],
            "filename": "Permission.js",
            "lineno": 64,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033709",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Permission",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                57
            ],
            "filename": "PermissionOverwrite.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033719",
                "name": "Permission",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Permission",
        "longname": "Permission",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a permission overwrite\n* @extends Permission\n* @prop {String} id The ID of the overwrite\n* @prop {String} type The type of the overwrite, either \"member\" or \"role\"\n*/",
        "meta": {
            "range": [
                244,
                533
            ],
            "filename": "PermissionOverwrite.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033724",
                "name": "PermissionOverwrite",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data"
                ]
            }
        },
        "classdesc": "Represents a permission overwrite",
        "augments": [
            "Permission"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwrite",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The type of the overwrite, either \"member\" or \"role\"",
                "name": "type"
            }
        ],
        "name": "PermissionOverwrite",
        "longname": "PermissionOverwrite",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                295,
                416
            ],
            "filename": "PermissionOverwrite.js",
            "lineno": 12,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033728",
                "name": "PermissionOverwrite",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "PermissionOverwrite",
        "longname": "PermissionOverwrite",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a permission overwrite\n* @extends Permission\n* @prop {String} id The ID of the overwrite\n* @prop {String} type The type of the overwrite, either \"member\" or \"role\"\n*/",
        "meta": {
            "range": [
                244,
                533
            ],
            "filename": "PermissionOverwrite.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033724",
                "name": "PermissionOverwrite",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data"
                ]
            }
        },
        "name": "PermissionOverwrite",
        "longname": "PermissionOverwrite",
        "kind": "class",
        "classdesc": "Represents a permission overwrite",
        "augments": [
            "Permission"
        ],
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwrite",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The type of the overwrite, either \"member\" or \"role\"",
                "name": "type"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                361,
                378
            ],
            "filename": "PermissionOverwrite.js",
            "lineno": 14,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033743",
                "name": "this.id",
                "type": "MemberExpression",
                "value": "data.id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "PermissionOverwrite#id",
        "kind": "member",
        "memberof": "PermissionOverwrite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                388,
                409
            ],
            "filename": "PermissionOverwrite.js",
            "lineno": 15,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033751",
                "name": "this.type",
                "type": "MemberExpression",
                "value": "data.type",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "PermissionOverwrite#type",
        "kind": "member",
        "memberof": "PermissionOverwrite",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                422,
                531
            ],
            "filename": "PermissionOverwrite.js",
            "lineno": 18,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033758",
                "name": "PermissionOverwrite#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "PermissionOverwrite#toJSON",
        "kind": "function",
        "memberof": "PermissionOverwrite",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                535,
                571
            ],
            "filename": "PermissionOverwrite.js",
            "lineno": 26,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033775",
                "name": "module.exports",
                "type": "Identifier",
                "value": "PermissionOverwrite",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                51
            ],
            "filename": "PrivateChannel.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033785",
                "name": "Channel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Channel",
        "longname": "Channel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                59,
                101
            ],
            "filename": "PrivateChannel.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033791",
                "name": "Collection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Collection",
        "longname": "Collection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                109,
                149
            ],
            "filename": "PrivateChannel.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033797",
                "name": "Endpoints",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Endpoints",
        "longname": "Endpoints",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                157,
                187
            ],
            "filename": "PrivateChannel.js",
            "lineno": 6,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033803",
                "name": "Message",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Message",
        "longname": "Message",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                196,
                210
            ],
            "filename": "PrivateChannel.js",
            "lineno": 7,
            "columnno": 7,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033811",
                "name": "GatewayOPCodes",
                "type": "Identifier",
                "value": "GatewayOPCodes"
            }
        },
        "undocumented": true,
        "name": "GatewayOPCodes",
        "longname": "GatewayOPCodes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                212,
                224
            ],
            "filename": "PrivateChannel.js",
            "lineno": 7,
            "columnno": 23,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033813",
                "name": "ChannelTypes",
                "type": "Identifier",
                "value": "ChannelTypes"
            }
        },
        "undocumented": true,
        "name": "ChannelTypes",
        "longname": "ChannelTypes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                259,
                283
            ],
            "filename": "PrivateChannel.js",
            "lineno": 8,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033819",
                "name": "User",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "User",
        "longname": "User",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a private channel\n* @extends Channel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {String} lastMessageID The ID of the last message in this channel\n* @prop {User} recipient The recipient in this private channel (private channels only)\n* @prop {Collection<Message>} messages Collection of Messages in this channel\n*/",
        "meta": {
            "range": [
                730,
                8808
            ],
            "filename": "PrivateChannel.js",
            "lineno": 20,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033824",
                "name": "PrivateChannel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "Represents a private channel",
        "augments": [
            "Channel"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the last message in this channel",
                "name": "lastMessageID"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The recipient in this private channel (private channels only)",
                "name": "recipient"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Message>"
                    ]
                },
                "description": "Collection of Messages in this channel",
                "name": "messages"
            }
        ],
        "name": "PrivateChannel",
        "longname": "PrivateChannel",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                773,
                1212
            ],
            "filename": "PrivateChannel.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033828",
                "name": "PrivateChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "PrivateChannel",
        "longname": "PrivateChannel",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a private channel\n* @extends Channel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {String} lastMessageID The ID of the last message in this channel\n* @prop {User} recipient The recipient in this private channel (private channels only)\n* @prop {Collection<Message>} messages Collection of Messages in this channel\n*/",
        "meta": {
            "range": [
                730,
                8808
            ],
            "filename": "PrivateChannel.js",
            "lineno": 20,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033824",
                "name": "PrivateChannel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "PrivateChannel",
        "longname": "PrivateChannel",
        "kind": "class",
        "classdesc": "Represents a private channel",
        "augments": [
            "Channel"
        ],
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the last message in this channel",
                "name": "lastMessageID"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The recipient in this private channel (private channels only)",
                "name": "recipient"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Message>"
                    ]
                },
                "description": "Collection of Messages in this channel",
                "name": "messages"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                838,
                879
            ],
            "filename": "PrivateChannel.js",
            "lineno": 23,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033840",
                "name": "this.lastMessageID",
                "type": "MemberExpression",
                "value": "data.last_message_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastMessageID",
        "longname": "PrivateChannel#lastMessageID",
        "kind": "member",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                889,
                937
            ],
            "filename": "PrivateChannel.js",
            "lineno": 24,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033848",
                "name": "this.rateLimitPerUser",
                "type": "MemberExpression",
                "value": "data.rate_limit_per_user",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "rateLimitPerUser",
        "longname": "PrivateChannel#rateLimitPerUser",
        "kind": "member",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                947,
                979
            ],
            "filename": "PrivateChannel.js",
            "lineno": 25,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033856",
                "name": "this.call",
                "type": "AssignmentExpression",
                "value": "this.lastCall",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "call",
        "longname": "PrivateChannel#call",
        "kind": "member",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                959,
                979
            ],
            "filename": "PrivateChannel.js",
            "lineno": 25,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033860",
                "name": "this.lastCall",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastCall",
        "longname": "PrivateChannel#lastCall",
        "kind": "member",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1064,
                1117
            ],
            "filename": "PrivateChannel.js",
            "lineno": 27,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033881",
                "name": "this.recipient",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "recipient",
        "longname": "PrivateChannel#recipient",
        "kind": "member",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1137,
                1205
            ],
            "filename": "PrivateChannel.js",
            "lineno": 29,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033894",
                "name": "this.messages",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "PrivateChannel#messages",
        "kind": "member",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Ring fellow group channel recipient(s)\n    * @arg {String[]} recipients The IDs of the recipients to ring\n    */",
        "meta": {
            "range": [
                1360,
                1516
            ],
            "filename": "PrivateChannel.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033906",
                "name": "PrivateChannel#ring",
                "type": "MethodDefinition",
                "paramnames": [
                    "recipients"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Ring fellow group channel recipient(s)",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "The IDs of the recipients to ring",
                "name": "recipients"
            }
        ],
        "name": "ring",
        "longname": "PrivateChannel#ring",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1488,
                1498
            ],
            "filename": "PrivateChannel.js",
            "lineno": 38,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033930",
                "name": "recipients",
                "type": "Identifier",
                "value": "recipients"
            }
        },
        "undocumented": true,
        "name": "recipients",
        "longname": "recipients",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Check if the channel has an existing call\n    */",
        "meta": {
            "range": [
                1585,
                1731
            ],
            "filename": "PrivateChannel.js",
            "lineno": 45,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033932",
                "name": "PrivateChannel#syncCall",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Check if the channel has an existing call",
        "name": "syncCall",
        "longname": "PrivateChannel#syncCall",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1694,
                1713
            ],
            "filename": "PrivateChannel.js",
            "lineno": 47,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033957",
                "name": "channel_id",
                "type": "MemberExpression",
                "value": "this.id"
            }
        },
        "undocumented": true,
        "name": "channel_id",
        "longname": "channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Leave the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                1801,
                1885
            ],
            "filename": "PrivateChannel.js",
            "lineno": 55,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033961",
                "name": "PrivateChannel#leave",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Leave the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "leave",
        "longname": "PrivateChannel#leave",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Send typing status in a text channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                1974,
                2067
            ],
            "filename": "PrivateChannel.js",
            "lineno": 63,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033980",
                "name": "PrivateChannel#sendTyping",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Send typing status in a text channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "sendTyping",
        "longname": "PrivateChannel#sendTyping",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get a previous message in a text channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                2221,
                2327
            ],
            "filename": "PrivateChannel.js",
            "lineno": 72,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033999",
                "name": "PrivateChannel#getMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a previous message in a text channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "getMessage",
        "longname": "PrivateChannel#getMessage",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a previous message in a text channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
        "meta": {
            "range": [
                2722,
                2868
            ],
            "filename": "PrivateChannel.js",
            "lineno": 84,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034020",
                "name": "PrivateChannel#getMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "limit",
                    "before",
                    "after",
                    "around"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a previous message in a text channel",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 50,
                "description": "The max number of messages to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages before this message ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages after this message ID",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages around this message ID (does not work with limit > 100)",
                "name": "around"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Message>>"
                    ]
                }
            }
        ],
        "name": "getMessages",
        "longname": "PrivateChannel#getMessages",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get all the pins in a text channel\n    * @returns {Promise<Message[]>}\n    */",
        "meta": {
            "range": [
                2966,
                3046
            ],
            "filename": "PrivateChannel.js",
            "lineno": 92,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034047",
                "name": "PrivateChannel#getPins",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all the pins in a text channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Message>>"
                    ]
                }
            }
        ],
        "name": "getPins",
        "longname": "PrivateChannel#getPins",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Create a message in a text channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user\n    * @arg {String | Object} content A string or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Object} [file] A file object\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                4339,
                4459
            ],
            "filename": "PrivateChannel.js",
            "lineno": 112,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034066",
                "name": "PrivateChannel#createMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "content",
                    "file"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a message in a text channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user",
        "params": [
            {
                "type": {
                    "names": [
                        "String",
                        "Object"
                    ]
                },
                "description": "A string or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Set the message TTS flag",
                "name": "content.tts"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A file object",
                "name": "file"
            },
            {
                "type": {
                    "names": [
                        "Buffer"
                    ]
                },
                "description": "A buffer containing file data",
                "name": "file.file"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "What to name the file",
                "name": "file.name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "createMessage",
        "longname": "PrivateChannel#createMessage",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Edit a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                5814,
                5940
            ],
            "filename": "PrivateChannel.js",
            "lineno": 130,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034089",
                "name": "PrivateChannel#editMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "content"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Array",
                        "Object"
                    ]
                },
                "description": "A string, array of strings, or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to filter @everyone/@here or not (overrides default)",
                "name": "content.disableEveryone"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
                "name": "content.flags"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "editMessage",
        "longname": "PrivateChannel#editMessage",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Pin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                6058,
                6164
            ],
            "filename": "PrivateChannel.js",
            "lineno": 139,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034112",
                "name": "PrivateChannel#pinMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Pin a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "pinMessage",
        "longname": "PrivateChannel#pinMessage",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Unpin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                6284,
                6394
            ],
            "filename": "PrivateChannel.js",
            "lineno": 148,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034133",
                "name": "PrivateChannel#unpinMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Unpin a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "unpinMessage",
        "longname": "PrivateChannel#unpinMessage",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
        "meta": {
            "range": [
                6859,
                7045
            ],
            "filename": "PrivateChannel.js",
            "lineno": 161,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034154",
                "name": "PrivateChannel#getMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction",
                    "limit",
                    "before",
                    "after"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a list of users who reacted with a specific reaction",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 100,
                "description": "The maximum number of users to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users before this user ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users after this user ID",
                "name": "after"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<User>>"
                    ]
                }
            }
        ],
        "name": "getMessageReaction",
        "longname": "PrivateChannel#getMessageReaction",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                7356,
                7514
            ],
            "filename": "PrivateChannel.js",
            "lineno": 172,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034183",
                "name": "PrivateChannel#addMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Add a reaction to a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to react as",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "addMessageReaction",
        "longname": "PrivateChannel#addMessageReaction",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                7845,
                8009
            ],
            "filename": "PrivateChannel.js",
            "lineno": 183,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034208",
                "name": "PrivateChannel#removeMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove a reaction from a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to remove the reaction for",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeMessageReaction",
        "longname": "PrivateChannel#removeMessageReaction",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Delete a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                8200,
                8328
            ],
            "filename": "PrivateChannel.js",
            "lineno": 193,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034233",
                "name": "PrivateChannel#deleteMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteMessage",
        "longname": "PrivateChannel#deleteMessage",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Un-send a message. You're welcome Programmix\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                8477,
                8589
            ],
            "filename": "PrivateChannel.js",
            "lineno": 202,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034256",
                "name": "PrivateChannel#unsendMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Un-send a message. You're welcome Programmix",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "unsendMessage",
        "longname": "PrivateChannel#unsendMessage",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8595,
                8806
            ],
            "filename": "PrivateChannel.js",
            "lineno": 206,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034277",
                "name": "PrivateChannel#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "PrivateChannel#toJSON",
        "kind": "function",
        "memberof": "PrivateChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8810,
                8841
            ],
            "filename": "PrivateChannel.js",
            "lineno": 218,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034298",
                "name": "module.exports",
                "type": "Identifier",
                "value": "PrivateChannel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "Relationship.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034308",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* [USER ACCOUNT] Represents a Relationship\n* @prop {User} user The other user in the relationship\n* @prop {Number} type The type of relationship. 1 is friend, 2 is block, 3 is incoming request, 4 is outgoing request\n* @prop {String} status The other user's status. Either \"online\", \"idle\", or \"offline\"\n* @prop {Object?} game The active game the other user is playing\n* @prop {String} game.name The name of the active game\n* @prop {Number} game.type The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)\n* @prop {String?} game.url The url of the active game\n*/",
        "meta": {
            "range": [
                629,
                1350
            ],
            "filename": "Relationship.js",
            "lineno": 15,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034313",
                "name": "Relationship",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "[USER ACCOUNT] Represents a Relationship",
        "properties": [
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The other user in the relationship",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of relationship. 1 is friend, 2 is block, 3 is incoming request, 4 is outgoing request",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The other user's status. Either \"online\", \"idle\", or \"offline\"",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The active game the other user is playing",
                "name": "game"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the active game",
                "name": "game.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)",
                "name": "game.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The url of the active game",
                "name": "game.url"
            }
        ],
        "name": "Relationship",
        "longname": "Relationship",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                667,
                890
            ],
            "filename": "Relationship.js",
            "lineno": 16,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034317",
                "name": "Relationship",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Relationship",
        "longname": "Relationship",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* [USER ACCOUNT] Represents a Relationship\n* @prop {User} user The other user in the relationship\n* @prop {Number} type The type of relationship. 1 is friend, 2 is block, 3 is incoming request, 4 is outgoing request\n* @prop {String} status The other user's status. Either \"online\", \"idle\", or \"offline\"\n* @prop {Object?} game The active game the other user is playing\n* @prop {String} game.name The name of the active game\n* @prop {Number} game.type The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)\n* @prop {String?} game.url The url of the active game\n*/",
        "meta": {
            "range": [
                629,
                1350
            ],
            "filename": "Relationship.js",
            "lineno": 15,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034313",
                "name": "Relationship",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "Relationship",
        "longname": "Relationship",
        "kind": "class",
        "classdesc": "[USER ACCOUNT] Represents a Relationship",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The other user in the relationship",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of relationship. 1 is friend, 2 is block, 3 is incoming request, 4 is outgoing request",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The other user's status. Either \"online\", \"idle\", or \"offline\"",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The active game the other user is playing",
                "name": "game"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the active game",
                "name": "game.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)",
                "name": "game.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The url of the active game",
                "name": "game.url"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                727,
                774
            ],
            "filename": "Relationship.js",
            "lineno": 18,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034330",
                "name": "this.user",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "user",
        "longname": "Relationship#user",
        "kind": "member",
        "memberof": "Relationship",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                784,
                797
            ],
            "filename": "Relationship.js",
            "lineno": 19,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034345",
                "name": "this.type",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "Relationship#type",
        "kind": "member",
        "memberof": "Relationship",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                807,
                830
            ],
            "filename": "Relationship.js",
            "lineno": 20,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034351",
                "name": "this.status",
                "type": "Literal",
                "value": "offline",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "Relationship#status",
        "kind": "member",
        "memberof": "Relationship",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                840,
                856
            ],
            "filename": "Relationship.js",
            "lineno": 21,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034357",
                "name": "this.game",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "game",
        "longname": "Relationship#game",
        "kind": "member",
        "memberof": "Relationship",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                896,
                1171
            ],
            "filename": "Relationship.js",
            "lineno": 25,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034368",
                "name": "Relationship#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "Relationship#update",
        "kind": "function",
        "memberof": "Relationship",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                961,
                982
            ],
            "filename": "Relationship.js",
            "lineno": 27,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034381",
                "name": "this.type",
                "type": "MemberExpression",
                "value": "data.type",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "Relationship#type",
        "kind": "member",
        "memberof": "Relationship",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1046,
                1071
            ],
            "filename": "Relationship.js",
            "lineno": 30,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034396",
                "name": "this.status",
                "type": "MemberExpression",
                "value": "data.status",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "Relationship#status",
        "kind": "member",
        "memberof": "Relationship",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1133,
                1154
            ],
            "filename": "Relationship.js",
            "lineno": 33,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034411",
                "name": "this.game",
                "type": "MemberExpression",
                "value": "data.game",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "game",
        "longname": "Relationship#game",
        "kind": "member",
        "memberof": "Relationship",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1177,
                1348
            ],
            "filename": "Relationship.js",
            "lineno": 37,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034418",
                "name": "Relationship#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Relationship#toJSON",
        "kind": "function",
        "memberof": "Relationship",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1352,
                1381
            ],
            "filename": "Relationship.js",
            "lineno": 48,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034438",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Relationship",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "Role.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034448",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53,
                89
            ],
            "filename": "Role.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034454",
                "name": "Permission",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Permission",
        "longname": "Permission",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a role\n* @prop {String} id The ID of the role\n* @prop {Number} createdAt Timestamp of the role's creation\n* @prop {Guild} guild The guild that owns the role\n* @prop {String} mention A string that mentions the role\n* @prop {Number} createdAt Timestamp of role creation\n* @prop {String} name The name of the role\n* @prop {Boolean} mentionable Whether the role is mentionable or not\n* @prop {Boolean} managed Whether a guild integration manages this role or not\n* @prop {Boolean} hoist Whether users with this role are hoisted in the user list or not\n* @prop {Number} color The hex color of the role in base 10\n* @prop {Number} position The position of the role\n* @prop {Permission} permissions The permissions representation of the role\n*/",
        "meta": {
            "range": [
                847,
                3547
            ],
            "filename": "Role.js",
            "lineno": 21,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034459",
                "name": "Role",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "guild"
                ]
            }
        },
        "classdesc": "Represents a role",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of the role's creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild that owns the role",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the role",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of role creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the role",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the role is mentionable or not",
                "name": "mentionable"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether a guild integration manages this role or not",
                "name": "managed"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether users with this role are hoisted in the user list or not",
                "name": "hoist"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The hex color of the role in base 10",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the role",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Permission"
                    ]
                },
                "description": "The permissions representation of the role",
                "name": "permissions"
            }
        ],
        "name": "Role",
        "longname": "Role",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                877,
                988
            ],
            "filename": "Role.js",
            "lineno": 22,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034463",
                "name": "Role",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "guild"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Role",
        "longname": "Role",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a role\n* @prop {String} id The ID of the role\n* @prop {Number} createdAt Timestamp of the role's creation\n* @prop {Guild} guild The guild that owns the role\n* @prop {String} mention A string that mentions the role\n* @prop {Number} createdAt Timestamp of role creation\n* @prop {String} name The name of the role\n* @prop {Boolean} mentionable Whether the role is mentionable or not\n* @prop {Boolean} managed Whether a guild integration manages this role or not\n* @prop {Boolean} hoist Whether users with this role are hoisted in the user list or not\n* @prop {Number} color The hex color of the role in base 10\n* @prop {Number} position The position of the role\n* @prop {Permission} permissions The permissions representation of the role\n*/",
        "meta": {
            "range": [
                847,
                3547
            ],
            "filename": "Role.js",
            "lineno": 21,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034459",
                "name": "Role",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "guild"
                ]
            }
        },
        "name": "Role",
        "longname": "Role",
        "kind": "class",
        "classdesc": "Represents a role",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of the role's creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild that owns the role",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the role",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of role creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the role",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the role is mentionable or not",
                "name": "mentionable"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether a guild integration manages this role or not",
                "name": "managed"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether users with this role are hoisted in the user list or not",
                "name": "hoist"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The hex color of the role in base 10",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the role",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Permission"
                    ]
                },
                "description": "The permissions representation of the role",
                "name": "permissions"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                936,
                954
            ],
            "filename": "Role.js",
            "lineno": 24,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034476",
                "name": "this.guild",
                "type": "Identifier",
                "value": "guild",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "guild",
        "longname": "Role#guild",
        "kind": "member",
        "memberof": "Role",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                994,
                1680
            ],
            "filename": "Role.js",
            "lineno": 28,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034487",
                "name": "Role#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "Role#update",
        "kind": "function",
        "memberof": "Role",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1059,
                1080
            ],
            "filename": "Role.js",
            "lineno": 30,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034500",
                "name": "this.name",
                "type": "MemberExpression",
                "value": "data.name",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "Role#name",
        "kind": "member",
        "memberof": "Role",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1149,
                1184
            ],
            "filename": "Role.js",
            "lineno": 33,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034515",
                "name": "this.mentionable",
                "type": "MemberExpression",
                "value": "data.mentionable",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mentionable",
        "longname": "Role#mentionable",
        "kind": "member",
        "memberof": "Role",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1249,
                1276
            ],
            "filename": "Role.js",
            "lineno": 36,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034530",
                "name": "this.managed",
                "type": "MemberExpression",
                "value": "data.managed",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "managed",
        "longname": "Role#managed",
        "kind": "member",
        "memberof": "Role",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1339,
                1362
            ],
            "filename": "Role.js",
            "lineno": 39,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034545",
                "name": "this.hoist",
                "type": "MemberExpression",
                "value": "data.hoist",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "hoist",
        "longname": "Role#hoist",
        "kind": "member",
        "memberof": "Role",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1425,
                1448
            ],
            "filename": "Role.js",
            "lineno": 42,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034560",
                "name": "this.color",
                "type": "MemberExpression",
                "value": "data.color",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "color",
        "longname": "Role#color",
        "kind": "member",
        "memberof": "Role",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1514,
                1543
            ],
            "filename": "Role.js",
            "lineno": 45,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034575",
                "name": "this.position",
                "type": "MemberExpression",
                "value": "data.position",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "position",
        "longname": "Role#position",
        "kind": "member",
        "memberof": "Role",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1612,
                1663
            ],
            "filename": "Role.js",
            "lineno": 48,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034590",
                "name": "this.permissions",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "permissions",
        "longname": "Role#permissions",
        "kind": "member",
        "memberof": "Role",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Generates a JSON representation of the role permissions\n    * @returns {Object}\n    */",
        "meta": {
            "range": [
                1787,
                1843
            ],
            "filename": "Role.js",
            "lineno": 56,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034599",
                "name": "Role#json",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Generates a JSON representation of the role permissions",
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                }
            }
        ],
        "name": "json",
        "longname": "Role#json",
        "kind": "member",
        "memberof": "Role",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1849,
                1903
            ],
            "filename": "Role.js",
            "lineno": 60,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034609",
                "name": "Role#mention",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "mention",
        "longname": "Role#mention",
        "kind": "member",
        "memberof": "Role",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Edit the guild role\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
        "meta": {
            "range": [
                2501,
                2650
            ],
            "filename": "Role.js",
            "lineno": 75,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034620",
                "name": "Role#edit",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit the guild role",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the role",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The role permissions number",
                "name": "options.permissions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)",
                "name": "options.color"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to hoist the role in the user list or not",
                "name": "options.hoist"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the role is mentionable or not",
                "name": "options.mentionable"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Role>"
                    ]
                }
            }
        ],
        "name": "edit",
        "longname": "Role#edit",
        "kind": "function",
        "memberof": "Role",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Edit the role's position. Note that role position numbers are highest on top and lowest at the bottom.\n    * @arg {Number} position The new position of the role\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                2863,
                3014
            ],
            "filename": "Role.js",
            "lineno": 84,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034656",
                "name": "Role#editPosition",
                "type": "MethodDefinition",
                "paramnames": [
                    "position"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit the role's position. Note that role position numbers are highest on top and lowest at the bottom.",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new position of the role",
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editPosition",
        "longname": "Role#editPosition",
        "kind": "function",
        "memberof": "Role",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Delete the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                3152,
                3287
            ],
            "filename": "Role.js",
            "lineno": 93,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034690",
                "name": "Role#delete",
                "type": "MethodDefinition",
                "paramnames": [
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete the role",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "delete",
        "longname": "Role#delete",
        "kind": "function",
        "memberof": "Role",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3293,
                3545
            ],
            "filename": "Role.js",
            "lineno": 97,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034724",
                "name": "Role#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Role#toJSON",
        "kind": "function",
        "memberof": "Role",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3549,
                3570
            ],
            "filename": "Role.js",
            "lineno": 111,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034747",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Role",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                61
            ],
            "filename": "StoreChannel.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034757",
                "name": "GuildChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GuildChannel",
        "longname": "GuildChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a store channel\n* @extends GuildChannel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Guild} guild The guild that owns the channel\n* @prop {String?} parentID The ID of the category this channel belongs to\n* @prop {String} name The name of the channel\n* @prop {Number} position The position of the channel\n* @prop {Boolean} nsfw Whether the channel is an NSFW channel or not\n* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel\n*/",
        "meta": {
            "range": [
                683,
                726
            ],
            "filename": "StoreChannel.js",
            "lineno": 18,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034762",
                "name": "StoreChannel",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "classdesc": "Represents a store channel",
        "augments": [
            "GuildChannel"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild that owns the channel",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the category this channel belongs to",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the channel",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the channel is an NSFW channel or not",
                "name": "nsfw"
            },
            {
                "type": {
                    "names": [
                        "Collection.<PermissionOverwrite>"
                    ]
                },
                "description": "Collection of PermissionOverwrites in this channel",
                "name": "permissionOverwrites"
            }
        ],
        "name": "StoreChannel",
        "longname": "StoreChannel",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                728,
                757
            ],
            "filename": "StoreChannel.js",
            "lineno": 21,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034767",
                "name": "module.exports",
                "type": "Identifier",
                "value": "StoreChannel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                63
            ],
            "filename": "TextChannel.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034777",
                "name": "Collection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Collection",
        "longname": "Collection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                111
            ],
            "filename": "TextChannel.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034783",
                "name": "GuildChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GuildChannel",
        "longname": "GuildChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                149
            ],
            "filename": "TextChannel.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034789",
                "name": "Message",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Message",
        "longname": "Message",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild text channel\n* @extends GuildChannel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Guild} guild The guild that owns the channel\n* @prop {String?} parentID The ID of the category this channel belongs to\n* @prop {String} name The name of the channel\n* @prop {Number} position The position of the channel\n* @prop {Boolean} nsfw Whether the channel is an NSFW channel or not\n* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel\n* @prop {Collection<Message>} messages Collection of Messages in this channel\n* @prop {String} lastMessageID The ID of the last message in this channel\n* @prop {Number} lastPinTimestamp The timestamp of the last pinned message\n* @prop {String?} topic The topic of the channel\n* @prop {Number} rateLimitPerUser The ratelimit of the channel, in seconds. 0 means no ratelimit is enabled\n*/",
        "meta": {
            "range": [
                1160,
                12314
            ],
            "filename": "TextChannel.js",
            "lineno": 25,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034794",
                "name": "TextChannel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client",
                    "messageLimit"
                ]
            }
        },
        "classdesc": "Represents a guild text channel",
        "augments": [
            "GuildChannel"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild that owns the channel",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the category this channel belongs to",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the channel",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the channel is an NSFW channel or not",
                "name": "nsfw"
            },
            {
                "type": {
                    "names": [
                        "Collection.<PermissionOverwrite>"
                    ]
                },
                "description": "Collection of PermissionOverwrites in this channel",
                "name": "permissionOverwrites"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Message>"
                    ]
                },
                "description": "Collection of Messages in this channel",
                "name": "messages"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the last message in this channel",
                "name": "lastMessageID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The timestamp of the last pinned message",
                "name": "lastPinTimestamp"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The topic of the channel",
                "name": "topic"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ratelimit of the channel, in seconds. 0 means no ratelimit is enabled",
                "name": "rateLimitPerUser"
            }
        ],
        "name": "TextChannel",
        "longname": "TextChannel",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1205,
                1685
            ],
            "filename": "TextChannel.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034798",
                "name": "TextChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client",
                    "messageLimit"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "TextChannel",
        "longname": "TextChannel",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild text channel\n* @extends GuildChannel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Guild} guild The guild that owns the channel\n* @prop {String?} parentID The ID of the category this channel belongs to\n* @prop {String} name The name of the channel\n* @prop {Number} position The position of the channel\n* @prop {Boolean} nsfw Whether the channel is an NSFW channel or not\n* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel\n* @prop {Collection<Message>} messages Collection of Messages in this channel\n* @prop {String} lastMessageID The ID of the last message in this channel\n* @prop {Number} lastPinTimestamp The timestamp of the last pinned message\n* @prop {String?} topic The topic of the channel\n* @prop {Number} rateLimitPerUser The ratelimit of the channel, in seconds. 0 means no ratelimit is enabled\n*/",
        "meta": {
            "range": [
                1160,
                12314
            ],
            "filename": "TextChannel.js",
            "lineno": 25,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034794",
                "name": "TextChannel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client",
                    "messageLimit"
                ]
            }
        },
        "name": "TextChannel",
        "longname": "TextChannel",
        "kind": "class",
        "classdesc": "Represents a guild text channel",
        "augments": [
            "GuildChannel"
        ],
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild that owns the channel",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the category this channel belongs to",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the channel",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the channel is an NSFW channel or not",
                "name": "nsfw"
            },
            {
                "type": {
                    "names": [
                        "Collection.<PermissionOverwrite>"
                    ]
                },
                "description": "Collection of PermissionOverwrites in this channel",
                "name": "permissionOverwrites"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Message>"
                    ]
                },
                "description": "Collection of Messages in this channel",
                "name": "messages"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the last message in this channel",
                "name": "lastMessageID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The timestamp of the last pinned message",
                "name": "lastPinTimestamp"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The topic of the channel",
                "name": "topic"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ratelimit of the channel, in seconds. 0 means no ratelimit is enabled",
                "name": "rateLimitPerUser"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1284,
                1390
            ],
            "filename": "TextChannel.js",
            "lineno": 28,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034811",
                "name": "this.messages",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "messages",
        "longname": "TextChannel#messages",
        "kind": "member",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1400,
                1449
            ],
            "filename": "TextChannel.js",
            "lineno": 29,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034829",
                "name": "this.lastMessageID",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastMessageID",
        "longname": "TextChannel#lastMessageID",
        "kind": "member",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1459,
                1549
            ],
            "filename": "TextChannel.js",
            "lineno": 30,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034839",
                "name": "this.rateLimitPerUser",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "rateLimitPerUser",
        "longname": "TextChannel#rateLimitPerUser",
        "kind": "member",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1559,
                1651
            ],
            "filename": "TextChannel.js",
            "lineno": 31,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034854",
                "name": "this.lastPinTimestamp",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastPinTimestamp",
        "longname": "TextChannel#lastPinTimestamp",
        "kind": "member",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1691,
                1950
            ],
            "filename": "TextChannel.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034876",
                "name": "TextChannel#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "TextChannel#update",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1799,
                1847
            ],
            "filename": "TextChannel.js",
            "lineno": 38,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034895",
                "name": "this.rateLimitPerUser",
                "type": "MemberExpression",
                "value": "data.rate_limit_per_user",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "rateLimitPerUser",
        "longname": "TextChannel#rateLimitPerUser",
        "kind": "member",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1910,
                1933
            ],
            "filename": "TextChannel.js",
            "lineno": 41,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034910",
                "name": "this.topic",
                "type": "MemberExpression",
                "value": "data.topic",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "topic",
        "longname": "TextChannel#topic",
        "kind": "member",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get all invites in the channel\n    * @returns {Promise<Invite[]>}\n    */",
        "meta": {
            "range": [
                2043,
                2136
            ],
            "filename": "TextChannel.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034917",
                "name": "TextChannel#getInvites",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all invites in the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Invite>>"
                    ]
                }
            }
        ],
        "name": "getInvites",
        "longname": "TextChannel#getInvites",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Create an invite for the channel\n    * @arg {Object} [options] Invite generation options\n    * @arg {Number} [options.maxAge] How long the invite should last in seconds\n    * @arg {Number} [options.maxUses] How many uses the invite should last for\n    * @arg {Boolean} [options.temporary] Whether the invite grants temporary membership or not\n    * @arg {Boolean} [options.unique] Whether the invite is unique or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Invite>}\n    */",
        "meta": {
            "range": [
                2683,
                2812
            ],
            "filename": "TextChannel.js",
            "lineno": 63,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034936",
                "name": "TextChannel#createInvite",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create an invite for the channel",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Invite generation options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "How long the invite should last in seconds",
                "name": "options.maxAge"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "How many uses the invite should last for",
                "name": "options.maxUses"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the invite grants temporary membership or not",
                "name": "options.temporary"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the invite is unique or not",
                "name": "options.unique"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Invite>"
                    ]
                }
            }
        ],
        "name": "createInvite",
        "longname": "TextChannel#createInvite",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get all the webhooks in the channel\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
        "meta": {
            "range": [
                2952,
                3047
            ],
            "filename": "TextChannel.js",
            "lineno": 71,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034959",
                "name": "TextChannel#getWebhooks",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all the webhooks in the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of webhook objects"
            }
        ],
        "name": "getWebhooks",
        "longname": "TextChannel#getWebhooks",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Create a channel webhook\n    * @arg {Object} options Webhook options\n    * @arg {String} options.name The default name\n    * @arg {String} options.avatar The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
        "meta": {
            "range": [
                3462,
                3593
            ],
            "filename": "TextChannel.js",
            "lineno": 83,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034978",
                "name": "TextChannel#createWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a channel webhook",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Webhook options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The default name",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.avatar"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with a webhook object"
            }
        ],
        "name": "createWebhook",
        "longname": "TextChannel#createWebhook",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Bulk delete messages (bot accounts only)\n    * @arg {String[]} messageIDs Array of message IDs to delete\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                3820,
                3952
            ],
            "filename": "TextChannel.js",
            "lineno": 93,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035001",
                "name": "TextChannel#deleteMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageIDs",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Bulk delete messages (bot accounts only)",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of message IDs to delete",
                "name": "messageIDs"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteMessages",
        "longname": "TextChannel#deleteMessages",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Purge previous messages in the channel with an optional filter (bot accounts only)\n    * @arg {Number} limit The max number of messages to search through, -1 for no limit\n    * @arg {function} [filter] Optional filter function that returns a boolean when passed a Message object\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Number>} Resolves with the number of messages deleted\n    */",
        "meta": {
            "range": [
                4534,
                4691
            ],
            "filename": "TextChannel.js",
            "lineno": 106,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035024",
                "name": "TextChannel#purge",
                "type": "MethodDefinition",
                "paramnames": [
                    "limit",
                    "filter",
                    "before",
                    "after",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Purge previous messages in the channel with an optional filter (bot accounts only)",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The max number of messages to search through, -1 for no limit",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "Optional filter function that returns a boolean when passed a Message object",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages before this message ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages after this message ID",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Number>"
                    ]
                },
                "description": "Resolves with the number of messages deleted"
            }
        ],
        "name": "purge",
        "longname": "TextChannel#purge",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Send typing status in the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4777,
                4870
            ],
            "filename": "TextChannel.js",
            "lineno": 114,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035053",
                "name": "TextChannel#sendTyping",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Send typing status in the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "sendTyping",
        "longname": "TextChannel#sendTyping",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get a previous message in the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                5021,
                5127
            ],
            "filename": "TextChannel.js",
            "lineno": 123,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035072",
                "name": "TextChannel#getMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a previous message in the channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "getMessage",
        "longname": "TextChannel#getMessage",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get previous messages in the channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
        "meta": {
            "range": [
                5518,
                5664
            ],
            "filename": "TextChannel.js",
            "lineno": 135,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035093",
                "name": "TextChannel#getMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "limit",
                    "before",
                    "after",
                    "around"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get previous messages in the channel",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 50,
                "description": "The max number of messages to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages before this message ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages after this message ID",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages around this message ID (does not work with limit > 100)",
                "name": "around"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Message>>"
                    ]
                }
            }
        ],
        "name": "getMessages",
        "longname": "TextChannel#getMessages",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get all the pins in the channel\n    * @returns {Promise<Message[]>}\n    */",
        "meta": {
            "range": [
                5759,
                5839
            ],
            "filename": "TextChannel.js",
            "lineno": 143,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035120",
                "name": "TextChannel#getPins",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all the pins in the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Message>>"
                    ]
                }
            }
        ],
        "name": "getPins",
        "longname": "TextChannel#getPins",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Create a message in the channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user\n    * @arg {String | Object} content A string or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Object} [file] A file object\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                7129,
                7249
            ],
            "filename": "TextChannel.js",
            "lineno": 163,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035139",
                "name": "TextChannel#createMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "content",
                    "file"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a message in the channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user",
        "params": [
            {
                "type": {
                    "names": [
                        "String",
                        "Object"
                    ]
                },
                "description": "A string or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Set the message TTS flag",
                "name": "content.tts"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A file object",
                "name": "file"
            },
            {
                "type": {
                    "names": [
                        "Buffer"
                    ]
                },
                "description": "A buffer containing file data",
                "name": "file.file"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "What to name the file",
                "name": "file.name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "createMessage",
        "longname": "TextChannel#createMessage",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Edit a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                8604,
                8730
            ],
            "filename": "TextChannel.js",
            "lineno": 181,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035162",
                "name": "TextChannel#editMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "content"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Edit a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Array",
                        "Object"
                    ]
                },
                "description": "A string, array of strings, or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to filter @everyone/@here or not (overrides default)",
                "name": "content.disableEveryone"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
                "name": "content.flags"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "name": "editMessage",
        "longname": "TextChannel#editMessage",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Pin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                8848,
                8954
            ],
            "filename": "TextChannel.js",
            "lineno": 190,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035185",
                "name": "TextChannel#pinMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Pin a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "pinMessage",
        "longname": "TextChannel#pinMessage",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Unpin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                9074,
                9184
            ],
            "filename": "TextChannel.js",
            "lineno": 199,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035206",
                "name": "TextChannel#unpinMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Unpin a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "unpinMessage",
        "longname": "TextChannel#unpinMessage",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
        "meta": {
            "range": [
                9649,
                9835
            ],
            "filename": "TextChannel.js",
            "lineno": 212,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035227",
                "name": "TextChannel#getMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction",
                    "limit",
                    "before",
                    "after"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a list of users who reacted with a specific reaction",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 100,
                "description": "The maximum number of users to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users before this user ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users after this user ID",
                "name": "after"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<User>>"
                    ]
                }
            }
        ],
        "name": "getMessageReaction",
        "longname": "TextChannel#getMessageReaction",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                10146,
                10304
            ],
            "filename": "TextChannel.js",
            "lineno": 223,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035256",
                "name": "TextChannel#addMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Add a reaction to a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to react as",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "addMessageReaction",
        "longname": "TextChannel#addMessageReaction",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                10635,
                10799
            ],
            "filename": "TextChannel.js",
            "lineno": 234,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035281",
                "name": "TextChannel#removeMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove a reaction from a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to remove the reaction for",
                "name": "userID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeMessageReaction",
        "longname": "TextChannel#removeMessageReaction",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Remove all reactions from a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                10939,
                11069
            ],
            "filename": "TextChannel.js",
            "lineno": 243,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035306",
                "name": "TextChannel#removeMessageReactions",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove all reactions from a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeMessageReactions",
        "longname": "TextChannel#removeMessageReactions",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Remove all reactions from a message for a single emoji\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                11341,
                11499
            ],
            "filename": "TextChannel.js",
            "lineno": 253,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035327",
                "name": "TextChannel#removeMessageReactionEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove all reactions from a message for a single emoji",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeMessageReactionEmoji",
        "longname": "TextChannel#removeMessageReactionEmoji",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Delete a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                11690,
                11818
            ],
            "filename": "TextChannel.js",
            "lineno": 263,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035350",
                "name": "TextChannel#deleteMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Delete a message",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "deleteMessage",
        "longname": "TextChannel#deleteMessage",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Un-send a message. You're welcome Programmix\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                11967,
                12079
            ],
            "filename": "TextChannel.js",
            "lineno": 272,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035373",
                "name": "TextChannel#unsendMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Un-send a message. You're welcome Programmix",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "unsendMessage",
        "longname": "TextChannel#unsendMessage",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12085,
                12312
            ],
            "filename": "TextChannel.js",
            "lineno": 276,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035394",
                "name": "TextChannel#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "TextChannel#toJSON",
        "kind": "function",
        "memberof": "TextChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12316,
                12344
            ],
            "filename": "TextChannel.js",
            "lineno": 288,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035415",
                "name": "module.exports",
                "type": "Identifier",
                "value": "TextChannel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "UnavailableGuild.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035425",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild\n* @prop {String} id The ID of the guild\n* @prop {Boolean} unavailable Whether the guild is unavailable or not\n* @prop {Shard} shard The Shard that owns the guild\n*/",
        "meta": {
            "range": [
                238,
                579
            ],
            "filename": "UnavailableGuild.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035430",
                "name": "UnavailableGuild",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "Represents a guild",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the guild is unavailable or not",
                "name": "unavailable"
            },
            {
                "type": {
                    "names": [
                        "Shard"
                    ]
                },
                "description": "The Shard that owns the guild",
                "name": "shard"
            }
        ],
        "name": "UnavailableGuild",
        "longname": "UnavailableGuild",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                280,
                455
            ],
            "filename": "UnavailableGuild.js",
            "lineno": 12,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035434",
                "name": "UnavailableGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "UnavailableGuild",
        "longname": "UnavailableGuild",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild\n* @prop {String} id The ID of the guild\n* @prop {Boolean} unavailable Whether the guild is unavailable or not\n* @prop {Shard} shard The Shard that owns the guild\n*/",
        "meta": {
            "range": [
                238,
                579
            ],
            "filename": "UnavailableGuild.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035430",
                "name": "UnavailableGuild",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "UnavailableGuild",
        "longname": "UnavailableGuild",
        "kind": "class",
        "classdesc": "Represents a guild",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the guild is unavailable or not",
                "name": "unavailable"
            },
            {
                "type": {
                    "names": [
                        "Shard"
                    ]
                },
                "description": "The Shard that owns the guild",
                "name": "shard"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                340,
                401
            ],
            "filename": "UnavailableGuild.js",
            "lineno": 14,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035447",
                "name": "this.shard",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "shard",
        "longname": "UnavailableGuild#shard",
        "kind": "member",
        "memberof": "UnavailableGuild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                411,
                448
            ],
            "filename": "UnavailableGuild.js",
            "lineno": 15,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035465",
                "name": "this.unavailable",
                "type": "UnaryExpression",
                "value": "!!data.unavailable",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unavailable",
        "longname": "UnavailableGuild#unavailable",
        "kind": "member",
        "memberof": "UnavailableGuild",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                461,
                577
            ],
            "filename": "UnavailableGuild.js",
            "lineno": 18,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035474",
                "name": "UnavailableGuild#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "UnavailableGuild#toJSON",
        "kind": "function",
        "memberof": "UnavailableGuild",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                581,
                614
            ],
            "filename": "UnavailableGuild.js",
            "lineno": 26,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035491",
                "name": "module.exports",
                "type": "Identifier",
                "value": "UnavailableGuild",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "User.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035501",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53,
                93
            ],
            "filename": "User.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035507",
                "name": "Endpoints",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Endpoints",
        "longname": "Endpoints",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a user\n* @prop {String} id The ID of the user\n* @prop {Number} createdAt Timestamp of the user's creation\n* @prop {String} mention A string that mentions the user\n* @prop {String} defaultAvatar The hash for the default avatar of a user if there is no avatar set\n* @prop {Number} createdAt Timestamp of user creation\n* @prop {Boolean} bot Whether the user is an OAuth bot or not\n* @prop {String} username The username of the user\n* @prop {String} discriminator The discriminator of the user\n* @prop {String?} avatar The hash of the user's avatar, or null if no avatar\n* @prop {String} defaultAvatarURL The URL of the user's default avatar\n* @prop {String} avatarURL The URL of the user's avatar which can be either a JPG or GIF\n* @prop {String} staticAvatarURL The URL of the user's avatar (always a JPG)\n* @prop {Boolean} system Whether the user is an official Discord system user (e.g. urgent messages)\n* @prop {Number?} publicFlags Publicly vicible flags for this user\n*/",
        "meta": {
            "range": [
                1087,
                4666
            ],
            "filename": "User.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035512",
                "name": "User",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "Represents a user",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of the user's creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the user",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The hash for the default avatar of a user if there is no avatar set",
                "name": "defaultAvatar"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of user creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the user is an OAuth bot or not",
                "name": "bot"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The username of the user",
                "name": "username"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The discriminator of the user",
                "name": "discriminator"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the user's avatar, or null if no avatar",
                "name": "avatar"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The URL of the user's default avatar",
                "name": "defaultAvatarURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The URL of the user's avatar which can be either a JPG or GIF",
                "name": "avatarURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The URL of the user's avatar (always a JPG)",
                "name": "staticAvatarURL"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the user is an official Discord system user (e.g. urgent messages)",
                "name": "system"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "Publicly vicible flags for this user",
                "name": "publicFlags"
            }
        ],
        "name": "User",
        "longname": "User",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1117,
                1449
            ],
            "filename": "User.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035516",
                "name": "User",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "User",
        "longname": "User",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a user\n* @prop {String} id The ID of the user\n* @prop {Number} createdAt Timestamp of the user's creation\n* @prop {String} mention A string that mentions the user\n* @prop {String} defaultAvatar The hash for the default avatar of a user if there is no avatar set\n* @prop {Number} createdAt Timestamp of user creation\n* @prop {Boolean} bot Whether the user is an OAuth bot or not\n* @prop {String} username The username of the user\n* @prop {String} discriminator The discriminator of the user\n* @prop {String?} avatar The hash of the user's avatar, or null if no avatar\n* @prop {String} defaultAvatarURL The URL of the user's default avatar\n* @prop {String} avatarURL The URL of the user's avatar which can be either a JPG or GIF\n* @prop {String} staticAvatarURL The URL of the user's avatar (always a JPG)\n* @prop {Boolean} system Whether the user is an official Discord system user (e.g. urgent messages)\n* @prop {Number?} publicFlags Publicly vicible flags for this user\n*/",
        "meta": {
            "range": [
                1087,
                4666
            ],
            "filename": "User.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035512",
                "name": "User",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "User",
        "longname": "User",
        "kind": "class",
        "classdesc": "Represents a user",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of the user's creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the user",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The hash for the default avatar of a user if there is no avatar set",
                "name": "defaultAvatar"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of user creation",
                "name": "createdAt"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the user is an OAuth bot or not",
                "name": "bot"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The username of the user",
                "name": "username"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The discriminator of the user",
                "name": "discriminator"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the user's avatar, or null if no avatar",
                "name": "avatar"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The URL of the user's default avatar",
                "name": "defaultAvatarURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The URL of the user's avatar which can be either a JPG or GIF",
                "name": "avatarURL"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The URL of the user's avatar (always a JPG)",
                "name": "staticAvatarURL"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the user is an official Discord system user (e.g. urgent messages)",
                "name": "system"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "Publicly vicible flags for this user",
                "name": "publicFlags"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1203,
                1272
            ],
            "filename": "User.js",
            "lineno": 27,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035533",
                "name": "this._missingClientError",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_missingClientError",
        "longname": "User#_missingClientError",
        "kind": "member",
        "memberof": "User",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1326,
                1347
            ],
            "filename": "User.js",
            "lineno": 29,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035541",
                "name": "this._client",
                "type": "Identifier",
                "value": "client",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_client",
        "longname": "User#_client",
        "kind": "member",
        "memberof": "User",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1357,
                1378
            ],
            "filename": "User.js",
            "lineno": 30,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035547",
                "name": "this.bot",
                "type": "UnaryExpression",
                "value": "!!data.bot",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "bot",
        "longname": "User#bot",
        "kind": "member",
        "memberof": "User",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1388,
                1415
            ],
            "filename": "User.js",
            "lineno": 31,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035557",
                "name": "this.system",
                "type": "UnaryExpression",
                "value": "!!data.system",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "system",
        "longname": "User#system",
        "kind": "member",
        "memberof": "User",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1455,
                1875
            ],
            "filename": "User.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035572",
                "name": "User#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "User#update",
        "kind": "function",
        "memberof": "User",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1522,
                1547
            ],
            "filename": "User.js",
            "lineno": 37,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035585",
                "name": "this.avatar",
                "type": "MemberExpression",
                "value": "data.avatar",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "avatar",
        "longname": "User#avatar",
        "kind": "member",
        "memberof": "User",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1613,
                1642
            ],
            "filename": "User.js",
            "lineno": 40,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035600",
                "name": "this.username",
                "type": "MemberExpression",
                "value": "data.username",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "username",
        "longname": "User#username",
        "kind": "member",
        "memberof": "User",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1713,
                1752
            ],
            "filename": "User.js",
            "lineno": 43,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035615",
                "name": "this.discriminator",
                "type": "MemberExpression",
                "value": "data.discriminator",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "discriminator",
        "longname": "User#discriminator",
        "kind": "member",
        "memberof": "User",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1822,
                1858
            ],
            "filename": "User.js",
            "lineno": 46,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035630",
                "name": "this.publicFlags",
                "type": "MemberExpression",
                "value": "data.public_flags",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "publicFlags",
        "longname": "User#publicFlags",
        "kind": "member",
        "memberof": "User",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1881,
                1934
            ],
            "filename": "User.js",
            "lineno": 50,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035637",
                "name": "User#mention",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "mention",
        "longname": "User#mention",
        "kind": "member",
        "memberof": "User",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1940,
                2006
            ],
            "filename": "User.js",
            "lineno": 54,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035648",
                "name": "User#defaultAvatar",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "defaultAvatar",
        "longname": "User#defaultAvatar",
        "kind": "member",
        "memberof": "User",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2012,
                2137
            ],
            "filename": "User.js",
            "lineno": 58,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035658",
                "name": "User#defaultAvatarURL",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "defaultAvatarURL",
        "longname": "User#defaultAvatarURL",
        "kind": "member",
        "memberof": "User",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2143,
                2397
            ],
            "filename": "User.js",
            "lineno": 62,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035677",
                "name": "User#staticAvatarURL",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "staticAvatarURL",
        "longname": "User#staticAvatarURL",
        "kind": "member",
        "memberof": "User",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2403,
                2644
            ],
            "filename": "User.js",
            "lineno": 69,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035715",
                "name": "User#avatarURL",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "avatarURL",
        "longname": "User#avatarURL",
        "kind": "member",
        "memberof": "User",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Get the user's avatar with the given format and size\n    * @arg {String} [format] The filetype of the avatar (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")\n    * @arg {Number} [size] The size of the avatar (any power of two between 16 and 4096)\n    */",
        "meta": {
            "range": [
                2910,
                3087
            ],
            "filename": "User.js",
            "lineno": 81,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035752",
                "name": "User#dynamicAvatarURL",
                "type": "MethodDefinition",
                "paramnames": [
                    "format",
                    "size"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the user's avatar with the given format and size",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The filetype of the avatar (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")",
                "name": "format"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The size of the avatar (any power of two between 16 and 4096)",
                "name": "size"
            }
        ],
        "name": "dynamicAvatarURL",
        "longname": "User#dynamicAvatarURL",
        "kind": "function",
        "memberof": "User",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get a DM channel with the user, or create one if it does not exist\n    * @returns {Promise<PrivateChannel>}\n    */",
        "meta": {
            "range": [
                3222,
                3314
            ],
            "filename": "User.js",
            "lineno": 89,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035784",
                "name": "User#getDMChannel",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a DM channel with the user, or create one if it does not exist",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<PrivateChannel>"
                    ]
                }
            }
        ],
        "name": "getDMChannel",
        "longname": "User#getDMChannel",
        "kind": "function",
        "memberof": "User",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Create a relationship with the user\n    * @arg {Boolean} [block=false] If true, block the user. Otherwise, add the user as a friend\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                3513,
                3623
            ],
            "filename": "User.js",
            "lineno": 98,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035803",
                "name": "User#addRelationship",
                "type": "MethodDefinition",
                "paramnames": [
                    "block"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Create a relationship with the user",
        "params": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, block the user. Otherwise, add the user as a friend",
                "name": "block"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "addRelationship",
        "longname": "User#addRelationship",
        "kind": "function",
        "memberof": "User",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Remove a relationship with the user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                3726,
                3830
            ],
            "filename": "User.js",
            "lineno": 106,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035824",
                "name": "User#removeRelationship",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Remove a relationship with the user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "removeRelationship",
        "longname": "User#removeRelationship",
        "kind": "function",
        "memberof": "User",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get profile data for the user\n    * @returns {Promise<Object>} The user's profile data.\n    */",
        "meta": {
            "range": [
                3960,
                4052
            ],
            "filename": "User.js",
            "lineno": 114,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035843",
                "name": "User#getProfile",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Get profile data for the user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's profile data."
            }
        ],
        "name": "getProfile",
        "longname": "User#getProfile",
        "kind": "function",
        "memberof": "User",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Edit the current user's note for the user\n    * @arg {String} note The note\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4195,
                4293
            ],
            "filename": "User.js",
            "lineno": 123,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035862",
                "name": "User#editNote",
                "type": "MethodDefinition",
                "paramnames": [
                    "note"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Edit the current user's note for the user",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The note",
                "name": "note"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "name": "editNote",
        "longname": "User#editNote",
        "kind": "function",
        "memberof": "User",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Delete the current user's note for another user\n    */",
        "meta": {
            "range": [
                4383,
                4475
            ],
            "filename": "User.js",
            "lineno": 130,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035883",
                "name": "User#deleteNote",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "[USER ACCOUNT] Delete the current user's note for another user",
        "name": "deleteNote",
        "longname": "User#deleteNote",
        "kind": "function",
        "memberof": "User",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4481,
                4664
            ],
            "filename": "User.js",
            "lineno": 134,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035902",
                "name": "User#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "User#toJSON",
        "kind": "function",
        "memberof": "User",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4668,
                4689
            ],
            "filename": "User.js",
            "lineno": 145,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035922",
                "name": "module.exports",
                "type": "Identifier",
                "value": "User",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                63
            ],
            "filename": "VoiceChannel.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035932",
                "name": "Collection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Collection",
        "longname": "Collection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                71,
                111
            ],
            "filename": "VoiceChannel.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035938",
                "name": "GuildChannel",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "GuildChannel",
        "longname": "GuildChannel",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                147
            ],
            "filename": "VoiceChannel.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035944",
                "name": "Member",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Member",
        "longname": "Member",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild voice channel\n* @extends GuildChannel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Guild} guild The guild that owns the channel\n* @prop {String?} parentID The ID of the category this channel belongs to\n* @prop {String} name The name of the channel\n* @prop {Number} position The position of the channel\n* @prop {Boolean} nsfw Whether the channel is an NSFW channel or not\n* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel\n* @prop {Number?} bitrate The bitrate of the channel\n* @prop {Number?} userLimit The max number of users that can join the channel\n* @prop {Collection<Member>} voiceMembers Collection of Members in this channel\n*/",
        "meta": {
            "range": [
                986,
                3116
            ],
            "filename": "VoiceChannel.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035949",
                "name": "VoiceChannel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "classdesc": "Represents a guild voice channel",
        "augments": [
            "GuildChannel"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild that owns the channel",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the category this channel belongs to",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the channel",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the channel is an NSFW channel or not",
                "name": "nsfw"
            },
            {
                "type": {
                    "names": [
                        "Collection.<PermissionOverwrite>"
                    ]
                },
                "description": "Collection of PermissionOverwrites in this channel",
                "name": "permissionOverwrites"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The bitrate of the channel",
                "name": "bitrate"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The max number of users that can join the channel",
                "name": "userLimit"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Member>"
                    ]
                },
                "description": "Collection of Members in this channel",
                "name": "voiceMembers"
            }
        ],
        "name": "VoiceChannel",
        "longname": "VoiceChannel",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1032,
                1173
            ],
            "filename": "VoiceChannel.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035953",
                "name": "VoiceChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "data",
                    "client"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "VoiceChannel",
        "longname": "VoiceChannel",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a guild voice channel\n* @extends GuildChannel\n* @prop {String} id The ID of the channel\n* @prop {String} mention A string that mentions the channel\n* @prop {Number} type The type of the channel\n* @prop {Guild} guild The guild that owns the channel\n* @prop {String?} parentID The ID of the category this channel belongs to\n* @prop {String} name The name of the channel\n* @prop {Number} position The position of the channel\n* @prop {Boolean} nsfw Whether the channel is an NSFW channel or not\n* @prop {Collection<PermissionOverwrite>} permissionOverwrites Collection of PermissionOverwrites in this channel\n* @prop {Number?} bitrate The bitrate of the channel\n* @prop {Number?} userLimit The max number of users that can join the channel\n* @prop {Collection<Member>} voiceMembers Collection of Members in this channel\n*/",
        "meta": {
            "range": [
                986,
                3116
            ],
            "filename": "VoiceChannel.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035949",
                "name": "VoiceChannel",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data",
                    "client"
                ]
            }
        },
        "name": "VoiceChannel",
        "longname": "VoiceChannel",
        "kind": "class",
        "classdesc": "Represents a guild voice channel",
        "augments": [
            "GuildChannel"
        ],
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A string that mentions the channel",
                "name": "mention"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the channel",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild that owns the channel",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the category this channel belongs to",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the channel",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the channel is an NSFW channel or not",
                "name": "nsfw"
            },
            {
                "type": {
                    "names": [
                        "Collection.<PermissionOverwrite>"
                    ]
                },
                "description": "Collection of PermissionOverwrites in this channel",
                "name": "permissionOverwrites"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The bitrate of the channel",
                "name": "bitrate"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The max number of users that can join the channel",
                "name": "userLimit"
            },
            {
                "type": {
                    "names": [
                        "Collection.<Member>"
                    ]
                },
                "description": "Collection of Members in this channel",
                "name": "voiceMembers"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1097,
                1139
            ],
            "filename": "VoiceChannel.js",
            "lineno": 26,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035965",
                "name": "this.voiceMembers",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "voiceMembers",
        "longname": "VoiceChannel#voiceMembers",
        "kind": "member",
        "memberof": "VoiceChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1179,
                1420
            ],
            "filename": "VoiceChannel.js",
            "lineno": 30,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035978",
                "name": "VoiceChannel#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "VoiceChannel#update",
        "kind": "function",
        "memberof": "VoiceChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1276,
                1303
            ],
            "filename": "VoiceChannel.js",
            "lineno": 34,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035997",
                "name": "this.bitrate",
                "type": "MemberExpression",
                "value": "data.bitrate",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "bitrate",
        "longname": "VoiceChannel#bitrate",
        "kind": "member",
        "memberof": "VoiceChannel",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1371,
                1403
            ],
            "filename": "VoiceChannel.js",
            "lineno": 37,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036012",
                "name": "this.userLimit",
                "type": "MemberExpression",
                "value": "data.user_limit",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "userLimit",
        "longname": "VoiceChannel#userLimit",
        "kind": "member",
        "memberof": "VoiceChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Get all invites in the channel\n    * @returns {Promise<Invite[]>}\n    */",
        "meta": {
            "range": [
                1513,
                1606
            ],
            "filename": "VoiceChannel.js",
            "lineno": 45,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036019",
                "name": "VoiceChannel#getInvites",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all invites in the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Invite>>"
                    ]
                }
            }
        ],
        "name": "getInvites",
        "longname": "VoiceChannel#getInvites",
        "kind": "function",
        "memberof": "VoiceChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Create an invite for the channel\n    * @arg {Object} [options] Invite generation options\n    * @arg {Number} [options.maxAge] How long the invite should last in seconds\n    * @arg {Number} [options.maxUses] How many uses the invite should last for\n    * @arg {Boolean} [options.temporary] Whether the invite grants temporary membership or not\n    * @arg {Boolean} [options.unique] Whether the invite is unique or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Invite>}\n    */",
        "meta": {
            "range": [
                2153,
                2282
            ],
            "filename": "VoiceChannel.js",
            "lineno": 59,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036038",
                "name": "VoiceChannel#createInvite",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create an invite for the channel",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Invite generation options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "How long the invite should last in seconds",
                "name": "options.maxAge"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "How many uses the invite should last for",
                "name": "options.maxUses"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the invite grants temporary membership or not",
                "name": "options.temporary"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the invite is unique or not",
                "name": "options.unique"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Invite>"
                    ]
                }
            }
        ],
        "name": "createInvite",
        "longname": "VoiceChannel#createInvite",
        "kind": "function",
        "memberof": "VoiceChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Joins the channel.\n    * @arg {Object} [options] VoiceConnection constructor options\n    * @arg {Object} [options.shared] Whether the VoiceConnection will be part of a SharedStream or not\n    * @arg {Object} [options.opusOnly] Skip opus encoder initialization. You should not enable this unless you know what you are doing\n    * @returns {Promise<VoiceConnection>} Resolves with a VoiceConnection\n    */",
        "meta": {
            "range": [
                2706,
                2808
            ],
            "filename": "VoiceChannel.js",
            "lineno": 70,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036061",
                "name": "VoiceChannel#join",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Joins the channel.",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "VoiceConnection constructor options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Whether the VoiceConnection will be part of a SharedStream or not",
                "name": "options.shared"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Skip opus encoder initialization. You should not enable this unless you know what you are doing",
                "name": "options.opusOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<VoiceConnection>"
                    ]
                },
                "description": "Resolves with a VoiceConnection"
            }
        ],
        "name": "join",
        "longname": "VoiceChannel#join",
        "kind": "function",
        "memberof": "VoiceChannel",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Leaves the channel.\n    */",
        "meta": {
            "range": [
                2855,
                2943
            ],
            "filename": "VoiceChannel.js",
            "lineno": 77,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036082",
                "name": "VoiceChannel#leave",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Leaves the channel.",
        "name": "leave",
        "longname": "VoiceChannel#leave",
        "kind": "function",
        "memberof": "VoiceChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2949,
                3114
            ],
            "filename": "VoiceChannel.js",
            "lineno": 81,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036101",
                "name": "VoiceChannel#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "VoiceChannel#toJSON",
        "kind": "function",
        "memberof": "VoiceChannel",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3118,
                3147
            ],
            "filename": "VoiceChannel.js",
            "lineno": 91,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036120",
                "name": "module.exports",
                "type": "Identifier",
                "value": "VoiceChannel",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                45
            ],
            "filename": "VoiceState.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036130",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a member's voice state in a call/guild\n* @prop {String} id The ID of the member\n* @prop {String?} sessionID The ID of the member's current voice session\n* @prop {String?} channelID The ID of the member's current voice channel\n* @prop {Boolean} mute Whether the member is server muted or not\n* @prop {Boolean} deaf Whether the member is server deafened or not\n* @prop {Boolean} suppress Whether the member is suppressed or not\n* @prop {Boolean} selfMute Whether the member is self muted or not\n* @prop {Boolean} selfDeaf Whether the member is self deafened or not\n* @prop {Boolean} selfStream Whether the member is streaming using \"Go Live\"\n*/",
        "meta": {
            "range": [
                708,
                2088
            ],
            "filename": "VoiceState.js",
            "lineno": 17,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036135",
                "name": "VoiceState",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data"
                ]
            }
        },
        "classdesc": "Represents a member's voice state in a call/guild",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the member's current voice session",
                "name": "sessionID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the member's current voice channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the member is server muted or not",
                "name": "mute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the member is server deafened or not",
                "name": "deaf"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the member is suppressed or not",
                "name": "suppress"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the member is self muted or not",
                "name": "selfMute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the member is self deafened or not",
                "name": "selfDeaf"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the member is streaming using \"Go Live\"",
                "name": "selfStream"
            }
        ],
        "name": "VoiceState",
        "longname": "VoiceState",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                744,
                967
            ],
            "filename": "VoiceState.js",
            "lineno": 18,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036139",
                "name": "VoiceState",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "VoiceState",
        "longname": "VoiceState",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a member's voice state in a call/guild\n* @prop {String} id The ID of the member\n* @prop {String?} sessionID The ID of the member's current voice session\n* @prop {String?} channelID The ID of the member's current voice channel\n* @prop {Boolean} mute Whether the member is server muted or not\n* @prop {Boolean} deaf Whether the member is server deafened or not\n* @prop {Boolean} suppress Whether the member is suppressed or not\n* @prop {Boolean} selfMute Whether the member is self muted or not\n* @prop {Boolean} selfDeaf Whether the member is self deafened or not\n* @prop {Boolean} selfStream Whether the member is streaming using \"Go Live\"\n*/",
        "meta": {
            "range": [
                708,
                2088
            ],
            "filename": "VoiceState.js",
            "lineno": 17,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036135",
                "name": "VoiceState",
                "type": "ClassDeclaration",
                "paramnames": [
                    "data"
                ]
            }
        },
        "name": "VoiceState",
        "longname": "VoiceState",
        "kind": "class",
        "classdesc": "Represents a member's voice state in a call/guild",
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the member's current voice session",
                "name": "sessionID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the member's current voice channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the member is server muted or not",
                "name": "mute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the member is server deafened or not",
                "name": "deaf"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the member is suppressed or not",
                "name": "suppress"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the member is self muted or not",
                "name": "selfMute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the member is self deafened or not",
                "name": "selfDeaf"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the member is streaming using \"Go Live\"",
                "name": "selfStream"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                796,
                813
            ],
            "filename": "VoiceState.js",
            "lineno": 20,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036151",
                "name": "this.mute",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mute",
        "longname": "VoiceState#mute",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                823,
                840
            ],
            "filename": "VoiceState.js",
            "lineno": 21,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036157",
                "name": "this.deaf",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "deaf",
        "longname": "VoiceState#deaf",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                850,
                871
            ],
            "filename": "VoiceState.js",
            "lineno": 22,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036163",
                "name": "this.suppress",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "suppress",
        "longname": "VoiceState#suppress",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                881,
                902
            ],
            "filename": "VoiceState.js",
            "lineno": 23,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036169",
                "name": "this.selfMute",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "selfMute",
        "longname": "VoiceState#selfMute",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                912,
                933
            ],
            "filename": "VoiceState.js",
            "lineno": 24,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036175",
                "name": "this.selfDeaf",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "selfDeaf",
        "longname": "VoiceState#selfDeaf",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                973,
                1803
            ],
            "filename": "VoiceState.js",
            "lineno": 28,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036186",
                "name": "VoiceState#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "VoiceState#update",
        "kind": "function",
        "memberof": "VoiceState",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1044,
                1076
            ],
            "filename": "VoiceState.js",
            "lineno": 30,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036199",
                "name": "this.channelID",
                "type": "MemberExpression",
                "value": "data.channel_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channelID",
        "longname": "VoiceState#channelID",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1090,
                1156
            ],
            "filename": "VoiceState.js",
            "lineno": 31,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036207",
                "name": "this.sessionID",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "VoiceState#sessionID",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1220,
                1258
            ],
            "filename": "VoiceState.js",
            "lineno": 33,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036229",
                "name": "this.channelID",
                "type": "AssignmentExpression",
                "value": "this.sessionID",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channelID",
        "longname": "VoiceState#channelID",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1237,
                1258
            ],
            "filename": "VoiceState.js",
            "lineno": 33,
            "columnno": 29,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036233",
                "name": "this.sessionID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sessionID",
        "longname": "VoiceState#sessionID",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1320,
                1341
            ],
            "filename": "VoiceState.js",
            "lineno": 36,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036246",
                "name": "this.mute",
                "type": "MemberExpression",
                "value": "data.mute",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mute",
        "longname": "VoiceState#mute",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1403,
                1424
            ],
            "filename": "VoiceState.js",
            "lineno": 39,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036261",
                "name": "this.deaf",
                "type": "MemberExpression",
                "value": "data.deaf",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "deaf",
        "longname": "VoiceState#deaf",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1510,
                1539
            ],
            "filename": "VoiceState.js",
            "lineno": 42,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036276",
                "name": "this.suppress",
                "type": "MemberExpression",
                "value": "data.suppress",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "suppress",
        "longname": "VoiceState#suppress",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1606,
                1636
            ],
            "filename": "VoiceState.js",
            "lineno": 45,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036291",
                "name": "this.selfMute",
                "type": "MemberExpression",
                "value": "data.self_mute",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "selfMute",
        "longname": "VoiceState#selfMute",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1703,
                1733
            ],
            "filename": "VoiceState.js",
            "lineno": 48,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036306",
                "name": "this.selfDeaf",
                "type": "MemberExpression",
                "value": "data.self_deaf",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "selfDeaf",
        "longname": "VoiceState#selfDeaf",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1753,
                1796
            ],
            "filename": "VoiceState.js",
            "lineno": 50,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036314",
                "name": "this.selfStream",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "selfStream",
        "longname": "VoiceState#selfStream",
        "kind": "member",
        "memberof": "VoiceState",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1809,
                2086
            ],
            "filename": "VoiceState.js",
            "lineno": 53,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036323",
                "name": "VoiceState#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "VoiceState#toJSON",
        "kind": "function",
        "memberof": "VoiceState",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2090,
                2117
            ],
            "filename": "VoiceState.js",
            "lineno": 68,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100036347",
                "name": "module.exports",
                "type": "Identifier",
                "value": "VoiceState",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n* Handle ratelimiting something\n* @prop {Number} tokens How many tokens the bucket has consumed in this interval\n* @prop {Number} lastReset Timestamp of last token clearing\n* @prop {Number} lastSend Timestamp of last token consumption\n* @prop {Number} tokenLimit The max number tokens the bucket can consume per interval\n* @prop {Number} interval How long (in ms) to wait between clearing used tokens\n*/",
        "meta": {
            "range": [
                423,
                3303
            ],
            "filename": "Bucket.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036356",
                "name": "Bucket",
                "type": "ClassDeclaration",
                "paramnames": [
                    "tokenLimit",
                    "interval",
                    "options"
                ]
            }
        },
        "classdesc": "Handle ratelimiting something",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How many tokens the bucket has consumed in this interval",
                "name": "tokens"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of last token clearing",
                "name": "lastReset"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of last token consumption",
                "name": "lastSend"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The max number tokens the bucket can consume per interval",
                "name": "tokenLimit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How long (in ms) to wait between clearing used tokens",
                "name": "interval"
            }
        ],
        "name": "Bucket",
        "longname": "Bucket",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "/**\n    * Construct a Bucket\n    * @arg {Number} tokenLimit The max number of tokens the bucket can consume per interval\n    * @arg {Number} interval How long (in ms) to wait between clearing used tokens\n    * @arg {Object} [options] Optional parameters\n    * @arg {Number} options.reservedTokens How many tokens to reserve for priority operations\n    * @arg {Object} options.latencyRef A latency reference object\n    * @arg {Number} options.latencyRef.latency Interval between consuming tokens\n    */",
        "meta": {
            "range": [
                948,
                1280
            ],
            "filename": "Bucket.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036359",
                "name": "Bucket",
                "type": "MethodDefinition",
                "paramnames": [
                    "tokenLimit",
                    "interval",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Construct a Bucket",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The max number of tokens the bucket can consume per interval",
                "name": "tokenLimit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How long (in ms) to wait between clearing used tokens",
                "name": "interval"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Optional parameters",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How many tokens to reserve for priority operations",
                "name": "options.reservedTokens"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A latency reference object",
                "name": "options.latencyRef"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Interval between consuming tokens",
                "name": "options.latencyRef.latency"
            }
        ],
        "name": "Bucket",
        "longname": "Bucket",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "/**\n* Handle ratelimiting something\n* @prop {Number} tokens How many tokens the bucket has consumed in this interval\n* @prop {Number} lastReset Timestamp of last token clearing\n* @prop {Number} lastSend Timestamp of last token consumption\n* @prop {Number} tokenLimit The max number tokens the bucket can consume per interval\n* @prop {Number} interval How long (in ms) to wait between clearing used tokens\n*/",
        "meta": {
            "range": [
                423,
                3303
            ],
            "filename": "Bucket.js",
            "lineno": 11,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036356",
                "name": "Bucket",
                "type": "ClassDeclaration",
                "paramnames": [
                    "tokenLimit",
                    "interval",
                    "options"
                ]
            }
        },
        "name": "Bucket",
        "longname": "Bucket",
        "kind": "class",
        "classdesc": "Handle ratelimiting something",
        "scope": "global",
        "description": "Construct a Bucket",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The max number of tokens the bucket can consume per interval",
                "name": "tokenLimit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How long (in ms) to wait between clearing used tokens",
                "name": "interval"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Optional parameters",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How many tokens to reserve for priority operations",
                "name": "options.reservedTokens"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "A latency reference object",
                "name": "options.latencyRef"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Interval between consuming tokens",
                "name": "options.latencyRef.latency"
            }
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How many tokens the bucket has consumed in this interval",
                "name": "tokens"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of last token clearing",
                "name": "lastReset"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of last token consumption",
                "name": "lastSend"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The max number tokens the bucket can consume per interval",
                "name": "tokenLimit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How long (in ms) to wait between clearing used tokens",
                "name": "interval"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1006,
                1034
            ],
            "filename": "Bucket.js",
            "lineno": 22,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036369",
                "name": "this.tokenLimit",
                "type": "Identifier",
                "value": "tokenLimit",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "tokenLimit",
        "longname": "Bucket#tokenLimit",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1044,
                1068
            ],
            "filename": "Bucket.js",
            "lineno": 23,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036375",
                "name": "this.interval",
                "type": "Identifier",
                "value": "interval",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "interval",
        "longname": "Bucket#interval",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1078,
                1130
            ],
            "filename": "Bucket.js",
            "lineno": 24,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036381",
                "name": "this.latencyRef",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "latencyRef",
        "longname": "Bucket#latencyRef",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1119,
                1129
            ],
            "filename": "Bucket.js",
            "lineno": 24,
            "columnno": 49,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036390",
                "name": "latency",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "latency",
        "longname": "latency",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1140,
                1188
            ],
            "filename": "Bucket.js",
            "lineno": 25,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036393",
                "name": "this.lastReset",
                "type": "AssignmentExpression",
                "value": "this.tokens",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastReset",
        "longname": "Bucket#lastReset",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1157,
                1188
            ],
            "filename": "Bucket.js",
            "lineno": 25,
            "columnno": 25,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036397",
                "name": "this.tokens",
                "type": "AssignmentExpression",
                "value": "this.lastSend",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "tokens",
        "longname": "Bucket#tokens",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1171,
                1188
            ],
            "filename": "Bucket.js",
            "lineno": 25,
            "columnno": 39,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036401",
                "name": "this.lastSend",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastSend",
        "longname": "Bucket#lastSend",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1198,
                1247
            ],
            "filename": "Bucket.js",
            "lineno": 26,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036407",
                "name": "this.reservedTokens",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reservedTokens",
        "longname": "Bucket#reservedTokens",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1257,
                1273
            ],
            "filename": "Bucket.js",
            "lineno": 27,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036417",
                "name": "this._queue",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_queue",
        "longname": "Bucket#_queue",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Queue something in the Bucket\n    * @arg {Function} func A callback to call when a token can be consumed\n    * @arg {Boolean} priority Whether or not the callback should use reserved tokens\n    */",
        "meta": {
            "range": [
                1497,
                1703
            ],
            "filename": "Bucket.js",
            "lineno": 35,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036422",
                "name": "Bucket#queue",
                "type": "MethodDefinition",
                "paramnames": [
                    "func",
                    "priority"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Queue something in the Bucket",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A callback to call when a token can be consumed",
                "name": "func"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether or not the callback should use reserved tokens",
                "name": "priority",
                "defaultvalue": false
            }
        ],
        "name": "queue",
        "longname": "Bucket#queue",
        "kind": "function",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1583,
                1587
            ],
            "filename": "Bucket.js",
            "lineno": 37,
            "columnno": 33,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036441",
                "name": "func",
                "type": "Identifier",
                "value": "func"
            }
        },
        "undocumented": true,
        "name": "func",
        "longname": "func",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1589,
                1597
            ],
            "filename": "Bucket.js",
            "lineno": 37,
            "columnno": 39,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036443",
                "name": "priority",
                "type": "Identifier",
                "value": "priority"
            }
        },
        "undocumented": true,
        "name": "priority",
        "longname": "priority",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1648,
                1652
            ],
            "filename": "Bucket.js",
            "lineno": 39,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036454",
                "name": "func",
                "type": "Identifier",
                "value": "func"
            }
        },
        "undocumented": true,
        "name": "func",
        "longname": "func",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1654,
                1662
            ],
            "filename": "Bucket.js",
            "lineno": 39,
            "columnno": 36,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036456",
                "name": "priority",
                "type": "Identifier",
                "value": "priority"
            }
        },
        "undocumented": true,
        "name": "priority",
        "longname": "priority",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1709,
                3301
            ],
            "filename": "Bucket.js",
            "lineno": 44,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036463",
                "name": "Bucket#check",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "check",
        "longname": "Bucket#check",
        "kind": "function",
        "memberof": "Bucket",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1918,
                1945
            ],
            "filename": "Bucket.js",
            "lineno": 49,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036506",
                "name": "this.lastReset",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastReset",
        "longname": "Bucket#lastReset",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1959,
                2015
            ],
            "filename": "Bucket.js",
            "lineno": 50,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036515",
                "name": "this.tokens",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "tokens",
        "longname": "Bucket#tokens",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2040,
                2043
            ],
            "filename": "Bucket.js",
            "lineno": 53,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036532",
                "name": "val"
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2057,
                2104
            ],
            "filename": "Bucket.js",
            "lineno": 54,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036535",
                "name": "tokensAvailable",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "tokensAvailable",
        "longname": "<anonymous>~tokensAvailable",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2118,
                2199
            ],
            "filename": "Bucket.js",
            "lineno": 55,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036545",
                "name": "unreservedTokensAvailable",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "unreservedTokensAvailable",
        "longname": "<anonymous>~unreservedTokensAvailable",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2359,
                2406
            ],
            "filename": "Bucket.js",
            "lineno": 58,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036585",
                "name": "tokensAvailable",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "tokensAvailable",
        "longname": "<anonymous>~tokensAvailable",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2420,
                2501
            ],
            "filename": "Bucket.js",
            "lineno": 59,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036595",
                "name": "unreservedTokensAvailable",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "unreservedTokensAvailable",
        "longname": "<anonymous>~unreservedTokensAvailable",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2521,
                2547
            ],
            "filename": "Bucket.js",
            "lineno": 60,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036609",
                "name": "item",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2561,
                2619
            ],
            "filename": "Bucket.js",
            "lineno": 61,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036618",
                "name": "val",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2726,
                2752
            ],
            "filename": "Bucket.js",
            "lineno": 64,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036653",
                "name": "this.lastSend",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastSend",
        "longname": "Bucket#lastSend",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2884,
                2916
            ],
            "filename": "Bucket.js",
            "lineno": 69,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036674",
                "name": "this.lastSend",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "lastSend",
        "longname": "Bucket#lastSend",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3009,
                3284
            ],
            "filename": "Bucket.js",
            "lineno": 74,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036699",
                "name": "this.timeout",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "Bucket#timeout",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3059,
                3078
            ],
            "filename": "Bucket.js",
            "lineno": 75,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036708",
                "name": "this.timeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "Bucket#timeout",
        "kind": "member",
        "memberof": "Bucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3305,
                3328
            ],
            "filename": "Bucket.js",
            "lineno": 82,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036759",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Bucket",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n* Hold a bunch of something\n* @extends Map\n* @prop {Class} baseObject The base class for all items\n* @prop {Number?} limit Max number of items to hold\n*/",
        "meta": {
            "range": [
                173,
                6017
            ],
            "filename": "Collection.js",
            "lineno": 9,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036768",
                "name": "Collection",
                "type": "ClassDeclaration",
                "paramnames": [
                    "baseObject",
                    "limit"
                ]
            }
        },
        "classdesc": "Hold a bunch of something",
        "augments": [
            "Map"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Class"
                    ]
                },
                "description": "The base class for all items",
                "name": "baseObject"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "Max number of items to hold",
                "name": "limit"
            }
        ],
        "name": "Collection",
        "longname": "Collection",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "/**\n    * Construct a Collection\n    * @arg {Class} baseObject The base class for all items\n    * @arg {Number} [limit] Max number of items to hold\n    */",
        "meta": {
            "range": [
                367,
                488
            ],
            "filename": "Collection.js",
            "lineno": 15,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036772",
                "name": "Collection",
                "type": "MethodDefinition",
                "paramnames": [
                    "baseObject",
                    "limit"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Construct a Collection",
        "params": [
            {
                "type": {
                    "names": [
                        "Class"
                    ]
                },
                "description": "The base class for all items",
                "name": "baseObject"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "Max number of items to hold",
                "name": "limit"
            }
        ],
        "name": "Collection",
        "longname": "Collection",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "/**\n* Hold a bunch of something\n* @extends Map\n* @prop {Class} baseObject The base class for all items\n* @prop {Number?} limit Max number of items to hold\n*/",
        "meta": {
            "range": [
                173,
                6017
            ],
            "filename": "Collection.js",
            "lineno": 9,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036768",
                "name": "Collection",
                "type": "ClassDeclaration",
                "paramnames": [
                    "baseObject",
                    "limit"
                ]
            }
        },
        "name": "Collection",
        "longname": "Collection",
        "kind": "class",
        "classdesc": "Hold a bunch of something",
        "augments": [
            "Map"
        ],
        "scope": "global",
        "description": "Construct a Collection",
        "params": [
            {
                "type": {
                    "names": [
                        "Class"
                    ]
                },
                "description": "The base class for all items",
                "name": "baseObject"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "Max number of items to hold",
                "name": "limit"
            }
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Class"
                    ]
                },
                "description": "The base class for all items",
                "name": "baseObject"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "Max number of items to hold",
                "name": "limit"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                425,
                453
            ],
            "filename": "Collection.js",
            "lineno": 17,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036782",
                "name": "this.baseObject",
                "type": "Identifier",
                "value": "baseObject",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "baseObject",
        "longname": "Collection#baseObject",
        "kind": "member",
        "memberof": "Collection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                463,
                481
            ],
            "filename": "Collection.js",
            "lineno": 18,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036788",
                "name": "this.limit",
                "type": "Identifier",
                "value": "limit",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "Collection#limit",
        "kind": "member",
        "memberof": "Collection",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Add an object\n    * @arg {Object} obj The object data\n    * @arg {String} obj.id The ID of the object\n    * @arg {Class?} extra An extra parameter the constructor may need\n    * @arg {Boolean} replace Whether to replace an existing object with the same ID\n    * @returns {Class} The existing or newly created object\n    */",
        "meta": {
            "range": [
                831,
                1668
            ],
            "filename": "Collection.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036793",
                "name": "Collection#add",
                "type": "MethodDefinition",
                "paramnames": [
                    "obj",
                    "extra",
                    "replace"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Add an object",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object data",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the object",
                "name": "obj.id"
            },
            {
                "type": {
                    "names": [
                        "Class"
                    ]
                },
                "nullable": true,
                "description": "An extra parameter the constructor may need",
                "name": "extra"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether to replace an existing object with the same ID",
                "name": "replace"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Class"
                    ]
                },
                "description": "The existing or newly created object"
            }
        ],
        "name": "add",
        "longname": "Collection#add",
        "kind": "function",
        "memberof": "Collection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1144,
                1171
            ],
            "filename": "Collection.js",
            "lineno": 36,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036845",
                "name": "existing",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "existing",
        "longname": "<anonymous>~existing",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1356,
                1393
            ],
            "filename": "Collection.js",
            "lineno": 41,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036883",
                "name": "obj",
                "type": "NewExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "obj",
        "longname": "<anonymous>~obj",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1507,
                1525
            ],
            "filename": "Collection.js",
            "lineno": 47,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036914",
                "name": "iter",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "iter",
        "longname": "<anonymous>~iter",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n    * Return the first object to make the function evaluate true\n    * @arg {function} func A function that takes an object and returns true if it matches\n    * @returns {Class?} The first matching object, or undefined if no match\n    */",
        "meta": {
            "range": [
                1920,
                2089
            ],
            "filename": "Collection.js",
            "lineno": 60,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036942",
                "name": "Collection#find",
                "type": "MethodDefinition",
                "paramnames": [
                    "func"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Return the first object to make the function evaluate true",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function that takes an object and returns true if it matches",
                "name": "func"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Class"
                    ]
                },
                "nullable": true,
                "description": "The first matching object, or undefined if no match"
            }
        ],
        "name": "find",
        "longname": "Collection#find",
        "kind": "function",
        "memberof": "Collection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1951,
                1955
            ],
            "filename": "Collection.js",
            "lineno": 61,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036949",
                "name": "item"
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n    * Get a random object from the Collection\n    * @returns {Class?} The random object, or undefined if there is no match\n    */",
        "meta": {
            "range": [
                2233,
                2456
            ],
            "filename": "Collection.js",
            "lineno": 73,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036965",
                "name": "Collection#random",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get a random object from the Collection",
        "returns": [
            {
                "type": {
                    "names": [
                        "Class"
                    ]
                },
                "nullable": true,
                "description": "The random object, or undefined if there is no match"
            }
        ],
        "name": "random",
        "longname": "Collection#random",
        "kind": "function",
        "memberof": "Collection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2258,
                2303
            ],
            "filename": "Collection.js",
            "lineno": 74,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036970",
                "name": "index",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "index",
        "longname": "<anonymous>~index",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2319,
                2339
            ],
            "filename": "Collection.js",
            "lineno": 75,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036985",
                "name": "iter",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "iter",
        "longname": "<anonymous>~iter",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2357,
                2362
            ],
            "filename": "Collection.js",
            "lineno": 76,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100036993",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n    * Return all the objects that make the function evaluate true\n    * @arg {function} func A function that takes an object and returns true if it matches\n    * @returns {Array<Class>} An array containing all the objects that matched\n    */",
        "meta": {
            "range": [
                2712,
                2904
            ],
            "filename": "Collection.js",
            "lineno": 87,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037014",
                "name": "Collection#filter",
                "type": "MethodDefinition",
                "paramnames": [
                    "func"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Return all the objects that make the function evaluate true",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function that takes an object and returns true if it matches",
                "name": "func"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Class>"
                    ]
                },
                "description": "An array containing all the objects that matched"
            }
        ],
        "name": "filter",
        "longname": "Collection#filter",
        "kind": "function",
        "memberof": "Collection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2741,
                2749
            ],
            "filename": "Collection.js",
            "lineno": 88,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037020",
                "name": "arr",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "arr",
        "longname": "<anonymous>~arr",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2769,
                2773
            ],
            "filename": "Collection.js",
            "lineno": 89,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037025",
                "name": "item"
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n    * Return an array with the results of applying the given function to each element\n    * @arg {function} func A function that takes an object and returns something\n    * @returns {Array} An array containing the results\n    */",
        "meta": {
            "range": [
                3147,
                3295
            ],
            "filename": "Collection.js",
            "lineno": 102,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037045",
                "name": "Collection#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "func"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Return an array with the results of applying the given function to each element",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function that takes an object and returns something",
                "name": "func"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "An array containing the results"
            }
        ],
        "name": "map",
        "longname": "Collection#map",
        "kind": "function",
        "memberof": "Collection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3173,
                3181
            ],
            "filename": "Collection.js",
            "lineno": 103,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037051",
                "name": "arr",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "arr",
        "longname": "<anonymous>~arr",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3201,
                3205
            ],
            "filename": "Collection.js",
            "lineno": 104,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037056",
                "name": "item"
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n     * Returns a value resulting from applying a function to every element of the collection\n     * @arg {function} func A function that takes the previous value and the next item and returns a new value\n     * @arg {any} [initialValue] The initial value passed to the function\n     * @returns {any} The final result\n     */",
        "meta": {
            "range": [
                3634,
                3935
            ],
            "filename": "Collection.js",
            "lineno": 116,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037073",
                "name": "Collection#reduce",
                "type": "MethodDefinition",
                "paramnames": [
                    "func",
                    "initialValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns a value resulting from applying a function to every element of the collection",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function that takes the previous value and the next item and returns a new value",
                "name": "func"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "optional": true,
                "description": "The initial value passed to the function",
                "name": "initialValue"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The final result"
            }
        ],
        "name": "reduce",
        "longname": "Collection#reduce",
        "kind": "function",
        "memberof": "Collection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3677,
                3697
            ],
            "filename": "Collection.js",
            "lineno": 117,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037080",
                "name": "iter",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "iter",
        "longname": "<anonymous>~iter",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3711,
                3714
            ],
            "filename": "Collection.js",
            "lineno": 118,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037087",
                "name": "val"
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3728,
                3798
            ],
            "filename": "Collection.js",
            "lineno": 119,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037090",
                "name": "result",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3815,
                3838
            ],
            "filename": "Collection.js",
            "lineno": 120,
            "columnno": 15,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037105",
                "name": "val",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": ".value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "val",
        "longname": "<anonymous>~val",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3869,
                3895
            ],
            "filename": "Collection.js",
            "lineno": 121,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037116",
                "name": "result",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "result",
        "longname": "<anonymous>~result",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Returns true if all elements satisfy the condition\n     * @arg {function} func A function that takes an object and returns true or false\n     * @returns {Boolean} Whether or not all elements satisfied the condition\n     */",
        "meta": {
            "range": [
                4179,
                4346
            ],
            "filename": "Collection.js",
            "lineno": 131,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037124",
                "name": "Collection#every",
                "type": "MethodDefinition",
                "paramnames": [
                    "func"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns true if all elements satisfy the condition",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function that takes an object and returns true or false",
                "name": "func"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether or not all elements satisfied the condition"
            }
        ],
        "name": "every",
        "longname": "Collection#every",
        "kind": "function",
        "memberof": "Collection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4211,
                4215
            ],
            "filename": "Collection.js",
            "lineno": 132,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037131",
                "name": "item"
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n     * Returns true if at least one element satisfies the condition\n     * @arg {function} func A function that takes an object and returns true or false\n     * @returns {Boolean} Whether or not at least one element satisfied the condition\n     */",
        "meta": {
            "range": [
                4608,
                4773
            ],
            "filename": "Collection.js",
            "lineno": 145,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037148",
                "name": "Collection#some",
                "type": "MethodDefinition",
                "paramnames": [
                    "func"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns true if at least one element satisfies the condition",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function that takes an object and returns true or false",
                "name": "func"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether or not at least one element satisfied the condition"
            }
        ],
        "name": "some",
        "longname": "Collection#some",
        "kind": "function",
        "memberof": "Collection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4639,
                4643
            ],
            "filename": "Collection.js",
            "lineno": 146,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037155",
                "name": "item"
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n    * Update an object\n    * @arg {Object} obj The updated object data\n    * @arg {String} obj.id The ID of the object\n    * @arg {Class?} extra An extra parameter the constructor may need\n    * @arg {Boolean} replace Whether to replace an existing object with the same ID\n    * @returns {Class} The updated object\n    */",
        "meta": {
            "range": [
                5109,
                5415
            ],
            "filename": "Collection.js",
            "lineno": 162,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037171",
                "name": "Collection#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "obj",
                    "extra",
                    "replace"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Update an object",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The updated object data",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the object",
                "name": "obj.id"
            },
            {
                "type": {
                    "names": [
                        "Class"
                    ]
                },
                "nullable": true,
                "description": "An extra parameter the constructor may need",
                "name": "extra"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether to replace an existing object with the same ID",
                "name": "replace"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Class"
                    ]
                },
                "description": "The updated object"
            }
        ],
        "name": "update",
        "longname": "Collection#update",
        "kind": "function",
        "memberof": "Collection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5251,
                5274
            ],
            "filename": "Collection.js",
            "lineno": 166,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037195",
                "name": "item",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n    * Remove an object\n    * @arg {Object} obj The object\n    * @arg {String} obj.id The ID of the object\n    * @returns {Class?} The removed object, or null if nothing was removed\n    */",
        "meta": {
            "range": [
                5617,
                5780
            ],
            "filename": "Collection.js",
            "lineno": 180,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037225",
                "name": "Collection#remove",
                "type": "MethodDefinition",
                "paramnames": [
                    "obj"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove an object",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The object",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the object",
                "name": "obj.id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Class"
                    ]
                },
                "nullable": true,
                "description": "The removed object, or null if nothing was removed"
            }
        ],
        "name": "remove",
        "longname": "Collection#remove",
        "kind": "function",
        "memberof": "Collection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5645,
                5668
            ],
            "filename": "Collection.js",
            "lineno": 181,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037231",
                "name": "item",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5786,
                5860
            ],
            "filename": "Collection.js",
            "lineno": 189,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037256",
                "name": "Collection#toString",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "Collection#toString",
        "kind": "function",
        "memberof": "Collection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5866,
                6015
            ],
            "filename": "Collection.js",
            "lineno": 193,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037269",
                "name": "Collection#toJSON",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "Collection#toJSON",
        "kind": "function",
        "memberof": "Collection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5891,
                5900
            ],
            "filename": "Collection.js",
            "lineno": 194,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037274",
                "name": "json",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "json",
        "longname": "<anonymous>~json",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5920,
                5924
            ],
            "filename": "Collection.js",
            "lineno": 195,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037279",
                "name": "item"
            }
        },
        "undocumented": true,
        "name": "item",
        "longname": "<anonymous>~item",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5957,
                5977
            ],
            "filename": "Collection.js",
            "lineno": 196,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037287",
                "name": "json[undefined]",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "item",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~json.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~json",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6019,
                6046
            ],
            "filename": "Collection.js",
            "lineno": 202,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037297",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Collection",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                15,
                974
            ],
            "filename": "MultipartData.js",
            "lineno": 3,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037306",
                "name": "MultipartData",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "MultipartData",
        "longname": "MultipartData",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                41,
                134
            ],
            "filename": "MultipartData.js",
            "lineno": 4,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037309",
                "name": "MultipartData",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "MultipartData",
        "longname": "MultipartData",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                103
            ],
            "filename": "MultipartData.js",
            "lineno": 5,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037314",
                "name": "this.boundary",
                "type": "Literal",
                "value": "----------------Eris",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "boundary",
        "longname": "MultipartData#boundary",
        "kind": "member",
        "memberof": "MultipartData",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                113,
                127
            ],
            "filename": "MultipartData.js",
            "lineno": 6,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037320",
                "name": "this.bufs",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "bufs",
        "longname": "MultipartData#bufs",
        "kind": "member",
        "memberof": "MultipartData",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                140,
                854
            ],
            "filename": "MultipartData.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037325",
                "name": "MultipartData#attach",
                "type": "MethodDefinition",
                "paramnames": [
                    "fieldName",
                    "data",
                    "filename"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "attach",
        "longname": "MultipartData#attach",
        "kind": "function",
        "memberof": "MultipartData",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                251,
                348
            ],
            "filename": "MultipartData.js",
            "lineno": 13,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037339",
                "name": "str",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "str",
        "longname": "<anonymous>~str",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                385,
                425
            ],
            "filename": "MultipartData.js",
            "lineno": 15,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037356",
                "name": "str",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "str",
        "longname": "<anonymous>~str",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                486,
                536
            ],
            "filename": "MultipartData.js",
            "lineno": 18,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037369",
                "name": "str",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": "\r\nContent-Type: application/octet-stream",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "str",
        "longname": "<anonymous>~str",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                596,
                638
            ],
            "filename": "MultipartData.js",
            "lineno": 20,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037379",
                "name": "str",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": "\r\nContent-Type: application/json",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "str",
        "longname": "<anonymous>~str",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                652,
                692
            ],
            "filename": "MultipartData.js",
            "lineno": 21,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037383",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                723,
                752
            ],
            "filename": "MultipartData.js",
            "lineno": 23,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037396",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                860,
                972
            ],
            "filename": "MultipartData.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037427",
                "name": "MultipartData#finish",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "finish",
        "longname": "MultipartData#finish",
        "kind": "function",
        "memberof": "MultipartData",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                976,
                1006
            ],
            "filename": "MultipartData.js",
            "lineno": 35,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037454",
                "name": "module.exports",
                "type": "Identifier",
                "value": "MultipartData",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4,
                12
            ],
            "filename": "Opus.js",
            "lineno": 1,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037462",
                "name": "NodeOpus"
            }
        },
        "undocumented": true,
        "name": "NodeOpus",
        "longname": "NodeOpus",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24,
                55
            ],
            "filename": "Opus.js",
            "lineno": 3,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037467",
                "name": "NodeOpus",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "NodeOpus",
        "longname": "NodeOpus",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                105,
                115
            ],
            "filename": "Opus.js",
            "lineno": 6,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037474",
                "name": "OpusScript"
            }
        },
        "undocumented": true,
        "name": "OpusScript",
        "longname": "OpusScript",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                127,
                161
            ],
            "filename": "Opus.js",
            "lineno": 8,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037479",
                "name": "OpusScript",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "OpusScript",
        "longname": "OpusScript",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                209,
                770
            ],
            "filename": "Opus.js",
            "lineno": 13,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037486",
                "name": "module.exports.createOpus",
                "type": "FunctionExpression",
                "value": "createOpus",
                "paramnames": [
                    "samplingRate",
                    "channels",
                    "bitrate"
                ]
            },
            "vars": {
                "opus": "createOpus~opus"
            }
        },
        "undocumented": true,
        "name": "createOpus",
        "longname": "createOpus",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                418,
                493
            ],
            "filename": "Opus.js",
            "lineno": 19,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037512",
                "name": "opus",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "opus",
        "longname": "createOpus~opus",
        "kind": "constant",
        "memberof": "createOpus",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n* Ratelimit requests and release in sequence\n* @prop {Number} limit How many tokens the bucket can consume in the current interval\n* @prop {Number} remaining How many tokens the bucket has left in the current interval\n* @prop {Number} reset Timestamp of next reset\n* @prop {Boolean} processing Whether the queue is being processed\n*/",
        "meta": {
            "range": [
                353,
                2385
            ],
            "filename": "SequentialBucket.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037556",
                "name": "SequentialBucket",
                "type": "ClassDeclaration",
                "paramnames": [
                    "limit",
                    "latencyRef"
                ]
            }
        },
        "classdesc": "Ratelimit requests and release in sequence",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How many tokens the bucket can consume in the current interval",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How many tokens the bucket has left in the current interval",
                "name": "remaining"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of next reset",
                "name": "reset"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the queue is being processed",
                "name": "processing"
            }
        ],
        "name": "SequentialBucket",
        "longname": "SequentialBucket",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "/**\n    * Construct a SequentialBucket\n    * @arg {Number} tokenLimit The max number of tokens the bucket can consume per interval\n    * @arg {Object} [latencyRef] An object\n    * @arg {Number} latencyRef.latency Interval between consuming tokens\n    */",
        "meta": {
            "range": [
                640,
                859
            ],
            "filename": "SequentialBucket.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037559",
                "name": "SequentialBucket",
                "type": "MethodDefinition",
                "paramnames": [
                    "limit",
                    "latencyRef"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Construct a SequentialBucket",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The max number of tokens the bucket can consume per interval",
                "name": "tokenLimit"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An object",
                "name": "latencyRef"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Interval between consuming tokens",
                "name": "latencyRef.latency"
            }
        ],
        "name": "SequentialBucket",
        "longname": "SequentialBucket",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "/**\n* Ratelimit requests and release in sequence\n* @prop {Number} limit How many tokens the bucket can consume in the current interval\n* @prop {Number} remaining How many tokens the bucket has left in the current interval\n* @prop {Number} reset Timestamp of next reset\n* @prop {Boolean} processing Whether the queue is being processed\n*/",
        "meta": {
            "range": [
                353,
                2385
            ],
            "filename": "SequentialBucket.js",
            "lineno": 10,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037556",
                "name": "SequentialBucket",
                "type": "ClassDeclaration",
                "paramnames": [
                    "limit",
                    "latencyRef"
                ]
            }
        },
        "name": "SequentialBucket",
        "longname": "SequentialBucket",
        "kind": "class",
        "classdesc": "Ratelimit requests and release in sequence",
        "scope": "global",
        "description": "Construct a SequentialBucket",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The max number of tokens the bucket can consume per interval",
                "name": "tokenLimit"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An object",
                "name": "latencyRef"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Interval between consuming tokens",
                "name": "latencyRef.latency"
            }
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How many tokens the bucket can consume in the current interval",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How many tokens the bucket has left in the current interval",
                "name": "remaining"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of next reset",
                "name": "reset"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the queue is being processed",
                "name": "processing"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                673,
                683
            ],
            "filename": "SequentialBucket.js",
            "lineno": 17,
            "columnno": 37,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037566",
                "name": "latency",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "latency",
        "longname": "latency",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                696,
                731
            ],
            "filename": "SequentialBucket.js",
            "lineno": 18,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037570",
                "name": "this.limit",
                "type": "AssignmentExpression",
                "value": "this.remaining",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "limit",
        "longname": "SequentialBucket#limit",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                709,
                731
            ],
            "filename": "SequentialBucket.js",
            "lineno": 18,
            "columnno": 21,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037574",
                "name": "this.remaining",
                "type": "Identifier",
                "value": "limit",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "remaining",
        "longname": "SequentialBucket#remaining",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                741,
                755
            ],
            "filename": "SequentialBucket.js",
            "lineno": 19,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037580",
                "name": "this.reset",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reset",
        "longname": "SequentialBucket#reset",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                765,
                788
            ],
            "filename": "SequentialBucket.js",
            "lineno": 20,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037586",
                "name": "this.processing",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "processing",
        "longname": "SequentialBucket#processing",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                798,
                826
            ],
            "filename": "SequentialBucket.js",
            "lineno": 21,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037592",
                "name": "this.latencyRef",
                "type": "Identifier",
                "value": "latencyRef",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "latencyRef",
        "longname": "SequentialBucket#latencyRef",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                836,
                852
            ],
            "filename": "SequentialBucket.js",
            "lineno": 22,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037598",
                "name": "this._queue",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_queue",
        "longname": "SequentialBucket#_queue",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Queue something in the SequentialBucket\n    * @arg {Function} func A function to call when a token can be consumed. The function will be passed a callback argument, which must be called to allow the bucket to continue to work\n    */",
        "meta": {
            "range": [
                1112,
                1282
            ],
            "filename": "SequentialBucket.js",
            "lineno": 29,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037603",
                "name": "SequentialBucket#queue",
                "type": "MethodDefinition",
                "paramnames": [
                    "func",
                    "short"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Queue something in the SequentialBucket",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to call when a token can be consumed. The function will be passed a callback argument, which must be called to allow the bucket to continue to work",
                "name": "func"
            }
        ],
        "name": "queue",
        "longname": "SequentialBucket#queue",
        "kind": "function",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1288,
                2383
            ],
            "filename": "SequentialBucket.js",
            "lineno": 38,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037634",
                "name": "SequentialBucket#check",
                "type": "MethodDefinition",
                "paramnames": [
                    "override"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "check",
        "longname": "SequentialBucket#check",
        "kind": "function",
        "memberof": "SequentialBucket",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1442,
                1465
            ],
            "filename": "SequentialBucket.js",
            "lineno": 42,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037660",
                "name": "this.processing",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "processing",
        "longname": "SequentialBucket#processing",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1598,
                1614
            ],
            "filename": "SequentialBucket.js",
            "lineno": 49,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037676",
                "name": "now",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "now",
        "longname": "<anonymous>~now",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1630,
                1694
            ],
            "filename": "SequentialBucket.js",
            "lineno": 50,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037683",
                "name": "offset",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "offset",
        "longname": "<anonymous>~offset",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1763,
                1788
            ],
            "filename": "SequentialBucket.js",
            "lineno": 52,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037713",
                "name": "this.reset",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reset",
        "longname": "SequentialBucket#reset",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1802,
                1829
            ],
            "filename": "SequentialBucket.js",
            "lineno": 53,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037721",
                "name": "this.remaining",
                "type": "MemberExpression",
                "value": "this.limit",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "remaining",
        "longname": "SequentialBucket#remaining",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1849,
                1864
            ],
            "filename": "SequentialBucket.js",
            "lineno": 55,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037729",
                "name": "this.last",
                "type": "Identifier",
                "value": "now",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "last",
        "longname": "SequentialBucket#last",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1912,
                2089
            ],
            "filename": "SequentialBucket.js",
            "lineno": 57,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037742",
                "name": "this.processing",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "processing",
        "longname": "SequentialBucket#processing",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1965,
                1988
            ],
            "filename": "SequentialBucket.js",
            "lineno": 58,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037751",
                "name": "this.processing",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "processing",
        "longname": "SequentialBucket#processing",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2155,
                2177
            ],
            "filename": "SequentialBucket.js",
            "lineno": 64,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037785",
                "name": "this.processing",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "processing",
        "longname": "SequentialBucket#processing",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2327,
                2350
            ],
            "filename": "SequentialBucket.js",
            "lineno": 69,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037817",
                "name": "this.processing",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "processing",
        "longname": "SequentialBucket#processing",
        "kind": "member",
        "memberof": "SequentialBucket",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2387,
                2420
            ],
            "filename": "SequentialBucket.js",
            "lineno": 75,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util",
            "code": {
                "id": "astnode100037823",
                "name": "module.exports",
                "type": "Identifier",
                "value": "SequentialBucket",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                81
            ],
            "filename": "Piper.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037833",
                "name": "DCAOpusTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "DCAOpusTransformer",
        "longname": "DCAOpusTransformer",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                89,
                153
            ],
            "filename": "Piper.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037839",
                "name": "FFmpegOggTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "FFmpegOggTransformer",
        "longname": "FFmpegOggTransformer",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                161,
                225
            ],
            "filename": "Piper.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037845",
                "name": "FFmpegPCMTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "FFmpegPCMTransformer",
        "longname": "FFmpegPCMTransformer",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                233,
                251
            ],
            "filename": "Piper.js",
            "lineno": 6,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037851",
                "name": "FS",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "FS",
        "longname": "FS",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                259,
                281
            ],
            "filename": "Piper.js",
            "lineno": 7,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037857",
                "name": "HTTP",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "HTTP",
        "longname": "HTTP",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                289,
                313
            ],
            "filename": "Piper.js",
            "lineno": 8,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037863",
                "name": "HTTPS",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "HTTPS",
        "longname": "HTTPS",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                321,
                381
            ],
            "filename": "Piper.js",
            "lineno": 9,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037869",
                "name": "OggOpusTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "OggOpusTransformer",
        "longname": "OggOpusTransformer",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                389,
                438
            ],
            "filename": "Piper.js",
            "lineno": 10,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037875",
                "name": "PassThroughStream",
                "type": "MemberExpression",
                "value": ".PassThrough"
            }
        },
        "undocumented": true,
        "name": "PassThroughStream",
        "longname": "PassThroughStream",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                446,
                506
            ],
            "filename": "Piper.js",
            "lineno": 11,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037883",
                "name": "PCMOpusTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "PCMOpusTransformer",
        "longname": "PCMOpusTransformer",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                514,
                547
            ],
            "filename": "Piper.js",
            "lineno": 12,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037889",
                "name": "Stream",
                "type": "MemberExpression",
                "value": ".Stream"
            }
        },
        "undocumented": true,
        "name": "Stream",
        "longname": "Stream",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                555,
                613
            ],
            "filename": "Piper.js",
            "lineno": 13,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037897",
                "name": "VolumeTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "VolumeTransformer",
        "longname": "VolumeTransformer",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                621,
                683
            ],
            "filename": "Piper.js",
            "lineno": 14,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037903",
                "name": "WebmOpusTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "WebmOpusTransformer",
        "longname": "WebmOpusTransformer",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                690,
                702
            ],
            "filename": "Piper.js",
            "lineno": 16,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037909",
                "name": "EventEmitter"
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                714,
                753
            ],
            "filename": "Piper.js",
            "lineno": 18,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037914",
                "name": "EventEmitter",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                774,
                819
            ],
            "filename": "Piper.js",
            "lineno": 20,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037921",
                "name": "EventEmitter",
                "type": "MemberExpression",
                "value": ".EventEmitter",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                824,
                11193
            ],
            "filename": "Piper.js",
            "lineno": 23,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037928",
                "name": "Piper",
                "type": "ClassDeclaration",
                "paramnames": [
                    "converterCommand",
                    "opusFactory"
                ]
            }
        },
        "undocumented": true,
        "name": "Piper",
        "longname": "Piper",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                863,
                1358
            ],
            "filename": "Piper.js",
            "lineno": 24,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037932",
                "name": "Piper",
                "type": "MethodDefinition",
                "paramnames": [
                    "converterCommand",
                    "opusFactory"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Piper",
        "longname": "Piper",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                957,
                997
            ],
            "filename": "Piper.js",
            "lineno": 29,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037947",
                "name": "this.converterCommand",
                "type": "Identifier",
                "value": "converterCommand",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "converterCommand",
        "longname": "Piper#converterCommand",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1007,
                1029
            ],
            "filename": "Piper.js",
            "lineno": 30,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037953",
                "name": "this._dataPackets",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_dataPackets",
        "longname": "Piper#_dataPackets",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1039,
                1063
            ],
            "filename": "Piper.js",
            "lineno": 31,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037959",
                "name": "this._dataPacketMax",
                "type": "Literal",
                "value": 30,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_dataPacketMax",
        "longname": "Piper#_dataPacketMax",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1073,
                1097
            ],
            "filename": "Piper.js",
            "lineno": 32,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037965",
                "name": "this._dataPacketMin",
                "type": "Literal",
                "value": 15,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_dataPacketMin",
        "longname": "Piper#_dataPacketMin",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1107,
                1128
            ],
            "filename": "Piper.js",
            "lineno": 33,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037971",
                "name": "this.encoding",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "encoding",
        "longname": "Piper#encoding",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1138,
                1157
            ],
            "filename": "Piper.js",
            "lineno": 34,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037977",
                "name": "this.libopus",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "libopus",
        "longname": "Piper#libopus",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1168,
                1198
            ],
            "filename": "Piper.js",
            "lineno": 36,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037983",
                "name": "this.opusFactory",
                "type": "Identifier",
                "value": "opusFactory",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "opusFactory",
        "longname": "Piper#opusFactory",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1208,
                1224
            ],
            "filename": "Piper.js",
            "lineno": 37,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037989",
                "name": "this.opus",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "opus",
        "longname": "Piper#opus",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1235,
                1255
            ],
            "filename": "Piper.js",
            "lineno": 39,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100037995",
                "name": "this.volumeLevel",
                "type": "Literal",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "volumeLevel",
        "longname": "Piper#volumeLevel",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1266,
                1290
            ],
            "filename": "Piper.js",
            "lineno": 41,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038001",
                "name": "this._retransformer",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_retransformer",
        "longname": "Piper#_retransformer",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1301,
                1351
            ],
            "filename": "Piper.js",
            "lineno": 43,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038007",
                "name": "this.addDataPacket",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "addDataPacket",
        "longname": "Piper#addDataPacket",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1364,
                8453
            ],
            "filename": "Piper.js",
            "lineno": 46,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038018",
                "name": "Piper#encode",
                "type": "MethodDefinition",
                "paramnames": [
                    "source",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "encode",
        "longname": "Piper#encode",
        "kind": "function",
        "memberof": "Piper",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1820,
                1857
            ],
            "filename": "Piper.js",
            "lineno": 55,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038091",
                "name": "passThrough",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "passThrough",
        "longname": "<anonymous>~passThrough",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2204,
                2224
            ],
            "filename": "Piper.js",
            "lineno": 61,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038152",
                "name": "source",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "passThrough",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "source",
        "longname": "<anonymous>~source",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2781,
                2817
            ],
            "filename": "Piper.js",
            "lineno": 74,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038199",
                "name": "source",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "source",
        "longname": "<anonymous>~source",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3027,
                3051
            ],
            "filename": "Piper.js",
            "lineno": 82,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038229",
                "name": "this._dataPacketMax",
                "type": "Literal",
                "value": 30,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_dataPacketMax",
        "longname": "Piper#_dataPacketMax",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3061,
                3085
            ],
            "filename": "Piper.js",
            "lineno": 83,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038235",
                "name": "this._dataPacketMin",
                "type": "Literal",
                "value": 15,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_dataPacketMin",
        "longname": "Piper#_dataPacketMin",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4273,
                4592
            ],
            "filename": "Piper.js",
            "lineno": 105,
            "columnno": 42,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038423",
                "name": "source",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "source",
        "longname": "<anonymous>~source",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4337,
                4367
            ],
            "filename": "Piper.js",
            "lineno": 106,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038430",
                "name": "command",
                "type": "MemberExpression",
                "value": "this.converterCommand"
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "command",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4397,
                4410
            ],
            "filename": "Piper.js",
            "lineno": 107,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038434",
                "name": "input",
                "type": "Identifier",
                "value": "source"
            }
        },
        "undocumented": true,
        "name": "input",
        "longname": "input",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4440,
                4472
            ],
            "filename": "Piper.js",
            "lineno": 108,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038436",
                "name": "encoderArgs",
                "type": "MemberExpression",
                "value": "options.encoderArgs"
            }
        },
        "undocumented": true,
        "name": "encoderArgs",
        "longname": "encoderArgs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4502,
                4530
            ],
            "filename": "Piper.js",
            "lineno": 109,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038440",
                "name": "inputArgs",
                "type": "MemberExpression",
                "value": "options.inputArgs"
            }
        },
        "undocumented": true,
        "name": "inputArgs",
        "longname": "inputArgs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4666,
                4955
            ],
            "filename": "Piper.js",
            "lineno": 112,
            "columnno": 42,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038461",
                "name": "source",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "source",
        "longname": "<anonymous>~source",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4742,
                4772
            ],
            "filename": "Piper.js",
            "lineno": 113,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038472",
                "name": "command",
                "type": "MemberExpression",
                "value": "this.converterCommand"
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "command",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4802,
                4834
            ],
            "filename": "Piper.js",
            "lineno": 114,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038476",
                "name": "encoderArgs",
                "type": "MemberExpression",
                "value": "options.encoderArgs"
            }
        },
        "undocumented": true,
        "name": "encoderArgs",
        "longname": "encoderArgs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4864,
                4892
            ],
            "filename": "Piper.js",
            "lineno": 115,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038480",
                "name": "inputArgs",
                "type": "MemberExpression",
                "value": "options.inputArgs"
            }
        },
        "undocumented": true,
        "name": "inputArgs",
        "longname": "inputArgs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5032,
                5126
            ],
            "filename": "Piper.js",
            "lineno": 119,
            "columnno": 34,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038500",
                "name": "this.volume",
                "type": "AssignmentExpression",
                "value": "source",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "volume",
        "longname": "Piper#volume",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5046,
                5126
            ],
            "filename": "Piper.js",
            "lineno": 119,
            "columnno": 48,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038504",
                "name": "source",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "source",
        "longname": "<anonymous>~source",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5282,
                5311
            ],
            "filename": "Piper.js",
            "lineno": 122,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038551",
                "name": "opusFactory",
                "type": "MemberExpression",
                "value": "this.opusFactory"
            }
        },
        "undocumented": true,
        "name": "opusFactory",
        "longname": "opusFactory",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5333,
                5361
            ],
            "filename": "Piper.js",
            "lineno": 123,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038555",
                "name": "frameSize",
                "type": "MemberExpression",
                "value": "options.frameSize"
            }
        },
        "undocumented": true,
        "name": "frameSize",
        "longname": "frameSize",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5383,
                5407
            ],
            "filename": "Piper.js",
            "lineno": 124,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038559",
                "name": "pcmSize",
                "type": "MemberExpression",
                "value": "options.pcmSize"
            }
        },
        "undocumented": true,
        "name": "pcmSize",
        "longname": "pcmSize",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5481,
                5504
            ],
            "filename": "Piper.js",
            "lineno": 126,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038573",
                "name": "this._dataPacketMax",
                "type": "Literal",
                "value": 1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_dataPacketMax",
        "longname": "Piper#_dataPacketMax",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5546,
                5569
            ],
            "filename": "Piper.js",
            "lineno": 127,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038579",
                "name": "this._dataPacketMin",
                "type": "Literal",
                "value": 4,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_dataPacketMin",
        "longname": "Piper#_dataPacketMin",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5722,
                6159
            ],
            "filename": "Piper.js",
            "lineno": 131,
            "columnno": 42,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038603",
                "name": "source",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "source",
        "longname": "<anonymous>~source",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5786,
                5816
            ],
            "filename": "Piper.js",
            "lineno": 132,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038610",
                "name": "command",
                "type": "MemberExpression",
                "value": "this.converterCommand"
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "command",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5846,
                5859
            ],
            "filename": "Piper.js",
            "lineno": 133,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038614",
                "name": "input",
                "type": "Identifier",
                "value": "source"
            }
        },
        "undocumented": true,
        "name": "input",
        "longname": "input",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5889,
                5921
            ],
            "filename": "Piper.js",
            "lineno": 134,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038616",
                "name": "encoderArgs",
                "type": "MemberExpression",
                "value": "options.encoderArgs"
            }
        },
        "undocumented": true,
        "name": "encoderArgs",
        "longname": "encoderArgs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5951,
                5979
            ],
            "filename": "Piper.js",
            "lineno": 135,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038620",
                "name": "inputArgs",
                "type": "MemberExpression",
                "value": "options.inputArgs"
            }
        },
        "undocumented": true,
        "name": "inputArgs",
        "longname": "inputArgs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6009,
                6031
            ],
            "filename": "Piper.js",
            "lineno": 136,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038624",
                "name": "format",
                "type": "MemberExpression",
                "value": "options.format"
            }
        },
        "undocumented": true,
        "name": "format",
        "longname": "format",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6061,
                6097
            ],
            "filename": "Piper.js",
            "lineno": 137,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038628",
                "name": "frameDuration",
                "type": "MemberExpression",
                "value": "options.frameDuration"
            }
        },
        "undocumented": true,
        "name": "frameDuration",
        "longname": "frameDuration",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6233,
                6640
            ],
            "filename": "Piper.js",
            "lineno": 140,
            "columnno": 42,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038649",
                "name": "source",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "source",
        "longname": "<anonymous>~source",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6309,
                6339
            ],
            "filename": "Piper.js",
            "lineno": 141,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038660",
                "name": "command",
                "type": "MemberExpression",
                "value": "this.converterCommand"
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "command",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6369,
                6401
            ],
            "filename": "Piper.js",
            "lineno": 142,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038664",
                "name": "encoderArgs",
                "type": "MemberExpression",
                "value": "options.encoderArgs"
            }
        },
        "undocumented": true,
        "name": "encoderArgs",
        "longname": "encoderArgs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6431,
                6459
            ],
            "filename": "Piper.js",
            "lineno": 143,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038668",
                "name": "inputArgs",
                "type": "MemberExpression",
                "value": "options.inputArgs"
            }
        },
        "undocumented": true,
        "name": "inputArgs",
        "longname": "inputArgs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6489,
                6511
            ],
            "filename": "Piper.js",
            "lineno": 144,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038672",
                "name": "format",
                "type": "MemberExpression",
                "value": "options.format"
            }
        },
        "undocumented": true,
        "name": "format",
        "longname": "format",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6541,
                6577
            ],
            "filename": "Piper.js",
            "lineno": 145,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038676",
                "name": "frameDuration",
                "type": "MemberExpression",
                "value": "options.frameDuration"
            }
        },
        "undocumented": true,
        "name": "frameDuration",
        "longname": "frameDuration",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6898,
                7217
            ],
            "filename": "Piper.js",
            "lineno": 151,
            "columnno": 42,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038727",
                "name": "source",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "source",
        "longname": "<anonymous>~source",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6962,
                6992
            ],
            "filename": "Piper.js",
            "lineno": 152,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038734",
                "name": "command",
                "type": "MemberExpression",
                "value": "this.converterCommand"
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "command",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7022,
                7035
            ],
            "filename": "Piper.js",
            "lineno": 153,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038738",
                "name": "input",
                "type": "Identifier",
                "value": "source"
            }
        },
        "undocumented": true,
        "name": "input",
        "longname": "input",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7065,
                7097
            ],
            "filename": "Piper.js",
            "lineno": 154,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038740",
                "name": "encoderArgs",
                "type": "MemberExpression",
                "value": "options.encoderArgs"
            }
        },
        "undocumented": true,
        "name": "encoderArgs",
        "longname": "encoderArgs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7127,
                7155
            ],
            "filename": "Piper.js",
            "lineno": 155,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038744",
                "name": "inputArgs",
                "type": "MemberExpression",
                "value": "options.inputArgs"
            }
        },
        "undocumented": true,
        "name": "inputArgs",
        "longname": "inputArgs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7291,
                7580
            ],
            "filename": "Piper.js",
            "lineno": 158,
            "columnno": 42,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038765",
                "name": "source",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "source",
        "longname": "<anonymous>~source",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7367,
                7397
            ],
            "filename": "Piper.js",
            "lineno": 159,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038776",
                "name": "command",
                "type": "MemberExpression",
                "value": "this.converterCommand"
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "command",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7427,
                7459
            ],
            "filename": "Piper.js",
            "lineno": 160,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038780",
                "name": "encoderArgs",
                "type": "MemberExpression",
                "value": "options.encoderArgs"
            }
        },
        "undocumented": true,
        "name": "encoderArgs",
        "longname": "encoderArgs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7489,
                7517
            ],
            "filename": "Piper.js",
            "lineno": 161,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038784",
                "name": "inputArgs",
                "type": "MemberExpression",
                "value": "options.inputArgs"
            }
        },
        "undocumented": true,
        "name": "inputArgs",
        "longname": "inputArgs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7704,
                7733
            ],
            "filename": "Piper.js",
            "lineno": 165,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038813",
                "name": "opusFactory",
                "type": "MemberExpression",
                "value": "this.opusFactory"
            }
        },
        "undocumented": true,
        "name": "opusFactory",
        "longname": "opusFactory",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7759,
                7787
            ],
            "filename": "Piper.js",
            "lineno": 166,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038817",
                "name": "frameSize",
                "type": "MemberExpression",
                "value": "options.frameSize"
            }
        },
        "undocumented": true,
        "name": "frameSize",
        "longname": "frameSize",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7813,
                7837
            ],
            "filename": "Piper.js",
            "lineno": 167,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038821",
                "name": "pcmSize",
                "type": "MemberExpression",
                "value": "options.pcmSize"
            }
        },
        "undocumented": true,
        "name": "pcmSize",
        "longname": "pcmSize",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8085,
                8140
            ],
            "filename": "Piper.js",
            "lineno": 177,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038852",
                "name": "this._endStream",
                "type": "MemberExpression",
                "value": "this.streams[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_endStream",
        "longname": "Piper#_endStream",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8211,
                8242
            ],
            "filename": "Piper.js",
            "lineno": 179,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038877",
                "name": "this._endStream.manualCB",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "manualCB",
        "longname": "Piper#_endStream.manualCB",
        "kind": "member",
        "memberof": "Piper#_endStream",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8425,
                8445
            ],
            "filename": "Piper.js",
            "lineno": 187,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038917",
                "name": "this.encoding",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "encoding",
        "longname": "Piper#encoding",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8459,
                9059
            ],
            "filename": "Piper.js",
            "lineno": 190,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038922",
                "name": "Piper#stop",
                "type": "MethodDefinition",
                "paramnames": [
                    "e",
                    "source"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "stop",
        "longname": "Piper#stop",
        "kind": "function",
        "memberof": "Piper",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8720,
                8747
            ],
            "filename": "Piper.js",
            "lineno": 201,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100038963",
                "name": "this.throttleTimeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "throttleTimeout",
        "longname": "Piper#throttleTimeout",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8990,
                9011
            ],
            "filename": "Piper.js",
            "lineno": 214,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039002",
                "name": "this.encoding",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "encoding",
        "longname": "Piper#encoding",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9065,
                9444
            ],
            "filename": "Piper.js",
            "lineno": 219,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039013",
                "name": "Piper#reset",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "reset",
        "longname": "Piper#reset",
        "kind": "function",
        "memberof": "Piper",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9124,
                9130
            ],
            "filename": "Piper.js",
            "lineno": 221,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039024",
                "name": "stream"
            }
        },
        "undocumented": true,
        "name": "stream",
        "longname": "<anonymous>~stream",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9360,
                9377
            ],
            "filename": "Piper.js",
            "lineno": 230,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039050",
                "name": "this.streams",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "streams",
        "longname": "Piper#streams",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9387,
                9409
            ],
            "filename": "Piper.js",
            "lineno": 231,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039056",
                "name": "this._endStream",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_endStream",
        "longname": "Piper#_endStream",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9419,
                9437
            ],
            "filename": "Piper.js",
            "lineno": 232,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039062",
                "name": "this.volume",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "volume",
        "longname": "Piper#volume",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9450,
                9697
            ],
            "filename": "Piper.js",
            "lineno": 235,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039067",
                "name": "Piper#resetPackets",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "resetPackets",
        "longname": "Piper#resetPackets",
        "kind": "function",
        "memberof": "Piper",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9632,
                9648
            ],
            "filename": "Piper.js",
            "lineno": 239,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039090",
                "name": "this.opus",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "opus",
        "longname": "Piper#opus",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9668,
                9690
            ],
            "filename": "Piper.js",
            "lineno": 241,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039096",
                "name": "this._dataPackets",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_dataPackets",
        "longname": "Piper#_dataPackets",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9703,
                10103
            ],
            "filename": "Piper.js",
            "lineno": 244,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039101",
                "name": "Piper#addDataPacket",
                "type": "MethodDefinition",
                "paramnames": [
                    "packet"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "addDataPacket",
        "longname": "Piper#addDataPacket",
        "kind": "function",
        "memberof": "Piper",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10109,
                10265
            ],
            "filename": "Piper.js",
            "lineno": 257,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039161",
                "name": "Piper#setVolume",
                "type": "MethodDefinition",
                "paramnames": [
                    "volume"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "setVolume",
        "longname": "Piper#setVolume",
        "kind": "function",
        "memberof": "Piper",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10137,
                10162
            ],
            "filename": "Piper.js",
            "lineno": 258,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039167",
                "name": "this.volumeLevel",
                "type": "Identifier",
                "value": "volume",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "volumeLevel",
        "longname": "Piper#volumeLevel",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10271,
                11115
            ],
            "filename": "Piper.js",
            "lineno": 265,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039187",
                "name": "Piper#getDataPacket",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "getDataPacket",
        "longname": "Piper#getDataPacket",
        "kind": "function",
        "memberof": "Piper",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10671,
                10701
            ],
            "filename": "Piper.js",
            "lineno": 274,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039243",
                "name": "this.opus",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "opus",
        "longname": "Piper#opus",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10736,
                10788
            ],
            "filename": "Piper.js",
            "lineno": 277,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039252",
                "name": "packet",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "packet",
        "longname": "<anonymous>~packet",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10810,
                10815
            ],
            "filename": "Piper.js",
            "lineno": 278,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039268",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10817,
                10820
            ],
            "filename": "Piper.js",
            "lineno": 278,
            "columnno": 27,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039271",
                "name": "num"
            }
        },
        "undocumented": true,
        "name": "num",
        "longname": "<anonymous>~num",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10845,
                10851
            ],
            "filename": "Piper.js",
            "lineno": 278,
            "columnno": 55,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039280",
                "name": "i",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 2,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10871,
                10932
            ],
            "filename": "Piper.js",
            "lineno": 279,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039285",
                "name": "num",
                "type": "UnaryExpression",
                "funcscope": "<anonymous>",
                "value": "~~",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "num",
        "longname": "<anonymous>~num",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11121,
                11191
            ],
            "filename": "Piper.js",
            "lineno": 286,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039333",
                "name": "Piper#dataPacketCount",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "dataPacketCount",
        "longname": "Piper#dataPacketCount",
        "kind": "member",
        "memberof": "Piper",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11195,
                11217
            ],
            "filename": "Piper.js",
            "lineno": 291,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039344",
                "name": "module.exports",
                "type": "Identifier",
                "value": "Piper",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                47
            ],
            "filename": "SharedStream.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039354",
                "name": "Piper",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Piper",
        "longname": "Piper",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                55,
                101
            ],
            "filename": "SharedStream.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039360",
                "name": "VoiceConnection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "VoiceConnection",
        "longname": "VoiceConnection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                109,
                151
            ],
            "filename": "SharedStream.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039366",
                "name": "Collection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Collection",
        "longname": "Collection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                160,
                170
            ],
            "filename": "SharedStream.js",
            "lineno": 6,
            "columnno": 7,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039374",
                "name": "createOpus",
                "type": "Identifier",
                "value": "createOpus"
            }
        },
        "undocumented": true,
        "name": "createOpus",
        "longname": "createOpus",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                204,
                216
            ],
            "filename": "SharedStream.js",
            "lineno": 8,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039380",
                "name": "EventEmitter"
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                228,
                267
            ],
            "filename": "SharedStream.js",
            "lineno": 10,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039385",
                "name": "EventEmitter",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                288,
                333
            ],
            "filename": "SharedStream.js",
            "lineno": 12,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039392",
                "name": "EventEmitter",
                "type": "MemberExpression",
                "value": ".EventEmitter",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n* Represents a collection of VoiceConnections sharing an input stream\n* @extends EventEmitter\n*/",
        "meta": {
            "range": [
                439,
                7937
            ],
            "filename": "SharedStream.js",
            "lineno": 19,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039399",
                "name": "SharedStream",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "classdesc": "Represents a collection of VoiceConnections sharing an input stream",
        "augments": [
            "EventEmitter"
        ],
        "name": "SharedStream",
        "longname": "SharedStream",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                485,
                1282
            ],
            "filename": "SharedStream.js",
            "lineno": 20,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039403",
                "name": "SharedStream",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "SharedStream",
        "longname": "SharedStream",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a collection of VoiceConnections sharing an input stream\n* @extends EventEmitter\n*/",
        "meta": {
            "range": [
                439,
                7937
            ],
            "filename": "SharedStream.js",
            "lineno": 19,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039399",
                "name": "SharedStream",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "name": "SharedStream",
        "longname": "SharedStream",
        "kind": "class",
        "classdesc": "Represents a collection of VoiceConnections sharing an input stream",
        "augments": [
            "EventEmitter"
        ],
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                527,
                552
            ],
            "filename": "SharedStream.js",
            "lineno": 23,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039411",
                "name": "this.samplingRate",
                "type": "Literal",
                "value": 48000,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "samplingRate",
        "longname": "SharedStream#samplingRate",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                562,
                585
            ],
            "filename": "SharedStream.js",
            "lineno": 24,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039417",
                "name": "this.frameDuration",
                "type": "Literal",
                "value": 20,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "frameDuration",
        "longname": "SharedStream#frameDuration",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                595,
                612
            ],
            "filename": "SharedStream.js",
            "lineno": 25,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039423",
                "name": "this.channels",
                "type": "Literal",
                "value": 2,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channels",
        "longname": "SharedStream#channels",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                622,
                642
            ],
            "filename": "SharedStream.js",
            "lineno": 26,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039429",
                "name": "this.bitrate",
                "type": "Literal",
                "value": 64000,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "bitrate",
        "longname": "SharedStream#bitrate",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                653,
                708
            ],
            "filename": "SharedStream.js",
            "lineno": 28,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039435",
                "name": "this.voiceConnections",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "voiceConnections",
        "longname": "SharedStream#voiceConnections",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                845,
                972
            ],
            "filename": "SharedStream.js",
            "lineno": 35,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039458",
                "name": "this.piper",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "piper",
        "longname": "SharedStream#piper",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1105,
                1131
            ],
            "filename": "SharedStream.js",
            "lineno": 38,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039506",
                "name": "this.piper.libopus",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "libopus",
        "longname": "SharedStream#piper.libopus",
        "kind": "member",
        "memberof": "SharedStream#piper",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1152,
                1169
            ],
            "filename": "SharedStream.js",
            "lineno": 41,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039514",
                "name": "this.ended",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ended",
        "longname": "SharedStream#ended",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1179,
                1199
            ],
            "filename": "SharedStream.js",
            "lineno": 42,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039520",
                "name": "this.playing",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "playing",
        "longname": "SharedStream#playing",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1209,
                1230
            ],
            "filename": "SharedStream.js",
            "lineno": 43,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039526",
                "name": "this.speaking",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "speaking",
        "longname": "SharedStream#speaking",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1241,
                1275
            ],
            "filename": "SharedStream.js",
            "lineno": 45,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039532",
                "name": "this._send",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_send",
        "longname": "SharedStream#_send",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1288,
                1347
            ],
            "filename": "SharedStream.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039543",
                "name": "SharedStream#volume",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "volume",
        "longname": "SharedStream#volume",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Add a voice connection to the shared stream\n    * @arg {VoiceConnection} connection The voice connection to add\n    */",
        "meta": {
            "range": [
                1486,
                1829
            ],
            "filename": "SharedStream.js",
            "lineno": 56,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039553",
                "name": "SharedStream#add",
                "type": "MethodDefinition",
                "paramnames": [
                    "_connection"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Add a voice connection to the shared stream",
        "params": [
            {
                "type": {
                    "names": [
                        "VoiceConnection"
                    ]
                },
                "description": "The voice connection to add",
                "name": "connection"
            }
        ],
        "name": "add",
        "longname": "SharedStream#add",
        "kind": "function",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1519,
                1570
            ],
            "filename": "SharedStream.js",
            "lineno": 57,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039559",
                "name": "connection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "connection",
        "longname": "<anonymous>~connection",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n    * Remove a voice connection from the shared stream\n    * @arg {VoiceConnection} connection The voice connection to remove\n    */",
        "meta": {
            "range": [
                1976,
                2061
            ],
            "filename": "SharedStream.js",
            "lineno": 72,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039600",
                "name": "SharedStream#remove",
                "type": "MethodDefinition",
                "paramnames": [
                    "_connection"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Remove a voice connection from the shared stream",
        "params": [
            {
                "type": {
                    "names": [
                        "VoiceConnection"
                    ]
                },
                "description": "The voice connection to remove",
                "name": "connection"
            }
        ],
        "name": "remove",
        "longname": "SharedStream#remove",
        "kind": "function",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Play an audio or video resource. If playing from a non-opus resource, FFMPEG should be compiled with --enable-libopus for best performance. If playing from HTTPS, FFMPEG must be compiled with --enable-openssl\n    * @arg {ReadableStream | String} resource The audio or video resource, either a ReadableStream, URL, or file path\n    * @arg {Object} [options] Music options\n    * @arg {Boolean} [options.inlineVolume=false] Whether to enable on-the-fly volume changing. Note that enabling this leads to increased CPU usage\n    * @arg {Number} [options.voiceDataTimeout=2000] Timeout when waiting for voice data (-1 for no timeout)\n    * @arg {Array<String>} [options.inputArgs] Additional input parameters to pass to ffmpeg/avconv (before -i)\n    * @arg {Array<String>} [options.encoderArgs] Additional encoder parameters to pass to ffmpeg/avconv (after -i)\n    * @arg {String} [options.format] The format of the resource. If null, FFmpeg will attempt to guess and play the format. Available options: \"dca\", \"ogg\", \"webm\", \"pcm\", null\n    * @arg {Number} [options.frameDuration=60] The resource opus frame duration (required for DCA/Ogg)\n    * @arg {Number} [options.frameSize=2880] The resource opus frame size\n    * @arg {Number} [options.sampleRate=48000] The resource audio sampling rate\n    */",
        "meta": {
            "range": [
                3377,
                4718
            ],
            "filename": "SharedStream.js",
            "lineno": 89,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039613",
                "name": "SharedStream#play",
                "type": "MethodDefinition",
                "paramnames": [
                    "source",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Play an audio or video resource. If playing from a non-opus resource, FFMPEG should be compiled with --enable-libopus for best performance. If playing from HTTPS, FFMPEG must be compiled with --enable-openssl",
        "params": [
            {
                "type": {
                    "names": [
                        "ReadableStream",
                        "String"
                    ]
                },
                "description": "The audio or video resource, either a ReadableStream, URL, or file path",
                "name": "resource"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Music options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to enable on-the-fly volume changing. Note that enabling this leads to increased CPU usage",
                "name": "options.inlineVolume"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 2000,
                "description": "Timeout when waiting for voice data (-1 for no timeout)",
                "name": "options.voiceDataTimeout"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Additional input parameters to pass to ffmpeg/avconv (before -i)",
                "name": "options.inputArgs"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Additional encoder parameters to pass to ffmpeg/avconv (after -i)",
                "name": "options.encoderArgs"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The format of the resource. If null, FFmpeg will attempt to guess and play the format. Available options: \"dca\", \"ogg\", \"webm\", \"pcm\", null",
                "name": "options.format"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 60,
                "description": "The resource opus frame duration (required for DCA/Ogg)",
                "name": "options.frameDuration"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 2880,
                "description": "The resource opus frame size",
                "name": "options.frameSize"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 48000,
                "description": "The resource audio sampling rate",
                "name": "options.sampleRate"
            }
        ],
        "name": "play",
        "longname": "SharedStream#play",
        "kind": "function",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3414,
                3453
            ],
            "filename": "SharedStream.js",
            "lineno": 90,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039622",
                "name": "options.format",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "format",
        "longname": "options.format",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3463,
                3556
            ],
            "filename": "SharedStream.js",
            "lineno": 91,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039632",
                "name": "options.voiceDataTimeout",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "voiceDataTimeout",
        "longname": "options.voiceDataTimeout",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3566,
                3611
            ],
            "filename": "SharedStream.js",
            "lineno": 92,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039648",
                "name": "options.inlineVolume",
                "type": "UnaryExpression",
                "value": "!!options.inlineVolume",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "inlineVolume",
        "longname": "options.inlineVolume",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3621,
                3664
            ],
            "filename": "SharedStream.js",
            "lineno": 93,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039658",
                "name": "options.inputArgs",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "inputArgs",
        "longname": "options.inputArgs",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3674,
                3721
            ],
            "filename": "SharedStream.js",
            "lineno": 94,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039668",
                "name": "options.encoderArgs",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "encoderArgs",
        "longname": "options.encoderArgs",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3732,
                3796
            ],
            "filename": "SharedStream.js",
            "lineno": 96,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039678",
                "name": "options.samplingRate",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "samplingRate",
        "longname": "options.samplingRate",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3806,
                3873
            ],
            "filename": "SharedStream.js",
            "lineno": 97,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039690",
                "name": "options.frameDuration",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "frameDuration",
        "longname": "options.frameDuration",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3883,
                3975
            ],
            "filename": "SharedStream.js",
            "lineno": 98,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039702",
                "name": "options.frameSize",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "frameSize",
        "longname": "options.frameSize",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3985,
                4059
            ],
            "filename": "SharedStream.js",
            "lineno": 99,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039720",
                "name": "options.pcmSize",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pcmSize",
        "longname": "options.pcmSize",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4221,
                4239
            ],
            "filename": "SharedStream.js",
            "lineno": 106,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039759",
                "name": "this.ended",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ended",
        "longname": "SharedStream#ended",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4249,
                4507
            ],
            "filename": "SharedStream.js",
            "lineno": 107,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039765",
                "name": "this.current",
                "type": "ObjectExpression",
                "value": "{\"startTime\":0,\"playTime\":0,\"pausedTimestamp\":0,\"pausedTime\":0,\"bufferingTicks\":0,\"options\":\"\",\"timeout\":null,\"buffer\":null}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "current",
        "longname": "SharedStream#current",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4278,
                4290
            ],
            "filename": "SharedStream.js",
            "lineno": 108,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039770",
                "name": "startTime",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "startTime",
        "longname": "SharedStream#current.startTime",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4313,
                4324
            ],
            "filename": "SharedStream.js",
            "lineno": 109,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039772",
                "name": "playTime",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "playTime",
        "longname": "SharedStream#current.playTime",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4338,
                4356
            ],
            "filename": "SharedStream.js",
            "lineno": 110,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039774",
                "name": "pausedTimestamp",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "pausedTimestamp",
        "longname": "SharedStream#current.pausedTimestamp",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4370,
                4383
            ],
            "filename": "SharedStream.js",
            "lineno": 111,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039776",
                "name": "pausedTime",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "pausedTime",
        "longname": "SharedStream#current.pausedTime",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4397,
                4414
            ],
            "filename": "SharedStream.js",
            "lineno": 112,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039778",
                "name": "bufferingTicks",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "bufferingTicks",
        "longname": "SharedStream#current.bufferingTicks",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4428,
                4444
            ],
            "filename": "SharedStream.js",
            "lineno": 113,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039780",
                "name": "options",
                "type": "Identifier",
                "value": "options"
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "SharedStream#current.options",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4458,
                4471
            ],
            "filename": "SharedStream.js",
            "lineno": 114,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039782",
                "name": "timeout",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "SharedStream#current.timeout",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4485,
                4497
            ],
            "filename": "SharedStream.js",
            "lineno": 115,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039784",
                "name": "buffer",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "buffer",
        "longname": "SharedStream#current.buffer",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4518,
                4537
            ],
            "filename": "SharedStream.js",
            "lineno": 118,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039787",
                "name": "this.playing",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "playing",
        "longname": "SharedStream#playing",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "/**\n        * Fired when the shared stream starts playing a stream\n        * @event SharedStream#start\n        */",
        "meta": {
            "filename": "SharedStream.js",
            "lineno": 120,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when the shared stream starts playing a stream",
        "kind": "event",
        "name": "start",
        "memberof": "SharedStream",
        "longname": "SharedStream#event:start",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4724,
                6395
            ],
            "filename": "SharedStream.js",
            "lineno": 129,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039803",
                "name": "SharedStream#_send",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_send",
        "longname": "SharedStream#_send",
        "kind": "function",
        "memberof": "SharedStream",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4972,
                5020
            ],
            "filename": "SharedStream.js",
            "lineno": 138,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039846",
                "name": "this.current.buffer",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "buffer",
        "longname": "SharedStream#current.buffer",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5088,
                5123
            ],
            "filename": "SharedStream.js",
            "lineno": 140,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039869",
                "name": "this.current.startTime",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "startTime",
        "longname": "SharedStream#current.startTime",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5205,
                5236
            ],
            "filename": "SharedStream.js",
            "lineno": 143,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039889",
                "name": "this.current.bufferingTicks",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "bufferingTicks",
        "longname": "SharedStream#current.bufferingTicks",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5621,
                5686
            ],
            "filename": "SharedStream.js",
            "lineno": 150,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039956",
                "name": "this.current.pausedTime",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pausedTime",
        "longname": "SharedStream#current.pausedTime",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5783,
                5868
            ],
            "filename": "SharedStream.js",
            "lineno": 152,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100039986",
                "name": "this.current.timeout",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "SharedStream#current.timeout",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6187,
                6246
            ],
            "filename": "SharedStream.js",
            "lineno": 164,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040043",
                "name": "this.current.playTime",
                "type": "MemberExpression",
                "value": "this.current.options.frameDuration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "playTime",
        "longname": "SharedStream#current.playTime",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6256,
                6388
            ],
            "filename": "SharedStream.js",
            "lineno": 165,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040057",
                "name": "this.current.timeout",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "SharedStream#current.timeout",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Sets the volume of this shared stream if inline volume is enabled\n     * @param {number} volume The volume as a value from 0 (min) to 1 (max)\n     */",
        "meta": {
            "range": [
                6566,
                6629
            ],
            "filename": "SharedStream.js",
            "lineno": 172,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040090",
                "name": "SharedStream#setVolume",
                "type": "MethodDefinition",
                "paramnames": [
                    "volume"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Sets the volume of this shared stream if inline volume is enabled",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The volume as a value from 0 (min) to 1 (max)",
                "name": "volume"
            }
        ],
        "name": "setVolume",
        "longname": "SharedStream#setVolume",
        "kind": "function",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Stop the bot from sending audio\n    */",
        "meta": {
            "range": [
                6688,
                7230
            ],
            "filename": "SharedStream.js",
            "lineno": 179,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040103",
                "name": "SharedStream#stopPlaying",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Stop the bot from sending audio",
        "name": "stopPlaying",
        "longname": "SharedStream#stopPlaying",
        "kind": "function",
        "memberof": "SharedStream",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6767,
                6784
            ],
            "filename": "SharedStream.js",
            "lineno": 183,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040114",
                "name": "this.ended",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ended",
        "longname": "SharedStream#ended",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6897,
                6924
            ],
            "filename": "SharedStream.js",
            "lineno": 186,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040139",
                "name": "this.current.timeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "SharedStream#current.timeout",
        "kind": "member",
        "memberof": "SharedStream#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6944,
                6963
            ],
            "filename": "SharedStream.js",
            "lineno": 188,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040147",
                "name": "this.current",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "current",
        "longname": "SharedStream#current",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7053,
                7073
            ],
            "filename": "SharedStream.js",
            "lineno": 192,
            "columnno": 25,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040171",
                "name": "this.playing",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "playing",
        "longname": "SharedStream#playing",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "/**\n        * Fired when the shared stream finishes playing a stream\n        * @event SharedStream#end\n        */",
        "meta": {
            "filename": "SharedStream.js",
            "lineno": 194,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when the shared stream finishes playing a stream",
        "kind": "event",
        "name": "end",
        "memberof": "SharedStream",
        "longname": "SharedStream#event:end",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7236,
                7473
            ],
            "filename": "SharedStream.js",
            "lineno": 201,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040182",
                "name": "SharedStream#_incrementTimestamps",
                "type": "MethodDefinition",
                "paramnames": [
                    "val"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_incrementTimestamps",
        "longname": "SharedStream#_incrementTimestamps",
        "kind": "function",
        "memberof": "SharedStream",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7282,
                7284
            ],
            "filename": "SharedStream.js",
            "lineno": 202,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040189",
                "name": "vc"
            }
        },
        "undocumented": true,
        "name": "vc",
        "longname": "<anonymous>~vc",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7334,
                7353
            ],
            "filename": "SharedStream.js",
            "lineno": 203,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040199",
                "name": "vc.timestamp",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "val",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timestamp",
        "longname": "<anonymous>~vc.timestamp",
        "kind": "member",
        "memberof": "<anonymous>~vc",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7416,
                7442
            ],
            "filename": "SharedStream.js",
            "lineno": 205,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040212",
                "name": "vc.timestamp",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 4294967295,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timestamp",
        "longname": "<anonymous>~vc.timestamp",
        "kind": "member",
        "memberof": "<anonymous>~vc",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7479,
                7694
            ],
            "filename": "SharedStream.js",
            "lineno": 210,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040217",
                "name": "SharedStream#_incrementSequences",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_incrementSequences",
        "longname": "SharedStream#_incrementSequences",
        "kind": "function",
        "memberof": "SharedStream",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7521,
                7523
            ],
            "filename": "SharedStream.js",
            "lineno": 211,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040223",
                "name": "vc"
            }
        },
        "undocumented": true,
        "name": "vc",
        "longname": "<anonymous>~vc",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7643,
                7663
            ],
            "filename": "SharedStream.js",
            "lineno": 214,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040245",
                "name": "vc.sequence",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 65536,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sequence",
        "longname": "<anonymous>~vc.sequence",
        "kind": "member",
        "memberof": "<anonymous>~vc",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7700,
                7935
            ],
            "filename": "SharedStream.js",
            "lineno": 219,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040250",
                "name": "SharedStream#setSpeaking",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "setSpeaking",
        "longname": "SharedStream#setSpeaking",
        "kind": "function",
        "memberof": "SharedStream",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7733,
                7748
            ],
            "filename": "SharedStream.js",
            "lineno": 220,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040257",
                "name": "value",
                "type": "UnaryExpression",
                "funcscope": "<anonymous>",
                "value": "!!value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "<anonymous>~value",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7782,
                7803
            ],
            "filename": "SharedStream.js",
            "lineno": 221,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040267",
                "name": "this.speaking",
                "type": "Identifier",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "speaking",
        "longname": "SharedStream#speaking",
        "kind": "member",
        "memberof": "SharedStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7827,
                7829
            ],
            "filename": "SharedStream.js",
            "lineno": 222,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040274",
                "name": "vc"
            }
        },
        "undocumented": true,
        "name": "vc",
        "longname": "<anonymous>~vc",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7939,
                7968
            ],
            "filename": "SharedStream.js",
            "lineno": 229,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040290",
                "name": "module.exports",
                "type": "Identifier",
                "value": "SharedStream",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                57
            ],
            "filename": "VoiceConnection.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040300",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                104
            ],
            "filename": "VoiceConnection.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040306",
                "name": "ChildProcess",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ChildProcess",
        "longname": "ChildProcess",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                113,
                125
            ],
            "filename": "VoiceConnection.js",
            "lineno": 5,
            "columnno": 7,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040314",
                "name": "VoiceOPCodes",
                "type": "Identifier",
                "value": "VoiceOPCodes"
            }
        },
        "undocumented": true,
        "name": "VoiceOPCodes",
        "longname": "VoiceOPCodes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                127,
                141
            ],
            "filename": "VoiceConnection.js",
            "lineno": 5,
            "columnno": 21,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040316",
                "name": "GatewayOPCodes",
                "type": "Identifier",
                "value": "GatewayOPCodes"
            }
        },
        "undocumented": true,
        "name": "GatewayOPCodes",
        "longname": "GatewayOPCodes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                176,
                200
            ],
            "filename": "VoiceConnection.js",
            "lineno": 6,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040322",
                "name": "Dgram",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Dgram",
        "longname": "Dgram",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                208,
                234
            ],
            "filename": "VoiceConnection.js",
            "lineno": 7,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040328",
                "name": "Piper",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Piper",
        "longname": "Piper",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                242,
                288
            ],
            "filename": "VoiceConnection.js",
            "lineno": 8,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040334",
                "name": "VoiceDataStream",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "VoiceDataStream",
        "longname": "VoiceDataStream",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                297,
                307
            ],
            "filename": "VoiceConnection.js",
            "lineno": 9,
            "columnno": 7,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040342",
                "name": "createOpus",
                "type": "Identifier",
                "value": "createOpus"
            }
        },
        "undocumented": true,
        "name": "createOpus",
        "longname": "createOpus",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                341,
                417
            ],
            "filename": "VoiceConnection.js",
            "lineno": 11,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040348",
                "name": "WebSocket",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "WebSocket",
        "longname": "WebSocket",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                424,
                436
            ],
            "filename": "VoiceConnection.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040362",
                "name": "EventEmitter"
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                448,
                487
            ],
            "filename": "VoiceConnection.js",
            "lineno": 15,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040367",
                "name": "EventEmitter",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                508,
                553
            ],
            "filename": "VoiceConnection.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040374",
                "name": "EventEmitter",
                "type": "MemberExpression",
                "value": ".EventEmitter",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                562,
                576
            ],
            "filename": "VoiceConnection.js",
            "lineno": 20,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040382",
                "name": "Sodium",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "Sodium",
        "longname": "Sodium",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                582,
                594
            ],
            "filename": "VoiceConnection.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040386",
                "name": "NaCl",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "NaCl",
        "longname": "NaCl",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                606,
                639
            ],
            "filename": "VoiceConnection.js",
            "lineno": 23,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040392",
                "name": "Sodium",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Sodium",
        "longname": "Sodium",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                674,
                701
            ],
            "filename": "VoiceConnection.js",
            "lineno": 26,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040401",
                "name": "NaCl",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "NaCl",
        "longname": "NaCl",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                767,
                793
            ],
            "filename": "VoiceConnection.js",
            "lineno": 31,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040410",
                "name": "WebSocket",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "WebSocket",
        "longname": "WebSocket",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                846,
                871
            ],
            "filename": "VoiceConnection.js",
            "lineno": 35,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040417",
                "name": "MAX_FRAME_SIZE",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "MAX_FRAME_SIZE",
        "longname": "MAX_FRAME_SIZE",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                879,
                916
            ],
            "filename": "VoiceConnection.js",
            "lineno": 36,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040423",
                "name": "ENCRYPTION_MODE",
                "type": "Literal",
                "value": "xsalsa20_poly1305"
            }
        },
        "undocumented": true,
        "name": "ENCRYPTION_MODE",
        "longname": "ENCRYPTION_MODE",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                925,
                981
            ],
            "filename": "VoiceConnection.js",
            "lineno": 38,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040427",
                "name": "converterCommand",
                "type": "ObjectExpression",
                "value": "{\"cmd\":null,\"libopus\":false}"
            }
        },
        "undocumented": true,
        "name": "converterCommand",
        "longname": "converterCommand",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                950,
                959
            ],
            "filename": "VoiceConnection.js",
            "lineno": 39,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040430",
                "name": "cmd",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "cmd",
        "longname": "converterCommand.cmd",
        "kind": "member",
        "memberof": "converterCommand",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                965,
                979
            ],
            "filename": "VoiceConnection.js",
            "lineno": 40,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040432",
                "name": "libopus",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "libopus",
        "longname": "converterCommand.libopus",
        "kind": "member",
        "memberof": "converterCommand",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                984,
                1569
            ],
            "filename": "VoiceConnection.js",
            "lineno": 43,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040435",
                "name": "converterCommand.pickCommand",
                "type": "FunctionExpression",
                "value": "pickCommand",
                "paramnames": []
            },
            "vars": {
                "tenative": "converterCommand.pickCommand~tenative",
                "command": "converterCommand.pickCommand~command",
                "res": "converterCommand.pickCommand~res",
                "converterCommand.cmd": "converterCommand.cmd",
                "converterCommand.libopus": "converterCommand.libopus"
            }
        },
        "undocumented": true,
        "name": "pickCommand",
        "longname": "converterCommand.pickCommand",
        "kind": "function",
        "memberof": "converterCommand",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1048,
                1056
            ],
            "filename": "VoiceConnection.js",
            "lineno": 44,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040443",
                "name": "tenative"
            }
        },
        "undocumented": true,
        "name": "tenative",
        "longname": "converterCommand.pickCommand~tenative",
        "kind": "member",
        "memberof": "converterCommand.pickCommand",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1072,
                1079
            ],
            "filename": "VoiceConnection.js",
            "lineno": 45,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040447",
                "name": "command"
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "converterCommand.pickCommand~command",
        "kind": "constant",
        "memberof": "converterCommand.pickCommand",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1145,
                1197
            ],
            "filename": "VoiceConnection.js",
            "lineno": 46,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040456",
                "name": "res",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "res",
        "longname": "converterCommand.pickCommand~res",
        "kind": "constant",
        "memberof": "converterCommand.pickCommand",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1301,
                1319
            ],
            "filename": "VoiceConnection.js",
            "lineno": 49,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040485",
                "name": "tenative",
                "type": "Identifier",
                "funcscope": "converterCommand.pickCommand",
                "value": "command",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "tenative",
        "longname": "converterCommand.pickCommand~tenative",
        "kind": "member",
        "memberof": "converterCommand.pickCommand",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1373,
                1403
            ],
            "filename": "VoiceConnection.js",
            "lineno": 52,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040490",
                "name": "converterCommand.cmd",
                "type": "Identifier",
                "value": "command",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cmd",
        "longname": "converterCommand.cmd",
        "kind": "member",
        "memberof": "converterCommand",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1417,
                1448
            ],
            "filename": "VoiceConnection.js",
            "lineno": 53,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040496",
                "name": "converterCommand.libopus",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "libopus",
        "longname": "converterCommand.libopus",
        "kind": "member",
        "memberof": "converterCommand",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1513,
                1544
            ],
            "filename": "VoiceConnection.js",
            "lineno": 58,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040506",
                "name": "converterCommand.cmd",
                "type": "Identifier",
                "value": "tenative",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cmd",
        "longname": "converterCommand.cmd",
        "kind": "member",
        "memberof": "converterCommand",
        "scope": "static"
    },
    {
        "comment": "/**\n* Represents a voice connection\n* @extends EventEmitter\n* @prop {String} id The ID of the voice connection (guild ID)\n* @prop {String} channelID The ID of the voice connection's current channel\n* @prop {Boolean} connecting Whether the voice connection is connecting\n* @prop {Boolean} ready Whether the voice connection is ready\n* @prop {Boolean} playing Whether the voice connection is playing something\n* @prop {Boolean} paused Whether the voice connection is paused\n* @prop {Number} volume The current volume level of the connection\n* @prop {Object?} current The state of the currently playing stream\n* @prop {Number} current.startTime The timestamp of the start of the current stream\n* @prop {Number} current.playTime How long the current stream has been playing for, in milliseconds\n* @prop {Number} current.pausedTimestamp The timestamp of the most recent pause\n* @prop {Number} current.pausedTime How long the current stream has been paused for, in milliseconds\n* @prop {Options} current.options The custom options for the current stream\n*/",
        "meta": {
            "range": [
                2623,
                28679
            ],
            "filename": "VoiceConnection.js",
            "lineno": 80,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040512",
                "name": "VoiceConnection",
                "type": "ClassDeclaration",
                "paramnames": [
                    "id",
                    "options"
                ]
            }
        },
        "classdesc": "Represents a voice connection",
        "augments": [
            "EventEmitter"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the voice connection (guild ID)",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the voice connection's current channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the voice connection is connecting",
                "name": "connecting"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the voice connection is ready",
                "name": "ready"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the voice connection is playing something",
                "name": "playing"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the voice connection is paused",
                "name": "paused"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The current volume level of the connection",
                "name": "volume"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The state of the currently playing stream",
                "name": "current"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The timestamp of the start of the current stream",
                "name": "current.startTime"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How long the current stream has been playing for, in milliseconds",
                "name": "current.playTime"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The timestamp of the most recent pause",
                "name": "current.pausedTimestamp"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How long the current stream has been paused for, in milliseconds",
                "name": "current.pausedTime"
            },
            {
                "type": {
                    "names": [
                        "Options"
                    ]
                },
                "description": "The custom options for the current stream",
                "name": "current.options"
            }
        ],
        "name": "VoiceConnection",
        "longname": "VoiceConnection",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2672,
                4548
            ],
            "filename": "VoiceConnection.js",
            "lineno": 81,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040516",
                "name": "VoiceConnection",
                "type": "MethodDefinition",
                "paramnames": [
                    "id",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "VoiceConnection",
        "longname": "VoiceConnection",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a voice connection\n* @extends EventEmitter\n* @prop {String} id The ID of the voice connection (guild ID)\n* @prop {String} channelID The ID of the voice connection's current channel\n* @prop {Boolean} connecting Whether the voice connection is connecting\n* @prop {Boolean} ready Whether the voice connection is ready\n* @prop {Boolean} playing Whether the voice connection is playing something\n* @prop {Boolean} paused Whether the voice connection is paused\n* @prop {Number} volume The current volume level of the connection\n* @prop {Object?} current The state of the currently playing stream\n* @prop {Number} current.startTime The timestamp of the start of the current stream\n* @prop {Number} current.playTime How long the current stream has been playing for, in milliseconds\n* @prop {Number} current.pausedTimestamp The timestamp of the most recent pause\n* @prop {Number} current.pausedTime How long the current stream has been paused for, in milliseconds\n* @prop {Options} current.options The custom options for the current stream\n*/",
        "meta": {
            "range": [
                2623,
                28679
            ],
            "filename": "VoiceConnection.js",
            "lineno": 80,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040512",
                "name": "VoiceConnection",
                "type": "ClassDeclaration",
                "paramnames": [
                    "id",
                    "options"
                ]
            }
        },
        "name": "VoiceConnection",
        "longname": "VoiceConnection",
        "kind": "class",
        "classdesc": "Represents a voice connection",
        "augments": [
            "EventEmitter"
        ],
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the voice connection (guild ID)",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the voice connection's current channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the voice connection is connecting",
                "name": "connecting"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the voice connection is ready",
                "name": "ready"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the voice connection is playing something",
                "name": "playing"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the voice connection is paused",
                "name": "paused"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The current volume level of the connection",
                "name": "volume"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The state of the currently playing stream",
                "name": "current"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The timestamp of the start of the current stream",
                "name": "current.startTime"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How long the current stream has been playing for, in milliseconds",
                "name": "current.playTime"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The timestamp of the most recent pause",
                "name": "current.pausedTimestamp"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "How long the current stream has been paused for, in milliseconds",
                "name": "current.pausedTime"
            },
            {
                "type": {
                    "names": [
                        "Options"
                    ]
                },
                "description": "The custom options for the current stream",
                "name": "current.options"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2994,
                3006
            ],
            "filename": "VoiceConnection.js",
            "lineno": 92,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040549",
                "name": "this.id",
                "type": "Identifier",
                "value": "id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "VoiceConnection#id",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3016,
                3041
            ],
            "filename": "VoiceConnection.js",
            "lineno": 93,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040555",
                "name": "this.samplingRate",
                "type": "Literal",
                "value": 48000,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "samplingRate",
        "longname": "VoiceConnection#samplingRate",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3051,
                3068
            ],
            "filename": "VoiceConnection.js",
            "lineno": 94,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040561",
                "name": "this.channels",
                "type": "Literal",
                "value": 2,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channels",
        "longname": "VoiceConnection#channels",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3078,
                3101
            ],
            "filename": "VoiceConnection.js",
            "lineno": 95,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040567",
                "name": "this.frameDuration",
                "type": "Literal",
                "value": 20,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "frameDuration",
        "longname": "VoiceConnection#frameDuration",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3111,
                3173
            ],
            "filename": "VoiceConnection.js",
            "lineno": 96,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040573",
                "name": "this.frameSize",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "frameSize",
        "longname": "VoiceConnection#frameSize",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3183,
                3232
            ],
            "filename": "VoiceConnection.js",
            "lineno": 97,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040587",
                "name": "this.pcmSize",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pcmSize",
        "longname": "VoiceConnection#pcmSize",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3242,
                3262
            ],
            "filename": "VoiceConnection.js",
            "lineno": 98,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040601",
                "name": "this.bitrate",
                "type": "Literal",
                "value": 64000,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "bitrate",
        "longname": "VoiceConnection#bitrate",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3272,
                3302
            ],
            "filename": "VoiceConnection.js",
            "lineno": 99,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040607",
                "name": "this.shared",
                "type": "UnaryExpression",
                "value": "!!options.shared",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "shared",
        "longname": "VoiceConnection#shared",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3312,
                3344
            ],
            "filename": "VoiceConnection.js",
            "lineno": 100,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040617",
                "name": "this.shard",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "shard",
        "longname": "VoiceConnection#shard",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3354,
                3388
            ],
            "filename": "VoiceConnection.js",
            "lineno": 101,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040627",
                "name": "this.opusOnly",
                "type": "UnaryExpression",
                "value": "!!options.opusOnly",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "opusOnly",
        "longname": "VoiceConnection#opusOnly",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3448,
                3462
            ],
            "filename": "VoiceConnection.js",
            "lineno": 104,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040648",
                "name": "this.opus",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "opus",
        "longname": "VoiceConnection#opus",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3483,
                3504
            ],
            "filename": "VoiceConnection.js",
            "lineno": 107,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040654",
                "name": "this.channelID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channelID",
        "longname": "VoiceConnection#channelID",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3514,
                3532
            ],
            "filename": "VoiceConnection.js",
            "lineno": 108,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040660",
                "name": "this.paused",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "paused",
        "longname": "VoiceConnection#paused",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3542,
                3563
            ],
            "filename": "VoiceConnection.js",
            "lineno": 109,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040666",
                "name": "this.speaking",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "speaking",
        "longname": "VoiceConnection#speaking",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3573,
                3590
            ],
            "filename": "VoiceConnection.js",
            "lineno": 110,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040672",
                "name": "this.sequence",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sequence",
        "longname": "VoiceConnection#sequence",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3600,
                3618
            ],
            "filename": "VoiceConnection.js",
            "lineno": 111,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040678",
                "name": "this.timestamp",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timestamp",
        "longname": "VoiceConnection#timestamp",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3628,
                3649
            ],
            "filename": "VoiceConnection.js",
            "lineno": 112,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040684",
                "name": "this.ssrcUserMap",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ssrcUserMap",
        "longname": "VoiceConnection#ssrcUserMap",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3660,
                3689
            ],
            "filename": "VoiceConnection.js",
            "lineno": 114,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040690",
                "name": "this.nonce",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "nonce",
        "longname": "VoiceConnection#nonce",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3700,
                3758
            ],
            "filename": "VoiceConnection.js",
            "lineno": 116,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040700",
                "name": "this.packetBuffer",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "packetBuffer",
        "longname": "VoiceConnection#packetBuffer",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3768,
                3795
            ],
            "filename": "VoiceConnection.js",
            "lineno": 117,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040714",
                "name": "this.packetBuffer[0]",
                "type": "Literal",
                "value": 128,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "packetBuffer[0]",
        "longname": "VoiceConnection#packetBuffer[0]",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3805,
                3832
            ],
            "filename": "VoiceConnection.js",
            "lineno": 118,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040722",
                "name": "this.packetBuffer[1]",
                "type": "Literal",
                "value": 120,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "packetBuffer[1]",
        "longname": "VoiceConnection#packetBuffer[1]",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3980,
                4090
            ],
            "filename": "VoiceConnection.js",
            "lineno": 125,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040747",
                "name": "this.piper",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "piper",
        "longname": "VoiceConnection#piper",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "/**\n            * Fired when the voice connection encounters an error. This event should be handled by users\n            * @event VoiceConnection#error\n            * @prop {Error} err The error object\n            */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 126,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when the voice connection encounters an error. This event should be handled by users",
        "kind": "event",
        "name": "error",
        "properties": [
            {
                "type": {
                    "names": [
                        "Error"
                    ]
                },
                "description": "The error object",
                "name": "err"
            }
        ],
        "memberof": "VoiceConnection",
        "longname": "VoiceConnection#event:error",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4446,
                4472
            ],
            "filename": "VoiceConnection.js",
            "lineno": 133,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040791",
                "name": "this.piper.libopus",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "libopus",
        "longname": "VoiceConnection#piper.libopus",
        "kind": "member",
        "memberof": "VoiceConnection#piper",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4507,
                4541
            ],
            "filename": "VoiceConnection.js",
            "lineno": 137,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040799",
                "name": "this._send",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_send",
        "longname": "VoiceConnection#_send",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4554,
                5085
            ],
            "filename": "VoiceConnection.js",
            "lineno": 140,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040810",
                "name": "VoiceConnection#_destroy",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_destroy",
        "longname": "VoiceConnection#_destroy",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4613,
                4616
            ],
            "filename": "VoiceConnection.js",
            "lineno": 142,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040821",
                "name": "key"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4895,
                4924
            ],
            "filename": "VoiceConnection.js",
            "lineno": 150,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040869",
                "name": "this.receiveStreamOpus",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "receiveStreamOpus",
        "longname": "VoiceConnection#receiveStreamOpus",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5040,
                5068
            ],
            "filename": "VoiceConnection.js",
            "lineno": 154,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040887",
                "name": "this.receiveStreamPCM",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "receiveStreamPCM",
        "longname": "VoiceConnection#receiveStreamPCM",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5091,
                13622
            ],
            "filename": "VoiceConnection.js",
            "lineno": 158,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040892",
                "name": "VoiceConnection#connect",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "connect",
        "longname": "VoiceConnection#connect",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5175,
                5197
            ],
            "filename": "VoiceConnection.js",
            "lineno": 162,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040904",
                "name": "this.connecting",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connecting",
        "longname": "VoiceConnection#connecting",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5599,
                5631
            ],
            "filename": "VoiceConnection.js",
            "lineno": 171,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040978",
                "name": "this.channelID",
                "type": "MemberExpression",
                "value": "data.channel_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channelID",
        "longname": "VoiceConnection#channelID",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5641,
                5684
            ],
            "filename": "VoiceConnection.js",
            "lineno": 172,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100040986",
                "name": "this.endpoint",
                "type": "MemberExpression",
                "value": "[0]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "endpoint",
        "longname": "VoiceConnection#endpoint",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5694,
                5743
            ],
            "filename": "VoiceConnection.js",
            "lineno": 173,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041000",
                "name": "this.ws",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ws",
        "longname": "VoiceConnection#ws",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5757,
                6037
            ],
            "filename": "VoiceConnection.js",
            "lineno": 174,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041012",
                "name": "connectionTimeout",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "connectionTimeout",
        "longname": "<anonymous>~connectionTimeout",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5928,
                5952
            ],
            "filename": "VoiceConnection.js",
            "lineno": 178,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041032",
                "name": "connectionTimeout",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectionTimeout",
        "longname": "<anonymous>~connectionTimeout",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n        * Fired when stuff happens and gives more info\n        * @event VoiceConnection#debug\n        * @prop {String} message The debug message\n        */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 180,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when stuff happens and gives more info",
        "kind": "event",
        "name": "debug",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The debug message",
                "name": "message"
            }
        ],
        "memberof": "VoiceConnection",
        "longname": "VoiceConnection#event:debug",
        "scope": "instance"
    },
    {
        "comment": "/**\n            * Fired when the voice connection connects\n            * @event VoiceConnection#connect\n            */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 187,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when the voice connection connects",
        "kind": "event",
        "name": "connect",
        "memberof": "VoiceConnection",
        "longname": "VoiceConnection#event:connect",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6575,
                6599
            ],
            "filename": "VoiceConnection.js",
            "lineno": 194,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041088",
                "name": "connectionTimeout",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connectionTimeout",
        "longname": "<anonymous>~connectionTimeout",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6680,
                6737
            ],
            "filename": "VoiceConnection.js",
            "lineno": 197,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041100",
                "name": "server_id",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "server_id",
        "longname": "server_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6755,
                6776
            ],
            "filename": "VoiceConnection.js",
            "lineno": 198,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041113",
                "name": "user_id",
                "type": "MemberExpression",
                "value": "data.user_id"
            }
        },
        "undocumented": true,
        "name": "user_id",
        "longname": "user_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6794,
                6821
            ],
            "filename": "VoiceConnection.js",
            "lineno": 199,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041117",
                "name": "session_id",
                "type": "MemberExpression",
                "value": "data.session_id"
            }
        },
        "undocumented": true,
        "name": "session_id",
        "longname": "session_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6839,
                6856
            ],
            "filename": "VoiceConnection.js",
            "lineno": 200,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041121",
                "name": "token",
                "type": "MemberExpression",
                "value": "data.token"
            }
        },
        "undocumented": true,
        "name": "token",
        "longname": "token",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6942,
                6964
            ],
            "filename": "VoiceConnection.js",
            "lineno": 204,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041137",
                "name": "packet",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "packet",
        "longname": "<anonymous>~packet",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7406,
                7552
            ],
            "filename": "VoiceConnection.js",
            "lineno": 214,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041198",
                "name": "this.heartbeatInterval",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "heartbeatInterval",
        "longname": "VoiceConnection#heartbeatInterval",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7639,
                7664
            ],
            "filename": "VoiceConnection.js",
            "lineno": 220,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041222",
                "name": "this.ssrc",
                "type": "MemberExpression",
                "value": "packet.d.ssrc",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ssrc",
        "longname": "VoiceConnection#ssrc",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7919,
                7946
            ],
            "filename": "VoiceConnection.js",
            "lineno": 226,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041260",
                "name": "this.modes",
                "type": "MemberExpression",
                "value": "packet.d.modes",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "modes",
        "longname": "VoiceConnection#modes",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7969,
                7993
            ],
            "filename": "VoiceConnection.js",
            "lineno": 228,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041270",
                "name": "this.udpIP",
                "type": "MemberExpression",
                "value": "packet.d.ip",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "udpIP",
        "longname": "VoiceConnection#udpIP",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8015,
                8043
            ],
            "filename": "VoiceConnection.js",
            "lineno": 229,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041280",
                "name": "this.udpPort",
                "type": "MemberExpression",
                "value": "packet.d.port",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "udpPort",
        "longname": "VoiceConnection#udpPort",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8164,
                8207
            ],
            "filename": "VoiceConnection.js",
            "lineno": 233,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041307",
                "name": "this.udpSocket",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "udpSocket",
        "longname": "VoiceConnection#udpSocket",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8365,
                8377
            ],
            "filename": "VoiceConnection.js",
            "lineno": 236,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041338",
                "name": "localIP",
                "type": "Literal",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "localIP",
        "longname": "<anonymous>~localIP",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8407,
                8412
            ],
            "filename": "VoiceConnection.js",
            "lineno": 237,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041342",
                "name": "i",
                "type": "Literal",
                "value": 3
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8502,
                8543
            ],
            "filename": "VoiceConnection.js",
            "lineno": 239,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041357",
                "name": "localIP",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "localIP",
        "longname": "<anonymous>~localIP",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8601,
                8675
            ],
            "filename": "VoiceConnection.js",
            "lineno": 241,
            "columnno": 30,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041367",
                "name": "localPort",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "localPort",
        "longname": "<anonymous>~localPort",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8774,
                8789
            ],
            "filename": "VoiceConnection.js",
            "lineno": 244,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041394",
                "name": "protocol",
                "type": "Literal",
                "value": "udp"
            }
        },
        "undocumented": true,
        "name": "protocol",
        "longname": "protocol",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8819,
                9009
            ],
            "filename": "VoiceConnection.js",
            "lineno": 245,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041396",
                "name": "data",
                "type": "ObjectExpression",
                "value": "{\"address\":\"\",\"port\":\"\",\"mode\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "data",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8859,
                8875
            ],
            "filename": "VoiceConnection.js",
            "lineno": 246,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041398",
                "name": "address",
                "type": "Identifier",
                "value": "localIP"
            }
        },
        "undocumented": true,
        "name": "address",
        "longname": "data.address",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8909,
                8924
            ],
            "filename": "VoiceConnection.js",
            "lineno": 247,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041400",
                "name": "port",
                "type": "Identifier",
                "value": "localPort"
            }
        },
        "undocumented": true,
        "name": "port",
        "longname": "data.port",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8958,
                8979
            ],
            "filename": "VoiceConnection.js",
            "lineno": 248,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041402",
                "name": "mode",
                "type": "Identifier",
                "value": "ENCRYPTION_MODE"
            }
        },
        "undocumented": true,
        "name": "mode",
        "longname": "data.mode",
        "kind": "member",
        "memberof": "data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9847,
                9876
            ],
            "filename": "VoiceConnection.js",
            "lineno": 269,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041489",
                "name": "udpMessage",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "udpMessage",
        "longname": "<anonymous>~udpMessage",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10111,
                10136
            ],
            "filename": "VoiceConnection.js",
            "lineno": 275,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041519",
                "name": "this.mode",
                "type": "MemberExpression",
                "value": "packet.d.mode",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "mode",
        "longname": "VoiceConnection#mode",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10158,
                10231
            ],
            "filename": "VoiceConnection.js",
            "lineno": 276,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041529",
                "name": "this.secret",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "secret",
        "longname": "VoiceConnection#secret",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10261,
                10266
            ],
            "filename": "VoiceConnection.js",
            "lineno": 277,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041546",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10331,
                10370
            ],
            "filename": "VoiceConnection.js",
            "lineno": 278,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041562",
                "name": "this.secret[undefined]",
                "type": "MemberExpression",
                "value": "packet.d.secret_key[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "secret[undefined]",
        "longname": "VoiceConnection#secret[undefined]",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10414,
                10437
            ],
            "filename": "VoiceConnection.js",
            "lineno": 280,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041576",
                "name": "this.connecting",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connecting",
        "longname": "VoiceConnection#connecting",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10459,
                10476
            ],
            "filename": "VoiceConnection.js",
            "lineno": 281,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041582",
                "name": "this.ready",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ready",
        "longname": "VoiceConnection#ready",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "/**\n                    * Fired when the voice connection turns ready\n                    * @event VoiceConnection#ready\n                    */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 282,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when the voice connection turns ready",
        "kind": "event",
        "name": "ready",
        "memberof": "VoiceConnection",
        "longname": "VoiceConnection#event:ready",
        "scope": "instance"
    },
    {
        "comment": "/**\n                    * Fired when the voice connection receives a pong\n                    * @event VoiceConnection#pong\n                    * @prop {Number} latency The current latency in milliseconds\n                    */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 291,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when the voice connection receives a pong",
        "kind": "event",
        "name": "pong",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The current latency in milliseconds",
                "name": "latency"
            }
        ],
        "memberof": "VoiceConnection",
        "longname": "VoiceConnection#event:pong",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11230,
                11280
            ],
            "filename": "VoiceConnection.js",
            "lineno": 300,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041625",
                "name": "this.ssrcUserMap[undefined]",
                "type": "MemberExpression",
                "value": "packet.d.user_id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ssrcUserMap[undefined]",
        "longname": "VoiceConnection#ssrcUserMap[undefined]",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "/**\n                    * Fired when a user begins speaking\n                    * @event VoiceConnection#speakingStart\n                    * @prop {String} userID The ID of the user that began speaking\n                    */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 301,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when a user begins speaking",
        "kind": "event",
        "name": "speakingStart",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that began speaking",
                "name": "userID"
            }
        ],
        "memberof": "VoiceConnection",
        "longname": "VoiceConnection#event:speakingStart",
        "scope": "instance"
    },
    {
        "comment": "/**\n                    * Fired when a user stops speaking\n                    * @event VoiceConnection#speakingStop\n                    * @prop {String} userID The ID of the user that stopped speaking\n                    */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 306,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when a user stops speaking",
        "kind": "event",
        "name": "speakingStop",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that stopped speaking",
                "name": "userID"
            }
        ],
        "memberof": "VoiceConnection",
        "longname": "VoiceConnection#event:speakingStop",
        "scope": "instance"
    },
    {
        "comment": "/**\n                    * Fired when a user disconnects from the voice server\n                    * @event VoiceConnection#userDisconnect\n                    * @prop {String} userID The ID of the user that disconnected\n                    */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 324,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when a user disconnects from the voice server",
        "kind": "event",
        "name": "userDisconnect",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that disconnected",
                "name": "userID"
            }
        ],
        "memberof": "VoiceConnection",
        "longname": "VoiceConnection#event:userDisconnect",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13014,
                13083
            ],
            "filename": "VoiceConnection.js",
            "lineno": 342,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041769",
                "name": "err",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "err",
        "longname": "<anonymous>~err",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13221,
                13240
            ],
            "filename": "VoiceConnection.js",
            "lineno": 345,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041808",
                "name": "reconnecting",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "reconnecting",
        "longname": "<anonymous>~reconnecting",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13298,
                13318
            ],
            "filename": "VoiceConnection.js",
            "lineno": 347,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041817",
                "name": "reconnecting",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reconnecting",
        "longname": "<anonymous>~reconnecting",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13383,
                13403
            ],
            "filename": "VoiceConnection.js",
            "lineno": 349,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041826",
                "name": "reconnecting",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "reconnecting",
        "longname": "<anonymous>~reconnecting",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13628,
                14988
            ],
            "filename": "VoiceConnection.js",
            "lineno": 359,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041849",
                "name": "VoiceConnection#disconnect",
                "type": "MethodDefinition",
                "paramnames": [
                    "error",
                    "reconnecting"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "disconnect",
        "longname": "VoiceConnection#disconnect",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13670,
                13693
            ],
            "filename": "VoiceConnection.js",
            "lineno": 360,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041856",
                "name": "this.connecting",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connecting",
        "longname": "VoiceConnection#connecting",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13703,
                13721
            ],
            "filename": "VoiceConnection.js",
            "lineno": 361,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041862",
                "name": "this.ready",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ready",
        "longname": "VoiceConnection#ready",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13731,
                13752
            ],
            "filename": "VoiceConnection.js",
            "lineno": 362,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041868",
                "name": "this.speaking",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "speaking",
        "longname": "VoiceConnection#speaking",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13762,
                13780
            ],
            "filename": "VoiceConnection.js",
            "lineno": 363,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041874",
                "name": "this.timestamp",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timestamp",
        "longname": "VoiceConnection#timestamp",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                13790,
                13807
            ],
            "filename": "VoiceConnection.js",
            "lineno": 364,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041880",
                "name": "this.sequence",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sequence",
        "longname": "VoiceConnection#sequence",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14022,
                14051
            ],
            "filename": "VoiceConnection.js",
            "lineno": 373,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041911",
                "name": "this.heartbeatInterval",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "heartbeatInterval",
        "longname": "VoiceConnection#heartbeatInterval",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14318,
                14339
            ],
            "filename": "VoiceConnection.js",
            "lineno": 383,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041946",
                "name": "this.udpSocket",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "udpSocket",
        "longname": "VoiceConnection#udpSocket",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14518,
                14532
            ],
            "filename": "VoiceConnection.js",
            "lineno": 391,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041974",
                "name": "this.ws",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ws",
        "longname": "VoiceConnection#ws",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14681,
                14702
            ],
            "filename": "VoiceConnection.js",
            "lineno": 398,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100041994",
                "name": "this.channelID",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channelID",
        "longname": "VoiceConnection#channelID",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "/**\n            * Fired when the voice connection disconnects\n            * @event VoiceConnection#disconnect\n            * @prop {Error?} err The error, if any\n            */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 400,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when the voice connection disconnects",
        "kind": "event",
        "name": "disconnect",
        "properties": [
            {
                "type": {
                    "names": [
                        "Error"
                    ]
                },
                "nullable": true,
                "description": "The error, if any",
                "name": "err"
            }
        ],
        "memberof": "VoiceConnection",
        "longname": "VoiceConnection#event:disconnect",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                14994,
                15070
            ],
            "filename": "VoiceConnection.js",
            "lineno": 409,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042011",
                "name": "VoiceConnection#heartbeat",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "heartbeat",
        "longname": "VoiceConnection#heartbeat",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Play an audio or video resource. If playing from a non-opus resource, FFMPEG should be compiled with --enable-libopus for best performance. If playing from HTTPS, FFMPEG must be compiled with --enable-openssl\n    * @arg {ReadableStream | String} resource The audio or video resource, either a ReadableStream, URL, or file path\n    * @arg {Object} [options] Music options\n    * @arg {Boolean} [options.inlineVolume=false] Whether to enable on-the-fly volume changing. Note that enabling this leads to increased CPU usage\n    * @arg {Number} [options.voiceDataTimeout=2000] Timeout when waiting for voice data (-1 for no timeout)\n    * @arg {Array<String>} [options.inputArgs] Additional input parameters to pass to ffmpeg/avconv (before -i)\n    * @arg {Array<String>} [options.encoderArgs] Additional encoder parameters to pass to ffmpeg/avconv (after -i)\n    * @arg {String} [options.format] The format of the resource. If null, FFmpeg will attempt to guess and play the format. Available options: \"dca\", \"ogg\", \"webm\", \"pcm\", null\n    * @arg {Number} [options.frameDuration=20] The resource opus frame duration (required for DCA/Ogg)\n    * @arg {Number} [options.frameSize=2880] The resource opus frame size\n    * @arg {Number} [options.sampleRate=48000] The resource audio sampling rate\n    */",
        "meta": {
            "range": [
                16386,
                17927
            ],
            "filename": "VoiceConnection.js",
            "lineno": 426,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042027",
                "name": "VoiceConnection#play",
                "type": "MethodDefinition",
                "paramnames": [
                    "source",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Play an audio or video resource. If playing from a non-opus resource, FFMPEG should be compiled with --enable-libopus for best performance. If playing from HTTPS, FFMPEG must be compiled with --enable-openssl",
        "params": [
            {
                "type": {
                    "names": [
                        "ReadableStream",
                        "String"
                    ]
                },
                "description": "The audio or video resource, either a ReadableStream, URL, or file path",
                "name": "resource"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Music options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to enable on-the-fly volume changing. Note that enabling this leads to increased CPU usage",
                "name": "options.inlineVolume"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 2000,
                "description": "Timeout when waiting for voice data (-1 for no timeout)",
                "name": "options.voiceDataTimeout"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Additional input parameters to pass to ffmpeg/avconv (before -i)",
                "name": "options.inputArgs"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Additional encoder parameters to pass to ffmpeg/avconv (after -i)",
                "name": "options.encoderArgs"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The format of the resource. If null, FFmpeg will attempt to guess and play the format. Available options: \"dca\", \"ogg\", \"webm\", \"pcm\", null",
                "name": "options.format"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 20,
                "description": "The resource opus frame duration (required for DCA/Ogg)",
                "name": "options.frameDuration"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 2880,
                "description": "The resource opus frame size",
                "name": "options.frameSize"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 48000,
                "description": "The resource audio sampling rate",
                "name": "options.sampleRate"
            }
        ],
        "name": "play",
        "longname": "VoiceConnection#play",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16620,
                16659
            ],
            "filename": "VoiceConnection.js",
            "lineno": 434,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042055",
                "name": "options.format",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "format",
        "longname": "options.format",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16669,
                16762
            ],
            "filename": "VoiceConnection.js",
            "lineno": 435,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042065",
                "name": "options.voiceDataTimeout",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "voiceDataTimeout",
        "longname": "options.voiceDataTimeout",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16772,
                16817
            ],
            "filename": "VoiceConnection.js",
            "lineno": 436,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042081",
                "name": "options.inlineVolume",
                "type": "UnaryExpression",
                "value": "!!options.inlineVolume",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "inlineVolume",
        "longname": "options.inlineVolume",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16827,
                16870
            ],
            "filename": "VoiceConnection.js",
            "lineno": 437,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042091",
                "name": "options.inputArgs",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "inputArgs",
        "longname": "options.inputArgs",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16880,
                16927
            ],
            "filename": "VoiceConnection.js",
            "lineno": 438,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042101",
                "name": "options.encoderArgs",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "encoderArgs",
        "longname": "options.encoderArgs",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16938,
                17002
            ],
            "filename": "VoiceConnection.js",
            "lineno": 440,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042111",
                "name": "options.samplingRate",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "samplingRate",
        "longname": "options.samplingRate",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17012,
                17079
            ],
            "filename": "VoiceConnection.js",
            "lineno": 441,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042123",
                "name": "options.frameDuration",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "frameDuration",
        "longname": "options.frameDuration",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17089,
                17181
            ],
            "filename": "VoiceConnection.js",
            "lineno": 442,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042135",
                "name": "options.frameSize",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "frameSize",
        "longname": "options.frameSize",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17191,
                17265
            ],
            "filename": "VoiceConnection.js",
            "lineno": 443,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042153",
                "name": "options.pcmSize",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pcmSize",
        "longname": "options.pcmSize",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17427,
                17445
            ],
            "filename": "VoiceConnection.js",
            "lineno": 450,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042192",
                "name": "this.ended",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ended",
        "longname": "VoiceConnection#ended",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17455,
                17713
            ],
            "filename": "VoiceConnection.js",
            "lineno": 451,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042198",
                "name": "this.current",
                "type": "ObjectExpression",
                "value": "{\"startTime\":0,\"playTime\":0,\"pausedTimestamp\":0,\"pausedTime\":0,\"bufferingTicks\":0,\"options\":\"\",\"timeout\":null,\"buffer\":null}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "current",
        "longname": "VoiceConnection#current",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17484,
                17496
            ],
            "filename": "VoiceConnection.js",
            "lineno": 452,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042203",
                "name": "startTime",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "startTime",
        "longname": "VoiceConnection#current.startTime",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17519,
                17530
            ],
            "filename": "VoiceConnection.js",
            "lineno": 453,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042205",
                "name": "playTime",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "playTime",
        "longname": "VoiceConnection#current.playTime",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17544,
                17562
            ],
            "filename": "VoiceConnection.js",
            "lineno": 454,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042207",
                "name": "pausedTimestamp",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "pausedTimestamp",
        "longname": "VoiceConnection#current.pausedTimestamp",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17576,
                17589
            ],
            "filename": "VoiceConnection.js",
            "lineno": 455,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042209",
                "name": "pausedTime",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "pausedTime",
        "longname": "VoiceConnection#current.pausedTime",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17603,
                17620
            ],
            "filename": "VoiceConnection.js",
            "lineno": 456,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042211",
                "name": "bufferingTicks",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "bufferingTicks",
        "longname": "VoiceConnection#current.bufferingTicks",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17634,
                17650
            ],
            "filename": "VoiceConnection.js",
            "lineno": 457,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042213",
                "name": "options",
                "type": "Identifier",
                "value": "options"
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "VoiceConnection#current.options",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17664,
                17677
            ],
            "filename": "VoiceConnection.js",
            "lineno": 458,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042215",
                "name": "timeout",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "VoiceConnection#current.timeout",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17691,
                17703
            ],
            "filename": "VoiceConnection.js",
            "lineno": 459,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042217",
                "name": "buffer",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "buffer",
        "longname": "VoiceConnection#current.buffer",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17724,
                17743
            ],
            "filename": "VoiceConnection.js",
            "lineno": 462,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042220",
                "name": "this.playing",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "playing",
        "longname": "VoiceConnection#playing",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "/**\n        * Fired when the voice connection starts playing a stream\n        * @event SharedStream#start\n        */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 464,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when the voice connection starts playing a stream",
        "kind": "event",
        "name": "start",
        "memberof": "SharedStream",
        "longname": "SharedStream#event:start",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17933,
                19663
            ],
            "filename": "VoiceConnection.js",
            "lineno": 473,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042236",
                "name": "VoiceConnection#_send",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_send",
        "longname": "VoiceConnection#_send",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18072,
                18120
            ],
            "filename": "VoiceConnection.js",
            "lineno": 478,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042262",
                "name": "this.timestamp",
                "type": "MemberExpression",
                "value": "this.current.options.frameSize",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timestamp",
        "longname": "VoiceConnection#timestamp",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18177,
                18205
            ],
            "filename": "VoiceConnection.js",
            "lineno": 480,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042281",
                "name": "this.timestamp",
                "type": "Literal",
                "value": 4294967295,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timestamp",
        "longname": "VoiceConnection#timestamp",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18269,
                18291
            ],
            "filename": "VoiceConnection.js",
            "lineno": 484,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042295",
                "name": "this.sequence",
                "type": "Literal",
                "value": 65536,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sequence",
        "longname": "VoiceConnection#sequence",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18316,
                18364
            ],
            "filename": "VoiceConnection.js",
            "lineno": 487,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042301",
                "name": "this.current.buffer",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "buffer",
        "longname": "VoiceConnection#current.buffer",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18432,
                18467
            ],
            "filename": "VoiceConnection.js",
            "lineno": 489,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042324",
                "name": "this.current.startTime",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "startTime",
        "longname": "VoiceConnection#current.startTime",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18549,
                18580
            ],
            "filename": "VoiceConnection.js",
            "lineno": 492,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042344",
                "name": "this.current.bufferingTicks",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "bufferingTicks",
        "longname": "VoiceConnection#current.bufferingTicks",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18954,
                19019
            ],
            "filename": "VoiceConnection.js",
            "lineno": 499,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042410",
                "name": "this.current.pausedTime",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pausedTime",
        "longname": "VoiceConnection#current.pausedTime",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19033,
                19085
            ],
            "filename": "VoiceConnection.js",
            "lineno": 500,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042426",
                "name": "this.timestamp",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timestamp",
        "longname": "VoiceConnection#timestamp",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19150,
                19178
            ],
            "filename": "VoiceConnection.js",
            "lineno": 502,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042447",
                "name": "this.timestamp",
                "type": "Literal",
                "value": 4294967295,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timestamp",
        "longname": "VoiceConnection#timestamp",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19206,
                19291
            ],
            "filename": "VoiceConnection.js",
            "lineno": 504,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042453",
                "name": "this.current.timeout",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "VoiceConnection#current.timeout",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19455,
                19514
            ],
            "filename": "VoiceConnection.js",
            "lineno": 511,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042495",
                "name": "this.current.playTime",
                "type": "MemberExpression",
                "value": "this.current.options.frameDuration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "playTime",
        "longname": "VoiceConnection#current.playTime",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19524,
                19656
            ],
            "filename": "VoiceConnection.js",
            "lineno": 512,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042509",
                "name": "this.current.timeout",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "VoiceConnection#current.timeout",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Stop the bot from sending audio\n    */",
        "meta": {
            "range": [
                19722,
                20771
            ],
            "filename": "VoiceConnection.js",
            "lineno": 518,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042542",
                "name": "VoiceConnection#stopPlaying",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Stop the bot from sending audio",
        "name": "stopPlaying",
        "longname": "VoiceConnection#stopPlaying",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19801,
                19818
            ],
            "filename": "VoiceConnection.js",
            "lineno": 522,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042553",
                "name": "this.ended",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ended",
        "longname": "VoiceConnection#ended",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19931,
                19958
            ],
            "filename": "VoiceConnection.js",
            "lineno": 525,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042578",
                "name": "this.current.timeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "VoiceConnection#current.timeout",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19978,
                19997
            ],
            "filename": "VoiceConnection.js",
            "lineno": 527,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042586",
                "name": "this.current",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "current",
        "longname": "VoiceConnection#current",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20151,
                20156
            ],
            "filename": "VoiceConnection.js",
            "lineno": 534,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042617",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20188,
                20220
            ],
            "filename": "VoiceConnection.js",
            "lineno": 535,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042627",
                "name": "this.timestamp",
                "type": "MemberExpression",
                "value": "this.frameSize",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timestamp",
        "longname": "VoiceConnection#timestamp",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20293,
                20321
            ],
            "filename": "VoiceConnection.js",
            "lineno": 537,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042642",
                "name": "this.timestamp",
                "type": "Literal",
                "value": 4294967295,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timestamp",
        "longname": "VoiceConnection#timestamp",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20409,
                20431
            ],
            "filename": "VoiceConnection.js",
            "lineno": 541,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042656",
                "name": "this.sequence",
                "type": "Literal",
                "value": 65536,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sequence",
        "longname": "VoiceConnection#sequence",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20588,
                20608
            ],
            "filename": "VoiceConnection.js",
            "lineno": 547,
            "columnno": 25,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042683",
                "name": "this.playing",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "playing",
        "longname": "VoiceConnection#playing",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "/**\n        * Fired when the voice connection finishes playing a stream\n        * @event VoiceConnection#end\n        */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 549,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when the voice connection finishes playing a stream",
        "kind": "event",
        "name": "end",
        "memberof": "VoiceConnection",
        "longname": "VoiceConnection#event:end",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20777,
                21623
            ],
            "filename": "VoiceConnection.js",
            "lineno": 556,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042694",
                "name": "VoiceConnection#_createPacket",
                "type": "MethodDefinition",
                "paramnames": [
                    "_buffer"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_createPacket",
        "longname": "VoiceConnection#_createPacket",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                20991,
                20997
            ],
            "filename": "VoiceConnection.js",
            "lineno": 562,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042737",
                "name": "buffer"
            }
        },
        "undocumented": true,
        "name": "buffer",
        "longname": "<anonymous>~buffer",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21012,
                21018
            ],
            "filename": "VoiceConnection.js",
            "lineno": 563,
            "columnno": 13,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042742",
                "name": "length",
                "type": "Identifier",
                "value": "length"
            }
        },
        "undocumented": true,
        "name": "length",
        "longname": "length",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21063,
                21105
            ],
            "filename": "VoiceConnection.js",
            "lineno": 565,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042750",
                "name": "length",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "Sodium.crypto_secretbox_MACBYTES",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "length",
        "longname": "<anonymous>~length",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21120,
                21155
            ],
            "filename": "VoiceConnection.js",
            "lineno": 567,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042756",
                "name": "buffer",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "buffer",
        "longname": "<anonymous>~buffer",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21270,
                21327
            ],
            "filename": "VoiceConnection.js",
            "lineno": 570,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042778",
                "name": "buffer",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "buffer",
        "longname": "<anonymous>~buffer",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21341,
                21394
            ],
            "filename": "VoiceConnection.js",
            "lineno": 571,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042792",
                "name": "length",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "NaCl.lowlevel.crypto_secretbox_BOXZEROBYTES",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "length",
        "longname": "<anonymous>~length",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21474,
                21479
            ],
            "filename": "VoiceConnection.js",
            "lineno": 574,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042813",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21512,
                21549
            ],
            "filename": "VoiceConnection.js",
            "lineno": 575,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042823",
                "name": "this.packetBuffer[undefined]",
                "type": "MemberExpression",
                "value": "buffer[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "packetBuffer[undefined]",
        "longname": "VoiceConnection#packetBuffer[undefined]",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21629,
                21872
            ],
            "filename": "VoiceConnection.js",
            "lineno": 581,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042845",
                "name": "VoiceConnection#_sendPacket",
                "type": "MethodDefinition",
                "paramnames": [
                    "packet"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_sendPacket",
        "longname": "VoiceConnection#_sendPacket",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Generate a receive stream for the voice connection.\n    * @arg {String} [type=\"pcm\"] The desired vocie data type, either \"opus\" or \"pcm\"\n    * @returns {VoiceDataStream}\n    */",
        "meta": {
            "range": [
                22069,
                22817
            ],
            "filename": "VoiceConnection.js",
            "lineno": 596,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042883",
                "name": "VoiceConnection#receive",
                "type": "MethodDefinition",
                "paramnames": [
                    "type"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Generate a receive stream for the voice connection.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"pcm\"",
                "description": "The desired vocie data type, either \"opus\" or \"pcm\"",
                "name": "type"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "VoiceDataStream"
                    ]
                }
            }
        ],
        "name": "receive",
        "longname": "VoiceConnection#receive",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22171,
                22220
            ],
            "filename": "VoiceConnection.js",
            "lineno": 599,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042900",
                "name": "this.receiveStreamPCM",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "receiveStreamPCM",
        "longname": "VoiceConnection#receiveStreamPCM",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22451,
                22501
            ],
            "filename": "VoiceConnection.js",
            "lineno": 606,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042930",
                "name": "this.receiveStreamOpus",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "receiveStreamOpus",
        "longname": "VoiceConnection#receiveStreamOpus",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22823,
                25525
            ],
            "filename": "VoiceConnection.js",
            "lineno": 617,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042967",
                "name": "VoiceConnection#registerReceiveEventHandler",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "registerReceiveEventHandler",
        "longname": "VoiceConnection#registerReceiveEventHandler",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                22921,
                22945
            ],
            "filename": "VoiceConnection.js",
            "lineno": 619,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100042983",
                "name": "nonce",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nonce",
        "longname": "<anonymous>~nonce",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23002,
                23006
            ],
            "filename": "VoiceConnection.js",
            "lineno": 621,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043000",
                "name": "data"
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23048,
                23125
            ],
            "filename": "VoiceConnection.js",
            "lineno": 623,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043007",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23266,
                23327
            ],
            "filename": "VoiceConnection.js",
            "lineno": 626,
            "columnno": 21,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043042",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n                    * Fired to warn of something weird but non-breaking happening\n                    * @event VoiceConnection#warn\n                    * @prop {String} message The warning message\n                    */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 627,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired to warn of something weird but non-breaking happening",
        "kind": "event",
        "name": "warn",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The warning message",
                "name": "message"
            }
        ],
        "memberof": "VoiceConnection",
        "longname": "VoiceConnection#event:warn",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23730,
                23765
            ],
            "filename": "VoiceConnection.js",
            "lineno": 636,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043069",
                "name": "hasExtension",
                "type": "UnaryExpression",
                "value": "!!"
            }
        },
        "undocumented": true,
        "name": "hasExtension",
        "longname": "<anonymous>~hasExtension",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23785,
                23805
            ],
            "filename": "VoiceConnection.js",
            "lineno": 637,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043079",
                "name": "cc",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "cc",
        "longname": "<anonymous>~cc",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                23848,
                23873
            ],
            "filename": "VoiceConnection.js",
            "lineno": 639,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043092",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24053,
                24079
            ],
            "filename": "VoiceConnection.js",
            "lineno": 643,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043105",
                "name": "l",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "l",
        "longname": "<anonymous>~l",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24101,
                24118
            ],
            "filename": "VoiceConnection.js",
            "lineno": 644,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043117",
                "name": "index",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "index",
        "longname": "<anonymous>~index",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24225,
                24249
            ],
            "filename": "VoiceConnection.js",
            "lineno": 648,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043135",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n                * Fired when a voice data packet is received\n                * @event VoiceDataStream#data\n                * @prop {Buffer} data The voice data\n                * @prop {String} userID The user who sent the voice packet\n                * @prop {Number} timestamp The intended timestamp of the packet\n                * @prop {Number} sequence The intended sequence number of the packet\n                */",
        "meta": {
            "filename": "VoiceConnection.js",
            "lineno": 651,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {}
        },
        "description": "Fired when a voice data packet is received",
        "kind": "event",
        "name": "data",
        "properties": [
            {
                "type": {
                    "names": [
                        "Buffer"
                    ]
                },
                "description": "The voice data",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The user who sent the voice packet",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The intended timestamp of the packet",
                "name": "timestamp"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The intended sequence number of the packet",
                "name": "sequence"
            }
        ],
        "memberof": "VoiceDataStream",
        "longname": "VoiceDataStream#event:data",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                24970,
                25019
            ],
            "filename": "VoiceConnection.js",
            "lineno": 662,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043184",
                "name": "userID",
                "type": "MemberExpression",
                "value": "this.ssrcUserMap[undefined]"
            }
        },
        "undocumented": true,
        "name": "userID",
        "longname": "<anonymous>~userID",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25082,
                25160
            ],
            "filename": "VoiceConnection.js",
            "lineno": 664,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043205",
                "name": "this.opus[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "opus[undefined]",
        "longname": "VoiceConnection#opus[undefined]",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25197,
                25250
            ],
            "filename": "VoiceConnection.js",
            "lineno": 667,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043223",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25531,
                25807
            ],
            "filename": "VoiceConnection.js",
            "lineno": 676,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043270",
                "name": "VoiceConnection#setSpeaking",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "setSpeaking",
        "longname": "VoiceConnection#setSpeaking",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25564,
                25579
            ],
            "filename": "VoiceConnection.js",
            "lineno": 677,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043277",
                "name": "value",
                "type": "UnaryExpression",
                "funcscope": "<anonymous>",
                "value": "!!value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "<anonymous>~value",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25613,
                25634
            ],
            "filename": "VoiceConnection.js",
            "lineno": 678,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043287",
                "name": "this.speaking",
                "type": "Identifier",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "speaking",
        "longname": "VoiceConnection#speaking",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25701,
                25716
            ],
            "filename": "VoiceConnection.js",
            "lineno": 680,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043301",
                "name": "speaking",
                "type": "Identifier",
                "value": "value"
            }
        },
        "undocumented": true,
        "name": "speaking",
        "longname": "speaking",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25734,
                25742
            ],
            "filename": "VoiceConnection.js",
            "lineno": 681,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043303",
                "name": "delay",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "delay",
        "longname": "delay",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                25760,
                25775
            ],
            "filename": "VoiceConnection.js",
            "lineno": 682,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043305",
                "name": "ssrc",
                "type": "MemberExpression",
                "value": "this.ssrc"
            }
        },
        "undocumented": true,
        "name": "ssrc",
        "longname": "ssrc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n    * Switch the voice channel the bot is in. The channel to switch to must be in the same guild as the current voice channel\n    * @arg {String} channelID The ID of the voice channel\n    */",
        "meta": {
            "range": [
                26012,
                26235
            ],
            "filename": "VoiceConnection.js",
            "lineno": 691,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043309",
                "name": "VoiceConnection#switchChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "reactive"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Switch the voice channel the bot is in. The channel to switch to must be in the same guild as the current voice channel",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the voice channel",
                "name": "channelID"
            }
        ],
        "name": "switchChannel",
        "longname": "VoiceConnection#switchChannel",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26131,
                26157
            ],
            "filename": "VoiceConnection.js",
            "lineno": 696,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043324",
                "name": "this.channelID",
                "type": "Identifier",
                "value": "channelID",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "channelID",
        "longname": "VoiceConnection#channelID",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Update the bot's voice state\n    * @arg {Boolean} selfMute Whether the bot muted itself or not (audio sending is unaffected)\n    * @arg {Boolean} selfDeaf Whether the bot deafened itself or not (audio receiving is unaffected)\n    */",
        "meta": {
            "range": [
                26488,
                26849
            ],
            "filename": "VoiceConnection.js",
            "lineno": 707,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043338",
                "name": "VoiceConnection#updateVoiceState",
                "type": "MethodDefinition",
                "paramnames": [
                    "selfMute",
                    "selfDeaf"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Update the bot's voice state",
        "params": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the bot muted itself or not (audio sending is unaffected)",
                "name": "selfMute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the bot deafened itself or not (audio receiving is unaffected)",
                "name": "selfDeaf"
            }
        ],
        "name": "updateVoiceState",
        "longname": "VoiceConnection#updateVoiceState",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26642,
                26687
            ],
            "filename": "VoiceConnection.js",
            "lineno": 710,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043362",
                "name": "guild_id",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "guild_id",
        "longname": "guild_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26705,
                26739
            ],
            "filename": "VoiceConnection.js",
            "lineno": 711,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043373",
                "name": "channel_id",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channel_id",
        "longname": "channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26757,
                26778
            ],
            "filename": "VoiceConnection.js",
            "lineno": 712,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043379",
                "name": "self_mute",
                "type": "UnaryExpression",
                "value": "!!selfMute"
            }
        },
        "undocumented": true,
        "name": "self_mute",
        "longname": "self_mute",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26796,
                26817
            ],
            "filename": "VoiceConnection.js",
            "lineno": 713,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043383",
                "name": "self_deaf",
                "type": "UnaryExpression",
                "value": "!!selfDeaf"
            }
        },
        "undocumented": true,
        "name": "self_deaf",
        "longname": "self_deaf",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26855,
                27076
            ],
            "filename": "VoiceConnection.js",
            "lineno": 718,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043387",
                "name": "VoiceConnection#sendWS",
                "type": "MethodDefinition",
                "paramnames": [
                    "op",
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "sendWS",
        "longname": "VoiceConnection#sendWS",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26949,
                26989
            ],
            "filename": "VoiceConnection.js",
            "lineno": 720,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043409",
                "name": "data",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26972,
                26978
            ],
            "filename": "VoiceConnection.js",
            "lineno": 720,
            "columnno": 35,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043416",
                "name": "op",
                "type": "Identifier",
                "value": "op"
            }
        },
        "undocumented": true,
        "name": "op",
        "longname": "op",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                26980,
                26987
            ],
            "filename": "VoiceConnection.js",
            "lineno": 720,
            "columnno": 43,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043418",
                "name": "d",
                "type": "Identifier",
                "value": "data"
            }
        },
        "undocumented": true,
        "name": "d",
        "longname": "d",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27082,
                27141
            ],
            "filename": "VoiceConnection.js",
            "lineno": 726,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043435",
                "name": "VoiceConnection#volume",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "volume",
        "longname": "VoiceConnection#volume",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n    * Modify the output volume of the current stream (if inlineVolume is enabled for the current stream)\n    * @arg {Number} [volume=1.0] The desired volume. 0.0 is 0%, 1.0 is 100%, 2.0 is 200%, etc. It is not recommended to go above 2.0\n    */",
        "meta": {
            "range": [
                27400,
                27463
            ],
            "filename": "VoiceConnection.js",
            "lineno": 734,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043445",
                "name": "VoiceConnection#setVolume",
                "type": "MethodDefinition",
                "paramnames": [
                    "volume"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Modify the output volume of the current stream (if inlineVolume is enabled for the current stream)",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": "1.0",
                "description": "The desired volume. 0.0 is 0%, 1.0 is 100%, 2.0 is 200%, etc. It is not recommended to go above 2.0",
                "name": "volume"
            }
        ],
        "name": "setVolume",
        "longname": "VoiceConnection#setVolume",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "/**\n    * Pause sending audio (if playing)\n    */",
        "meta": {
            "range": [
                27523,
                27907
            ],
            "filename": "VoiceConnection.js",
            "lineno": 741,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043458",
                "name": "VoiceConnection#pause",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Pause sending audio (if playing)",
        "name": "pause",
        "longname": "VoiceConnection#pause",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27541,
                27559
            ],
            "filename": "VoiceConnection.js",
            "lineno": 742,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043463",
                "name": "this.paused",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "paused",
        "longname": "VoiceConnection#paused",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27685,
                27726
            ],
            "filename": "VoiceConnection.js",
            "lineno": 746,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043488",
                "name": "this.current.pausedTimestamp",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pausedTimestamp",
        "longname": "VoiceConnection#current.pausedTimestamp",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27849,
                27876
            ],
            "filename": "VoiceConnection.js",
            "lineno": 750,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043514",
                "name": "this.current.timeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "VoiceConnection#current.timeout",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "/**\n    * Resume sending audio (if paused)\n    */",
        "meta": {
            "range": [
                27967,
                28304
            ],
            "filename": "VoiceConnection.js",
            "lineno": 758,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043521",
                "name": "VoiceConnection#resume",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Resume sending audio (if paused)",
        "name": "resume",
        "longname": "VoiceConnection#resume",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                27986,
                28005
            ],
            "filename": "VoiceConnection.js",
            "lineno": 759,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043526",
                "name": "this.paused",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "paused",
        "longname": "VoiceConnection#paused",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28129,
                28197
            ],
            "filename": "VoiceConnection.js",
            "lineno": 763,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043550",
                "name": "this.current.pausedTime",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pausedTime",
        "longname": "VoiceConnection#current.pausedTime",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28215,
                28247
            ],
            "filename": "VoiceConnection.js",
            "lineno": 764,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043567",
                "name": "this.current.pausedTimestamp",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pausedTimestamp",
        "longname": "VoiceConnection#current.pausedTimestamp",
        "kind": "member",
        "memberof": "VoiceConnection#current",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28310,
                28382
            ],
            "filename": "VoiceConnection.js",
            "lineno": 770,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043579",
                "name": "VoiceConnection#toString",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "VoiceConnection#toString",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28388,
                28677
            ],
            "filename": "VoiceConnection.js",
            "lineno": 774,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043590",
                "name": "VoiceConnection#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "VoiceConnection#toJSON",
        "kind": "function",
        "memberof": "VoiceConnection",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28681,
                28733
            ],
            "filename": "VoiceConnection.js",
            "lineno": 789,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043619",
                "name": "VoiceConnection._converterCommand",
                "type": "Identifier",
                "value": "converterCommand",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_converterCommand",
        "longname": "VoiceConnection._converterCommand",
        "kind": "member",
        "memberof": "VoiceConnection",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                28736,
                28768
            ],
            "filename": "VoiceConnection.js",
            "lineno": 791,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043625",
                "name": "module.exports",
                "type": "Identifier",
                "value": "VoiceConnection",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                57
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043635",
                "name": "Base",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Base",
        "longname": "Base",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                65,
                107
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043641",
                "name": "Collection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Collection",
        "longname": "Collection",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                110,
                5474
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 6,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043646",
                "name": "VoiceConnectionManager",
                "type": "ClassDeclaration",
                "paramnames": [
                    "vcObject"
                ]
            }
        },
        "undocumented": true,
        "name": "VoiceConnectionManager",
        "longname": "VoiceConnectionManager",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                164,
                283
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 7,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043650",
                "name": "VoiceConnectionManager",
                "type": "MethodDefinition",
                "paramnames": [
                    "vcObject"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "VoiceConnectionManager",
        "longname": "VoiceConnectionManager",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                253,
                276
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 9,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043664",
                "name": "this.pendingGuilds",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pendingGuilds",
        "longname": "VoiceConnectionManager#pendingGuilds",
        "kind": "member",
        "memberof": "VoiceConnectionManager",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                289,
                2098
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 12,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043669",
                "name": "VoiceConnectionManager#join",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "channelID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "join",
        "longname": "VoiceConnectionManager#join",
        "kind": "function",
        "memberof": "VoiceConnectionManager",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                339,
                369
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 13,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043677",
                "name": "connection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "connection",
        "longname": "<anonymous>~connection",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                647,
                900
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 20,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043717",
                "name": "disconnectHandler",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "disconnectHandler",
        "longname": "<anonymous>~disconnectHandler",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                928,
                1171
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 25,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043742",
                "name": "readyHandler",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "readyHandler",
        "longname": "<anonymous>~readyHandler",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1199,
                1487
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 30,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043765",
                "name": "errorHandler",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "errorHandler",
        "longname": "<anonymous>~errorHandler",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1714,
                2079
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 41,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043818",
                "name": "this.pendingGuilds[undefined]",
                "type": "ObjectExpression",
                "value": "{\"channelID\":\"\",\"options\":\"\",\"res\":\"\",\"rej\":\"\",\"timeout\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pendingGuilds[undefined]",
        "longname": "VoiceConnectionManager#pendingGuilds[undefined]",
        "kind": "member",
        "memberof": "VoiceConnectionManager",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1762,
                1782
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 42,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043825",
                "name": "channelID",
                "type": "Identifier",
                "value": "channelID"
            }
        },
        "undocumented": true,
        "name": "channelID",
        "longname": "VoiceConnectionManager#pendingGuilds[undefined].channelID",
        "kind": "member",
        "memberof": "VoiceConnectionManager#pendingGuilds[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1800,
                1822
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 43,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043827",
                "name": "options",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "VoiceConnectionManager#pendingGuilds[undefined].options",
        "kind": "member",
        "memberof": "VoiceConnectionManager#pendingGuilds[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1840,
                1848
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 44,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043831",
                "name": "res",
                "type": "Identifier",
                "value": "res"
            }
        },
        "undocumented": true,
        "name": "res",
        "longname": "VoiceConnectionManager#pendingGuilds[undefined].res",
        "kind": "member",
        "memberof": "VoiceConnectionManager#pendingGuilds[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1866,
                1874
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 45,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043833",
                "name": "rej",
                "type": "Identifier",
                "value": "rej"
            }
        },
        "undocumented": true,
        "name": "rej",
        "longname": "VoiceConnectionManager#pendingGuilds[undefined].rej",
        "kind": "member",
        "memberof": "VoiceConnectionManager#pendingGuilds[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1892,
                2065
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 46,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043835",
                "name": "timeout",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "VoiceConnectionManager#pendingGuilds[undefined].timeout",
        "kind": "member",
        "memberof": "VoiceConnectionManager#pendingGuilds[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2104,
                4854
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 54,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043854",
                "name": "VoiceConnectionManager#voiceServerUpdate",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "voiceServerUpdate",
        "longname": "VoiceConnectionManager#voiceServerUpdate",
        "kind": "function",
        "memberof": "VoiceConnectionManager",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2304,
                2352
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 57,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043891",
                "name": "this.pendingGuilds[undefined].timeout",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "VoiceConnectionManager#pendingGuilds[undefined].timeout",
        "kind": "member",
        "memberof": "VoiceConnectionManager#pendingGuilds[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2376,
                2412
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 59,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043903",
                "name": "connection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "connection",
        "longname": "<anonymous>~connection",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2543,
                2803
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 64,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043928",
                "name": "connection",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connection",
        "longname": "<anonymous>~connection",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2618,
                2635
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 65,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043942",
                "name": "shard",
                "type": "MemberExpression",
                "value": "data.shard"
            }
        },
        "undocumented": true,
        "name": "shard",
        "longname": "shard",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2653,
                2713
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 66,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043946",
                "name": "opusOnly",
                "type": "MemberExpression",
                "value": "this.pendingGuilds[undefined].options.opusOnly"
            }
        },
        "undocumented": true,
        "name": "opusOnly",
        "longname": "opusOnly",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2731,
                2787
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 67,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043958",
                "name": "shared",
                "type": "MemberExpression",
                "value": "this.pendingGuilds[undefined].options.shared"
            }
        },
        "undocumented": true,
        "name": "shared",
        "longname": "shared",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2856,
                2927
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 71,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043976",
                "name": "channel_id",
                "type": "MemberExpression",
                "value": ".channelID"
            }
        },
        "undocumented": true,
        "name": "channel_id",
        "longname": "channel_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2941,
                2964
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 72,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043988",
                "name": "endpoint",
                "type": "MemberExpression",
                "value": "data.endpoint"
            }
        },
        "undocumented": true,
        "name": "endpoint",
        "longname": "endpoint",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2978,
                2995
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 73,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043992",
                "name": "token",
                "type": "MemberExpression",
                "value": "data.token"
            }
        },
        "undocumented": true,
        "name": "token",
        "longname": "token",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3009,
                3036
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 74,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100043996",
                "name": "session_id",
                "type": "MemberExpression",
                "value": "data.session_id"
            }
        },
        "undocumented": true,
        "name": "session_id",
        "longname": "session_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3050,
                3071
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 75,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044000",
                "name": "user_id",
                "type": "MemberExpression",
                "value": "data.user_id"
            }
        },
        "undocumented": true,
        "name": "user_id",
        "longname": "user_id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3216,
                3264
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 80,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044026",
                "name": "this.pendingGuilds[undefined].waiting",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "waiting",
        "longname": "VoiceConnectionManager#pendingGuilds[undefined].waiting",
        "kind": "member",
        "memberof": "VoiceConnectionManager#pendingGuilds[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3280,
                3748
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 81,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044038",
                "name": "disconnectHandler",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "connection": "<anonymous>~disconnectHandler~connection"
            }
        },
        "undocumented": true,
        "name": "disconnectHandler",
        "longname": "<anonymous>~disconnectHandler",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3320,
                3356
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 82,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044043",
                "name": "connection",
                "type": "CallExpression",
                "funcscope": "<anonymous>~disconnectHandler",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connection",
        "longname": "<anonymous>~disconnectHandler~connection",
        "kind": "member",
        "memberof": "<anonymous>~disconnectHandler",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3764,
                4222
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 92,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044102",
                "name": "readyHandler",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "connection": "<anonymous>~readyHandler~connection"
            }
        },
        "undocumented": true,
        "name": "readyHandler",
        "longname": "<anonymous>~readyHandler",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3799,
                3835
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 93,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044107",
                "name": "connection",
                "type": "CallExpression",
                "funcscope": "<anonymous>~readyHandler",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connection",
        "longname": "<anonymous>~readyHandler~connection",
        "kind": "member",
        "memberof": "<anonymous>~readyHandler",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4238,
                4733
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 103,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044164",
                "name": "errorHandler",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "connection": "<anonymous>~errorHandler~connection"
            }
        },
        "undocumented": true,
        "name": "errorHandler",
        "longname": "<anonymous>~errorHandler",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4276,
                4312
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 104,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044170",
                "name": "connection",
                "type": "CallExpression",
                "funcscope": "<anonymous>~errorHandler",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "connection",
        "longname": "<anonymous>~errorHandler~connection",
        "kind": "member",
        "memberof": "<anonymous>~errorHandler",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4860,
                5081
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 118,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044248",
                "name": "VoiceConnectionManager#leave",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "leave",
        "longname": "VoiceConnectionManager#leave",
        "kind": "function",
        "memberof": "VoiceConnectionManager",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4891,
                4921
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 119,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044254",
                "name": "connection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "connection",
        "longname": "<anonymous>~connection",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5087,
                5261
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 128,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044282",
                "name": "VoiceConnectionManager#switch",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "switch",
        "longname": "VoiceConnectionManager#switch",
        "kind": "function",
        "memberof": "VoiceConnectionManager",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5130,
                5160
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 129,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044289",
                "name": "connection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "connection",
        "longname": "<anonymous>~connection",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5267,
                5328
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 136,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044307",
                "name": "VoiceConnectionManager#toString",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toString",
        "longname": "VoiceConnectionManager#toString",
        "kind": "function",
        "memberof": "VoiceConnectionManager",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5334,
                5472
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 140,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044313",
                "name": "VoiceConnectionManager#toJSON",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "toJSON",
        "longname": "VoiceConnectionManager#toJSON",
        "kind": "function",
        "memberof": "VoiceConnectionManager",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5476,
                5515
            ],
            "filename": "VoiceConnectionManager.js",
            "lineno": 148,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044335",
                "name": "module.exports",
                "type": "Identifier",
                "value": "VoiceConnectionManager",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                19,
                31
            ],
            "filename": "VoiceDataStream.js",
            "lineno": 3,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044345",
                "name": "EventEmitter"
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                43,
                82
            ],
            "filename": "VoiceDataStream.js",
            "lineno": 5,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044350",
                "name": "EventEmitter",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103,
                148
            ],
            "filename": "VoiceDataStream.js",
            "lineno": 7,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044357",
                "name": "EventEmitter",
                "type": "MemberExpression",
                "value": ".EventEmitter",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "EventEmitter",
        "longname": "EventEmitter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n* Represents a voice data stream\n* @extends EventEmitter\n* @prop {String} type The targeted voice data type for the stream, either \"opus\" or \"pcm\"\n*/",
        "meta": {
            "range": [
                307,
                426
            ],
            "filename": "VoiceDataStream.js",
            "lineno": 15,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044364",
                "name": "VoiceDataStream",
                "type": "ClassDeclaration",
                "paramnames": [
                    "type"
                ]
            }
        },
        "classdesc": "Represents a voice data stream",
        "augments": [
            "EventEmitter"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The targeted voice data type for the stream, either \"opus\" or \"pcm\"",
                "name": "type"
            }
        ],
        "name": "VoiceDataStream",
        "longname": "VoiceDataStream",
        "kind": "class",
        "scope": "global",
        "undocumented": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                356,
                424
            ],
            "filename": "VoiceDataStream.js",
            "lineno": 16,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044368",
                "name": "VoiceDataStream",
                "type": "MethodDefinition",
                "paramnames": [
                    "type"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "VoiceDataStream",
        "longname": "VoiceDataStream",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n* Represents a voice data stream\n* @extends EventEmitter\n* @prop {String} type The targeted voice data type for the stream, either \"opus\" or \"pcm\"\n*/",
        "meta": {
            "range": [
                307,
                426
            ],
            "filename": "VoiceDataStream.js",
            "lineno": 15,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044364",
                "name": "VoiceDataStream",
                "type": "ClassDeclaration",
                "paramnames": [
                    "type"
                ]
            }
        },
        "name": "VoiceDataStream",
        "longname": "VoiceDataStream",
        "kind": "class",
        "classdesc": "Represents a voice data stream",
        "augments": [
            "EventEmitter"
        ],
        "scope": "global",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The targeted voice data type for the stream, either \"opus\" or \"pcm\"",
                "name": "type"
            }
        ]
    },
    {
        "comment": "",
        "meta": {
            "range": [
                401,
                417
            ],
            "filename": "VoiceDataStream.js",
            "lineno": 18,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044377",
                "name": "this.type",
                "type": "Identifier",
                "value": "type",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "VoiceDataStream#type",
        "kind": "member",
        "memberof": "VoiceDataStream",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                428,
                460
            ],
            "filename": "VoiceDataStream.js",
            "lineno": 22,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice",
            "code": {
                "id": "astnode100044383",
                "name": "module.exports",
                "type": "Identifier",
                "value": "VoiceDataStream",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                66
            ],
            "filename": "BaseTransformer.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044393",
                "name": "TransformStream",
                "type": "MemberExpression",
                "value": ".Transform"
            }
        },
        "undocumented": true,
        "name": "TransformStream",
        "longname": "TransformStream",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                69,
                725
            ],
            "filename": "BaseTransformer.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044400",
                "name": "BaseTransformer",
                "type": "ClassDeclaration",
                "paramnames": [
                    "options"
                ]
            }
        },
        "undocumented": true,
        "name": "BaseTransformer",
        "longname": "BaseTransformer",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                121,
                410
            ],
            "filename": "BaseTransformer.js",
            "lineno": 6,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044404",
                "name": "BaseTransformer",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "BaseTransformer",
        "longname": "BaseTransformer",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                211,
                239
            ],
            "filename": "BaseTransformer.js",
            "lineno": 8,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044419",
                "name": "options.allowHalfOpen",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "allowHalfOpen",
        "longname": "options.allowHalfOpen",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                313,
                338
            ],
            "filename": "BaseTransformer.js",
            "lineno": 11,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044432",
                "name": "options.highWaterMark",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "highWaterMark",
        "longname": "options.highWaterMark",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                382,
                403
            ],
            "filename": "BaseTransformer.js",
            "lineno": 14,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044442",
                "name": "this.manualCB",
                "type": "Literal",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "manualCB",
        "longname": "BaseTransformer#manualCB",
        "kind": "member",
        "memberof": "BaseTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                416,
                583
            ],
            "filename": "BaseTransformer.js",
            "lineno": 17,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044447",
                "name": "BaseTransformer#setTransformCB",
                "type": "MethodDefinition",
                "paramnames": [
                    "cb"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "setTransformCB",
        "longname": "BaseTransformer#setTransformCB",
        "kind": "function",
        "memberof": "BaseTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                509,
                531
            ],
            "filename": "BaseTransformer.js",
            "lineno": 20,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044463",
                "name": "this._transformCB",
                "type": "Identifier",
                "value": "cb",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_transformCB",
        "longname": "BaseTransformer#_transformCB",
        "kind": "member",
        "memberof": "BaseTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                589,
                723
            ],
            "filename": "BaseTransformer.js",
            "lineno": 26,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044472",
                "name": "BaseTransformer#transformCB",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "transformCB",
        "longname": "BaseTransformer#transformCB",
        "kind": "function",
        "memberof": "BaseTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                682,
                706
            ],
            "filename": "BaseTransformer.js",
            "lineno": 29,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044487",
                "name": "this._transformCB",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_transformCB",
        "longname": "BaseTransformer#_transformCB",
        "kind": "member",
        "memberof": "BaseTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                727,
                759
            ],
            "filename": "BaseTransformer.js",
            "lineno": 34,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044493",
                "name": "module.exports",
                "type": "Identifier",
                "value": "BaseTransformer",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                67
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044503",
                "name": "BaseTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "BaseTransformer",
        "longname": "BaseTransformer",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70,
                2371
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044508",
                "name": "DCAOpusTransformer",
                "type": "ClassDeclaration",
                "paramnames": [
                    "options"
                ]
            }
        },
        "undocumented": true,
        "name": "DCAOpusTransformer",
        "longname": "DCAOpusTransformer",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                125,
                215
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 6,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044512",
                "name": "DCAOpusTransformer",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "DCAOpusTransformer",
        "longname": "DCAOpusTransformer",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                186,
                208
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 9,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044524",
                "name": "this._remainder",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "DCAOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "DCAOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                221,
                613
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 12,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044529",
                "name": "DCAOpusTransformer#process",
                "type": "MethodDefinition",
                "paramnames": [
                    "buffer"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "process",
        "longname": "DCAOpusTransformer#process",
        "kind": "function",
        "memberof": "DCAOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                337,
                380
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 17,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044548",
                "name": "opusLen",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "opusLen",
        "longname": "<anonymous>~opusLen",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                390,
                408
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 18,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044558",
                "name": "buffer._index",
                "type": "Literal",
                "value": 2,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_index",
        "longname": "buffer._index",
        "kind": "member",
        "memberof": "buffer",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                509,
                533
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 24,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044577",
                "name": "buffer._index",
                "type": "Identifier",
                "value": "opusLen",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_index",
        "longname": "buffer._index",
        "kind": "member",
        "memberof": "buffer",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                619,
                2369
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 28,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044599",
                "name": "DCAOpusTransformer#_transform",
                "type": "MethodDefinition",
                "paramnames": [
                    "chunk",
                    "enc",
                    "cb"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_transform",
        "longname": "DCAOpusTransformer#_transform",
        "kind": "function",
        "memberof": "DCAOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                691,
                738
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 30,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044612",
                "name": "chunk",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "chunk",
        "longname": "<anonymous>~chunk",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                752,
                774
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 31,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044624",
                "name": "this._remainder",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "DCAOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "DCAOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                863,
                886
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 36,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044643",
                "name": "this._remainder",
                "type": "Identifier",
                "value": "chunk",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "DCAOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "DCAOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                960,
                990
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 39,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044653",
                "name": "dcaVersion",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "dcaVersion",
        "longname": "<anonymous>~dcaVersion",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1122,
                1138
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 41,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044681",
                "name": "this.head",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "head",
        "longname": "DCAOpusTransformer#head",
        "kind": "member",
        "memberof": "DCAOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1310,
                1333
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 44,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044701",
                "name": "this._remainder",
                "type": "Identifier",
                "value": "chunk",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "DCAOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "DCAOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1420,
                1465
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 47,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044710",
                "name": "jsonLength",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "jsonLength",
        "longname": "<anonymous>~jsonLength",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1547,
                1570
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 49,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044732",
                "name": "this._remainder",
                "type": "Identifier",
                "value": "chunk",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "DCAOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "DCAOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1657,
                1702
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 52,
            "columnno": 26,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044741",
                "name": "jsonMetadata",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "jsonMetadata",
        "longname": "<anonymous>~jsonMetadata",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1778,
                1813
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 54,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044759",
                "name": "chunk",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "chunk",
        "longname": "<anonymous>~chunk",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1835,
                1851
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 55,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044769",
                "name": "this.head",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "head",
        "longname": "DCAOpusTransformer#head",
        "kind": "member",
        "memberof": "DCAOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2033,
                2049
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 62,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044790",
                "name": "chunk._index",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_index",
        "longname": "<anonymous>~chunk._index",
        "kind": "member",
        "memberof": "<anonymous>~chunk",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2115,
                2136
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 65,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044805",
                "name": "offset",
                "type": "MemberExpression",
                "value": "chunk._index"
            }
        },
        "undocumented": true,
        "name": "offset",
        "longname": "<anonymous>~offset",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2156,
                2181
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 66,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044811",
                "name": "ret",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ret",
        "longname": "<anonymous>~ret",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2221,
                2258
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 68,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044822",
                "name": "this._remainder",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "DCAOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "DCAOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2373,
                2408
            ],
            "filename": "DCAOpusTransformer.js",
            "lineno": 78,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044842",
                "name": "module.exports",
                "type": "Identifier",
                "value": "DCAOpusTransformer",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                60
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044852",
                "name": "ChildProcess",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ChildProcess",
        "longname": "ChildProcess",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                68,
                107
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 4,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044858",
                "name": "DuplexStream",
                "type": "MemberExpression",
                "value": ".Duplex"
            }
        },
        "undocumented": true,
        "name": "DuplexStream",
        "longname": "DuplexStream",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                115,
                164
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 5,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044866",
                "name": "PassThroughStream",
                "type": "MemberExpression",
                "value": ".PassThrough"
            }
        },
        "undocumented": true,
        "name": "PassThroughStream",
        "longname": "PassThroughStream",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                173,
                303
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 7,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044874",
                "name": "delegateEvents",
                "type": "ObjectExpression",
                "value": "{\"readable\":\"_reader\",\"data\":\"_reader\",\"end\":\"_reader\",\"drain\":\"_writer\",\"finish\":\"_writer\"}"
            }
        },
        "undocumented": true,
        "name": "delegateEvents",
        "longname": "delegateEvents",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                196,
                215
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 8,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044877",
                "name": "readable",
                "type": "Literal",
                "value": "_reader"
            }
        },
        "undocumented": true,
        "name": "readable",
        "longname": "delegateEvents.readable",
        "kind": "member",
        "memberof": "delegateEvents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                221,
                236
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 9,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044879",
                "name": "data",
                "type": "Literal",
                "value": "_reader"
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "delegateEvents.data",
        "kind": "member",
        "memberof": "delegateEvents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                242,
                256
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 10,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044881",
                "name": "end",
                "type": "Literal",
                "value": "_reader"
            }
        },
        "undocumented": true,
        "name": "end",
        "longname": "delegateEvents.end",
        "kind": "member",
        "memberof": "delegateEvents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                262,
                278
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 11,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044883",
                "name": "drain",
                "type": "Literal",
                "value": "_writer"
            }
        },
        "undocumented": true,
        "name": "drain",
        "longname": "delegateEvents.drain",
        "kind": "member",
        "memberof": "delegateEvents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                284,
                301
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 12,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044885",
                "name": "finish",
                "type": "Literal",
                "value": "_writer"
            }
        },
        "undocumented": true,
        "name": "finish",
        "longname": "delegateEvents.finish",
        "kind": "member",
        "memberof": "delegateEvents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                306,
                4926
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 15,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044887",
                "name": "FFmpegDuplex",
                "type": "ClassDeclaration",
                "paramnames": [
                    "command",
                    "options"
                ]
            }
        },
        "undocumented": true,
        "name": "FFmpegDuplex",
        "longname": "FFmpegDuplex",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                352,
                1398
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 16,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044891",
                "name": "FFmpegDuplex",
                "type": "MethodDefinition",
                "paramnames": [
                    "command",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "FFmpegDuplex",
        "longname": "FFmpegDuplex",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                451,
                476
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 18,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044907",
                "name": "options.highWaterMark",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "highWaterMark",
        "longname": "options.highWaterMark",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                521,
                543
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 22,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044917",
                "name": "this.command",
                "type": "Identifier",
                "value": "command",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "command",
        "longname": "FFmpegDuplex#command",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                553,
                598
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 23,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044923",
                "name": "this._reader",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_reader",
        "longname": "FFmpegDuplex#_reader",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                608,
                653
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 24,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044931",
                "name": "this._writer",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_writer",
        "longname": "FFmpegDuplex#_writer",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                664,
                709
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 26,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044939",
                "name": "this._onError",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_onError",
        "longname": "FFmpegDuplex#_onError",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                819,
                868
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 31,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044974",
                "name": "this._readableState",
                "type": "MemberExpression",
                "value": "this._reader._readableState",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_readableState",
        "longname": "FFmpegDuplex#_readableState",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                878,
                927
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 32,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100044984",
                "name": "this._writableState",
                "type": "MemberExpression",
                "value": "this._writer._writableState",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_writableState",
        "longname": "FFmpegDuplex#_writableState",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1043,
                1078
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 35,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045007",
                "name": "og",
                "type": "MemberExpression",
                "value": "DuplexStream.prototype[undefined]"
            }
        },
        "undocumented": true,
        "name": "og",
        "longname": "<anonymous>~og",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1093,
                1379
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 37,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045015",
                "name": "this[undefined]",
                "type": "FunctionExpression",
                "paramnames": [
                    "ev",
                    "fn"
                ]
            },
            "vars": {
                "substream": "FFmpegDuplex#[undefined]~substream"
            }
        },
        "undocumented": true,
        "name": "[undefined]",
        "longname": "FFmpegDuplex#[undefined]",
        "kind": "function",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1149,
                1179
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 38,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045024",
                "name": "substream",
                "type": "MemberExpression",
                "value": "delegateEvents[undefined]"
            }
        },
        "undocumented": true,
        "name": "substream",
        "longname": "FFmpegDuplex#[undefined]~substream",
        "kind": "constant",
        "memberof": "FFmpegDuplex#[undefined]",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1404,
                4394
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 48,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045050",
                "name": "FFmpegDuplex#spawn",
                "type": "MethodDefinition",
                "paramnames": [
                    "args",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "spawn",
        "longname": "FFmpegDuplex#spawn",
        "kind": "function",
        "memberof": "FFmpegDuplex",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1444,
                1446
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 49,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045059",
                "name": "ex"
            }
        },
        "undocumented": true,
        "name": "ex",
        "longname": "<anonymous>~ex",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1448,
                1454
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 49,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045061",
                "name": "exited"
            }
        },
        "undocumented": true,
        "name": "exited",
        "longname": "<anonymous>~exited",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1456,
                1462
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 49,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045063",
                "name": "killed"
            }
        },
        "undocumented": true,
        "name": "killed",
        "longname": "<anonymous>~killed",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1464,
                1469
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 49,
            "columnno": 32,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045065",
                "name": "ended"
            }
        },
        "undocumented": true,
        "name": "ended",
        "longname": "<anonymous>~ended",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1483,
                1494
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 50,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045068",
                "name": "stderr",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "stderr",
        "longname": "<anonymous>~stderr",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1511,
                1718
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 52,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045072",
                "name": "onStdoutEnd",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "ended": "<anonymous>~onStdoutEnd~ended"
            }
        },
        "undocumented": true,
        "name": "onStdoutEnd",
        "longname": "<anonymous>~onStdoutEnd",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1584,
                1596
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 54,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045083",
                "name": "ended",
                "type": "Literal",
                "funcscope": "<anonymous>~onStdoutEnd",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ended",
        "longname": "<anonymous>~onStdoutEnd~ended",
        "kind": "member",
        "memberof": "<anonymous>~onStdoutEnd",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1735,
                1804
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 60,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045105",
                "name": "onStderrData",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "onStderrData",
        "longname": "<anonymous>~onStderrData",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1821,
                2084
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 64,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045117",
                "name": "cleanup",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "this._process": "<anonymous>#_process",
                "this._stderr": "<anonymous>#_stderr",
                "this._stdout": "<anonymous>#_stdout",
                "this._stdin": "<anonymous>#_stdin",
                "stderr": "<anonymous>#_stdout.stderr",
                "ex": "<anonymous>#_stdin.ex",
                "killed": "<anonymous>#_stdout.stderr.killed",
                "this.kill": "<anonymous>#kill",
                "this.destroy": "<anonymous>#destroy"
            }
        },
        "undocumented": true,
        "name": "cleanup",
        "longname": "<anonymous>~cleanup",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1851,
                2010
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 65,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045122",
                "name": "this._process",
                "type": "AssignmentExpression",
                "value": "this._stderr",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_process",
        "longname": "<anonymous>#_process",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1879,
                2010
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 66,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045126",
                "name": "this._stderr",
                "type": "AssignmentExpression",
                "value": "this._stdout",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_stderr",
        "longname": "<anonymous>#_stderr",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1906,
                2010
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 67,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045130",
                "name": "this._stdout",
                "type": "AssignmentExpression",
                "value": "this._stdin",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_stdout",
        "longname": "<anonymous>#_stdout",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1933,
                2010
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 68,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045134",
                "name": "this._stdin",
                "type": "AssignmentExpression",
                "value": "stderr",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_stdin",
        "longname": "<anonymous>#_stdin",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1959,
                2010
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 69,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045138",
                "name": "stderr",
                "type": "AssignmentExpression",
                "funcscope": "<anonymous>~cleanup",
                "value": "ex",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "stderr",
        "longname": "<anonymous>#_stdout.stderr",
        "kind": "member",
        "memberof": "<anonymous>#_stdout",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1980,
                2010
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 70,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045140",
                "name": "ex",
                "type": "AssignmentExpression",
                "funcscope": "<anonymous>~cleanup",
                "value": "killed",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ex",
        "longname": "<anonymous>#_stdin.ex",
        "kind": "member",
        "memberof": "<anonymous>#_stdin",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1997,
                2010
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 71,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045142",
                "name": "killed",
                "type": "Literal",
                "funcscope": "<anonymous>~cleanup",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "killed",
        "longname": "<anonymous>#_stdout.stderr.killed",
        "kind": "member",
        "memberof": "<anonymous>#_stdout.stderr",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2025,
                2073
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 73,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045146",
                "name": "this.kill",
                "type": "AssignmentExpression",
                "value": "this.destroy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "kill",
        "longname": "<anonymous>#kill",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2049,
                2073
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 74,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045150",
                "name": "this.destroy",
                "type": "MemberExpression",
                "value": "this.noop",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "destroy",
        "longname": "<anonymous>#destroy",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2101,
                2885
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 77,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045158",
                "name": "onExit",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "exited": "<anonymous>~onExit~exited",
                "ex": "<anonymous>~onExit~ex",
                "ex.killed": "<anonymous>~onExit~ex.killed",
                "ex.code": "<anonymous>~onExit~ex.code",
                "ex.signal": "<anonymous>~onExit~ex.signal"
            }
        },
        "undocumented": true,
        "name": "onExit",
        "longname": "<anonymous>~onExit",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2205,
                2218
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 81,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045169",
                "name": "exited",
                "type": "Literal",
                "funcscope": "<anonymous>~onExit",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exited",
        "longname": "<anonymous>~onExit~exited",
        "kind": "member",
        "memberof": "<anonymous>~onExit",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2557,
                2632
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 93,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045205",
                "name": "ex",
                "type": "NewExpression",
                "funcscope": "<anonymous>~onExit",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ex",
        "longname": "<anonymous>~onExit~ex",
        "kind": "member",
        "memberof": "<anonymous>~onExit",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2650,
                2692
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 94,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045221",
                "name": "ex.killed",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>~onExit",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "killed",
        "longname": "<anonymous>~onExit~ex.killed",
        "kind": "member",
        "memberof": "<anonymous>~onExit~ex",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2710,
                2724
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 95,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045233",
                "name": "ex.code",
                "type": "Identifier",
                "funcscope": "<anonymous>~onExit",
                "value": "code",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "code",
        "longname": "<anonymous>~onExit~ex.code",
        "kind": "member",
        "memberof": "<anonymous>~onExit~ex",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2742,
                2760
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 96,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045239",
                "name": "ex.signal",
                "type": "Identifier",
                "funcscope": "<anonymous>~onExit",
                "value": "signal",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "signal",
        "longname": "<anonymous>~onExit~ex.signal",
        "kind": "member",
        "memberof": "<anonymous>~onExit~ex",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2902,
                3048
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 104,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045261",
                "name": "onError",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "ex": "<anonymous>~onError~ex"
            }
        },
        "undocumented": true,
        "name": "onError",
        "longname": "<anonymous>~onError",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2935,
                2943
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 105,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045267",
                "name": "ex",
                "type": "Identifier",
                "funcscope": "<anonymous>~onError",
                "value": "err",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ex",
        "longname": "<anonymous>~onError~ex",
        "kind": "member",
        "memberof": "<anonymous>~onError",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3065,
                3517
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 111,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045288",
                "name": "kill",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "killed": "<anonymous>~kill~killed",
                "": null,
                "ex": "<anonymous>~kill~ex"
            }
        },
        "undocumented": true,
        "name": "kill",
        "longname": "<anonymous>~kill",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3228,
                3241
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 118,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045311",
                "name": "killed",
                "type": "Literal",
                "funcscope": "<anonymous>~kill",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "killed",
        "longname": "<anonymous>~kill~killed",
        "kind": "member",
        "memberof": "<anonymous>~kill",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3460,
                3466
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 124,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045346",
                "name": "ex",
                "type": "Identifier",
                "funcscope": "<anonymous>~kill",
                "value": "e",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ex",
        "longname": "<anonymous>~kill~ex",
        "kind": "member",
        "memberof": "<anonymous>~kill",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3528,
                3591
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 129,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045353",
                "name": "this._process",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_process",
        "longname": "FFmpegDuplex#_process",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3601,
                3634
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 130,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045367",
                "name": "this._stdin",
                "type": "MemberExpression",
                "value": "this._process.stdin",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_stdin",
        "longname": "FFmpegDuplex#_stdin",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3644,
                3679
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 131,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045377",
                "name": "this._stdout",
                "type": "MemberExpression",
                "value": "this._process.stdout",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_stdout",
        "longname": "FFmpegDuplex#_stdout",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3689,
                3724
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 132,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045387",
                "name": "this._stderr",
                "type": "MemberExpression",
                "value": "this._process.stderr",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_stderr",
        "longname": "FFmpegDuplex#_stderr",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3820,
                3830
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 135,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045417",
                "name": "end",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "end",
        "longname": "end",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3851,
                3882
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 137,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045420",
                "name": "this.kill",
                "type": "AssignmentExpression",
                "value": "this.destroy",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "kill",
        "longname": "FFmpegDuplex#kill",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3863,
                3882
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 137,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045424",
                "name": "this.destroy",
                "type": "Identifier",
                "value": "kill",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "destroy",
        "longname": "FFmpegDuplex#destroy",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4400,
                4470
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 154,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045489",
                "name": "FFmpegDuplex#pipe",
                "type": "MethodDefinition",
                "paramnames": [
                    "dest",
                    "opts"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "pipe",
        "longname": "FFmpegDuplex#pipe",
        "kind": "function",
        "memberof": "FFmpegDuplex",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4476,
                4553
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 158,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045504",
                "name": "FFmpegDuplex#unpipe",
                "type": "MethodDefinition",
                "paramnames": [
                    "dest"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "unpipe",
        "longname": "FFmpegDuplex#unpipe",
        "kind": "function",
        "memberof": "FFmpegDuplex",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4559,
                4629
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 162,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045522",
                "name": "FFmpegDuplex#setEncoding",
                "type": "MethodDefinition",
                "paramnames": [
                    "enc"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "setEncoding",
        "longname": "FFmpegDuplex#setEncoding",
        "kind": "function",
        "memberof": "FFmpegDuplex",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4635,
                4693
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 166,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045535",
                "name": "FFmpegDuplex#read",
                "type": "MethodDefinition",
                "paramnames": [
                    "size"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "read",
        "longname": "FFmpegDuplex#read",
        "kind": "function",
        "memberof": "FFmpegDuplex",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4699,
                4775
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 170,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045548",
                "name": "FFmpegDuplex#end",
                "type": "MethodDefinition",
                "paramnames": [
                    "chunk",
                    "enc",
                    "cb"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "end",
        "longname": "FFmpegDuplex#end",
        "kind": "function",
        "memberof": "FFmpegDuplex",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4781,
                4861
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 174,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045565",
                "name": "FFmpegDuplex#write",
                "type": "MethodDefinition",
                "paramnames": [
                    "chunk",
                    "enc",
                    "cb"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "write",
        "longname": "FFmpegDuplex#write",
        "kind": "function",
        "memberof": "FFmpegDuplex",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4867,
                4884
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 178,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045582",
                "name": "FFmpegDuplex#destroy",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "destroy",
        "longname": "FFmpegDuplex#destroy",
        "kind": "function",
        "memberof": "FFmpegDuplex",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4890,
                4904
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 181,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045586",
                "name": "FFmpegDuplex#kill",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "kill",
        "longname": "FFmpegDuplex#kill",
        "kind": "function",
        "memberof": "FFmpegDuplex",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4910,
                4924
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 184,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045590",
                "name": "FFmpegDuplex#noop",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "noop",
        "longname": "FFmpegDuplex#noop",
        "kind": "function",
        "memberof": "FFmpegDuplex",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4928,
                4990
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 188,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045595",
                "name": "FFmpegDuplex.prototype.addListener",
                "type": "MemberExpression",
                "value": "FFmpegDuplex.prototype.on",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "addListener",
        "longname": "FFmpegDuplex#addListener",
        "kind": "member",
        "memberof": "FFmpegDuplex",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4993,
                5124
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 190,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045607",
                "name": "FFmpegDuplex.spawn",
                "type": "FunctionExpression",
                "paramnames": [
                    "connection",
                    "args",
                    "options"
                ]
            }
        },
        "undocumented": true,
        "name": "spawn",
        "longname": "FFmpegDuplex.spawn",
        "kind": "function",
        "memberof": "FFmpegDuplex",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5127,
                5156
            ],
            "filename": "FFmpegDuplex.js",
            "lineno": 194,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045627",
                "name": "module.exports",
                "type": "Identifier",
                "value": "FFmpegDuplex",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                61
            ],
            "filename": "FFmpegOggTransformer.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045637",
                "name": "FFmpegDuplex",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "FFmpegDuplex",
        "longname": "FFmpegDuplex",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64,
                935
            ],
            "filename": "FFmpegOggTransformer.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045643",
                "name": "module.exports",
                "type": "FunctionExpression",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "options.frameDuration": "options.frameDuration",
                "inputArgs": "module.exports~inputArgs",
                "outputArgs": "module.exports~outputArgs"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                247,
                273
            ],
            "filename": "FFmpegOggTransformer.js",
            "lineno": 10,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045670",
                "name": "options.frameDuration",
                "type": "Literal",
                "value": 60,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "frameDuration",
        "longname": "options.frameDuration",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                289,
                399
            ],
            "filename": "FFmpegOggTransformer.js",
            "lineno": 12,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045676",
                "name": "inputArgs",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "inputArgs",
        "longname": "module.exports~inputArgs",
        "kind": "member",
        "memberof": "module.exports",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                444,
                561
            ],
            "filename": "FFmpegOggTransformer.js",
            "lineno": 17,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045699",
                "name": "inputArgs",
                "type": "CallExpression",
                "funcscope": "module.exports",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "inputArgs",
        "longname": "module.exports~inputArgs",
        "kind": "member",
        "memberof": "module.exports",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                573,
                658
            ],
            "filename": "FFmpegOggTransformer.js",
            "lineno": 23,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045712",
                "name": "inputArgs",
                "type": "CallExpression",
                "funcscope": "module.exports",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "inputArgs",
        "longname": "module.exports~inputArgs",
        "kind": "member",
        "memberof": "module.exports",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                670,
                827
            ],
            "filename": "FFmpegOggTransformer.js",
            "lineno": 27,
            "columnno": 10,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045726",
                "name": "outputArgs",
                "type": "ArrayExpression",
                "value": "[\"-c:a\",\"libopus\",\"-vbr\",\"on\",\"-frame_duration\",\"\",\"-f\",\"ogg\",\"-\"]"
            }
        },
        "undocumented": true,
        "name": "outputArgs",
        "longname": "module.exports~outputArgs",
        "kind": "constant",
        "memberof": "module.exports",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                61
            ],
            "filename": "FFmpegPCMTransformer.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045765",
                "name": "FFmpegDuplex",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "FFmpegDuplex",
        "longname": "FFmpegDuplex",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                64,
                695
            ],
            "filename": "FFmpegPCMTransformer.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045771",
                "name": "module.exports",
                "type": "FunctionExpression",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "options.samplingRate": "options.samplingRate",
                "inputArgs": "module.exports~inputArgs",
                "outputArgs": "module.exports~outputArgs"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                246,
                274
            ],
            "filename": "FFmpegPCMTransformer.js",
            "lineno": 10,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045798",
                "name": "options.samplingRate",
                "type": "Literal",
                "value": 48000,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "samplingRate",
        "longname": "options.samplingRate",
        "kind": "member",
        "memberof": "options",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                292,
                458
            ],
            "filename": "FFmpegPCMTransformer.js",
            "lineno": 12,
            "columnno": 10,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045804",
                "name": "inputArgs",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "inputArgs",
        "longname": "module.exports~inputArgs",
        "kind": "constant",
        "memberof": "module.exports",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                470,
                587
            ],
            "filename": "FFmpegPCMTransformer.js",
            "lineno": 19,
            "columnno": 10,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045827",
                "name": "outputArgs",
                "type": "ArrayExpression",
                "value": "[\"-f\",\"s16le\",\"-ar\",\"\",\"-ac\",\"2\",\"-\"]"
            }
        },
        "undocumented": true,
        "name": "outputArgs",
        "longname": "module.exports~outputArgs",
        "kind": "constant",
        "memberof": "module.exports",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                67
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045864",
                "name": "BaseTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "BaseTransformer",
        "longname": "BaseTransformer",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70,
                2986
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045869",
                "name": "OggOpusTransformer",
                "type": "ClassDeclaration",
                "paramnames": [
                    "options"
                ]
            }
        },
        "undocumented": true,
        "name": "OggOpusTransformer",
        "longname": "OggOpusTransformer",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                125,
                247
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 6,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045873",
                "name": "OggOpusTransformer",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "OggOpusTransformer",
        "longname": "OggOpusTransformer",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                186,
                208
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 9,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045885",
                "name": "this._remainder",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "OggOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "OggOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                218,
                240
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 10,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045891",
                "name": "this._bitstream",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_bitstream",
        "longname": "OggOpusTransformer#_bitstream",
        "kind": "member",
        "memberof": "OggOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                253,
                2226
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045896",
                "name": "OggOpusTransformer#process",
                "type": "MethodDefinition",
                "paramnames": [
                    "buffer"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "process",
        "longname": "OggOpusTransformer#process",
        "kind": "function",
        "memberof": "OggOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                585,
                631
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 22,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045950",
                "name": "typeFlag",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "typeFlag",
        "longname": "<anonymous>~typeFlag",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                753,
                804
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 27,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045971",
                "name": "bitstream",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "bitstream",
        "longname": "<anonymous>~bitstream",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                815,
                834
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 29,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045983",
                "name": "buffer._index",
                "type": "Literal",
                "value": 26,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_index",
        "longname": "buffer._index",
        "kind": "member",
        "memberof": "buffer",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                851,
                897
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 31,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100045989",
                "name": "segmentCount",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "segmentCount",
        "longname": "<anonymous>~segmentCount",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1012,
                1025
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 36,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046014",
                "name": "segments",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "segments",
        "longname": "<anonymous>~segments",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1039,
                1047
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 37,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046018",
                "name": "size",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "size",
        "longname": "<anonymous>~size",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1061,
                1069
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 38,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046022",
                "name": "byte",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "byte",
        "longname": "<anonymous>~byte",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1083,
                1092
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 39,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046026",
                "name": "total",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "total",
        "longname": "<anonymous>~total",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1106,
                1111
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 40,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046030",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1164,
                1204
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 42,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046041",
                "name": "byte",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "byte",
        "longname": "<anonymous>~byte",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1295,
                1303
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 45,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046065",
                "name": "size",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "size",
        "longname": "<anonymous>~size",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1342,
                1354
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 47,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046070",
                "name": "size",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "byte",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "size",
        "longname": "<anonymous>~size",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1382,
                1395
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 49,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046074",
                "name": "total",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "byte",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "total",
        "longname": "<anonymous>~total",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1538,
                1545
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 58,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046097",
                "name": "segment"
            }
        },
        "undocumented": true,
        "name": "segment",
        "longname": "<anonymous>~segment",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1573,
                1597
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 59,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046102",
                "name": "buffer._index",
                "type": "Identifier",
                "value": "segment",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_index",
        "longname": "buffer._index",
        "kind": "member",
        "memberof": "buffer",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1611,
                1705
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 60,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046108",
                "name": "byte",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "byte",
        "longname": "<anonymous>~byte",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1619,
                1681
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 60,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046112",
                "name": "segment",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "segment",
        "longname": "<anonymous>~segment",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2015,
                2042
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 68,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046169",
                "name": "this._bitstream",
                "type": "Identifier",
                "value": "bitstream",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_bitstream",
        "longname": "OggOpusTransformer#_bitstream",
        "kind": "member",
        "memberof": "OggOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2080,
                2110
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 69,
            "columnno": 36,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046180",
                "name": "this.head",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "head",
        "longname": "OggOpusTransformer#head",
        "kind": "member",
        "memberof": "OggOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2232,
                2360
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 76,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046198",
                "name": "OggOpusTransformer#_final",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_final",
        "longname": "OggOpusTransformer#_final",
        "kind": "function",
        "memberof": "OggOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2366,
                2984
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 82,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046217",
                "name": "OggOpusTransformer#_transform",
                "type": "MethodDefinition",
                "paramnames": [
                    "chunk",
                    "enc",
                    "cb"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_transform",
        "longname": "OggOpusTransformer#_transform",
        "kind": "function",
        "memberof": "OggOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2438,
                2485
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 84,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046230",
                "name": "chunk",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "chunk",
        "longname": "<anonymous>~chunk",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2499,
                2521
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 85,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046242",
                "name": "this._remainder",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "OggOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "OggOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2542,
                2558
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 88,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046248",
                "name": "chunk._index",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_index",
        "longname": "<anonymous>~chunk._index",
        "kind": "member",
        "memberof": "<anonymous>~chunk",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2624,
                2645
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 91,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046263",
                "name": "offset",
                "type": "MemberExpression",
                "value": "chunk._index"
            }
        },
        "undocumented": true,
        "name": "offset",
        "longname": "<anonymous>~offset",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2665,
                2690
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 92,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046269",
                "name": "ret",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ret",
        "longname": "<anonymous>~ret",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2730,
                2767
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 94,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046280",
                "name": "this._remainder",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "OggOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "OggOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2988,
                3023
            ],
            "filename": "OggOpusTransformer.js",
            "lineno": 107,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046312",
                "name": "module.exports",
                "type": "Identifier",
                "value": "OggOpusTransformer",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                67
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046322",
                "name": "BaseTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "BaseTransformer",
        "longname": "BaseTransformer",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70,
                1518
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046327",
                "name": "PCMOpusTransformer",
                "type": "ClassDeclaration",
                "paramnames": [
                    "options"
                ]
            }
        },
        "undocumented": true,
        "name": "PCMOpusTransformer",
        "longname": "PCMOpusTransformer",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                125,
                360
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 6,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046331",
                "name": "PCMOpusTransformer",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "PCMOpusTransformer",
        "longname": "PCMOpusTransformer",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                186,
                219
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 9,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046343",
                "name": "this.opus",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "opus",
        "longname": "PCMOpusTransformer#opus",
        "kind": "member",
        "memberof": "PCMOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                229,
                271
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 10,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046352",
                "name": "this.frameSize",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "frameSize",
        "longname": "PCMOpusTransformer#frameSize",
        "kind": "member",
        "memberof": "PCMOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                281,
                320
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 11,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046362",
                "name": "this.pcmSize",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pcmSize",
        "longname": "PCMOpusTransformer#pcmSize",
        "kind": "member",
        "memberof": "PCMOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                331,
                353
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 13,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046372",
                "name": "this._remainder",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "PCMOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "PCMOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                366,
                1049
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 16,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046377",
                "name": "PCMOpusTransformer#_transform",
                "type": "MethodDefinition",
                "paramnames": [
                    "chunk",
                    "enc",
                    "cb"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_transform",
        "longname": "PCMOpusTransformer#_transform",
        "kind": "function",
        "memberof": "PCMOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                437,
                484
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 18,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046390",
                "name": "chunk",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "chunk",
        "longname": "<anonymous>~chunk",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                498,
                520
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 19,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046402",
                "name": "this._remainder",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "PCMOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "PCMOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                587,
                610
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 23,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046417",
                "name": "this._remainder",
                "type": "Identifier",
                "value": "chunk",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "PCMOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "PCMOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                656,
                672
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 27,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046426",
                "name": "chunk._index",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_index",
        "longname": "<anonymous>~chunk._index",
        "kind": "member",
        "memberof": "<anonymous>~chunk",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                747,
                775
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 30,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046445",
                "name": "chunk._index",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.pcmSize",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_index",
        "longname": "<anonymous>~chunk._index",
        "kind": "member",
        "memberof": "<anonymous>~chunk",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                955,
                998
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 35,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046490",
                "name": "this._remainder",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "PCMOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "PCMOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1055,
                1371
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 41,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046507",
                "name": "PCMOpusTransformer#_flush",
                "type": "MethodDefinition",
                "paramnames": [
                    "cb"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_flush",
        "longname": "PCMOpusTransformer#_flush",
        "kind": "function",
        "memberof": "PCMOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1116,
                1154
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 43,
            "columnno": 18,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046518",
                "name": "buf",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "buf",
        "longname": "<anonymous>~buf",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1318,
                1340
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 47,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046562",
                "name": "this._remainder",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "PCMOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "PCMOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1377,
                1516
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 52,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046570",
                "name": "PCMOpusTransformer#_destroy",
                "type": "MethodDefinition",
                "paramnames": [
                    "args"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_destroy",
        "longname": "PCMOpusTransformer#_destroy",
        "kind": "function",
        "memberof": "PCMOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1520,
                1555
            ],
            "filename": "PCMOpusTransformer.js",
            "lineno": 61,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046598",
                "name": "module.exports",
                "type": "Identifier",
                "value": "PCMOpusTransformer",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                67
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046608",
                "name": "BaseTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "BaseTransformer",
        "longname": "BaseTransformer",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                70,
                1312
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 5,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046613",
                "name": "VolumeTransformer",
                "type": "ClassDeclaration",
                "paramnames": [
                    "options"
                ]
            }
        },
        "undocumented": true,
        "name": "VolumeTransformer",
        "longname": "VolumeTransformer",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                124,
                243
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 6,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046617",
                "name": "VolumeTransformer",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "VolumeTransformer",
        "longname": "VolumeTransformer",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                185,
                207
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 9,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046629",
                "name": "this._remainder",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "VolumeTransformer#_remainder",
        "kind": "member",
        "memberof": "VolumeTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                249,
                502
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 13,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046640",
                "name": "VolumeTransformer#setVolume",
                "type": "MethodDefinition",
                "paramnames": [
                    "volume"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "setVolume",
        "longname": "VolumeTransformer#setVolume",
        "kind": "function",
        "memberof": "VolumeTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                298,
                314
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 14,
            "columnno": 29,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046651",
                "name": "volume",
                "type": "UnaryExpression",
                "funcscope": "<anonymous>",
                "value": "+volume",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "volume",
        "longname": "<anonymous>~volume",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                405,
                425
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 17,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046664",
                "name": "this.volume",
                "type": "Identifier",
                "value": "volume",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "volume",
        "longname": "VolumeTransformer#volume",
        "kind": "member",
        "memberof": "VolumeTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                435,
                495
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 18,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046670",
                "name": "this.db",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "db",
        "longname": "VolumeTransformer#db",
        "kind": "member",
        "memberof": "VolumeTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                508,
                1310
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 21,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046687",
                "name": "VolumeTransformer#_transform",
                "type": "MethodDefinition",
                "paramnames": [
                    "chunk",
                    "enc",
                    "cb"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_transform",
        "longname": "VolumeTransformer#_transform",
        "kind": "function",
        "memberof": "VolumeTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                580,
                627
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 23,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046700",
                "name": "chunk",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "chunk",
        "longname": "<anonymous>~chunk",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                641,
                663
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 24,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046712",
                "name": "this._remainder",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "VolumeTransformer#_remainder",
        "kind": "member",
        "memberof": "VolumeTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                755,
                758
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 31,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046728",
                "name": "buf"
            }
        },
        "undocumented": true,
        "name": "buf",
        "longname": "<anonymous>~buf",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                803,
                850
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 33,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046738",
                "name": "this._remainder",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "VolumeTransformer#_remainder",
        "kind": "member",
        "memberof": "VolumeTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                864,
                906
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 34,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046752",
                "name": "buf",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "buf",
        "longname": "<anonymous>~buf",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                937,
                975
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 36,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046765",
                "name": "buf",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "buf",
        "longname": "<anonymous>~buf",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1004,
                1009
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 39,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046776",
                "name": "i",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1011,
                1014
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 39,
            "columnno": 23,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046779",
                "name": "num"
            }
        },
        "undocumented": true,
        "name": "num",
        "longname": "<anonymous>~num",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1036,
                1042
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 39,
            "columnno": 48,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046788",
                "name": "i",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 2,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1109,
                1149
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 41,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046793",
                "name": "num",
                "type": "UnaryExpression",
                "funcscope": "<anonymous>",
                "value": "~~",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "num",
        "longname": "<anonymous>~num",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1314,
                1348
            ],
            "filename": "VolumeTransformer.js",
            "lineno": 50,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046838",
                "name": "module.exports",
                "type": "Identifier",
                "value": "VolumeTransformer",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                21,
                67
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 3,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046848",
                "name": "BaseTransformer",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "BaseTransformer",
        "longname": "BaseTransformer",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                185,
                219
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 7,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046854",
                "name": "MAX_SHIFTED_VINT",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "MAX_SHIFTED_VINT",
        "longname": "MAX_SHIFTED_VINT",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                228,
                245
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 9,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046863",
                "name": "STATE_CONTENT",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "STATE_CONTENT",
        "longname": "STATE_CONTENT",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                253,
                266
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 10,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046867",
                "name": "STATE_TAG",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "STATE_TAG",
        "longname": "STATE_TAG",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                275,
                291
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 12,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046871",
                "name": "TAG_TYPE_END",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "TAG_TYPE_END",
        "longname": "TAG_TYPE_END",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                299,
                317
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 13,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046875",
                "name": "TAG_TYPE_START",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "TAG_TYPE_START",
        "longname": "TAG_TYPE_START",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                325,
                341
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 14,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046879",
                "name": "TAG_TYPE_TAG",
                "type": "Literal",
                "value": 2
            }
        },
        "undocumented": true,
        "name": "TAG_TYPE_TAG",
        "longname": "TAG_TYPE_TAG",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                350,
                369
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 16,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046883",
                "name": "TRACKTYPE_AUDIO",
                "type": "Literal",
                "value": 2
            }
        },
        "undocumented": true,
        "name": "TRACKTYPE_AUDIO",
        "longname": "TRACKTYPE_AUDIO",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                448,
                6085
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 18,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046886",
                "name": "WebmOpusTransformer",
                "type": "ClassDeclaration",
                "paramnames": [
                    "options"
                ]
            }
        },
        "undocumented": true,
        "name": "WebmOpusTransformer",
        "longname": "WebmOpusTransformer",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                504,
                650
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 19,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046890",
                "name": "WebmOpusTransformer",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "WebmOpusTransformer",
        "longname": "WebmOpusTransformer",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                565,
                585
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 22,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046902",
                "name": "this._tag_stack",
                "type": "ArrayExpression",
                "value": "[]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_tag_stack",
        "longname": "WebmOpusTransformer#_tag_stack",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                595,
                618
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 23,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046908",
                "name": "this._state",
                "type": "Identifier",
                "value": "STATE_TAG",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_state",
        "longname": "WebmOpusTransformer#_state",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                628,
                643
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 24,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046914",
                "name": "this._total",
                "type": "Literal",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_total",
        "longname": "WebmOpusTransformer#_total",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                656,
                2740
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 27,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046919",
                "name": "WebmOpusTransformer#process",
                "type": "MethodDefinition",
                "paramnames": [
                    "type",
                    "info"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "process",
        "longname": "WebmOpusTransformer#process",
        "kind": "function",
        "memberof": "WebmOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                985,
                1024
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 34,
            "columnno": 22,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100046974",
                "name": "head",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "head",
        "longname": "<anonymous>~head",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1208,
                1596
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 40,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047003",
                "name": "this.codecData",
                "type": "ObjectExpression",
                "value": "{\"version\":\"\",\"channelCount\":\"\",\"preSkip\":\"\",\"inputSampleRate\":\"\",\"outputGain\":\"\",\"mappingFamily\":\"\"}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "codecData",
        "longname": "WebmOpusTransformer#codecData",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1247,
                1278
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 41,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047008",
                "name": "version",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "version",
        "longname": "WebmOpusTransformer#codecData.version",
        "kind": "member",
        "memberof": "WebmOpusTransformer#codecData",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1300,
                1336
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 42,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047016",
                "name": "channelCount",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "channelCount",
        "longname": "WebmOpusTransformer#codecData.channelCount",
        "kind": "member",
        "memberof": "WebmOpusTransformer#codecData",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1358,
                1393
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 43,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047024",
                "name": "preSkip",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "preSkip",
        "longname": "WebmOpusTransformer#codecData.preSkip",
        "kind": "member",
        "memberof": "WebmOpusTransformer#codecData",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1415,
                1458
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 44,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047032",
                "name": "inputSampleRate",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "inputSampleRate",
        "longname": "WebmOpusTransformer#codecData.inputSampleRate",
        "kind": "member",
        "memberof": "WebmOpusTransformer#codecData",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1480,
                1518
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 45,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047040",
                "name": "outputGain",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "outputGain",
        "longname": "WebmOpusTransformer#codecData.outputGain",
        "kind": "member",
        "memberof": "WebmOpusTransformer#codecData",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1540,
                1578
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 46,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047048",
                "name": "mappingFamily",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "mappingFamily",
        "longname": "WebmOpusTransformer#codecData.mappingFamily",
        "kind": "member",
        "memberof": "WebmOpusTransformer#codecData",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1794,
                1816
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 55,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047076",
                "name": "this.parsingTrack",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "parsingTrack",
        "longname": "WebmOpusTransformer#parsingTrack",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2000,
                2040
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 58,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047102",
                "name": "this.firstAudioTrack",
                "type": "MemberExpression",
                "value": "this.parsingTrack",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "firstAudioTrack",
        "longname": "WebmOpusTransformer#firstAudioTrack",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2272,
                2316
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 66,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047128",
                "name": "this.parsingTrack.TrackNumber",
                "type": "MemberExpression",
                "value": "info.data[0]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "TrackNumber",
        "longname": "WebmOpusTransformer#parsingTrack.TrackNumber",
        "kind": "member",
        "memberof": "WebmOpusTransformer#parsingTrack",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2432,
                2474
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 70,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047148",
                "name": "this.parsingTrack.TrackType",
                "type": "MemberExpression",
                "value": "info.data[0]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "TrackType",
        "longname": "WebmOpusTransformer#parsingTrack.TrackType",
        "kind": "member",
        "memberof": "WebmOpusTransformer#parsingTrack",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2746,
                3228
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 82,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047182",
                "name": "WebmOpusTransformer#getVIntLength",
                "type": "MethodDefinition",
                "paramnames": [
                    "buffer",
                    "index"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "getVIntLength",
        "longname": "WebmOpusTransformer#getVIntLength",
        "kind": "function",
        "memberof": "WebmOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2789,
                2799
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 83,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047189",
                "name": "length",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "length",
        "longname": "<anonymous>~length",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3234,
                4585
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 99,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047253",
                "name": "WebmOpusTransformer#readTag",
                "type": "MethodDefinition",
                "paramnames": [
                    "buffer"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "readTag",
        "longname": "WebmOpusTransformer#readTag",
        "kind": "function",
        "memberof": "WebmOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3266,
                3317
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 100,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047259",
                "name": "tagSize",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "tagSize",
        "longname": "<anonymous>~tagSize",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3401,
                3459
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 105,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047277",
                "name": "size",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "size",
        "longname": "<anonymous>~size",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3540,
                3611
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 110,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047297",
                "name": "tagStr",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "tagStr",
        "longname": "<anonymous>~tagStr",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3628,
                3745
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 112,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047313",
                "name": "tagObj",
                "type": "ObjectExpression",
                "value": "{\"type\":\"unknown\",\"name\":\"unknown\",\"end\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "tagObj",
        "longname": "<anonymous>~tagObj",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3651,
                3666
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 113,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047316",
                "name": "type",
                "type": "Literal",
                "value": "unknown"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "<anonymous>~tagObj.type",
        "kind": "member",
        "memberof": "<anonymous>~tagObj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3680,
                3695
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 114,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047318",
                "name": "name",
                "type": "Literal",
                "value": "unknown"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "<anonymous>~tagObj.name",
        "kind": "member",
        "memberof": "<anonymous>~tagObj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3709,
                3735
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 115,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047320",
                "name": "end",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "end",
        "longname": "<anonymous>~tagObj.end",
        "kind": "member",
        "memberof": "<anonymous>~tagObj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3788,
                3821
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 118,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047332",
                "name": "tagObj.type",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "schema[undefined].type",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "<anonymous>~tagObj.type",
        "kind": "member",
        "memberof": "<anonymous>~tagObj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3835,
                3868
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 119,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047342",
                "name": "tagObj.name",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "schema[undefined].name",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "<anonymous>~tagObj.name",
        "kind": "member",
        "memberof": "<anonymous>~tagObj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3889,
                3913
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 122,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047352",
                "name": "buffer._index",
                "type": "Identifier",
                "value": "tagSize",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_index",
        "longname": "buffer._index",
        "kind": "member",
        "memberof": "buffer",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3928,
                3981
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 124,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047358",
                "name": "value",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "<anonymous>~value",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3999,
                4004
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 125,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047375",
                "name": "i",
                "type": "Literal",
                "value": 1
            }
        },
        "undocumented": true,
        "name": "i",
        "longname": "<anonymous>~i",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4127,
                4142
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 127,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047404",
                "name": "tagObj.end",
                "type": "UnaryExpression",
                "funcscope": "<anonymous>",
                "value": -1,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "end",
        "longname": "<anonymous>~tagObj.end",
        "kind": "member",
        "memberof": "<anonymous>~tagObj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4240,
                4288
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 130,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047412",
                "name": "value",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "<anonymous>~value",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4344,
                4370
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 133,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047434",
                "name": "tagObj.end",
                "type": "BinaryExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "end",
        "longname": "<anonymous>~tagObj.end",
        "kind": "member",
        "memberof": "<anonymous>~tagObj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4390,
                4409
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 135,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047442",
                "name": "tagObj.size",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "size",
        "longname": "<anonymous>~tagObj.size",
        "kind": "member",
        "memberof": "<anonymous>~tagObj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4420,
                4441
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 137,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047448",
                "name": "buffer._index",
                "type": "Identifier",
                "value": "size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_index",
        "longname": "buffer._index",
        "kind": "member",
        "memberof": "buffer",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4451,
                4480
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 138,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047454",
                "name": "this._total",
                "type": "BinaryExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_total",
        "longname": "WebmOpusTransformer#_total",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4490,
                4517
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 139,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047462",
                "name": "this._state",
                "type": "Identifier",
                "value": "STATE_CONTENT",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_state",
        "longname": "WebmOpusTransformer#_state",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4591,
                5460
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 146,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047477",
                "name": "WebmOpusTransformer#readContent",
                "type": "MethodDefinition",
                "paramnames": [
                    "buffer"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "readContent",
        "longname": "WebmOpusTransformer#readContent",
        "kind": "function",
        "memberof": "WebmOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4627,
                4679
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 147,
            "columnno": 14,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047483",
                "name": "tagObj",
                "type": "MemberExpression",
                "value": "this._tag_stack[undefined]"
            }
        },
        "undocumented": true,
        "name": "tagObj",
        "longname": "<anonymous>~tagObj",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4778,
                4801
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 151,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047511",
                "name": "this._state",
                "type": "Identifier",
                "value": "STATE_TAG",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_state",
        "longname": "WebmOpusTransformer#_state",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4942,
                5012
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 159,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047534",
                "name": "tagObj.data",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~tagObj.data",
        "kind": "member",
        "memberof": "<anonymous>~tagObj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5022,
                5050
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 160,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047553",
                "name": "buffer._index",
                "type": "MemberExpression",
                "value": "tagObj.size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_index",
        "longname": "buffer._index",
        "kind": "member",
        "memberof": "buffer",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5060,
                5086
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 161,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047561",
                "name": "this._total",
                "type": "MemberExpression",
                "value": "tagObj.size",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_total",
        "longname": "WebmOpusTransformer#_total",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5096,
                5119
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 162,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047569",
                "name": "this._state",
                "type": "Identifier",
                "value": "STATE_TAG",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_state",
        "longname": "WebmOpusTransformer#_state",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5466,
                6083
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 178,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047631",
                "name": "WebmOpusTransformer#_transform",
                "type": "MethodDefinition",
                "paramnames": [
                    "chunk",
                    "enc",
                    "cb"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "_transform",
        "longname": "WebmOpusTransformer#_transform",
        "kind": "function",
        "memberof": "WebmOpusTransformer",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5538,
                5585
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 180,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047644",
                "name": "chunk",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "chunk",
        "longname": "<anonymous>~chunk",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5599,
                5621
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 181,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047656",
                "name": "this._remainder",
                "type": "Literal",
                "value": null,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "WebmOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5642,
                5658
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 184,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047662",
                "name": "chunk._index",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": 0,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_index",
        "longname": "<anonymous>~chunk._index",
        "kind": "member",
        "memberof": "<anonymous>~chunk",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5989,
                6032
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 196,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047716",
                "name": "this._remainder",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_remainder",
        "longname": "WebmOpusTransformer#_remainder",
        "kind": "member",
        "memberof": "WebmOpusTransformer",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6087,
                6123
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 203,
            "columnno": 0,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047734",
                "name": "module.exports",
                "type": "Identifier",
                "value": "WebmOpusTransformer",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6132,
                6989
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 205,
            "columnno": 6,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047740",
                "name": "schema",
                "type": "ObjectExpression",
                "value": "{\"ae\":\"\",\"d7\":\"\",\"undefined\":\"\",\"a3\":\"\",\"e1\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "schema",
        "longname": "schema",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6147,
                6204
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 206,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047743",
                "name": "ae",
                "type": "ObjectExpression",
                "value": "{\"name\":\"TrackEntry\",\"type\":\"m\"}"
            }
        },
        "undocumented": true,
        "name": "ae",
        "longname": "schema.ae",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6161,
                6179
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 207,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047745",
                "name": "name",
                "type": "Literal",
                "value": "TrackEntry"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.ae.name",
        "kind": "member",
        "memberof": "schema.ae",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6189,
                6198
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 208,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047747",
                "name": "type",
                "type": "Literal",
                "value": "m"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.ae.type",
        "kind": "member",
        "memberof": "schema.ae",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6210,
                6268
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 210,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047749",
                "name": "d7",
                "type": "ObjectExpression",
                "value": "{\"name\":\"TrackNumber\",\"type\":\"u\"}"
            }
        },
        "undocumented": true,
        "name": "d7",
        "longname": "schema.d7",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6224,
                6243
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 211,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047751",
                "name": "name",
                "type": "Literal",
                "value": "TrackNumber"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.d7.name",
        "kind": "member",
        "memberof": "schema.d7",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6253,
                6262
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 212,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047753",
                "name": "type",
                "type": "Literal",
                "value": "u"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.d7.type",
        "kind": "member",
        "memberof": "schema.d7",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6274,
                6330
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 214,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047755",
                "name": "86",
                "type": "ObjectExpression",
                "value": "{\"name\":\"CodecID\",\"type\":\"s\"}"
            }
        },
        "undocumented": true,
        "name": "86",
        "longname": "schema.86",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6290,
                6305
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 215,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047757",
                "name": "name",
                "type": "Literal",
                "value": "CodecID"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.86.name",
        "kind": "member",
        "memberof": "schema.86",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6315,
                6324
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 216,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047759",
                "name": "type",
                "type": "Literal",
                "value": "s"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.86.type",
        "kind": "member",
        "memberof": "schema.86",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6336,
                6394
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 218,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047761",
                "name": "83",
                "type": "ObjectExpression",
                "value": "{\"name\":\"TrackType\",\"type\":\"u\"}"
            }
        },
        "undocumented": true,
        "name": "83",
        "longname": "schema.83",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6352,
                6369
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 219,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047763",
                "name": "name",
                "type": "Literal",
                "value": "TrackType"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.83.name",
        "kind": "member",
        "memberof": "schema.83",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6379,
                6388
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 220,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047765",
                "name": "type",
                "type": "Literal",
                "value": "u"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.83.type",
        "kind": "member",
        "memberof": "schema.83",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6400,
                6461
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 222,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047767",
                "name": "1654ae6b",
                "type": "ObjectExpression",
                "value": "{\"name\":\"Tracks\",\"type\":\"m\"}"
            }
        },
        "undocumented": true,
        "name": "1654ae6b",
        "longname": "schema.1654ae6b",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6422,
                6436
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 223,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047769",
                "name": "name",
                "type": "Literal",
                "value": "Tracks"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.1654ae6b.name",
        "kind": "member",
        "memberof": "schema.1654ae6b",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6446,
                6455
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 224,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047771",
                "name": "type",
                "type": "Literal",
                "value": "m"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.1654ae6b.type",
        "kind": "member",
        "memberof": "schema.1654ae6b",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6467,
                6530
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 226,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047773",
                "name": "63a2",
                "type": "ObjectExpression",
                "value": "{\"name\":\"CodecPrivate\",\"type\":\"b\"}"
            }
        },
        "undocumented": true,
        "name": "63a2",
        "longname": "schema.63a2",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6485,
                6505
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 227,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047775",
                "name": "name",
                "type": "Literal",
                "value": "CodecPrivate"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.63a2.name",
        "kind": "member",
        "memberof": "schema.63a2",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6515,
                6524
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 228,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047777",
                "name": "type",
                "type": "Literal",
                "value": "b"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.63a2.type",
        "kind": "member",
        "memberof": "schema.63a2",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6536,
                6594
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 230,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047779",
                "name": "a3",
                "type": "ObjectExpression",
                "value": "{\"name\":\"SimpleBlock\",\"type\":\"b\"}"
            }
        },
        "undocumented": true,
        "name": "a3",
        "longname": "schema.a3",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6550,
                6569
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 231,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047781",
                "name": "name",
                "type": "Literal",
                "value": "SimpleBlock"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.a3.name",
        "kind": "member",
        "memberof": "schema.a3",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6579,
                6588
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 232,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047783",
                "name": "type",
                "type": "Literal",
                "value": "b"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.a3.type",
        "kind": "member",
        "memberof": "schema.a3",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6600,
                6659
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 234,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047785",
                "name": "1a45dfa3",
                "type": "ObjectExpression",
                "value": "{\"name\":\"EBML\",\"type\":\"m\"}"
            }
        },
        "undocumented": true,
        "name": "1a45dfa3",
        "longname": "schema.1a45dfa3",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6622,
                6634
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 235,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047787",
                "name": "name",
                "type": "Literal",
                "value": "EBML"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.1a45dfa3.name",
        "kind": "member",
        "memberof": "schema.1a45dfa3",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6644,
                6653
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 236,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047789",
                "name": "type",
                "type": "Literal",
                "value": "m"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.1a45dfa3.type",
        "kind": "member",
        "memberof": "schema.1a45dfa3",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6665,
                6727
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 238,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047791",
                "name": "18538067",
                "type": "ObjectExpression",
                "value": "{\"name\":\"Segment\",\"type\":\"m\"}"
            }
        },
        "undocumented": true,
        "name": "18538067",
        "longname": "schema.18538067",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6687,
                6702
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 239,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047793",
                "name": "name",
                "type": "Literal",
                "value": "Segment"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.18538067.name",
        "kind": "member",
        "memberof": "schema.18538067",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6712,
                6721
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 240,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047795",
                "name": "type",
                "type": "Literal",
                "value": "m"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.18538067.type",
        "kind": "member",
        "memberof": "schema.18538067",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6733,
                6796
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 242,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047797",
                "name": "114d9b74",
                "type": "ObjectExpression",
                "value": "{\"name\":\"SeekHead\",\"type\":\"m\"}"
            }
        },
        "undocumented": true,
        "name": "114d9b74",
        "longname": "schema.114d9b74",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6755,
                6771
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 243,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047799",
                "name": "name",
                "type": "Literal",
                "value": "SeekHead"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.114d9b74.name",
        "kind": "member",
        "memberof": "schema.114d9b74",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6781,
                6790
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 244,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047801",
                "name": "type",
                "type": "Literal",
                "value": "m"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.114d9b74.type",
        "kind": "member",
        "memberof": "schema.114d9b74",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6802,
                6861
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 246,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047803",
                "name": "1549a966",
                "type": "ObjectExpression",
                "value": "{\"name\":\"Info\",\"type\":\"m\"}"
            }
        },
        "undocumented": true,
        "name": "1549a966",
        "longname": "schema.1549a966",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6824,
                6836
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 247,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047805",
                "name": "name",
                "type": "Literal",
                "value": "Info"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.1549a966.name",
        "kind": "member",
        "memberof": "schema.1549a966",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6846,
                6855
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 248,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047807",
                "name": "type",
                "type": "Literal",
                "value": "m"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.1549a966.type",
        "kind": "member",
        "memberof": "schema.1549a966",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6867,
                6919
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 250,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047809",
                "name": "e1",
                "type": "ObjectExpression",
                "value": "{\"name\":\"Audio\",\"type\":\"m\"}"
            }
        },
        "undocumented": true,
        "name": "e1",
        "longname": "schema.e1",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6881,
                6894
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 251,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047811",
                "name": "name",
                "type": "Literal",
                "value": "Audio"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.e1.name",
        "kind": "member",
        "memberof": "schema.e1",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6904,
                6913
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 252,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047813",
                "name": "type",
                "type": "Literal",
                "value": "m"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.e1.type",
        "kind": "member",
        "memberof": "schema.e1",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6925,
                6987
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 254,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047815",
                "name": "1f43b675",
                "type": "ObjectExpression",
                "value": "{\"name\":\"Cluster\",\"type\":\"m\"}"
            }
        },
        "undocumented": true,
        "name": "1f43b675",
        "longname": "schema.1f43b675",
        "kind": "member",
        "memberof": "schema",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6947,
                6962
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 255,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047817",
                "name": "name",
                "type": "Literal",
                "value": "Cluster"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "schema.1f43b675.name",
        "kind": "member",
        "memberof": "schema.1f43b675",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6972,
                6981
            ],
            "filename": "WebmOpusTransformer.js",
            "lineno": 256,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams",
            "code": {
                "id": "astnode100047819",
                "name": "type",
                "type": "Literal",
                "value": "m"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "schema.1f43b675.type",
        "kind": "member",
        "memberof": "schema.1f43b675",
        "scope": "static"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/Client.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/Constants.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command/Command.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/command/CommandClient.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors/DiscordHTTPError.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/errors/DiscordRESTError.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway/Shard.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway/ShardManager.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest/Endpoints.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest/RequestHandler.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/Base.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/Call.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/CategoryChannel.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/Channel.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/ExtendedUser.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/GroupChannel.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/Guild.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/GuildAuditLogEntry.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/GuildChannel.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/GuildIntegration.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/GuildPreview.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/Invite.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/Member.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/Message.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/NewsChannel.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/Permission.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/PermissionOverwrite.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/PrivateChannel.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/Relationship.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/Role.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/StoreChannel.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/TextChannel.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/UnavailableGuild.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/User.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/VoiceChannel.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures/VoiceState.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util/Bucket.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util/Collection.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util/MultipartData.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util/Opus.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/util/SequentialBucket.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/Piper.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/SharedStream.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/VoiceConnection.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/VoiceConnectionManager.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/VoiceDataStream.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams/BaseTransformer.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams/DCAOpusTransformer.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams/FFmpegDuplex.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams/FFmpegOggTransformer.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams/FFmpegPCMTransformer.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams/OggOpusTransformer.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams/PCMOpusTransformer.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams/VolumeTransformer.js",
            "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/voice/streams/WebmOpusTransformer.js"
        ]
    },
    {
        "comment": "/**\n    * Get the user's avatar with the given format and size\n    * @arg {String} [format] The filetype of the avatar (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")\n    * @arg {Number} [size] The size of the avatar (any power of two between 16 and 4096)\n    */",
        "meta": {
            "range": [
                2910,
                3087
            ],
            "filename": "User.js",
            "lineno": 81,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035752",
                "name": "User#dynamicAvatarURL",
                "type": "MethodDefinition",
                "paramnames": [
                    "format",
                    "size"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "dynamicAvatarURL",
        "longname": "ExtendedUser#dynamicAvatarURL",
        "kind": "function",
        "description": "Get the user's avatar with the given format and size",
        "memberof": "ExtendedUser",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The filetype of the avatar (\"jpg\", \"jpeg\", \"png\", \"gif\", or \"webp\")",
                "name": "format"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The size of the avatar (any power of two between 16 and 4096)",
                "name": "size"
            }
        ],
        "inherits": "User#dynamicAvatarURL",
        "inherited": true,
        "overrides": "User#dynamicAvatarURL"
    },
    {
        "comment": "/**\n    * Get a DM channel with the user, or create one if it does not exist\n    * @returns {Promise<PrivateChannel>}\n    */",
        "meta": {
            "range": [
                3222,
                3314
            ],
            "filename": "User.js",
            "lineno": 89,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035784",
                "name": "User#getDMChannel",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getDMChannel",
        "longname": "ExtendedUser#getDMChannel",
        "kind": "function",
        "description": "Get a DM channel with the user, or create one if it does not exist",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<PrivateChannel>"
                    ]
                }
            }
        ],
        "memberof": "ExtendedUser",
        "scope": "instance",
        "inherits": "User#getDMChannel",
        "inherited": true,
        "overrides": "User#getDMChannel"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Create a relationship with the user\n    * @arg {Boolean} [block=false] If true, block the user. Otherwise, add the user as a friend\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                3513,
                3623
            ],
            "filename": "User.js",
            "lineno": 98,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035803",
                "name": "User#addRelationship",
                "type": "MethodDefinition",
                "paramnames": [
                    "block"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "addRelationship",
        "longname": "ExtendedUser#addRelationship",
        "kind": "function",
        "description": "[USER ACCOUNT] Create a relationship with the user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "ExtendedUser",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, block the user. Otherwise, add the user as a friend",
                "name": "block"
            }
        ],
        "inherits": "User#addRelationship",
        "inherited": true,
        "overrides": "User#addRelationship"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Remove a relationship with the user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                3726,
                3830
            ],
            "filename": "User.js",
            "lineno": 106,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035824",
                "name": "User#removeRelationship",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "removeRelationship",
        "longname": "ExtendedUser#removeRelationship",
        "kind": "function",
        "description": "[USER ACCOUNT] Remove a relationship with the user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "ExtendedUser",
        "scope": "instance",
        "inherits": "User#removeRelationship",
        "inherited": true,
        "overrides": "User#removeRelationship"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get profile data for the user\n    * @returns {Promise<Object>} The user's profile data.\n    */",
        "meta": {
            "range": [
                3960,
                4052
            ],
            "filename": "User.js",
            "lineno": 114,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035843",
                "name": "User#getProfile",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getProfile",
        "longname": "ExtendedUser#getProfile",
        "kind": "function",
        "description": "[USER ACCOUNT] Get profile data for the user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's profile data."
            }
        ],
        "memberof": "ExtendedUser",
        "scope": "instance",
        "inherits": "User#getProfile",
        "inherited": true,
        "overrides": "User#getProfile"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Edit the current user's note for the user\n    * @arg {String} note The note\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4195,
                4293
            ],
            "filename": "User.js",
            "lineno": 123,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035862",
                "name": "User#editNote",
                "type": "MethodDefinition",
                "paramnames": [
                    "note"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editNote",
        "longname": "ExtendedUser#editNote",
        "kind": "function",
        "description": "[USER ACCOUNT] Edit the current user's note for the user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "ExtendedUser",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The note",
                "name": "note"
            }
        ],
        "inherits": "User#editNote",
        "inherited": true,
        "overrides": "User#editNote"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Delete the current user's note for another user\n    */",
        "meta": {
            "range": [
                4383,
                4475
            ],
            "filename": "User.js",
            "lineno": 130,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035883",
                "name": "User#deleteNote",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteNote",
        "longname": "ExtendedUser#deleteNote",
        "kind": "function",
        "description": "[USER ACCOUNT] Delete the current user's note for another user",
        "memberof": "ExtendedUser",
        "scope": "instance",
        "inherits": "User#deleteNote",
        "inherited": true,
        "overrides": "User#deleteNote"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Ring fellow group channel recipient(s)\n    * @arg {String[]} recipients The IDs of the recipients to ring\n    */",
        "meta": {
            "range": [
                1360,
                1516
            ],
            "filename": "PrivateChannel.js",
            "lineno": 36,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033906",
                "name": "PrivateChannel#ring",
                "type": "MethodDefinition",
                "paramnames": [
                    "recipients"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "ring",
        "longname": "GroupChannel#ring",
        "kind": "function",
        "description": "[USER ACCOUNT] Ring fellow group channel recipient(s)",
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "The IDs of the recipients to ring",
                "name": "recipients"
            }
        ],
        "inherits": "PrivateChannel#ring",
        "inherited": true,
        "overrides": "PrivateChannel#ring"
    },
    {
        "comment": "/**\n    * Check if the channel has an existing call\n    */",
        "meta": {
            "range": [
                1585,
                1731
            ],
            "filename": "PrivateChannel.js",
            "lineno": 45,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033932",
                "name": "PrivateChannel#syncCall",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "syncCall",
        "longname": "GroupChannel#syncCall",
        "kind": "function",
        "description": "Check if the channel has an existing call",
        "memberof": "GroupChannel",
        "scope": "instance",
        "inherits": "PrivateChannel#syncCall",
        "inherited": true,
        "overrides": "PrivateChannel#syncCall"
    },
    {
        "comment": "/**\n    * Leave the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                1801,
                1885
            ],
            "filename": "PrivateChannel.js",
            "lineno": 55,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033961",
                "name": "PrivateChannel#leave",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "leave",
        "longname": "GroupChannel#leave",
        "kind": "function",
        "description": "Leave the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "inherits": "PrivateChannel#leave",
        "inherited": true,
        "overrides": "PrivateChannel#leave"
    },
    {
        "comment": "/**\n    * Send typing status in a text channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                1974,
                2067
            ],
            "filename": "PrivateChannel.js",
            "lineno": 63,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033980",
                "name": "PrivateChannel#sendTyping",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "sendTyping",
        "longname": "GroupChannel#sendTyping",
        "kind": "function",
        "description": "Send typing status in a text channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "inherits": "PrivateChannel#sendTyping",
        "inherited": true,
        "overrides": "PrivateChannel#sendTyping"
    },
    {
        "comment": "/**\n    * Get a previous message in a text channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                2221,
                2327
            ],
            "filename": "PrivateChannel.js",
            "lineno": 72,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033999",
                "name": "PrivateChannel#getMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getMessage",
        "longname": "GroupChannel#getMessage",
        "kind": "function",
        "description": "Get a previous message in a text channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "PrivateChannel#getMessage",
        "inherited": true,
        "overrides": "PrivateChannel#getMessage"
    },
    {
        "comment": "/**\n    * Get a previous message in a text channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
        "meta": {
            "range": [
                2722,
                2868
            ],
            "filename": "PrivateChannel.js",
            "lineno": 84,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034020",
                "name": "PrivateChannel#getMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "limit",
                    "before",
                    "after",
                    "around"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getMessages",
        "longname": "GroupChannel#getMessages",
        "kind": "function",
        "description": "Get a previous message in a text channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Message>>"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 50,
                "description": "The max number of messages to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages before this message ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages after this message ID",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages around this message ID (does not work with limit > 100)",
                "name": "around"
            }
        ],
        "inherits": "PrivateChannel#getMessages",
        "inherited": true,
        "overrides": "PrivateChannel#getMessages"
    },
    {
        "comment": "/**\n    * Get all the pins in a text channel\n    * @returns {Promise<Message[]>}\n    */",
        "meta": {
            "range": [
                2966,
                3046
            ],
            "filename": "PrivateChannel.js",
            "lineno": 92,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034047",
                "name": "PrivateChannel#getPins",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getPins",
        "longname": "GroupChannel#getPins",
        "kind": "function",
        "description": "Get all the pins in a text channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Message>>"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "inherits": "PrivateChannel#getPins",
        "inherited": true,
        "overrides": "PrivateChannel#getPins"
    },
    {
        "comment": "/**\n    * Create a message in a text channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user\n    * @arg {String | Object} content A string or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Object} [file] A file object\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                4339,
                4459
            ],
            "filename": "PrivateChannel.js",
            "lineno": 112,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034066",
                "name": "PrivateChannel#createMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "content",
                    "file"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "createMessage",
        "longname": "GroupChannel#createMessage",
        "kind": "function",
        "description": "Create a message in a text channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String",
                        "Object"
                    ]
                },
                "description": "A string or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Set the message TTS flag",
                "name": "content.tts"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A file object",
                "name": "file"
            },
            {
                "type": {
                    "names": [
                        "Buffer"
                    ]
                },
                "description": "A buffer containing file data",
                "name": "file.file"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "What to name the file",
                "name": "file.name"
            }
        ],
        "inherits": "PrivateChannel#createMessage",
        "inherited": true,
        "overrides": "PrivateChannel#createMessage"
    },
    {
        "comment": "/**\n    * Edit a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                5814,
                5940
            ],
            "filename": "PrivateChannel.js",
            "lineno": 130,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034089",
                "name": "PrivateChannel#editMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "content"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editMessage",
        "longname": "GroupChannel#editMessage",
        "kind": "function",
        "description": "Edit a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Array",
                        "Object"
                    ]
                },
                "description": "A string, array of strings, or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to filter @everyone/@here or not (overrides default)",
                "name": "content.disableEveryone"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
                "name": "content.flags"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            }
        ],
        "inherits": "PrivateChannel#editMessage",
        "inherited": true,
        "overrides": "PrivateChannel#editMessage"
    },
    {
        "comment": "/**\n    * Pin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                6058,
                6164
            ],
            "filename": "PrivateChannel.js",
            "lineno": 139,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034112",
                "name": "PrivateChannel#pinMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "pinMessage",
        "longname": "GroupChannel#pinMessage",
        "kind": "function",
        "description": "Pin a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "PrivateChannel#pinMessage",
        "inherited": true,
        "overrides": "PrivateChannel#pinMessage"
    },
    {
        "comment": "/**\n    * Unpin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                6284,
                6394
            ],
            "filename": "PrivateChannel.js",
            "lineno": 148,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034133",
                "name": "PrivateChannel#unpinMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "unpinMessage",
        "longname": "GroupChannel#unpinMessage",
        "kind": "function",
        "description": "Unpin a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "PrivateChannel#unpinMessage",
        "inherited": true,
        "overrides": "PrivateChannel#unpinMessage"
    },
    {
        "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
        "meta": {
            "range": [
                6859,
                7045
            ],
            "filename": "PrivateChannel.js",
            "lineno": 161,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034154",
                "name": "PrivateChannel#getMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction",
                    "limit",
                    "before",
                    "after"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getMessageReaction",
        "longname": "GroupChannel#getMessageReaction",
        "kind": "function",
        "description": "Get a list of users who reacted with a specific reaction",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<User>>"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 100,
                "description": "The maximum number of users to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users before this user ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users after this user ID",
                "name": "after"
            }
        ],
        "inherits": "PrivateChannel#getMessageReaction",
        "inherited": true,
        "overrides": "PrivateChannel#getMessageReaction"
    },
    {
        "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                7356,
                7514
            ],
            "filename": "PrivateChannel.js",
            "lineno": 172,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034183",
                "name": "PrivateChannel#addMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "addMessageReaction",
        "longname": "GroupChannel#addMessageReaction",
        "kind": "function",
        "description": "Add a reaction to a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to react as",
                "name": "userID"
            }
        ],
        "inherits": "PrivateChannel#addMessageReaction",
        "inherited": true,
        "overrides": "PrivateChannel#addMessageReaction"
    },
    {
        "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                7845,
                8009
            ],
            "filename": "PrivateChannel.js",
            "lineno": 183,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034208",
                "name": "PrivateChannel#removeMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "removeMessageReaction",
        "longname": "GroupChannel#removeMessageReaction",
        "kind": "function",
        "description": "Remove a reaction from a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to remove the reaction for",
                "name": "userID"
            }
        ],
        "inherits": "PrivateChannel#removeMessageReaction",
        "inherited": true,
        "overrides": "PrivateChannel#removeMessageReaction"
    },
    {
        "comment": "/**\n    * Delete a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                8200,
                8328
            ],
            "filename": "PrivateChannel.js",
            "lineno": 193,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034233",
                "name": "PrivateChannel#deleteMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteMessage",
        "longname": "GroupChannel#deleteMessage",
        "kind": "function",
        "description": "Delete a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "PrivateChannel#deleteMessage",
        "inherited": true,
        "overrides": "PrivateChannel#deleteMessage"
    },
    {
        "comment": "/**\n    * Un-send a message. You're welcome Programmix\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                8477,
                8589
            ],
            "filename": "PrivateChannel.js",
            "lineno": 202,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034256",
                "name": "PrivateChannel#unsendMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "unsendMessage",
        "longname": "GroupChannel#unsendMessage",
        "kind": "function",
        "description": "Un-send a message. You're welcome Programmix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "GroupChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "PrivateChannel#unsendMessage",
        "inherited": true,
        "overrides": "PrivateChannel#unsendMessage"
    },
    {
        "comment": "/**\n    * Tells all shards to connect.\n    * @returns {Promise} Resolves when all shards are initialized\n    */",
        "meta": {
            "range": [
                12434,
                14181
            ],
            "filename": "Client.js",
            "lineno": 220,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100000759",
                "name": "Client#connect",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "connect",
        "longname": "CommandClient#connect",
        "kind": "function",
        "description": "Tells all shards to connect.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Resolves when all shards are initialized"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "async": true,
        "inherits": "Client#connect",
        "inherited": true,
        "overrides": "Client#connect"
    },
    {
        "comment": "/**\n    * Get info on connecting to the Discord gateway\n    * @returns {Promise<Object>} Resolves with an object containing gateway connection info\n    */",
        "meta": {
            "range": [
                14346,
                14436
            ],
            "filename": "Client.js",
            "lineno": 267,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001014",
                "name": "Client#getGateway",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getGateway",
        "longname": "CommandClient#getGateway",
        "kind": "function",
        "description": "Get info on connecting to the Discord gateway",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with an object containing gateway connection info"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "inherits": "Client#getGateway",
        "inherited": true,
        "overrides": "Client#getGateway"
    },
    {
        "comment": "/**\n    * Get general and bot-specific info on connecting to the Discord gateway (e.g. connection ratelimit)\n    * @returns {Promise<Object>} Resolves with an object containing gateway connection info\n    */",
        "meta": {
            "range": [
                14654,
                14858
            ],
            "filename": "Client.js",
            "lineno": 275,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001029",
                "name": "Client#getBotGateway",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getBotGateway",
        "longname": "CommandClient#getBotGateway",
        "kind": "function",
        "description": "Get general and bot-specific info on connecting to the Discord gateway (e.g. connection ratelimit)",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with an object containing gateway connection info"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "inherits": "Client#getBotGateway",
        "inherited": true,
        "overrides": "Client#getBotGateway"
    },
    {
        "comment": "/**\n    * Disconnects all shards\n    * @arg {Object?} [options] Shard disconnect options\n    * @arg {String | Boolean} [options.reconnect] false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect\n    */",
        "meta": {
            "range": [
                15120,
                15306
            ],
            "filename": "Client.js",
            "lineno": 287,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001065",
                "name": "Client#disconnect",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "disconnect",
        "longname": "CommandClient#disconnect",
        "kind": "function",
        "description": "Disconnects all shards",
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "Shard disconnect options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "false means destroy everything, true means you want to reconnect in the future, \"auto\" will autoreconnect",
                "name": "options.reconnect"
            }
        ],
        "inherits": "Client#disconnect",
        "inherited": true,
        "overrides": "Client#disconnect"
    },
    {
        "comment": "/**\n    * Join a voice channel. If joining a group call, the voice connection ID will be stored in voiceConnections as \"call\". Otherwise, it will be the guild ID\n    * @arg {String} channelID The ID of the voice channel\n    * @arg {Object} [options] VoiceConnection constructor options\n    * @arg {Object} [options.shared] Whether the VoiceConnection will be part of a SharedStream or not\n    * @arg {Object} [options.opusOnly] Skip opus encoder initialization. You should not enable this unless you know what you are doing\n    * @returns {Promise<VoiceConnection>} Resolves with a VoiceConnection\n    */",
        "meta": {
            "range": [
                15921,
                16874
            ],
            "filename": "Client.js",
            "lineno": 303,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001100",
                "name": "Client#joinVoiceChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "joinVoiceChannel",
        "longname": "CommandClient#joinVoiceChannel",
        "kind": "function",
        "description": "Join a voice channel. If joining a group call, the voice connection ID will be stored in voiceConnections as \"call\". Otherwise, it will be the guild ID",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<VoiceConnection>"
                    ]
                },
                "description": "Resolves with a VoiceConnection"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the voice channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "VoiceConnection constructor options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Whether the VoiceConnection will be part of a SharedStream or not",
                "name": "options.shared"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Skip opus encoder initialization. You should not enable this unless you know what you are doing",
                "name": "options.opusOnly"
            }
        ],
        "inherits": "Client#joinVoiceChannel",
        "inherited": true,
        "overrides": "Client#joinVoiceChannel"
    },
    {
        "comment": "/**\n    * Leaves a voice channel\n    * @arg {String} channelID The ID of the voice channel\n    */",
        "meta": {
            "range": [
                16982,
                17177
            ],
            "filename": "Client.js",
            "lineno": 327,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001236",
                "name": "Client#leaveVoiceChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "leaveVoiceChannel",
        "longname": "CommandClient#leaveVoiceChannel",
        "kind": "function",
        "description": "Leaves a voice channel",
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the voice channel",
                "name": "channelID"
            }
        ],
        "inherits": "Client#leaveVoiceChannel",
        "inherited": true,
        "overrides": "Client#leaveVoiceChannel"
    },
    {
        "comment": "/**\n    * Closes a voice connection with a guild ID\n    * @arg {String} guildID The ID of the guild\n    */",
        "meta": {
            "range": [
                17294,
                17639
            ],
            "filename": "Client.js",
            "lineno": 338,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001263",
                "name": "Client#closeVoiceConnection",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "closeVoiceConnection",
        "longname": "CommandClient#closeVoiceConnection",
        "kind": "function",
        "description": "Closes a voice connection with a guild ID",
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#closeVoiceConnection",
        "inherited": true,
        "overrides": "Client#closeVoiceConnection"
    },
    {
        "comment": "/**\n    * Update the bot's AFK status. Setting this to true will enable push notifications for userbots.\n    * @arg {Boolean} afk Whether the bot user is AFK or not\n    */",
        "meta": {
            "range": [
                17821,
                17962
            ],
            "filename": "Client.js",
            "lineno": 352,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001311",
                "name": "Client#editAFK",
                "type": "MethodDefinition",
                "paramnames": [
                    "afk"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editAFK",
        "longname": "CommandClient#editAFK",
        "kind": "function",
        "description": "Update the bot's AFK status. Setting this to true will enable push notifications for userbots.",
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the bot user is AFK or not",
                "name": "afk"
            }
        ],
        "inherits": "Client#editAFK",
        "inherited": true,
        "overrides": "Client#editAFK"
    },
    {
        "comment": "/**\n    * Update the bot's status on all guilds\n    * @arg {String} [status] Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"\n    * @arg {Object} [game] Sets the bot's active game, null to clear\n    * @arg {String} game.name Sets the name of the bot's active game\n    * @arg {Number} [game.type] The type of game. 0 is playing, 1 is streaming (Twitch only), 2 is listening, 3 is watching\n    * @arg {String} [game.url] Sets the url of the shard's active game\n    */",
        "meta": {
            "range": [
                18459,
                18877
            ],
            "filename": "Client.js",
            "lineno": 368,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001342",
                "name": "Client#editStatus",
                "type": "MethodDefinition",
                "paramnames": [
                    "status",
                    "game"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editStatus",
        "longname": "CommandClient#editStatus",
        "kind": "function",
        "description": "Update the bot's status on all guilds",
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Sets the bot's status, either \"online\", \"idle\", \"dnd\", or \"invisible\"",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Sets the bot's active game, null to clear",
                "name": "game"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Sets the name of the bot's active game",
                "name": "game.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The type of game. 0 is playing, 1 is streaming (Twitch only), 2 is listening, 3 is watching",
                "name": "game.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Sets the url of the shard's active game",
                "name": "game.url"
            }
        ],
        "inherits": "Client#editStatus",
        "inherited": true,
        "overrides": "Client#editStatus"
    },
    {
        "comment": "/**\n    * Get a Channel object from a channel ID\n    * @arg {String} channelID The ID of the channel\n    * @returns {CategoryChannel | GroupChannel | PrivateChannel | TextChannel | VoiceChannel | NewsChannel}\n    */",
        "meta": {
            "range": [
                19103,
                19523
            ],
            "filename": "Client.js",
            "lineno": 390,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001407",
                "name": "Client#getChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getChannel",
        "longname": "CommandClient#getChannel",
        "kind": "function",
        "description": "Get a Channel object from a channel ID",
        "returns": [
            {
                "type": {
                    "names": [
                        "CategoryChannel",
                        "GroupChannel",
                        "PrivateChannel",
                        "TextChannel",
                        "VoiceChannel",
                        "NewsChannel"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            }
        ],
        "inherits": "Client#getChannel",
        "inherited": true,
        "overrides": "Client#getChannel"
    },
    {
        "comment": "/**\n    * Create a channel in a guild\n    * @arg {String} guildID The ID of the guild to create the channel in\n    * @arg {String} name The name of the channel\n    * @arg {String} [type=0] The type of the channel, either 0 (text), 2 (voice), or 4 (category)\n    * @arg {Object | String} [options] The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.\n    * @arg {String} [options.topic] The topic of the channel (text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number} [options.bitrate] The bitrate of the channel (voice channels only)\n    * @arg {String?} [options.parentID] The ID of the parent category channel for this channel\n    * @arg {Array} [options.permissionOverwrites] An array containing permission overwrite objects\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)\n    * @arg {String} [options.reason] The reason to be displayed in audit logs\n    * @arg {Number} [options.userLimit] The channel user limit (voice channels only)\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel>}\n    */",
        "meta": {
            "range": [
                20914,
                22207
            ],
            "filename": "Client.js",
            "lineno": 417,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001476",
                "name": "Client#createChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "name",
                    "type",
                    "reason",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "createChannel",
        "longname": "CommandClient#createChannel",
        "kind": "function",
        "description": "Create a channel in a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|TextChannel|VoiceChannel)>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to create the channel in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The type of the channel, either 0 (text), 2 (voice), or 4 (category)",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Object",
                        "String"
                    ]
                },
                "optional": true,
                "description": "The properties the channel should have. If `options` is a string, it will be treated as `options.parentID` (see below). Passing a string is deprecated and will not be supported in future versions.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The topic of the channel (text channels only)",
                "name": "options.topic"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "The nsfw status of the channel",
                "name": "options.nsfw"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The bitrate of the channel (voice channels only)",
                "name": "options.bitrate"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "The ID of the parent category channel for this channel",
                "name": "options.parentID"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "optional": true,
                "description": "An array containing permission overwrite objects",
                "name": "options.permissionOverwrites"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (text channels only)",
                "name": "options.rateLimitPerUser"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "options.reason"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The channel user limit (voice channels only)",
                "name": "options.userLimit"
            }
        ],
        "inherits": "Client#createChannel",
        "inherited": true,
        "overrides": "Client#createChannel"
    },
    {
        "comment": "/**\n    * Edit a channel's properties\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.icon] The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.ownerID] The ID of the channel owner (group channels only)\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel (guild channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {String?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | GroupChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
        "meta": {
            "range": [
                23555,
                24128
            ],
            "filename": "Client.js",
            "lineno": 462,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001609",
                "name": "Client#editChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editChannel",
        "longname": "CommandClient#editChannel",
        "kind": "function",
        "description": "Edit a channel's properties",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|GroupChannel|TextChannel|VoiceChannel|NewsChannel)>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the channel",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The icon of the channel as a base64 data URI (group channels only). Note: base64 strings alone are not base64 data URI strings",
                "name": "options.icon"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the channel owner (group channels only)",
                "name": "options.ownerID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The topic of the channel (guild text channels only)",
                "name": "options.topic"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "The nsfw status of the channel (guild channels only)",
                "name": "options.nsfw"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The bitrate of the channel (guild voice channels only)",
                "name": "options.bitrate"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The channel user limit (guild voice channels only)",
                "name": "options.userLimit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
                "name": "options.rateLimitPerUser"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
                "name": "options.parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#editChannel",
        "inherited": true,
        "overrides": "Client#editChannel"
    },
    {
        "comment": "/**\n    * Edit a guild channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                24406,
                25546
            ],
            "filename": "Client.js",
            "lineno": 483,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001680",
                "name": "Client#editChannelPosition",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "position"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editChannelPosition",
        "longname": "CommandClient#editChannelPosition",
        "kind": "function",
        "description": "Edit a guild channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new position of the channel",
                "name": "position"
            }
        ],
        "inherits": "Client#editChannelPosition",
        "inherited": true,
        "overrides": "Client#editChannelPosition"
    },
    {
        "comment": "/**\n    * Delete a guild channel, or leave a private or group channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                25780,
                25942
            ],
            "filename": "Client.js",
            "lineno": 517,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001862",
                "name": "Client#deleteChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteChannel",
        "longname": "CommandClient#deleteChannel",
        "kind": "function",
        "description": "Delete a guild channel, or leave a private or group channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#deleteChannel",
        "inherited": true,
        "overrides": "Client#deleteChannel"
    },
    {
        "comment": "/**\n    * Send typing status in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                26078,
                26209
            ],
            "filename": "Client.js",
            "lineno": 528,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001885",
                "name": "Client#sendChannelTyping",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "sendChannelTyping",
        "longname": "CommandClient#sendChannelTyping",
        "kind": "function",
        "description": "Send typing status in a channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            }
        ],
        "inherits": "Client#sendChannelTyping",
        "inherited": true,
        "overrides": "Client#sendChannelTyping"
    },
    {
        "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} channelID The ID of channel\n    * @arg {String} overwriteID The ID of the overwritten user or role (everyone role ID = guild ID)\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                26747,
                27025
            ],
            "filename": "Client.js",
            "lineno": 542,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001904",
                "name": "Client#editChannelPermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "overwriteID",
                    "allow",
                    "deny",
                    "type",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editChannelPermission",
        "longname": "CommandClient#editChannelPermission",
        "kind": "function",
        "description": "Create a channel permission overwrite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role (everyone role ID = guild ID)",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for allowed permissions",
                "name": "allow"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for denied permissions",
                "name": "deny"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The object type of the overwrite, either \"member\" or \"role\"",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#editChannelPermission",
        "inherited": true,
        "overrides": "Client#editChannelPermission"
    },
    {
        "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                27308,
                27517
            ],
            "filename": "Client.js",
            "lineno": 558,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001938",
                "name": "Client#deleteChannelPermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "overwriteID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteChannelPermission",
        "longname": "CommandClient#deleteChannelPermission",
        "kind": "function",
        "description": "Delete a channel permission overwrite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#deleteChannelPermission",
        "inherited": true,
        "overrides": "Client#deleteChannelPermission"
    },
    {
        "comment": "/**\n    * Get all invites in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<Invite[]>}\n    */",
        "meta": {
            "range": [
                27660,
                27860
            ],
            "filename": "Client.js",
            "lineno": 569,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001963",
                "name": "Client#getChannelInvites",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getChannelInvites",
        "longname": "CommandClient#getChannelInvites",
        "kind": "function",
        "description": "Get all invites in a channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Invite>>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            }
        ],
        "inherits": "Client#getChannelInvites",
        "inherited": true,
        "overrides": "Client#getChannelInvites"
    },
    {
        "comment": "/**\n    * Create an invite for a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} [options] Invite generation options\n    * @arg {Number} [options.maxAge] How long the invite should last in seconds\n    * @arg {Number} [options.maxUses] How many uses the invite should last for\n    * @arg {Boolean} [options.temporary] Whether the invite grants temporary membership or not\n    * @arg {Boolean} [options.unique] Whether the invite is unique or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Invite>}\n    */",
        "meta": {
            "range": [
                28457,
                28850
            ],
            "filename": "Client.js",
            "lineno": 584,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100001997",
                "name": "Client#createChannelInvite",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "createChannelInvite",
        "longname": "CommandClient#createChannelInvite",
        "kind": "function",
        "description": "Create an invite for a channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Invite>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Invite generation options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "How long the invite should last in seconds",
                "name": "options.maxAge"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "How many uses the invite should last for",
                "name": "options.maxUses"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the invite grants temporary membership or not",
                "name": "options.temporary"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the invite is unique or not",
                "name": "options.unique"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#createChannelInvite",
        "inherited": true,
        "overrides": "Client#createChannelInvite"
    },
    {
        "comment": "/**\n    * Get all the webhooks in a channel\n    * @arg {String} channelID The ID of the channel to get webhooks for\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
        "meta": {
            "range": [
                29060,
                29193
            ],
            "filename": "Client.js",
            "lineno": 599,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002048",
                "name": "Client#getChannelWebhooks",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getChannelWebhooks",
        "longname": "CommandClient#getChannelWebhooks",
        "kind": "function",
        "description": "Get all the webhooks in a channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of webhook objects"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel to get webhooks for",
                "name": "channelID"
            }
        ],
        "inherits": "Client#getChannelWebhooks",
        "inherited": true,
        "overrides": "Client#getChannelWebhooks"
    },
    {
        "comment": "/**\n    * Get a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
        "meta": {
            "range": [
                29448,
                29625
            ],
            "filename": "Client.js",
            "lineno": 609,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002067",
                "name": "Client#getWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "webhookID",
                    "token"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getWebhook",
        "longname": "CommandClient#getWebhook",
        "kind": "function",
        "description": "Get a webhook",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with a webhook object"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the webhook",
                "name": "webhookID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The token of the webhook, used instead of the Bot Authorization token",
                "name": "token"
            }
        ],
        "inherits": "Client#getWebhook",
        "inherited": true,
        "overrides": "Client#getWebhook"
    },
    {
        "comment": "/**\n    * Create a channel webhook\n    * @arg {String} channelID The ID of the channel to create the webhook in\n    * @arg {Object} options Webhook options\n    * @arg {String} options.name The default name\n    * @arg {String} options.avatar The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
        "meta": {
            "range": [
                30117,
                30312
            ],
            "filename": "Client.js",
            "lineno": 622,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002096",
                "name": "Client#createChannelWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "createChannelWebhook",
        "longname": "CommandClient#createChannelWebhook",
        "kind": "function",
        "description": "Create a channel webhook",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with a webhook object"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel to create the webhook in",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Webhook options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The default name",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.avatar"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#createChannelWebhook",
        "inherited": true,
        "overrides": "Client#createChannelWebhook"
    },
    {
        "comment": "/**\n    * Edit a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {Object} options Webhook options\n    * @arg {String} [options.name] The new default name\n    * @arg {String} [options.avatar] The new default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
        "meta": {
            "range": [
                30879,
                31118
            ],
            "filename": "Client.js",
            "lineno": 637,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002124",
                "name": "Client#editWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "webhookID",
                    "options",
                    "token",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editWebhook",
        "longname": "CommandClient#editWebhook",
        "kind": "function",
        "description": "Edit a webhook",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with a webhook object"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the webhook",
                "name": "webhookID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Webhook options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The new default name",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The new default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.avatar"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The token of the webhook, used instead of the Bot Authorization token",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#editWebhook",
        "inherited": true,
        "overrides": "Client#editWebhook"
    },
    {
        "comment": "/**\n    * Execute a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} token The token of the webhook\n    * @arg {Object} options Webhook execution options\n    * @arg {Boolean} [options.auth=false] Whether or not to authorize the request with the bot token (allowing custom emotes from other guilds)\n    * @arg {String} [options.content=\"\"] A content string\n    * @arg {Object | Object[]} [options.file] A file object (or an Array of them)\n    * @arg {Buffer} options.file.file A buffer containing file data\n    * @arg {String} options.file.name What to name the file\n    * @arg {Object[]} [options.embeds] An array of Discord embeds\n    * @arg {String} [options.username] A custom username, defaults to webhook default username if not specified\n    * @arg {String} [options.avatarURL] A URL for a custom avatar, defaults to webhook default avatar if not specified\n    * @arg {Boolean} [options.tts=false] Whether the message should be a TTS message or not\n    * @arg {Boolean} [options.wait=false] Whether to wait for the server to confirm the message create or not\n    * @arg {Object} [options.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [options.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [options.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [options.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @returns {Promise<Message?>}\n    */",
        "meta": {
            "range": [
                32777,
                33500
            ],
            "filename": "Client.js",
            "lineno": 663,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002162",
                "name": "Client#executeWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "webhookID",
                    "token",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "executeWebhook",
        "longname": "CommandClient#executeWebhook",
        "kind": "function",
        "description": "Execute a webhook",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<?Message>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the webhook",
                "name": "webhookID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The token of the webhook",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Webhook execution options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not to authorize the request with the bot token (allowing custom emotes from other guilds)",
                "name": "options.auth"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "A content string",
                "name": "options.content"
            },
            {
                "type": {
                    "names": [
                        "Object",
                        "Array.<Object>"
                    ]
                },
                "optional": true,
                "description": "A file object (or an Array of them)",
                "name": "options.file"
            },
            {
                "type": {
                    "names": [
                        "Buffer"
                    ]
                },
                "description": "A buffer containing file data",
                "name": "options.file.file"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "What to name the file",
                "name": "options.file.name"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "optional": true,
                "description": "An array of Discord embeds",
                "name": "options.embeds"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "A custom username, defaults to webhook default username if not specified",
                "name": "options.username"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "A URL for a custom avatar, defaults to webhook default avatar if not specified",
                "name": "options.avatarURL"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the message should be a TTS message or not",
                "name": "options.tts"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to wait for the server to confirm the message create or not",
                "name": "options.wait"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "options.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "options.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "options.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "options.allowedMentions.users"
            }
        ],
        "inherits": "Client#executeWebhook",
        "inherited": true,
        "overrides": "Client#executeWebhook"
    },
    {
        "comment": "/**\n    * Execute a slack-style webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} token The token of the webhook\n    * @arg {Object} options Slack webhook options\n    * @arg {Boolean} [options.wait=false] Whether to wait for the server to confirm the message create or not\n    * @arg {Boolean} [options.auth=false] Whether or not to authorize the request with the bot token (allowing custom emotes from other guilds)\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                33989,
                34330
            ],
            "filename": "Client.js",
            "lineno": 686,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002265",
                "name": "Client#executeSlackWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "webhookID",
                    "token",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "executeSlackWebhook",
        "longname": "CommandClient#executeSlackWebhook",
        "kind": "function",
        "description": "Execute a slack-style webhook",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the webhook",
                "name": "webhookID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The token of the webhook",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Slack webhook options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to wait for the server to confirm the message create or not",
                "name": "options.wait"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not to authorize the request with the bot token (allowing custom emotes from other guilds)",
                "name": "options.auth"
            }
        ],
        "inherits": "Client#executeSlackWebhook",
        "inherited": true,
        "overrides": "Client#executeSlackWebhook"
    },
    {
        "comment": "/**\n    * Delete a webhook\n    * @arg {String} webhookID The ID of the webhook\n    * @arg {String} [token] The token of the webhook, used instead of the Bot Authorization token\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                34619,
                34842
            ],
            "filename": "Client.js",
            "lineno": 701,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002321",
                "name": "Client#deleteWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "webhookID",
                    "token",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteWebhook",
        "longname": "CommandClient#deleteWebhook",
        "kind": "function",
        "description": "Delete a webhook",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the webhook",
                "name": "webhookID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The token of the webhook, used instead of the Bot Authorization token",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#deleteWebhook",
        "inherited": true,
        "overrides": "Client#deleteWebhook"
    },
    {
        "comment": "/**\n    * Get all the webhooks in a guild\n    * @arg {String} guildID The ID of the guild to get webhooks for\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
        "meta": {
            "range": [
                35046,
                35171
            ],
            "filename": "Client.js",
            "lineno": 712,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002354",
                "name": "Client#getGuildWebhooks",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getGuildWebhooks",
        "longname": "CommandClient#getGuildWebhooks",
        "kind": "function",
        "description": "Get all the webhooks in a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of webhook objects"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to get webhooks for",
                "name": "guildID"
            }
        ],
        "inherits": "Client#getGuildWebhooks",
        "inherited": true,
        "overrides": "Client#getGuildWebhooks"
    },
    {
        "comment": "/**\n    * Get the audit logs for a guild\n    * @arg {String} guildID The ID of the guild to get audit logs for\n    * @arg {Number} [limit=50] The maximum number of entries to return\n    * @arg {String} [before] Get entries before this entry ID\n    * @arg {Number} [actionType] Filter entries by action type\n    * @returns {Promise<Object>} Resolves with {users: Users[], entries: GuildAuditLogEntry[]}\n    */",
        "meta": {
            "range": [
                35590,
                36148
            ],
            "filename": "Client.js",
            "lineno": 724,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002373",
                "name": "Client#getGuildAuditLogs",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "limit",
                    "before",
                    "actionType"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getGuildAuditLogs",
        "longname": "CommandClient#getGuildAuditLogs",
        "kind": "function",
        "description": "Get the audit logs for a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with {users: Users[], entries: GuildAuditLogEntry[]}"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to get audit logs for",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 50,
                "description": "The maximum number of entries to return",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get entries before this entry ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "Filter entries by action type",
                "name": "actionType"
            }
        ],
        "inherits": "Client#getGuildAuditLogs",
        "inherited": true,
        "overrides": "Client#getGuildAuditLogs"
    },
    {
        "comment": "/**\n    * Create a guild emoji object\n    * @arg {String} guildID The ID of the guild to create the emoji in\n    * @arg {Object} options Emoji options\n    * @arg {String} options.name The name of emoji\n    * @arg {String} options.image The base 64 encoded string\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
        "meta": {
            "range": [
                36627,
                36810
            ],
            "filename": "Client.js",
            "lineno": 748,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002452",
                "name": "Client#createGuildEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "createGuildEmoji",
        "longname": "CommandClient#createGuildEmoji",
        "kind": "function",
        "description": "Create a guild emoji object",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild emoji object"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to create the emoji in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Emoji options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of emoji",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The base 64 encoded string",
                "name": "options.image"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "optional": true,
                "description": "An array containing authorized role IDs",
                "name": "options.roles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#createGuildEmoji",
        "inherited": true,
        "overrides": "Client#createGuildEmoji"
    },
    {
        "comment": "/**\n    * Edit a guild emoji object\n    * @arg {String} guildID The ID of the guild to edit the emoji in\n    * @arg {String} emojiID The ID of the emoji you want to modify\n    * @arg {Object} options Emoji options\n    * @arg {String} [options.name] The name of emoji\n    * @arg {Array} [options.roles] An array containing authorized role IDs\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} A guild emoji object\n    */",
        "meta": {
            "range": [
                37293,
                37492
            ],
            "filename": "Client.js",
            "lineno": 763,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002480",
                "name": "Client#editGuildEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "emojiID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editGuildEmoji",
        "longname": "CommandClient#editGuildEmoji",
        "kind": "function",
        "description": "Edit a guild emoji object",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild emoji object"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to edit the emoji in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the emoji you want to modify",
                "name": "emojiID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Emoji options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of emoji",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "optional": true,
                "description": "An array containing authorized role IDs",
                "name": "options.roles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#editGuildEmoji",
        "inherited": true,
        "overrides": "Client#editGuildEmoji"
    },
    {
        "comment": "/**\n    * Delete a guild emoji object\n    * @arg {String} guildID The ID of the guild to delete the emoji in\n    * @arg {String} emojiID The ID of the emoji\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                37761,
                37944
            ],
            "filename": "Client.js",
            "lineno": 775,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002510",
                "name": "Client#deleteGuildEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "emojiID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteGuildEmoji",
        "longname": "CommandClient#deleteGuildEmoji",
        "kind": "function",
        "description": "Delete a guild emoji object",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to delete the emoji in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the emoji",
                "name": "emojiID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#deleteGuildEmoji",
        "inherited": true,
        "overrides": "Client#deleteGuildEmoji"
    },
    {
        "comment": "/**\n    * Create a guild role\n    * @arg {String} guildID The ID of the guild to create the role in\n    * @arg {Object|Role} [options] An object or Role containing the properties to set\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
        "meta": {
            "range": [
                38647,
                39316
            ],
            "filename": "Client.js",
            "lineno": 793,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002535",
                "name": "Client#createRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "createRole",
        "longname": "CommandClient#createRole",
        "kind": "function",
        "description": "Create a guild role",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Role>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to create the role in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Object",
                        "Role"
                    ]
                },
                "optional": true,
                "description": "An object or Role containing the properties to set",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the role",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The role permissions number",
                "name": "options.permissions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The hex color of the role, in number form (ex: 0x3d15b3 or 4040115)",
                "name": "options.color"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to hoist the role in the user list or not",
                "name": "options.hoist"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the role is mentionable or not",
                "name": "options.mentionable"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#createRole",
        "inherited": true,
        "overrides": "Client#createRole"
    },
    {
        "comment": "/**\n    * Edit a guild role\n    * @arg {String} guildID The ID of the guild the role is in\n    * @arg {String} roleID The ID of the role\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the role\n    * @arg {Number} [options.permissions] The role permissions number\n    * @arg {Number} [options.color] The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)\n    * @arg {Boolean} [options.hoist] Whether to hoist the role in the user list or not\n    * @arg {Boolean} [options.mentionable] Whether the role is mentionable or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Role>}\n    */",
        "meta": {
            "range": [
                40021,
                40268
            ],
            "filename": "Client.js",
            "lineno": 824,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002623",
                "name": "Client#editRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "roleID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editRole",
        "longname": "CommandClient#editRole",
        "kind": "function",
        "description": "Edit a guild role",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Role>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild the role is in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the role",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The role permissions number",
                "name": "options.permissions"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The hex color of the role, in number form (ex: 0x3da5b3 or 4040115)",
                "name": "options.color"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to hoist the role in the user list or not",
                "name": "options.hoist"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the role is mentionable or not",
                "name": "options.mentionable"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#editRole",
        "inherited": true,
        "overrides": "Client#editRole"
    },
    {
        "comment": "/**\n    * Edit a guild role's position. Note that role position numbers are highest on top and lowest at the bottom.\n    * @arg {String} guildID The ID of the guild the role is in\n    * @arg {String} roleID The ID of the role\n    * @arg {Number} position The new position of the role\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                40594,
                41627
            ],
            "filename": "Client.js",
            "lineno": 836,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002668",
                "name": "Client#editRolePosition",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "roleID",
                    "position"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editRolePosition",
        "longname": "CommandClient#editRolePosition",
        "kind": "function",
        "description": "Edit a guild role's position. Note that role position numbers are highest on top and lowest at the bottom.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild the role is in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new position of the role",
                "name": "position"
            }
        ],
        "inherits": "Client#editRolePosition",
        "inherited": true,
        "overrides": "Client#editRolePosition"
    },
    {
        "comment": "/**\n    * Delete a guild role\n    * @arg {String} guildID The ID of the guild to create the role in\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                41885,
                42059
            ],
            "filename": "Client.js",
            "lineno": 869,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002846",
                "name": "Client#deleteRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "roleID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteRole",
        "longname": "CommandClient#deleteRole",
        "kind": "function",
        "description": "Delete a guild role",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild to create the role in",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#deleteRole",
        "inherited": true,
        "overrides": "Client#deleteRole"
    },
    {
        "comment": "/**\n    * Get the prune count for a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} [options] The options to use to get number of prune members\n    * @arg {Number} [options.days=7] The number of days of inactivity to prune for\n    * @arg {Array<String>} [options.includeRoles] An array of role IDs that members must have to be considered for pruning\n    * @returns {Promise<Number>} Resolves with the number of members that would be pruned\n    */",
        "meta": {
            "range": [
                42542,
                42796
            ],
            "filename": "Client.js",
            "lineno": 883,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002871",
                "name": "Client#getPruneCount",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getPruneCount",
        "longname": "CommandClient#getPruneCount",
        "kind": "function",
        "description": "Get the prune count for a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Number>"
                    ]
                },
                "description": "Resolves with the number of members that would be pruned"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The options to use to get number of prune members",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 7,
                "description": "The number of days of inactivity to prune for",
                "name": "options.days"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of role IDs that members must have to be considered for pruning",
                "name": "options.includeRoles"
            }
        ],
        "inherits": "Client#getPruneCount",
        "inherited": true,
        "overrides": "Client#getPruneCount"
    },
    {
        "comment": "/**\n    * Begin pruning a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} [options] The options to pass to prune members\n    * @arg {Number} [options.days=7] The number of days of inactivity to prune for\n    * @arg {Boolean} [options.computePruneCount=true] Whether or not the number of pruned members should be returned. Discord discourages setting this to true for larger guilds\n    * @arg {Array<String>} [options.includeRoles] An array of role IDs that members must have to be considered for pruning\n    * @arg {String} [options.reason] The reason to be displayed in audit logs\n    * @returns {Promise<Number?>} If computePruneCount was true, resolves with the number of pruned members\n    */",
        "meta": {
            "range": [
                43529,
                43879
            ],
            "filename": "Client.js",
            "lineno": 900,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002910",
                "name": "Client#pruneMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "pruneMembers",
        "longname": "CommandClient#pruneMembers",
        "kind": "function",
        "description": "Begin pruning a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<?Number>"
                    ]
                },
                "description": "If computePruneCount was true, resolves with the number of pruned members"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The options to pass to prune members",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 7,
                "description": "The number of days of inactivity to prune for",
                "name": "options.days"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether or not the number of pruned members should be returned. Discord discourages setting this to true for larger guilds",
                "name": "options.computePruneCount"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of role IDs that members must have to be considered for pruning",
                "name": "options.includeRoles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "options.reason"
            }
        ],
        "inherits": "Client#pruneMembers",
        "inherited": true,
        "overrides": "Client#pruneMembers"
    },
    {
        "comment": "/**\n    * Get a list of general/guild-specific voice regions\n    * @arg {String} [guildID] The ID of the guild\n    * @returns {Promise<Object[]>} Resolves with an array of voice region objects\n    */",
        "meta": {
            "range": [
                44089,
                44296
            ],
            "filename": "Client.js",
            "lineno": 914,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002957",
                "name": "Client#getVoiceRegions",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getVoiceRegions",
        "longname": "CommandClient#getVoiceRegions",
        "kind": "function",
        "description": "Get a list of general/guild-specific voice regions",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of voice region objects"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#getVoiceRegions",
        "inherited": true,
        "overrides": "Client#getVoiceRegions"
    },
    {
        "comment": "/**\n    * Get info on an invite\n    * @arg {String} inviteID The ID of the invite\n    * @arg {Boolean} [withCounts] Whether to fetch additional invite info or not (approximate member counts, approximate presences, channel counts, etc.)\n    * @returns {Promise<Invite>}\n    */",
        "meta": {
            "range": [
                44582,
                44798
            ],
            "filename": "Client.js",
            "lineno": 924,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100002989",
                "name": "Client#getInvite",
                "type": "MethodDefinition",
                "paramnames": [
                    "inviteID",
                    "withCounts"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getInvite",
        "longname": "CommandClient#getInvite",
        "kind": "function",
        "description": "Get info on an invite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Invite>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the invite",
                "name": "inviteID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to fetch additional invite info or not (approximate member counts, approximate presences, channel counts, etc.)",
                "name": "withCounts"
            }
        ],
        "inherits": "Client#getInvite",
        "inherited": true,
        "overrides": "Client#getInvite"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Accept an invite\n    * @arg {String} inviteID The ID of the invite\n    * @returns {Promise<Invite>}\n    */",
        "meta": {
            "range": [
                44940,
                45099
            ],
            "filename": "Client.js",
            "lineno": 935,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003021",
                "name": "Client#acceptInvite",
                "type": "MethodDefinition",
                "paramnames": [
                    "inviteID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "acceptInvite",
        "longname": "CommandClient#acceptInvite",
        "kind": "function",
        "description": "[USER ACCOUNT] Accept an invite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Invite>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the invite",
                "name": "inviteID"
            }
        ],
        "inherits": "Client#acceptInvite",
        "inherited": true,
        "overrides": "Client#acceptInvite"
    },
    {
        "comment": "/**\n    * Delete an invite\n    * @arg {String} inviteID The ID of the invite\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                45288,
                45446
            ],
            "filename": "Client.js",
            "lineno": 945,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003049",
                "name": "Client#deleteInvite",
                "type": "MethodDefinition",
                "paramnames": [
                    "inviteID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteInvite",
        "longname": "CommandClient#deleteInvite",
        "kind": "function",
        "description": "Delete an invite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the invite",
                "name": "inviteID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#deleteInvite",
        "inherited": true,
        "overrides": "Client#deleteInvite"
    },
    {
        "comment": "/**\n    * Get properties of the bot user\n    * @returns {Promise<ExtendedUser>}\n    */",
        "meta": {
            "range": [
                45543,
                45685
            ],
            "filename": "Client.js",
            "lineno": 955,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003072",
                "name": "Client#getSelf",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getSelf",
        "longname": "CommandClient#getSelf",
        "kind": "function",
        "description": "Get properties of the bot user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<ExtendedUser>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "inherits": "Client#getSelf",
        "inherited": true,
        "overrides": "Client#getSelf"
    },
    {
        "comment": "/**\n    * Edit properties of the bot user\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.username] The new username\n    * @arg {String} [options.avatar] The new avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @returns {Promise<ExtendedUser>}\n    */",
        "meta": {
            "range": [
                46023,
                46184
            ],
            "filename": "Client.js",
            "lineno": 966,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003099",
                "name": "Client#editSelf",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editSelf",
        "longname": "CommandClient#editSelf",
        "kind": "function",
        "description": "Edit properties of the bot user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<ExtendedUser>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The new username",
                "name": "options.username"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The new avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.avatar"
            }
        ],
        "inherits": "Client#editSelf",
        "inherited": true,
        "overrides": "Client#editSelf"
    },
    {
        "comment": "/**\n    * Get a DM channel with a user, or create one if it does not exist\n    * @arg {String} userID The ID of the user\n    * @returns {Promise<PrivateChannel>}\n    */",
        "meta": {
            "range": [
                46363,
                46764
            ],
            "filename": "Client.js",
            "lineno": 975,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003128",
                "name": "Client#getDMChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getDMChannel",
        "longname": "CommandClient#getDMChannel",
        "kind": "function",
        "description": "Get a DM channel with a user, or create one if it does not exist",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<PrivateChannel>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user",
                "name": "userID"
            }
        ],
        "inherits": "Client#getDMChannel",
        "inherited": true,
        "overrides": "Client#getDMChannel"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Create a group channel with other users\n    * @arg {String[]} userIDs The IDs of the other users\n    * @returns {Promise<PrivateChannel>}\n    */",
        "meta": {
            "range": [
                46944,
                47200
            ],
            "filename": "Client.js",
            "lineno": 990,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003185",
                "name": "Client#createGroupChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "userIDs"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "createGroupChannel",
        "longname": "CommandClient#createGroupChannel",
        "kind": "function",
        "description": "[USER ACCOUNT] Create a group channel with other users",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<PrivateChannel>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "The IDs of the other users",
                "name": "userIDs"
            }
        ],
        "inherits": "Client#createGroupChannel",
        "inherited": true,
        "overrides": "Client#createGroupChannel"
    },
    {
        "comment": "/**\n    * Get a previous message in a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                47401,
                47593
            ],
            "filename": "Client.js",
            "lineno": 1003,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003218",
                "name": "Client#getMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getMessage",
        "longname": "CommandClient#getMessage",
        "kind": "function",
        "description": "Get a previous message in a channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "Client#getMessage",
        "inherited": true,
        "overrides": "Client#getMessage"
    },
    {
        "comment": "/**\n    * Get previous messages in a channel\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
        "meta": {
            "range": [
                48034,
                49933
            ],
            "filename": "Client.js",
            "lineno": 1016,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003248",
                "name": "Client#getMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "limit",
                    "before",
                    "after",
                    "around"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getMessages",
        "longname": "CommandClient#getMessages",
        "kind": "function",
        "description": "Get previous messages in a channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Message>>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "async": true,
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 50,
                "description": "The max number of messages to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages before this message ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages after this message ID",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages around this message ID (does not work with limit > 100)",
                "name": "around"
            }
        ],
        "inherits": "Client#getMessages",
        "inherited": true,
        "overrides": "Client#getMessages"
    },
    {
        "comment": "/**\n    * Get all the pins in a channel\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<Message[]>}\n    */",
        "meta": {
            "range": [
                50078,
                50270
            ],
            "filename": "Client.js",
            "lineno": 1059,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003516",
                "name": "Client#getPins",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getPins",
        "longname": "CommandClient#getPins",
        "kind": "function",
        "description": "Get all the pins in a channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Message>>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            }
        ],
        "inherits": "Client#getPins",
        "inherited": true,
        "overrides": "Client#getPins"
    },
    {
        "comment": "/**\n    * Create a message in a channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel for a user\n    * @arg {String} channelID The ID of the channel\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @arg {Object | Object[]} [file] A file object (or an Array of them)\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                51667,
                52595
            ],
            "filename": "Client.js",
            "lineno": 1080,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003550",
                "name": "Client#createMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "content",
                    "file"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "createMessage",
        "longname": "CommandClient#createMessage",
        "kind": "function",
        "description": "Create a message in a channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel for a user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Array",
                        "Object"
                    ]
                },
                "description": "A string, array of strings, or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Set the message TTS flag",
                "name": "content.tts"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            },
            {
                "type": {
                    "names": [
                        "Object",
                        "Array.<Object>"
                    ]
                },
                "optional": true,
                "description": "A file object (or an Array of them)",
                "name": "file"
            },
            {
                "type": {
                    "names": [
                        "Buffer"
                    ]
                },
                "description": "A buffer containing file data",
                "name": "file.file"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "What to name the file",
                "name": "file.name"
            }
        ],
        "inherits": "Client#createMessage",
        "inherited": true,
        "overrides": "Client#createMessage"
    },
    {
        "comment": "/**\n    * Edit a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                53894,
                54749
            ],
            "filename": "Client.js",
            "lineno": 1112,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003676",
                "name": "Client#editMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID",
                    "content"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editMessage",
        "longname": "CommandClient#editMessage",
        "kind": "function",
        "description": "Edit a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Array",
                        "Object"
                    ]
                },
                "description": "A string, array of strings, or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
                "name": "content.flags"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            }
        ],
        "inherits": "Client#editMessage",
        "inherited": true,
        "overrides": "Client#editMessage"
    },
    {
        "comment": "/**\n    * Pin a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                54919,
                55061
            ],
            "filename": "Client.js",
            "lineno": 1134,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003793",
                "name": "Client#pinMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "pinMessage",
        "longname": "CommandClient#pinMessage",
        "kind": "function",
        "description": "Pin a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "Client#pinMessage",
        "inherited": true,
        "overrides": "Client#pinMessage"
    },
    {
        "comment": "/**\n    * Unpin a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                55233,
                55380
            ],
            "filename": "Client.js",
            "lineno": 1144,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003814",
                "name": "Client#unpinMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "unpinMessage",
        "longname": "CommandClient#unpinMessage",
        "kind": "function",
        "description": "Unpin a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "Client#unpinMessage",
        "inherited": true,
        "overrides": "Client#unpinMessage"
    },
    {
        "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
        "meta": {
            "range": [
                55897,
                56370
            ],
            "filename": "Client.js",
            "lineno": 1158,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003835",
                "name": "Client#getMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID",
                    "reaction",
                    "limit",
                    "before",
                    "after"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getMessageReaction",
        "longname": "CommandClient#getMessageReaction",
        "kind": "function",
        "description": "Get a list of users who reacted with a specific reaction",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<User>>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 100,
                "description": "The maximum number of users to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users before this user ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users after this user ID",
                "name": "after"
            }
        ],
        "inherits": "Client#getMessageReaction",
        "inherited": true,
        "overrides": "Client#getMessageReaction"
    },
    {
        "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                56733,
                57056
            ],
            "filename": "Client.js",
            "lineno": 1177,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003898",
                "name": "Client#addMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID",
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "addMessageReaction",
        "longname": "CommandClient#addMessageReaction",
        "kind": "function",
        "description": "Add a reaction to a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to react as",
                "name": "userID"
            }
        ],
        "inherits": "Client#addMessageReaction",
        "inherited": true,
        "overrides": "Client#addMessageReaction"
    },
    {
        "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                57439,
                57768
            ],
            "filename": "Client.js",
            "lineno": 1192,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003938",
                "name": "Client#removeMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID",
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "removeMessageReaction",
        "longname": "CommandClient#removeMessageReaction",
        "kind": "function",
        "description": "Remove a reaction from a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to remove the reaction for",
                "name": "userID"
            }
        ],
        "inherits": "Client#removeMessageReaction",
        "inherited": true,
        "overrides": "Client#removeMessageReaction"
    },
    {
        "comment": "/**\n    * Remove all reactions from a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                57960,
                58131
            ],
            "filename": "Client.js",
            "lineno": 1205,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003978",
                "name": "Client#removeMessageReactions",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "removeMessageReactions",
        "longname": "CommandClient#removeMessageReactions",
        "kind": "function",
        "description": "Remove all reactions from a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "Client#removeMessageReactions",
        "inherited": true,
        "overrides": "Client#removeMessageReactions"
    },
    {
        "comment": "/**\n    * Remove all reactions from a message for a single emoji.\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                58456,
                58760
            ],
            "filename": "Client.js",
            "lineno": 1216,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100003999",
                "name": "Client#removeMessageReactionEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID",
                    "reaction"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "removeMessageReactionEmoji",
        "longname": "CommandClient#removeMessageReactionEmoji",
        "kind": "function",
        "description": "Remove all reactions from a message for a single emoji.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            }
        ],
        "inherits": "Client#removeMessageReactionEmoji",
        "inherited": true,
        "overrides": "Client#removeMessageReactionEmoji"
    },
    {
        "comment": "/**\n    * Delete a message\n    * @arg {String} channelID The ID of the channel\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                59003,
                59195
            ],
            "filename": "Client.js",
            "lineno": 1230,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004035",
                "name": "Client#deleteMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteMessage",
        "longname": "CommandClient#deleteMessage",
        "kind": "function",
        "description": "Delete a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#deleteMessage",
        "inherited": true,
        "overrides": "Client#deleteMessage"
    },
    {
        "comment": "/**\n    * Bulk delete messages (bot accounts only)\n    * @arg {String} channelID The ID of the channel\n    * @arg {String[]} messageIDs Array of message IDs to delete\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                59474,
                60528
            ],
            "filename": "Client.js",
            "lineno": 1243,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004060",
                "name": "Client#deleteMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageIDs",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteMessages",
        "longname": "CommandClient#deleteMessages",
        "kind": "function",
        "description": "Bulk delete messages (bot accounts only)",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of message IDs to delete",
                "name": "messageIDs"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#deleteMessages",
        "inherited": true,
        "overrides": "Client#deleteMessages"
    },
    {
        "comment": "/**\n     * Crosspost (publish) a message to subscribed channels\n     * @arg {String} channelID The ID of the NewsChannel\n     * @arg {String} messageID The ID of the message\n     * @returns {Promise<Message>}\n     */",
        "meta": {
            "range": [
                60755,
                60956
            ],
            "filename": "Client.js",
            "lineno": 1275,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004192",
                "name": "Client#crosspostMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "crosspostMessage",
        "longname": "CommandClient#crosspostMessage",
        "kind": "function",
        "description": "Crosspost (publish) a message to subscribed channels",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the NewsChannel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "Client#crosspostMessage",
        "inherited": true,
        "overrides": "Client#crosspostMessage"
    },
    {
        "comment": "/**\n     * Follow a NewsChannel in another channel. This creates a webhook in the target channel\n     * @param {String} channelID The ID of the NewsChannel\n     * @arg {String} webhookChannelID The ID of the target channel\n     * @returns {Object} An object containing the NewsChannel's ID and the new webhook's ID\n     */",
        "meta": {
            "range": [
                61289,
                61474
            ],
            "filename": "Client.js",
            "lineno": 1285,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004222",
                "name": "Client#followChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "webhookChannelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "followChannel",
        "longname": "CommandClient#followChannel",
        "kind": "function",
        "description": "Follow a NewsChannel in another channel. This creates a webhook in the target channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "An object containing the NewsChannel's ID and the new webhook's ID"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the NewsChannel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target channel",
                "name": "webhookChannelID"
            }
        ],
        "inherits": "Client#followChannel",
        "inherited": true,
        "overrides": "Client#followChannel"
    },
    {
        "comment": "/**\n    * Purge previous messages in a channel with an optional filter (bot accounts only)\n    * @arg {String} channelID The ID of the channel\n    * @arg {Number} limit The max number of messages to search through, -1 for no limit\n    * @arg {function} [filter] Optional filter function that returns a boolean when passed a Message object\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Number>} Resolves with the number of messages deleted\n    */",
        "meta": {
            "range": [
                62106,
                64180
            ],
            "filename": "Client.js",
            "lineno": 1299,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004245",
                "name": "Client#purgeChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "limit",
                    "filter",
                    "before",
                    "after",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "purgeChannel",
        "longname": "CommandClient#purgeChannel",
        "kind": "function",
        "description": "Purge previous messages in a channel with an optional filter (bot accounts only)",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Number>"
                    ]
                },
                "description": "Resolves with the number of messages deleted"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "async": true,
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The max number of messages to search through, -1 for no limit",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "Optional filter function that returns a boolean when passed a Message object",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages before this message ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages after this message ID",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#purgeChannel",
        "inherited": true,
        "overrides": "Client#purgeChannel"
    },
    {
        "comment": "/**\n    * [DEPRECATED] Get a guild's embed object\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object>} A guild embed object\n    */",
        "meta": {
            "range": [
                64349,
                64468
            ],
            "filename": "Client.js",
            "lineno": 1362,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004514",
                "name": "Client#getGuildEmbed",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getGuildEmbed",
        "longname": "CommandClient#getGuildEmbed",
        "kind": "function",
        "description": "[DEPRECATED] Get a guild's embed object",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild embed object"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#getGuildEmbed",
        "inherited": true,
        "overrides": "Client#getGuildEmbed"
    },
    {
        "comment": "/**\n    * Get a guild's widget object\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object>} A guild widget object\n    */",
        "meta": {
            "range": [
                64626,
                64747
            ],
            "filename": "Client.js",
            "lineno": 1371,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004533",
                "name": "Client#getGuildWidget",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getGuildWidget",
        "longname": "CommandClient#getGuildWidget",
        "kind": "function",
        "description": "Get a guild's widget object",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild widget object"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#getGuildWidget",
        "inherited": true,
        "overrides": "Client#getGuildWidget"
    },
    {
        "comment": "/**\n    * Modify a guild's widget\n    * @arg {String} guildID The ID of the guild\n    * @arg {Object} options The widget object to modify (https://discord.com/developers/docs/resources/guild#modify-guild-widget)\n    * @returns {Promise<Object>} A guild widget object\n    */",
        "meta": {
            "range": [
                65031,
                65173
            ],
            "filename": "Client.js",
            "lineno": 1381,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004552",
                "name": "Client#editGuildWidget",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editGuildWidget",
        "longname": "CommandClient#editGuildWidget",
        "kind": "function",
        "description": "Modify a guild's widget",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A guild widget object"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The widget object to modify (https://discord.com/developers/docs/resources/guild#modify-guild-widget)",
                "name": "options"
            }
        ],
        "inherits": "Client#editGuildWidget",
        "inherited": true,
        "overrides": "Client#editGuildWidget"
    },
    {
        "comment": "/**\n    * Get a guild preview for a guild. Only available for public guilds.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object>}\n    */",
        "meta": {
            "range": [
                65348,
                65516
            ],
            "filename": "Client.js",
            "lineno": 1390,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004573",
                "name": "Client#getGuildPreview",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getGuildPreview",
        "longname": "CommandClient#getGuildPreview",
        "kind": "function",
        "description": "Get a guild preview for a guild. Only available for public guilds.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#getGuildPreview",
        "inherited": true,
        "overrides": "Client#getGuildPreview"
    },
    {
        "comment": "/**\n    * Get a list of integrations for a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<GuildIntegration[]>}\n    */",
        "meta": {
            "range": [
                65675,
                65956
            ],
            "filename": "Client.js",
            "lineno": 1399,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004601",
                "name": "Client#getGuildIntegrations",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getGuildIntegrations",
        "longname": "CommandClient#getGuildIntegrations",
        "kind": "function",
        "description": "Get a list of integrations for a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<GuildIntegration>>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#getGuildIntegrations",
        "inherited": true,
        "overrides": "Client#getGuildIntegrations"
    },
    {
        "comment": "/**\n    * Edit a guild integration\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.expireBehavior] What to do when a user's subscription runs out\n    * @arg {String} [options.expireGracePeriod] How long before the integration's role is removed from an unsubscribed user\n    * @arg {String} [options.enableEmoticons] Whether to enable integration emoticons or not\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                66501,
                66854
            ],
            "filename": "Client.js",
            "lineno": 1414,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004645",
                "name": "Client#editGuildIntegration",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "integrationID",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editGuildIntegration",
        "longname": "CommandClient#editGuildIntegration",
        "kind": "function",
        "description": "Edit a guild integration",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration",
                "name": "integrationID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "What to do when a user's subscription runs out",
                "name": "options.expireBehavior"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "How long before the integration's role is removed from an unsubscribed user",
                "name": "options.expireGracePeriod"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Whether to enable integration emoticons or not",
                "name": "options.enableEmoticons"
            }
        ],
        "inherits": "Client#editGuildIntegration",
        "inherited": true,
        "overrides": "Client#editGuildIntegration"
    },
    {
        "comment": "/**\n    * Delete a guild integration\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                67041,
                67208
            ],
            "filename": "Client.js",
            "lineno": 1428,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004680",
                "name": "Client#deleteGuildIntegration",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "integrationID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteGuildIntegration",
        "longname": "CommandClient#deleteGuildIntegration",
        "kind": "function",
        "description": "Delete a guild integration",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration",
                "name": "integrationID"
            }
        ],
        "inherits": "Client#deleteGuildIntegration",
        "inherited": true,
        "overrides": "Client#deleteGuildIntegration"
    },
    {
        "comment": "/**\n    * Force a guild integration to sync\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} integrationID The ID of the integration\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                67402,
                67570
            ],
            "filename": "Client.js",
            "lineno": 1438,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004701",
                "name": "Client#syncGuildIntegration",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "integrationID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "syncGuildIntegration",
        "longname": "CommandClient#syncGuildIntegration",
        "kind": "function",
        "description": "Force a guild integration to sync",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the integration",
                "name": "integrationID"
            }
        ],
        "inherits": "Client#syncGuildIntegration",
        "inherited": true,
        "overrides": "Client#syncGuildIntegration"
    },
    {
        "comment": "/**\n    * Get all invites in a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Invite[]>}\n    */",
        "meta": {
            "range": [
                67707,
                67899
            ],
            "filename": "Client.js",
            "lineno": 1447,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004722",
                "name": "Client#getGuildInvites",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getGuildInvites",
        "longname": "CommandClient#getGuildInvites",
        "kind": "function",
        "description": "Get all invites in a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Invite>>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#getGuildInvites",
        "inherited": true,
        "overrides": "Client#getGuildInvites"
    },
    {
        "comment": "/**\n    * Returns the vanity url of the guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                68035,
                68160
            ],
            "filename": "Client.js",
            "lineno": 1456,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004756",
                "name": "Client#getGuildVanity",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getGuildVanity",
        "longname": "CommandClient#getGuildVanity",
        "kind": "function",
        "description": "Returns the vanity url of the guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#getGuildVanity",
        "inherited": true,
        "overrides": "Client#getGuildVanity"
    },
    {
        "comment": "/**\n    * Ban a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {Number} [deleteMessageDays=0] Number of days to delete messages for, between 0-7 inclusive\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                68503,
                69009
            ],
            "filename": "Client.js",
            "lineno": 1468,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004775",
                "name": "Client#banGuildMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "userID",
                    "deleteMessageDays",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "banGuildMember",
        "longname": "CommandClient#banGuildMember",
        "kind": "function",
        "description": "Ban a user from a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Number of days to delete messages for, between 0-7 inclusive",
                "name": "deleteMessageDays"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#banGuildMember",
        "inherited": true,
        "overrides": "Client#banGuildMember"
    },
    {
        "comment": "/**\n    * Unban a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                69251,
                69430
            ],
            "filename": "Client.js",
            "lineno": 1485,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004830",
                "name": "Client#unbanGuildMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "userID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "unbanGuildMember",
        "longname": "CommandClient#unbanGuildMember",
        "kind": "function",
        "description": "Unban a user from a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#unbanGuildMember",
        "inherited": true,
        "overrides": "Client#unbanGuildMember"
    },
    {
        "comment": "/**\n    * Create a guild\n    * @arg {String} name The name of the guild\n    * @arg {Object} options The properties of the guild\n    * @arg {String} [options.region] The region of the guild\n    * @arg {String} [options.icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {Number} [options.verificationLevel] The guild verification level\n    * @arg {Number} [options.defaultNotifications] The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".\n    * @arg {Number} [options.explicitContentFilter] The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.\n    * @arg {String} [options.systemChannelID] The ID of the system channel\n    * @arg {String} [options.afkChannelID] The ID of the AFK voice channel\n    * @arg {Number} [options.afkTimeout] The AFK timeout in seconds\n    * @arg {Array<Object>} [options.roles] The new roles of the guild, the first one is the @everyone role. IDs are placeholders which allow channel overwrites.\n    * @arg {Array<Object>} [options.channels] The new channels of the guild. IDs are placeholders which allow use of category channels.\n    * @returns {Promise<Guild>}\n    */",
        "meta": {
            "range": [
                70786,
                71596
            ],
            "filename": "Client.js",
            "lineno": 1507,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004855",
                "name": "Client#createGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "name",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "createGuild",
        "longname": "CommandClient#createGuild",
        "kind": "function",
        "description": "Create a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Guild>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the guild",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties of the guild",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The region of the guild",
                "name": "options.region"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.icon"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The guild verification level",
                "name": "options.verificationLevel"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".",
                "name": "options.defaultNotifications"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.",
                "name": "options.explicitContentFilter"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the system channel",
                "name": "options.systemChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the AFK voice channel",
                "name": "options.afkChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The AFK timeout in seconds",
                "name": "options.afkTimeout"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "optional": true,
                "description": "The new roles of the guild, the first one is the @everyone role. IDs are placeholders which allow channel overwrites.",
                "name": "options.roles"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "optional": true,
                "description": "The new channels of the guild. IDs are placeholders which allow use of category channels.",
                "name": "options.channels"
            }
        ],
        "inherits": "Client#createGuild",
        "inherited": true,
        "overrides": "Client#createGuild"
    },
    {
        "comment": "/**\n    * Edit a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The ID of the guild\n    * @arg {String} [options.region] The region of the guild\n    * @arg {String} [options.icon] The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {Number} [options.verificationLevel] The guild verification level\n    * @arg {Number} [options.defaultNotifications] The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".\n    * @arg {Number} [options.explicitContentFilter] The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.\n    * @arg {String} [options.systemChannelID] The ID of the system channel\n    * @arg {String} [options.rulesChannelID] The id of the channel where \"PUBLIC\" guilds display rules and/or guidelines\n    * @arg {String} [options.publicUpdatesChannelID] The id of the channel where admins and moderators of \"PUBLIC\" guilds receive notices from Discord\n    * @arg {String} [options.preferredLocale] Preferred \"PUBLIC\" guild language used in server discovery and notices from Discord\n    * @arg {String} [options.afkChannelID] The ID of the AFK voice channel\n    * @arg {Number} [options.afkTimeout] The AFK timeout in seconds\n    * @arg {String} [options.ownerID] The ID of the user to transfer server ownership to (bot user must be owner)\n    * @arg {String} [options.splash] The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.banner] The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [options.description] The description for the guild (VIP only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Guild>}\n    */",
        "meta": {
            "range": [
                73677,
                74673
            ],
            "filename": "Client.js",
            "lineno": 1550,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100004938",
                "name": "Client#editGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editGuild",
        "longname": "CommandClient#editGuild",
        "kind": "function",
        "description": "Edit a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Guild>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the guild",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The region of the guild",
                "name": "options.region"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The guild icon as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.icon"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The guild verification level",
                "name": "options.verificationLevel"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The default notification settings for the guild. 0 is \"All Messages\", 1 is \"Only @mentions\".",
                "name": "options.defaultNotifications"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The level of the explicit content filter for messages/images in the guild. 0 disables message scanning, 1 enables scanning the messages of members without roles, 2 enables scanning for all messages.",
                "name": "options.explicitContentFilter"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the system channel",
                "name": "options.systemChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The id of the channel where \"PUBLIC\" guilds display rules and/or guidelines",
                "name": "options.rulesChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The id of the channel where admins and moderators of \"PUBLIC\" guilds receive notices from Discord",
                "name": "options.publicUpdatesChannelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Preferred \"PUBLIC\" guild language used in server discovery and notices from Discord",
                "name": "options.preferredLocale"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the AFK voice channel",
                "name": "options.afkChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The AFK timeout in seconds",
                "name": "options.afkTimeout"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the user to transfer server ownership to (bot user must be owner)",
                "name": "options.ownerID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The guild splash image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
                "name": "options.splash"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The guild banner image as a base64 data URI (VIP only). Note: base64 strings alone are not base64 data URI strings",
                "name": "options.banner"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The description for the guild (VIP only)",
                "name": "options.description"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#editGuild",
        "inherited": true,
        "overrides": "Client#editGuild"
    },
    {
        "comment": "/**\n    * Get the ban list of a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object[]>} Resolves with an array of {reason: String, user: User}\n    */",
        "meta": {
            "range": [
                74866,
                75141
            ],
            "filename": "Client.js",
            "lineno": 1577,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005035",
                "name": "Client#getGuildBans",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getGuildBans",
        "longname": "CommandClient#getGuildBans",
        "kind": "function",
        "description": "Get the ban list of a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of {reason: String, user: User}"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#getGuildBans",
        "inherited": true,
        "overrides": "Client#getGuildBans"
    },
    {
        "comment": "/**\n    * Get a ban from the ban list of a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the banned user\n    * @returns {Promise<Object>} Resolves with {reason: String, user: User}\n    */",
        "meta": {
            "range": [
                75384,
                75615
            ],
            "filename": "Client.js",
            "lineno": 1592,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005081",
                "name": "Client#getGuildBan",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getGuildBan",
        "longname": "CommandClient#getGuildBan",
        "kind": "function",
        "description": "Get a ban from the ban list of a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with {reason: String, user: User}"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the banned user",
                "name": "userID"
            }
        ],
        "inherits": "Client#getGuildBan",
        "inherited": true,
        "overrides": "Client#getGuildBan"
    },
    {
        "comment": "/**\n    * Edit a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {Object} options The properties to edit\n    * @arg {String[]} [options.roles] The array of role IDs the member should have\n    * @arg {String} [options.nick] Set the member's server nickname, \"\" to remove\n    * @arg {Boolean} [options.mute] Server mute the member\n    * @arg {Boolean} [options.deaf] Server deafen the member\n    * @arg {String} [options.channelID] The ID of the voice channel to move the member to (must be in voice)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                76300,
                76758
            ],
            "filename": "Client.js",
            "lineno": 1612,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005121",
                "name": "Client#editGuildMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "memberID",
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editGuildMember",
        "longname": "CommandClient#editGuildMember",
        "kind": "function",
        "description": "Edit a guild member",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "The array of role IDs the member should have",
                "name": "options.roles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Set the member's server nickname, \"\" to remove",
                "name": "options.nick"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Server mute the member",
                "name": "options.mute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Server deafen the member",
                "name": "options.deaf"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The ID of the voice channel to move the member to (must be in voice)",
                "name": "options.channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#editGuildMember",
        "inherited": true,
        "overrides": "Client#editGuildMember"
    },
    {
        "comment": "/**\n    * Add a role to a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                77053,
                77259
            ],
            "filename": "Client.js",
            "lineno": 1631,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005186",
                "name": "Client#addGuildMemberRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "memberID",
                    "roleID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "addGuildMemberRole",
        "longname": "CommandClient#addGuildMemberRole",
        "kind": "function",
        "description": "Add a role to a guild member",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#addGuildMemberRole",
        "inherited": true,
        "overrides": "Client#addGuildMemberRole"
    },
    {
        "comment": "/**\n    * Remove a role from a guild member\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @arg {String} roleID The ID of the role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                77559,
                77771
            ],
            "filename": "Client.js",
            "lineno": 1645,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005213",
                "name": "Client#removeGuildMemberRole",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "memberID",
                    "roleID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "removeGuildMemberRole",
        "longname": "CommandClient#removeGuildMemberRole",
        "kind": "function",
        "description": "Remove a role from a guild member",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the role",
                "name": "roleID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#removeGuildMemberRole",
        "inherited": true,
        "overrides": "Client#removeGuildMemberRole"
    },
    {
        "comment": "/**\n    * Edit the bot's nickname in a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} nick The nickname\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                78014,
                78211
            ],
            "filename": "Client.js",
            "lineno": 1658,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005240",
                "name": "Client#editNickname",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "nick",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editNickname",
        "longname": "CommandClient#editNickname",
        "kind": "function",
        "description": "Edit the bot's nickname in a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The nickname",
                "name": "nick"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#editNickname",
        "inherited": true,
        "overrides": "Client#editNickname"
    },
    {
        "comment": "/**\n    * Kick a user from a guild\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} userID The ID of the user\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                78452,
                78633
            ],
            "filename": "Client.js",
            "lineno": 1672,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005267",
                "name": "Client#kickGuildMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "userID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "kickGuildMember",
        "longname": "CommandClient#kickGuildMember",
        "kind": "function",
        "description": "Kick a user from a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "Client#kickGuildMember",
        "inherited": true,
        "overrides": "Client#kickGuildMember"
    },
    {
        "comment": "/**\n    * Delete a guild (bot user must be owner)\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                78773,
                78887
            ],
            "filename": "Client.js",
            "lineno": 1683,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005292",
                "name": "Client#deleteGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteGuild",
        "longname": "CommandClient#deleteGuild",
        "kind": "function",
        "description": "Delete a guild (bot user must be owner)",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#deleteGuild",
        "inherited": true,
        "overrides": "Client#deleteGuild"
    },
    {
        "comment": "/**\n    * Leave a guild\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                79001,
                79126
            ],
            "filename": "Client.js",
            "lineno": 1692,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005311",
                "name": "Client#leaveGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "leaveGuild",
        "longname": "CommandClient#leaveGuild",
        "kind": "function",
        "description": "Leave a guild",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#leaveGuild",
        "inherited": true,
        "overrides": "Client#leaveGuild"
    },
    {
        "comment": "/**\n    * Get data on an OAuth2 application\n    * @arg {String} [appID=\"@me\"] The client ID of the application to get data for. \"@me\" refers to the logged in user's own application\n    * @returns {Promise<Object>} The bot's application data. Refer to [the official Discord API documentation entry](https://discordapp.com/developers/docs/topics/oauth2#get-current-application-information) for object structure\n    */",
        "meta": {
            "range": [
                79552,
                79689
            ],
            "filename": "Client.js",
            "lineno": 1701,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005331",
                "name": "Client#getOAuthApplication",
                "type": "MethodDefinition",
                "paramnames": [
                    "appID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getOAuthApplication",
        "longname": "CommandClient#getOAuthApplication",
        "kind": "function",
        "description": "Get data on an OAuth2 application",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The bot's application data. Refer to [the official Discord API documentation entry](https://discordapp.com/developers/docs/topics/oauth2#get-current-application-information) for object structure"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The client ID of the application to get data for. \"@me\" refers to the logged in user's own application",
                "name": "appID"
            }
        ],
        "inherits": "Client#getOAuthApplication",
        "inherited": true,
        "overrides": "Client#getOAuthApplication"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Create a relationship with a user\n    * @arg {String} userID The ID of the target user\n    * @arg {Boolean} [block=false] If true, block the user. Otherwise, add the user as a friend\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                79939,
                80131
            ],
            "filename": "Client.js",
            "lineno": 1711,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005352",
                "name": "Client#addRelationship",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID",
                    "block"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "addRelationship",
        "longname": "CommandClient#addRelationship",
        "kind": "function",
        "description": "[USER ACCOUNT] Create a relationship with a user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, block the user. Otherwise, add the user as a friend",
                "name": "block"
            }
        ],
        "inherits": "Client#addRelationship",
        "inherited": true,
        "overrides": "Client#addRelationship"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Remove a relationship with a user\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                80285,
                80423
            ],
            "filename": "Client.js",
            "lineno": 1722,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005379",
                "name": "Client#removeRelationship",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "removeRelationship",
        "longname": "CommandClient#removeRelationship",
        "kind": "function",
        "description": "[USER ACCOUNT] Remove a relationship with a user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            }
        ],
        "inherits": "Client#removeRelationship",
        "inherited": true,
        "overrides": "Client#removeRelationship"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Add a user to a group\n    * @arg {String} groupID The ID of the target group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                80620,
                80765
            ],
            "filename": "Client.js",
            "lineno": 1732,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005399",
                "name": "Client#addGroupRecipient",
                "type": "MethodDefinition",
                "paramnames": [
                    "groupID",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "addGroupRecipient",
        "longname": "CommandClient#addGroupRecipient",
        "kind": "function",
        "description": "[USER ACCOUNT] Add a user to a group",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target group",
                "name": "groupID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            }
        ],
        "inherits": "Client#addGroupRecipient",
        "inherited": true,
        "overrides": "Client#addGroupRecipient"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Remove a user from a group\n    * @arg {String} groupID The ID of the target group\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                80967,
                81118
            ],
            "filename": "Client.js",
            "lineno": 1742,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005420",
                "name": "Client#removeGroupRecipient",
                "type": "MethodDefinition",
                "paramnames": [
                    "groupID",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "removeGroupRecipient",
        "longname": "CommandClient#removeGroupRecipient",
        "kind": "function",
        "description": "[USER ACCOUNT] Remove a user from a group",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target group",
                "name": "groupID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            }
        ],
        "inherits": "Client#removeGroupRecipient",
        "inherited": true,
        "overrides": "Client#removeGroupRecipient"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get profile data for a user\n    * @arg {String} userID The ID of the target user\n    * @returns {Promise<Object>} The user's profile data.\n    */",
        "meta": {
            "range": [
                81299,
                81418
            ],
            "filename": "Client.js",
            "lineno": 1751,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005441",
                "name": "Client#getUserProfile",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getUserProfile",
        "longname": "CommandClient#getUserProfile",
        "kind": "function",
        "description": "[USER ACCOUNT] Get profile data for a user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's profile data."
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            }
        ],
        "inherits": "Client#getUserProfile",
        "inherited": true,
        "overrides": "Client#getUserProfile"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Edit the current user's note for another user\n    * @arg {String} userID The ID of the target user\n    * @arg {String} note The note\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                81618,
                81775
            ],
            "filename": "Client.js",
            "lineno": 1761,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005460",
                "name": "Client#editUserNote",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID",
                    "note"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editUserNote",
        "longname": "CommandClient#editUserNote",
        "kind": "function",
        "description": "[USER ACCOUNT] Edit the current user's note for another user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the target user",
                "name": "userID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The note",
                "name": "note"
            }
        ],
        "inherits": "Client#editUserNote",
        "inherited": true,
        "overrides": "Client#editUserNote"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Delete the current user's note for another user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                81890,
                82016
            ],
            "filename": "Client.js",
            "lineno": 1771,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005484",
                "name": "Client#deleteUserNote",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteUserNote",
        "longname": "CommandClient#deleteUserNote",
        "kind": "function",
        "description": "[USER ACCOUNT] Delete the current user's note for another user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "inherits": "Client#deleteUserNote",
        "inherited": true,
        "overrides": "Client#deleteUserNote"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get the connections for the current user\n    * @returns {Promise<Object>} The user's connections\n    */",
        "meta": {
            "range": [
                82155,
                82275
            ],
            "filename": "Client.js",
            "lineno": 1779,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005504",
                "name": "Client#getSelfConnections",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getSelfConnections",
        "longname": "CommandClient#getSelfConnections",
        "kind": "function",
        "description": "[USER ACCOUNT] Get the connections for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's connections"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "inherits": "Client#getSelfConnections",
        "inherited": true,
        "overrides": "Client#getSelfConnections"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Edit a connection for the current user\n    * @arg {String} platform The connection platform (e.g. \"twitch\", \"reddit\")\n    * @arg {String} id The connection ID\n    * @arg {Object} data The connection data\n    * @arg {Boolean} [data.friendSync] Whether to sync friends from the connection or not\n    * @arg {Number} [data.visibility] The visibility level for the connection. 0 = hidden, 1 = shown on profile\n    * @returns {Promise<Object>} The updated connection data\n    */",
        "meta": {
            "range": [
                82784,
                83041
            ],
            "filename": "Client.js",
            "lineno": 1792,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005522",
                "name": "Client#editSelfConnection",
                "type": "MethodDefinition",
                "paramnames": [
                    "platform",
                    "id",
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editSelfConnection",
        "longname": "CommandClient#editSelfConnection",
        "kind": "function",
        "description": "[USER ACCOUNT] Edit a connection for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The updated connection data"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The connection platform (e.g. \"twitch\", \"reddit\")",
                "name": "platform"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The connection ID",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The connection data",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to sync friends from the connection or not",
                "name": "data.friendSync"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The visibility level for the connection. 0 = hidden, 1 = shown on profile",
                "name": "data.visibility"
            }
        ],
        "inherits": "Client#editSelfConnection",
        "inherited": true,
        "overrides": "Client#editSelfConnection"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Delete a connection for the current user\n    * @arg {String} platform The connection platform (e.g. \"twitch\", \"reddit\")\n    * @arg {String} id The connection ID\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                83269,
                83428
            ],
            "filename": "Client.js",
            "lineno": 1805,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005554",
                "name": "Client#deleteSelfConnection",
                "type": "MethodDefinition",
                "paramnames": [
                    "platform",
                    "id"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteSelfConnection",
        "longname": "CommandClient#deleteSelfConnection",
        "kind": "function",
        "description": "[USER ACCOUNT] Delete a connection for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The connection platform (e.g. \"twitch\", \"reddit\")",
                "name": "platform"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The connection ID",
                "name": "id"
            }
        ],
        "inherits": "Client#deleteSelfConnection",
        "inherited": true,
        "overrides": "Client#deleteSelfConnection"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get settings for the current user\n    * @returns {Promise<Object>} The user's settings data.\n    */",
        "meta": {
            "range": [
                83563,
                83677
            ],
            "filename": "Client.js",
            "lineno": 1813,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005576",
                "name": "Client#getSelfSettings",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getSelfSettings",
        "longname": "CommandClient#getSelfSettings",
        "kind": "function",
        "description": "[USER ACCOUNT] Get settings for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's settings data."
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "inherits": "Client#getSelfSettings",
        "inherited": true,
        "overrides": "Client#getSelfSettings"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Edit settings for the current user\n    * @arg {Object} data The user settings data\n    * @arg {Boolean} [data.convertEmoticons] Whether to convert emoticons or not (e.g. :D => 😄)\n    * @arg {Boolean} [data.detectPlatformAccounts] Whether to automatically detect accounts from other platforms or not (Blizzard, Skype, etc.)\n    * @arg {Boolean} [data.developerMode] Whether to enable developer mode or not\n    * @arg {Boolean} [data.enableTTSCommand] Whether to respect usage of the TTS command or not\n    * @arg {Object} [data.friendSourceFlags] An object representing allowed friend request sources\n    * @arg {Boolean} [data.friendSourceFlags.all] Whether to allow friends requests from anywhere or not\n    * @arg {Boolean} [data.friendSourceFlags.mutualFriends] Whether to allow friend requests from people with mutual friends or not\n    * @arg {Boolean} [data.friendSourceFlags.mutualGuilds] Whether to allow friend requests from people in mutual guilds or not\n    * @arg {Array<String>} [data.guildPositions] An ordered array of guild IDs representing the guild list order in the Discord client\n    * @arg {Boolean} [data.inlineAttachmentMedia] Whether to show attachment previews or not\n    * @arg {Boolean} [data.inlineEmbedMedia] Whether to show embed images or not\n    * @arg {String} [data.locale] The locale to use for the Discord UI\n    * @arg {Boolean} [data.messageDisplayCompact] Whether to use compact mode or not\n    * @arg {Boolean} [data.renderEmbeds] Whether to show embeds or not\n    * @arg {Boolean} [data.renderReactions] Whether to show reactions or not\n    * @arg {Array<String>} [data.restrictedGuilds] An array of guild IDs where direct messages from guild members are disallowed\n    * @arg {Boolean} [data.showCurrentGame] Whether to set the user's status to the current game or not\n    * @arg {String} [data.status] The status of the user, either \"invisible\", \"dnd\", \"away\", or \"online\"\n    * @arg {String} [data.theme] The theme to use for the Discord UI, either \"dark\" or \"light\"\n    * @returns {Promise<Object>} The user's settings data.\n    */",
        "meta": {
            "range": [
                85790,
                87217
            ],
            "filename": "Client.js",
            "lineno": 1841,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005594",
                "name": "Client#editSelfSettings",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editSelfSettings",
        "longname": "CommandClient#editSelfSettings",
        "kind": "function",
        "description": "[USER ACCOUNT] Edit settings for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's settings data."
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The user settings data",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to convert emoticons or not (e.g. :D => 😄)",
                "name": "data.convertEmoticons"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to automatically detect accounts from other platforms or not (Blizzard, Skype, etc.)",
                "name": "data.detectPlatformAccounts"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to enable developer mode or not",
                "name": "data.developerMode"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to respect usage of the TTS command or not",
                "name": "data.enableTTSCommand"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An object representing allowed friend request sources",
                "name": "data.friendSourceFlags"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to allow friends requests from anywhere or not",
                "name": "data.friendSourceFlags.all"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to allow friend requests from people with mutual friends or not",
                "name": "data.friendSourceFlags.mutualFriends"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to allow friend requests from people in mutual guilds or not",
                "name": "data.friendSourceFlags.mutualGuilds"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An ordered array of guild IDs representing the guild list order in the Discord client",
                "name": "data.guildPositions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to show attachment previews or not",
                "name": "data.inlineAttachmentMedia"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to show embed images or not",
                "name": "data.inlineEmbedMedia"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The locale to use for the Discord UI",
                "name": "data.locale"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to use compact mode or not",
                "name": "data.messageDisplayCompact"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to show embeds or not",
                "name": "data.renderEmbeds"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to show reactions or not",
                "name": "data.renderReactions"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "An array of guild IDs where direct messages from guild members are disallowed",
                "name": "data.restrictedGuilds"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to set the user's status to the current game or not",
                "name": "data.showCurrentGame"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The status of the user, either \"invisible\", \"dnd\", \"away\", or \"online\"",
                "name": "data.status"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The theme to use for the Discord UI, either \"dark\" or \"light\"",
                "name": "data.theme"
            }
        ],
        "inherits": "Client#editSelfSettings",
        "inherited": true,
        "overrides": "Client#editSelfSettings"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get the MFA backup codes for the current user\n    * @arg {String} password The password for the current user\n    * @arg {Boolean} [regenerate] Whether to regenerate the MFA backup codes or not\n    * @returns {Promise<Object>} The user's MFA codes\n    */",
        "meta": {
            "range": [
                87506,
                87724
            ],
            "filename": "Client.js",
            "lineno": 1881,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005728",
                "name": "Client#getSelfMFACodes",
                "type": "MethodDefinition",
                "paramnames": [
                    "password",
                    "regenerate"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getSelfMFACodes",
        "longname": "CommandClient#getSelfMFACodes",
        "kind": "function",
        "description": "[USER ACCOUNT] Get the MFA backup codes for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's MFA codes"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The password for the current user",
                "name": "password"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to regenerate the MFA backup codes or not",
                "name": "regenerate"
            }
        ],
        "inherits": "Client#getSelfMFACodes",
        "inherited": true,
        "overrides": "Client#getSelfMFACodes"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Enable TOTP authentication for the current user\n    * @arg {String} secret The TOTP secret used to generate the auth code\n    * @arg {String} code The timed auth code for the current user\n    * @returns {Promise<Object>} An object containing the user's new authorization token and backup codes\n    */",
        "meta": {
            "range": [
                88060,
                88358
            ],
            "filename": "Client.js",
            "lineno": 1894,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005755",
                "name": "Client#enableSelfMFATOTP",
                "type": "MethodDefinition",
                "paramnames": [
                    "secret",
                    "code"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "enableSelfMFATOTP",
        "longname": "CommandClient#enableSelfMFATOTP",
        "kind": "function",
        "description": "[USER ACCOUNT] Enable TOTP authentication for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "An object containing the user's new authorization token and backup codes"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The TOTP secret used to generate the auth code",
                "name": "secret"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The timed auth code for the current user",
                "name": "code"
            }
        ],
        "inherits": "Client#enableSelfMFATOTP",
        "inherited": true,
        "overrides": "Client#enableSelfMFATOTP"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Disable TOTP authentication for the current user\n    * @arg {String} code The timed auth code for the current user\n    * @returns {Promise<Object>} An object containing the user's new authorization token\n    */",
        "meta": {
            "range": [
                88604,
                88876
            ],
            "filename": "Client.js",
            "lineno": 1910,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005799",
                "name": "Client#disableSelfMFATOTP",
                "type": "MethodDefinition",
                "paramnames": [
                    "code"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "disableSelfMFATOTP",
        "longname": "CommandClient#disableSelfMFATOTP",
        "kind": "function",
        "description": "[USER ACCOUNT] Disable TOTP authentication for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "An object containing the user's new authorization token"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The timed auth code for the current user",
                "name": "code"
            }
        ],
        "inherits": "Client#disableSelfMFATOTP",
        "inherited": true,
        "overrides": "Client#disableSelfMFATOTP"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get the billing info for the current user\n    * @returns {Promise<Object>} The user's billing info\n    */",
        "meta": {
            "range": [
                89017,
                89129
            ],
            "filename": "Client.js",
            "lineno": 1924,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005840",
                "name": "Client#getSelfBilling",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getSelfBilling",
        "longname": "CommandClient#getSelfBilling",
        "kind": "function",
        "description": "[USER ACCOUNT] Get the billing info for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's billing info"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "inherits": "Client#getSelfBilling",
        "inherited": true,
        "overrides": "Client#getSelfBilling"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Get the payment history for the current user\n    * @returns {Promise<Object>} The user's payment history\n    */",
        "meta": {
            "range": [
                89276,
                89398
            ],
            "filename": "Client.js",
            "lineno": 1932,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005858",
                "name": "Client#getSelfPayments",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getSelfPayments",
        "longname": "CommandClient#getSelfPayments",
        "kind": "function",
        "description": "[USER ACCOUNT] Get the payment history for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "The user's payment history"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "inherits": "Client#getSelfPayments",
        "inherited": true,
        "overrides": "Client#getSelfPayments"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Purchase a premium subscription (Nitro) for the current user\n    * You must get a Stripe card token from the Stripe API for this to work\n    * @arg {String} token The Stripe credit card token\n    * @arg {String} plan The plan to purchase, either \"premium_month\" or \"premium_year\"\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                89745,
                90002
            ],
            "filename": "Client.js",
            "lineno": 1943,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005876",
                "name": "Client#addSelfPremiumSubscription",
                "type": "MethodDefinition",
                "paramnames": [
                    "token",
                    "plan"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "addSelfPremiumSubscription",
        "longname": "CommandClient#addSelfPremiumSubscription",
        "kind": "function",
        "description": "[USER ACCOUNT] Purchase a premium subscription (Nitro) for the current user\nYou must get a Stripe card token from the Stripe API for this to work",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The Stripe credit card token",
                "name": "token"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The plan to purchase, either \"premium_month\" or \"premium_year\"",
                "name": "plan"
            }
        ],
        "inherits": "Client#addSelfPremiumSubscription",
        "inherited": true,
        "overrides": "Client#addSelfPremiumSubscription"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Cancel the premium subscription (Nitro) for the current user\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                90130,
                90281
            ],
            "filename": "Client.js",
            "lineno": 1955,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005903",
                "name": "Client#deleteSelfPremiumSubscription",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteSelfPremiumSubscription",
        "longname": "CommandClient#deleteSelfPremiumSubscription",
        "kind": "function",
        "description": "[USER ACCOUNT] Cancel the premium subscription (Nitro) for the current user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "inherits": "Client#deleteSelfPremiumSubscription",
        "inherited": true,
        "overrides": "Client#deleteSelfPremiumSubscription"
    },
    {
        "comment": "/**\n    * Get a channel's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} channelID The ID of the channel\n    * @returns {Promise<CategoryChannel | GroupChannel | PrivateChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
        "meta": {
            "range": [
                90560,
                90866
            ],
            "filename": "Client.js",
            "lineno": 1964,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005921",
                "name": "Client#getRESTChannel",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getRESTChannel",
        "longname": "CommandClient#getRESTChannel",
        "kind": "function",
        "description": "Get a channel's data via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|GroupChannel|PrivateChannel|TextChannel|VoiceChannel|NewsChannel)>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            }
        ],
        "inherits": "Client#getRESTChannel",
        "inherited": true,
        "overrides": "Client#getRESTChannel"
    },
    {
        "comment": "/**\n    * Get a guild's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {Boolean} [withCounts=false] Whether the guild object will have approximateMemberCount and approximatePresenceCount\n    * @returns {Promise<Guild>}\n    */",
        "meta": {
            "range": [
                91181,
                91528
            ],
            "filename": "Client.js",
            "lineno": 1978,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100005967",
                "name": "Client#getRESTGuild",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "withCounts"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getRESTGuild",
        "longname": "CommandClient#getRESTGuild",
        "kind": "function",
        "description": "Get a guild's data via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Guild>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the guild object will have approximateMemberCount and approximatePresenceCount",
                "name": "withCounts"
            }
        ],
        "inherits": "Client#getRESTGuild",
        "inherited": true,
        "overrides": "Client#getRESTGuild"
    },
    {
        "comment": "/**\n    * Get a list of the user's guilds via the REST API. REST mode is required to use this endpoint.\n    * @arg {Number} [limit=100] The max number of guilds to get (1 to 1000)\n    * @arg {String} [before] The lowest guild ID of the next page\n    * @arg {String} [after] The highest guild ID of the previous page\n    * @returns {Promise<Guild[]>}\n    */",
        "meta": {
            "range": [
                91895,
                92285
            ],
            "filename": "Client.js",
            "lineno": 1994,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006017",
                "name": "Client#getRESTGuilds",
                "type": "MethodDefinition",
                "paramnames": [
                    "limit",
                    "before",
                    "after"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getRESTGuilds",
        "longname": "CommandClient#getRESTGuilds",
        "kind": "function",
        "description": "Get a list of the user's guilds via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Guild>>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 100,
                "description": "The max number of guilds to get (1 to 1000)",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The lowest guild ID of the next page",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The highest guild ID of the previous page",
                "name": "after"
            }
        ],
        "inherits": "Client#getRESTGuilds",
        "inherited": true,
        "overrides": "Client#getRESTGuilds"
    },
    {
        "comment": "/**\n    * Get a guild's channels via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<(CategoryChannel[] | TextChannel[] | VoiceChannel[] | NewsChannel[])>}\n    */",
        "meta": {
            "range": [
                92540,
                92883
            ],
            "filename": "Client.js",
            "lineno": 2010,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006076",
                "name": "Client#getRESTGuildChannels",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getRESTGuildChannels",
        "longname": "CommandClient#getRESTGuildChannels",
        "kind": "function",
        "description": "Get a guild's channels via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(Array.<CategoryChannel>|Array.<TextChannel>|Array.<VoiceChannel>|Array.<NewsChannel>)>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#getRESTGuildChannels",
        "inherited": true,
        "overrides": "Client#getRESTGuildChannels"
    },
    {
        "comment": "/**\n    * Get a guild's emojis via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Object[]>} An array of guild emoji objects\n    */",
        "meta": {
            "range": [
                93108,
                93359
            ],
            "filename": "Client.js",
            "lineno": 2023,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006128",
                "name": "Client#getRESTGuildEmojis",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getRESTGuildEmojis",
        "longname": "CommandClient#getRESTGuildEmojis",
        "kind": "function",
        "description": "Get a guild's emojis via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "An array of guild emoji objects"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#getRESTGuildEmojis",
        "inherited": true,
        "overrides": "Client#getRESTGuildEmojis"
    },
    {
        "comment": "/**\n    * Get a guild emoji via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} emojiID The ID of the emoji\n    * @returns {Promise<Object>} An emoji object\n    */",
        "meta": {
            "range": [
                93611,
                93878
            ],
            "filename": "Client.js",
            "lineno": 2036,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006163",
                "name": "Client#getRESTGuildEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "emojiID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getRESTGuildEmoji",
        "longname": "CommandClient#getRESTGuildEmoji",
        "kind": "function",
        "description": "Get a guild emoji via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "An emoji object"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the emoji",
                "name": "emojiID"
            }
        ],
        "inherits": "Client#getRESTGuildEmoji",
        "inherited": true,
        "overrides": "Client#getRESTGuildEmoji"
    },
    {
        "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {Number} [limit=1] The max number of members to get (1 to 1000)\n    * @arg {String} [after] The highest user ID of the previous page\n    * @returns {Promise<Member[]>}\n    */",
        "meta": {
            "range": [
                94216,
                94628
            ],
            "filename": "Client.js",
            "lineno": 2050,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006200",
                "name": "Client#getRESTGuildMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "limit",
                    "after"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getRESTGuildMembers",
        "longname": "CommandClient#getRESTGuildMembers",
        "kind": "function",
        "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Member>>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The max number of members to get (1 to 1000)",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The highest user ID of the previous page",
                "name": "after"
            }
        ],
        "inherits": "Client#getRESTGuildMembers",
        "inherited": true,
        "overrides": "Client#getRESTGuildMembers"
    },
    {
        "comment": "/**\n    * Get a guild's members via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} memberID The ID of the member\n    * @returns {Promise<Member>}\n    */",
        "meta": {
            "range": [
                94870,
                95210
            ],
            "filename": "Client.js",
            "lineno": 2066,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006264",
                "name": "Client#getRESTGuildMember",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "memberID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getRESTGuildMember",
        "longname": "CommandClient#getRESTGuildMember",
        "kind": "function",
        "description": "Get a guild's members via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Member>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            }
        ],
        "inherits": "Client#getRESTGuildMember",
        "inherited": true,
        "overrides": "Client#getRESTGuildMember"
    },
    {
        "comment": "/**\n    * Get a guild's roles via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} guildID The ID of the guild\n    * @returns {Promise<Role[]>}\n    */",
        "meta": {
            "range": [
                95400,
                95708
            ],
            "filename": "Client.js",
            "lineno": 2078,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006317",
                "name": "Client#getRESTGuildRoles",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getRESTGuildRoles",
        "longname": "CommandClient#getRESTGuildRoles",
        "kind": "function",
        "description": "Get a guild's roles via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Role>>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            }
        ],
        "inherits": "Client#getRESTGuildRoles",
        "inherited": true,
        "overrides": "Client#getRESTGuildRoles"
    },
    {
        "comment": "/**\n    * Get a user's data via the REST API. REST mode is required to use this endpoint.\n    * @arg {String} userID The ID of the user\n    * @returns {Promise<User>}\n    */",
        "meta": {
            "range": [
                95892,
                96163
            ],
            "filename": "Client.js",
            "lineno": 2090,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006367",
                "name": "Client#getRESTUser",
                "type": "MethodDefinition",
                "paramnames": [
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getRESTUser",
        "longname": "CommandClient#getRESTUser",
        "kind": "function",
        "description": "Get a user's data via the REST API. REST mode is required to use this endpoint.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<User>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user",
                "name": "userID"
            }
        ],
        "inherits": "Client#getRESTUser",
        "inherited": true,
        "overrides": "Client#getRESTUser"
    },
    {
        "comment": "/**\n    * Search for guild members by partial nickname/username\n    * @arg {String} guildID The ID of the guild\n    * @arg {String} query The query string to match username(s) and nickname(s) against\n    * @arg {Number} [limit=1] The maximum number of members you want returned, capped at 100\n    * @returns {Promise<Member[]>}\n    */",
        "meta": {
            "range": [
                96508,
                96865
            ],
            "filename": "Client.js",
            "lineno": 2104,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006411",
                "name": "Client#searchGuildMembers",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "query",
                    "limit"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "searchGuildMembers",
        "longname": "CommandClient#searchGuildMembers",
        "kind": "function",
        "description": "Search for guild members by partial nickname/username",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Member>>"
                    ]
                }
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The query string to match username(s) and nickname(s) against",
                "name": "query"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The maximum number of members you want returned, capped at 100",
                "name": "limit"
            }
        ],
        "inherits": "Client#searchGuildMembers",
        "inherited": true,
        "overrides": "Client#searchGuildMembers"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Search a channel's messages\n    * @arg {String} channelID The ID of the channel\n    * @arg {Object} query Search parameters\n    * @arg {String} [query.sortBy=\"timestamp\"] What to sort by, either \"timestamp\" or \"relevance\"\n    * @arg {String} [query.sortOrder=\"desc\"] What order to sort by, either \"asc\" or \"desc\"\n    * @arg {String} [query.content] Filter results by a content string\n    * @arg {String} [query.authorID] Filter results by an author ID\n    * @arg {String} [query.minID] The minimum message ID to return results for\n    * @arg {String} [query.maxID] The maximum message ID to return results for\n    * @arg {Number} [query.limit=25] How many messages to return, 1 <= limit <= 25\n    * @arg {Number} [query.offset=0] The query index of the first message to be returned, 0 <= offset <= 5000\n    * @arg {Number} [query.contextSize=2] How many context messages around each result to return.\n    * For example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned\n    * @arg {String} [query.has] Only return messages with an \"attachment\", \"embed\", or \"link\"\n    * @arg {String} [query.embedProviders] Filter results by embed provider\n    * @arg {String} [query.embedTypes] Filter results by embed type\n    * @arg {String} [query.attachmentExtensions] Filter results by attachment extension\n    * @arg {String} [query.attachmentFilename] Filter results by attachment filename\n    * @returns {Promise<Object>} A search result object. The object will have a `totalResults` key and `results` key.\n    * Each entry in the result array is an array of Message objects.\n    * In each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\n    * Sample return: ```\n    * {\n    *     totalResults: 2,\n    *     results: [\n    *         [Message, Message, Message (Message.hit = true), Message],\n    *         [Message, Message, Message (Message.hit = true), Message, Message]\n    *     ]\n    * }\n    * ```\n    */",
        "meta": {
            "range": [
                98906,
                99849
            ],
            "filename": "Client.js",
            "lineno": 2146,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006465",
                "name": "Client#searchChannelMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "channelID",
                    "query"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "searchChannelMessages",
        "longname": "CommandClient#searchChannelMessages",
        "kind": "function",
        "description": "[USER ACCOUNT] Search a channel's messages",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A search result object. The object will have a `totalResults` key and `results` key.\nEach entry in the result array is an array of Message objects.\nIn each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\nSample return: ```\n{\n    totalResults: 2,\n    results: [\n        [Message, Message, Message (Message.hit = true), Message],\n        [Message, Message, Message (Message.hit = true), Message, Message]\n    ]\n}\n```"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Search parameters",
                "name": "query"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"timestamp\"",
                "description": "What to sort by, either \"timestamp\" or \"relevance\"",
                "name": "query.sortBy"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"desc\"",
                "description": "What order to sort by, either \"asc\" or \"desc\"",
                "name": "query.sortOrder"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by a content string",
                "name": "query.content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by an author ID",
                "name": "query.authorID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The minimum message ID to return results for",
                "name": "query.minID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The maximum message ID to return results for",
                "name": "query.maxID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 25,
                "description": "How many messages to return, 1 <= limit <= 25",
                "name": "query.limit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The query index of the first message to be returned, 0 <= offset <= 5000",
                "name": "query.offset"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 2,
                "description": "How many context messages around each result to return.\nFor example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned",
                "name": "query.contextSize"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Only return messages with an \"attachment\", \"embed\", or \"link\"",
                "name": "query.has"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by embed provider",
                "name": "query.embedProviders"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by embed type",
                "name": "query.embedTypes"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by attachment extension",
                "name": "query.attachmentExtensions"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by attachment filename",
                "name": "query.attachmentFilename"
            }
        ],
        "inherits": "Client#searchChannelMessages",
        "inherited": true,
        "overrides": "Client#searchChannelMessages"
    },
    {
        "comment": "/**\n    * [USER ACCOUNT] Search a guild's messages\n    * @arg {String} guildID The ID of the guild\n    * @arg {Object} query Search parameters\n    * @arg {String} [query.sortBy=\"timestamp\"] What to sort by, either \"timestamp\" or \"relevance\"\n    * @arg {String} [query.sortOrder=\"desc\"] What order to sort by, either \"asc\" or \"desc\"\n    * @arg {String} [query.content] Filter results by a content string\n    * @arg {String} [query.authorID] Filter results by an author ID\n    * @arg {String} [query.minID] The minimum message ID to return results for\n    * @arg {String} [query.maxID] The maximum message ID to return results for\n    * @arg {Number} [query.limit=25] How many messages to return, 1 <= limit <= 25\n    * @arg {Number} [query.offset=0] The query index of the first message to be returned, 0 <= offset <= 5000\n    * @arg {Number} [query.contextSize=2] How many context messages around each result to return.\n    * For example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned\n    * @arg {String} [query.has] Only return messages with an \"attachment\", \"embed\", or \"link\"\n    * @arg {String} [query.embedProviders] Filter results by embed provider\n    * @arg {String} [query.embedTypes] Filter results by embed type\n    * @arg {String} [query.attachmentExtensions] Filter results by attachment extension\n    * @arg {String} [query.attachmentFilename] Filter results by attachment filename\n    * @arg {String[]} [query.channelIDs] Filter results by channel ID\n    * @returns {Promise<Object>} A search result object. The object will have a `totalResults` key and `results` key.\n    * Each entry in the result array is an array of Message objects.\n    * In each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\n    * Sample return: ```\n    * {\n    *     totalResults: 2,\n    *     results: [\n    *         [Message, Message, Message (Message.hit = true), Message],\n    *         [Message, Message, Message (Message.hit = true), Message, Message]\n    *     ]\n    * }\n    * ```\n    */",
        "meta": {
            "range": [
                101954,
                102931
            ],
            "filename": "Client.js",
            "lineno": 2201,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib",
            "code": {
                "id": "astnode100006575",
                "name": "Client#searchGuildMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "guildID",
                    "query"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "searchGuildMessages",
        "longname": "CommandClient#searchGuildMessages",
        "kind": "function",
        "description": "[USER ACCOUNT] Search a guild's messages",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "A search result object. The object will have a `totalResults` key and `results` key.\nEach entry in the result array is an array of Message objects.\nIn each array, the message where `Message.hit === true` is the matched message, while the other messages are context messages.\nSample return: ```\n{\n    totalResults: 2,\n    results: [\n        [Message, Message, Message (Message.hit = true), Message],\n        [Message, Message, Message (Message.hit = true), Message, Message]\n    ]\n}\n```"
            }
        ],
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild",
                "name": "guildID"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Search parameters",
                "name": "query"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"timestamp\"",
                "description": "What to sort by, either \"timestamp\" or \"relevance\"",
                "name": "query.sortBy"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"desc\"",
                "description": "What order to sort by, either \"asc\" or \"desc\"",
                "name": "query.sortOrder"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by a content string",
                "name": "query.content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by an author ID",
                "name": "query.authorID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The minimum message ID to return results for",
                "name": "query.minID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The maximum message ID to return results for",
                "name": "query.maxID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 25,
                "description": "How many messages to return, 1 <= limit <= 25",
                "name": "query.limit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The query index of the first message to be returned, 0 <= offset <= 5000",
                "name": "query.offset"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 2,
                "description": "How many context messages around each result to return.\nFor example, if you searched for `6` and contextSize was 2, `[4, 5, 6, 7, 8]` would be returned",
                "name": "query.contextSize"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Only return messages with an \"attachment\", \"embed\", or \"link\"",
                "name": "query.has"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by embed provider",
                "name": "query.embedProviders"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by embed type",
                "name": "query.embedTypes"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by attachment extension",
                "name": "query.attachmentExtensions"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Filter results by attachment filename",
                "name": "query.attachmentFilename"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Filter results by channel ID",
                "name": "query.channelIDs"
            }
        ],
        "inherits": "Client#searchGuildMessages",
        "inherited": true,
        "overrides": "Client#searchGuildMessages"
    },
    {
        "comment": "/**\n            * Fired when stuff happens and gives more info\n            * @event Client#debug\n            * @prop {String} message The debug message\n            * @prop {Number} id The ID of the shard\n            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 133,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "debug",
        "longname": "CommandClient#event:debug",
        "kind": "event",
        "description": "Fired when stuff happens and gives more info",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The debug message",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "inherits": "Client#event:debug",
        "inherited": true,
        "overrides": "Client#event:debug"
    },
    {
        "comment": "/**\n            * Fired when the shard encounters an error\n            * @event Client#error\n            * @prop {Error} err The error\n            * @prop {Number} id The ID of the shard\n            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 215,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "error",
        "longname": "CommandClient#event:error",
        "kind": "event",
        "description": "Fired when the shard encounters an error",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Error"
                    ]
                },
                "description": "The error",
                "name": "err"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "inherits": "Client#event:error",
        "inherited": true,
        "overrides": "Client#event:error"
    },
    {
        "comment": "/**\n                        * Fired when a user's username, avatar, or discriminator changes\n                        * @event Client#userUpdate\n                        * @prop {User} user The updated user\n                        * @prop {Object?} oldUser The old user data\n                        * @prop {String} oldUser.username The username of the user\n                        * @prop {String} oldUser.discriminator The discriminator of the user\n                        * @prop {String?} oldUser.avatar The hash of the user's avatar, or null if no avatar\n                        */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 261,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "userUpdate",
        "longname": "CommandClient#event:userUpdate",
        "kind": "event",
        "description": "Fired when a user's username, avatar, or discriminator changes",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The updated user",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The old user data",
                "name": "oldUser"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The username of the user",
                "name": "oldUser.username"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The discriminator of the user",
                "name": "oldUser.discriminator"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the user's avatar, or null if no avatar",
                "name": "oldUser.avatar"
            }
        ],
        "inherits": "Client#event:userUpdate",
        "inherited": true,
        "overrides": "Client#event:userUpdate"
    },
    {
        "comment": "/**\n                    * Fired when a guild member or relationship's status or game changes\n                    * @event Client#presenceUpdate\n                    * @prop {Member | Relationship} other The updated member or relationship\n                    * @prop {Object?} oldPresence The old presence data. If the user was offline when the bot started and the client option getAllUsers is not true, this will be null\n                    * @prop {String} oldPresence.status The other user's old status. Either \"online\", \"idle\", or \"offline\"\n                    * @prop {Object?} oldPresence.game The old game the other user was playing\n                    * @prop {String} oldPresence.game.name The name of the active game\n                    * @prop {Number} oldPresence.game.type The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)\n                    * @prop {String} oldPresence.game.url The url of the active game\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 283,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "presenceUpdate",
        "longname": "CommandClient#event:presenceUpdate",
        "kind": "event",
        "description": "Fired when a guild member or relationship's status or game changes",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Member",
                        "Relationship"
                    ]
                },
                "description": "The updated member or relationship",
                "name": "other"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The old presence data. If the user was offline when the bot started and the client option getAllUsers is not true, this will be null",
                "name": "oldPresence"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The other user's old status. Either \"online\", \"idle\", or \"offline\"",
                "name": "oldPresence.status"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The old game the other user was playing",
                "name": "oldPresence.game"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the active game",
                "name": "oldPresence.game.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the active game (0 is default, 1 is Twitch, 2 is YouTube)",
                "name": "oldPresence.game.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The url of the active game",
                "name": "oldPresence.game.url"
            }
        ],
        "inherits": "Client#event:presenceUpdate",
        "inherited": true,
        "overrides": "Client#event:presenceUpdate"
    },
    {
        "comment": "/**\n                            * Fired when a guild member switches voice channels\n                            * @event Client#voiceChannelSwitch\n                            * @prop {Member} member The member\n                            * @prop {VoiceChannel} newChannel The new voice channel\n                            * @prop {VoiceChannel} oldChannel The old voice channel\n                            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 395,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "voiceChannelSwitch",
        "longname": "CommandClient#event:voiceChannelSwitch",
        "kind": "event",
        "description": "Fired when a guild member switches voice channels",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "description": "The member",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "VoiceChannel"
                    ]
                },
                "description": "The new voice channel",
                "name": "newChannel"
            },
            {
                "type": {
                    "names": [
                        "VoiceChannel"
                    ]
                },
                "description": "The old voice channel",
                "name": "oldChannel"
            }
        ],
        "inherits": "Client#event:voiceChannelSwitch",
        "inherited": true,
        "overrides": "Client#event:voiceChannelSwitch"
    },
    {
        "comment": "/**\n                            * Fired when a guild member joins a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`\n                            * @event Client#voiceChannelJoin\n                            * @prop {Member} member The member\n                            * @prop {VoiceChannel} newChannel The voice channel\n                            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 405,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "voiceChannelJoin",
        "longname": "CommandClient#event:voiceChannelJoin",
        "kind": "event",
        "description": "Fired when a guild member joins a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "description": "The member",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "VoiceChannel"
                    ]
                },
                "description": "The voice channel",
                "name": "newChannel"
            }
        ],
        "inherits": "Client#event:voiceChannelJoin",
        "inherited": true,
        "overrides": "Client#event:voiceChannelJoin"
    },
    {
        "comment": "/**\n                        * Fired when a guild member leaves a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`\n                        * @event Client#voiceChannelLeave\n                        * @prop {?Member} member The member\n                        * @prop {VoiceChannel} oldChannel The voice channel\n                        */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 415,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "voiceChannelLeave",
        "longname": "CommandClient#event:voiceChannelLeave",
        "kind": "event",
        "description": "Fired when a guild member leaves a voice channel. This event is not fired when a member switches voice channels, see `voiceChannelSwitch`",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "nullable": true,
                "description": "The member",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "VoiceChannel"
                    ]
                },
                "description": "The voice channel",
                "name": "oldChannel"
            }
        ],
        "inherits": "Client#event:voiceChannelLeave",
        "inherited": true,
        "overrides": "Client#event:voiceChannelLeave"
    },
    {
        "comment": "/**\n                    * Fired when a guild member's voice state changes\n                    * @event Client#voiceStateUpdate\n                    * @prop {Member} member The member\n                    * @prop {Object} oldState The old voice state\n                    * @prop {Boolean} oldState.mute The previous server mute status\n                    * @prop {Boolean} oldState.deaf The previous server deaf status\n                    * @prop {Boolean} oldState.selfMute The previous self mute status\n                    * @prop {Boolean} oldState.selfDeaf The previous self deaf status\n                    * @prop {Boolean} oldState.selfStream The previous self stream status\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 425,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "voiceStateUpdate",
        "longname": "CommandClient#event:voiceStateUpdate",
        "kind": "event",
        "description": "Fired when a guild member's voice state changes",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "description": "The member",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The old voice state",
                "name": "oldState"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "The previous server mute status",
                "name": "oldState.mute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "The previous server deaf status",
                "name": "oldState.deaf"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "The previous self mute status",
                "name": "oldState.selfMute"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "The previous self deaf status",
                "name": "oldState.selfDeaf"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "The previous self stream status",
                "name": "oldState.selfStream"
            }
        ],
        "inherits": "Client#event:voiceStateUpdate",
        "inherited": true,
        "overrides": "Client#event:voiceStateUpdate"
    },
    {
        "comment": "/**\n                    * Fired when a user begins typing\n                    * @event Client#typingStart\n                    * @prop {PrivateChannel | TextChannel} channel The text channel the user is typing in\n                    * @prop {User} user The user\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 442,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "typingStart",
        "longname": "CommandClient#event:typingStart",
        "kind": "event",
        "description": "Fired when a user begins typing",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "PrivateChannel",
                        "TextChannel"
                    ]
                },
                "description": "The text channel the user is typing in",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The user",
                "name": "user"
            }
        ],
        "inherits": "Client#event:typingStart",
        "inherited": true,
        "overrides": "Client#event:typingStart"
    },
    {
        "comment": "/**\n                    * Fired when a message is created\n                    * @event Client#messageCreate\n                    * @prop {Message} message The message\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 456,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "messageCreate",
        "longname": "CommandClient#event:messageCreate",
        "kind": "event",
        "description": "Fired when a message is created",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message"
                    ]
                },
                "description": "The message",
                "name": "message"
            }
        ],
        "inherits": "Client#event:messageCreate",
        "inherited": true,
        "overrides": "Client#event:messageCreate"
    },
    {
        "comment": "/**\n                * Fired when a message is updated\n                * @event Client#messageUpdate\n                * @prop {Message} message The updated message. If oldMessage is null, it is recommended to discard this event, since the message data will be very incomplete (only `id` and `channel` are guaranteed)\n                * @prop {Object?} oldMessage The old message data. If the message was cached, this will return the full old message. Otherwise, it will be null\n                * @prop {Object[]} oldMessage.attachments Array of attachments\n                * @prop {Object[]} oldMessage.embeds Array of embeds\n                * @prop {String} oldMessage.content Message content\n                * @prop {Number} oldMessage.editedTimestamp Timestamp of latest message edit\n                * @prop {Object} oldMessage.mentionedBy Object of if different things mention the bot user\n                * @prop {Boolean} oldMessage.pinned Whether the message was pinned or not\n                * @prop {Boolean} oldMessage.tts Whether to play the message using TTS or not\n                * @prop {String[]} oldMessage.mentions Array of mentioned users' ids\n                * @prop {String[]} oldMessage.roleMentions Array of mentioned roles' ids.\n                * @prop {String[]} oldMessage.channelMentions Array of mentions channels' ids.\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 492,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "messageUpdate",
        "longname": "CommandClient#event:messageUpdate",
        "kind": "event",
        "description": "Fired when a message is updated",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message"
                    ]
                },
                "description": "The updated message. If oldMessage is null, it is recommended to discard this event, since the message data will be very incomplete (only `id` and `channel` are guaranteed)",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The old message data. If the message was cached, this will return the full old message. Otherwise, it will be null",
                "name": "oldMessage"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "Array of attachments",
                "name": "oldMessage.attachments"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "Array of embeds",
                "name": "oldMessage.embeds"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Message content",
                "name": "oldMessage.content"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Timestamp of latest message edit",
                "name": "oldMessage.editedTimestamp"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Object of if different things mention the bot user",
                "name": "oldMessage.mentionedBy"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the message was pinned or not",
                "name": "oldMessage.pinned"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether to play the message using TTS or not",
                "name": "oldMessage.tts"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of mentioned users' ids",
                "name": "oldMessage.mentions"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of mentioned roles' ids.",
                "name": "oldMessage.roleMentions"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of mentions channels' ids.",
                "name": "oldMessage.channelMentions"
            }
        ],
        "inherits": "Client#event:messageUpdate",
        "inherited": true,
        "overrides": "Client#event:messageUpdate"
    },
    {
        "comment": "/**\n                * Fired when a cached message is deleted\n                * @event Client#messageDelete\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 516,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "messageDelete",
        "longname": "CommandClient#event:messageDelete",
        "kind": "event",
        "description": "Fired when a cached message is deleted",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message",
                        "Object"
                    ]
                },
                "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. No other property is guaranteed",
                "name": "message"
            }
        ],
        "inherits": "Client#event:messageDelete",
        "inherited": true,
        "overrides": "Client#event:messageDelete"
    },
    {
        "comment": "/**\n                * Fired when a bulk delete occurs\n                * @event Client#messageDeleteBulk\n                * @prop {Message[] | Object[]} messages An array of (potentially partial) message objects. If a message is not cached, it will be an object with `id` and `channel` keys. No other property is guaranteed\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 533,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "messageDeleteBulk",
        "longname": "CommandClient#event:messageDeleteBulk",
        "kind": "event",
        "description": "Fired when a bulk delete occurs",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<Message>",
                        "Array.<Object>"
                    ]
                },
                "description": "An array of (potentially partial) message objects. If a message is not cached, it will be an object with `id` and `channel` keys. No other property is guaranteed",
                "name": "messages"
            }
        ],
        "inherits": "Client#event:messageDeleteBulk",
        "inherited": true,
        "overrides": "Client#event:messageDeleteBulk"
    },
    {
        "comment": "/**\n                * Fired when someone adds a reaction to a message\n                * @event Client#messageReactionAdd\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed\n                * @prop {Object} emoji The reaction emoji object\n                * @prop {String?} emoji.id The emoji ID (null for non-custom emojis)\n                * @prop {String} emoji.name The emoji name\n                * @prop {String} userID The ID of the user that added the reaction\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 574,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "messageReactionAdd",
        "longname": "CommandClient#event:messageReactionAdd",
        "kind": "event",
        "description": "Fired when someone adds a reaction to a message",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message",
                        "Object"
                    ]
                },
                "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The reaction emoji object",
                "name": "emoji"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The emoji ID (null for non-custom emojis)",
                "name": "emoji.id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The emoji name",
                "name": "emoji.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that added the reaction",
                "name": "userID"
            }
        ],
        "inherits": "Client#event:messageReactionAdd",
        "inherited": true,
        "overrides": "Client#event:messageReactionAdd"
    },
    {
        "comment": "/**\n                * Fired when someone removes a reaction from a message\n                * @event Client#messageReactionRemove\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed\n                * @prop {Object} emoji The reaction emoji object\n                * @prop {String?} emoji.id The ID of the emoji (null for non-custom emojis)\n                * @prop {String} emoji.name The emoji name\n                * @prop {String} userID The ID of the user that removed the reaction\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 607,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "messageReactionRemove",
        "longname": "CommandClient#event:messageReactionRemove",
        "kind": "event",
        "description": "Fired when someone removes a reaction from a message",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message",
                        "Object"
                    ]
                },
                "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The reaction emoji object",
                "name": "emoji"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The ID of the emoji (null for non-custom emojis)",
                "name": "emoji.id"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The emoji name",
                "name": "emoji.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that removed the reaction",
                "name": "userID"
            }
        ],
        "inherits": "Client#event:messageReactionRemove",
        "inherited": true,
        "overrides": "Client#event:messageReactionRemove"
    },
    {
        "comment": "/**\n                * Fired when all reactions are removed from a message\n                * @event Client#messageReactionRemoveAll\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 631,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "messageReactionRemoveAll",
        "longname": "CommandClient#event:messageReactionRemoveAll",
        "kind": "event",
        "description": "Fired when all reactions are removed from a message",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message",
                        "Object"
                    ]
                },
                "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed",
                "name": "message"
            }
        ],
        "inherits": "Client#event:messageReactionRemoveAll",
        "inherited": true,
        "overrides": "Client#event:messageReactionRemoveAll"
    },
    {
        "comment": "/**\n                * Fired when someone removes all reactions from a message for a single emoji\n                * @event Client#messageReactionRemoveEmoji\n                * @prop {Message | Object} message The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed\n                * @prop {Object} emoji The emoji object with a `name` prop. If the emoji is a custom emoji it will also have an `id` prop.\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 652,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "messageReactionRemoveEmoji",
        "longname": "CommandClient#event:messageReactionRemoveEmoji",
        "kind": "event",
        "description": "Fired when someone removes all reactions from a message for a single emoji",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Message",
                        "Object"
                    ]
                },
                "description": "The message object. If the message is not cached, this will be an object with `id` and `channel` keys. If the channel is not cached, channel key will be an object with only an id. No other property is guaranteed",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The emoji object with a `name` prop. If the emoji is a custom emoji it will also have an `id` prop.",
                "name": "emoji"
            }
        ],
        "inherits": "Client#event:messageReactionRemoveEmoji",
        "inherited": true,
        "overrides": "Client#event:messageReactionRemoveEmoji"
    },
    {
        "comment": "/**\n                * Fired when a member joins a server\n                * @event Client#guildMemberAdd\n                * @prop {Guild} guild The guild\n                * @prop {Member} member The member\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 672,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildMemberAdd",
        "longname": "CommandClient#event:guildMemberAdd",
        "kind": "event",
        "description": "Fired when a member joins a server",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "description": "The member",
                "name": "member"
            }
        ],
        "inherits": "Client#event:guildMemberAdd",
        "inherited": true,
        "overrides": "Client#event:guildMemberAdd"
    },
    {
        "comment": "/**\n                * Fired when a member's roles or nickname are updated\n                * @event Client#guildMemberUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Member} member The updated member\n                * @prop {Object?} oldMember The old member data\n                * @prop {String[]} oldMember.roles An array of role IDs this member is a part of\n                * @prop {String?} oldMember.nick The server nickname of the member\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 721,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildMemberUpdate",
        "longname": "CommandClient#event:guildMemberUpdate",
        "kind": "event",
        "description": "Fired when a member's roles or nickname are updated",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Member"
                    ]
                },
                "description": "The updated member",
                "name": "member"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "nullable": true,
                "description": "The old member data",
                "name": "oldMember"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "An array of role IDs this member is a part of",
                "name": "oldMember.roles"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The server nickname of the member",
                "name": "oldMember.nick"
            }
        ],
        "inherits": "Client#event:guildMemberUpdate",
        "inherited": true,
        "overrides": "Client#event:guildMemberUpdate"
    },
    {
        "comment": "/**\n                * Fired when a member leaves a server\n                * @event Client#guildMemberRemove\n                * @prop {Guild} guild The guild\n                * @prop {Member | Object} member The member. If the member is not cached, this will be an object with `id` and `user` key\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 743,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildMemberRemove",
        "longname": "CommandClient#event:guildMemberRemove",
        "kind": "event",
        "description": "Fired when a member leaves a server",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Member",
                        "Object"
                    ]
                },
                "description": "The member. If the member is not cached, this will be an object with `id` and `user` key",
                "name": "member"
            }
        ],
        "inherits": "Client#event:guildMemberRemove",
        "inherited": true,
        "overrides": "Client#event:guildMemberRemove"
    },
    {
        "comment": "/**\n                            * Fired when a guild becomes available\n                            * @event Client#guildAvailable\n                            * @prop {Guild} guild The guild\n                            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 760,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildAvailable",
        "longname": "CommandClient#event:guildAvailable",
        "kind": "event",
        "description": "Fired when a guild becomes available",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            }
        ],
        "inherits": "Client#event:guildAvailable",
        "inherited": true,
        "overrides": "Client#event:guildAvailable"
    },
    {
        "comment": "/**\n                            * Fired when a guild is created. This happens when:\n                            * - the client creates a guild\n                            * - the client joins a guild\n                            * @event Client#guildCreate\n                            * @prop {Guild} guild The guild\n                            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 767,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildCreate",
        "longname": "CommandClient#event:guildCreate",
        "kind": "event",
        "description": "Fired when a guild is created. This happens when:\n- the client creates a guild\n- the client joins a guild",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            }
        ],
        "inherits": "Client#event:guildCreate",
        "inherited": true,
        "overrides": "Client#event:guildCreate"
    },
    {
        "comment": "/**\n                    * Fired when an unavailable guild is created\n                    * @event Client#unavailableGuildCreate\n                    * @prop {UnavailableGuild} guild The unavailable guild\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 782,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "unavailableGuildCreate",
        "longname": "CommandClient#event:unavailableGuildCreate",
        "kind": "event",
        "description": "Fired when an unavailable guild is created",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "UnavailableGuild"
                    ]
                },
                "description": "The unavailable guild",
                "name": "guild"
            }
        ],
        "inherits": "Client#event:unavailableGuildCreate",
        "inherited": true,
        "overrides": "Client#event:unavailableGuildCreate"
    },
    {
        "comment": "/**\n                * Fired when a guild is updated\n                * @event Client#guildUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Object} oldGuild The old guild data\n                * @prop {String} oldGuild.name The name of the guild\n                * @prop {Number} oldGuild.verificationLevel The guild verification level\n                * @prop {String} oldGuild.region The region of the guild\n                * @prop {String?} oldGuild.icon The hash of the guild icon, or null if no icon\n                * @prop {String} oldGuild.afkChannelID The ID of the AFK voice channel\n                * @prop {Number} oldGuild.afkTimeout The AFK timeout in seconds\n                * @prop {String} oldGuild.ownerID The ID of the user that is the guild owner\n                * @prop {String?} oldGuild.splash The hash of the guild splash image, or null if no splash (VIP only)\n                * @prop {String?} oldGuild.banner The hash of the guild banner image, or null if no splash (VIP only)\n                * @prop {Object[]} oldGuild.features An array of guild features\n                * @prop {Object[]} oldGuild.emojis An array of guild emojis\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 816,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildUpdate",
        "longname": "CommandClient#event:guildUpdate",
        "kind": "event",
        "description": "Fired when a guild is updated",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The old guild data",
                "name": "oldGuild"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the guild",
                "name": "oldGuild.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The guild verification level",
                "name": "oldGuild.verificationLevel"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The region of the guild",
                "name": "oldGuild.region"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild icon, or null if no icon",
                "name": "oldGuild.icon"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the AFK voice channel",
                "name": "oldGuild.afkChannelID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The AFK timeout in seconds",
                "name": "oldGuild.afkTimeout"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the user that is the guild owner",
                "name": "oldGuild.ownerID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild splash image, or null if no splash (VIP only)",
                "name": "oldGuild.splash"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The hash of the guild banner image, or null if no splash (VIP only)",
                "name": "oldGuild.banner"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "An array of guild features",
                "name": "oldGuild.features"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ]
                },
                "description": "An array of guild emojis",
                "name": "oldGuild.emojis"
            }
        ],
        "inherits": "Client#event:guildUpdate",
        "inherited": true,
        "overrides": "Client#event:guildUpdate"
    },
    {
        "comment": "/**\n                    * Fired when a guild becomes unavailable\n                    * @event Client#guildUnavailable\n                    * @prop {Guild} guild The guild\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 854,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildUnavailable",
        "longname": "CommandClient#event:guildUnavailable",
        "kind": "event",
        "description": "Fired when a guild becomes unavailable",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            }
        ],
        "inherits": "Client#event:guildUnavailable",
        "inherited": true,
        "overrides": "Client#event:guildUnavailable"
    },
    {
        "comment": "/**\n                    * Fired when a guild is deleted. This happens when:\n                    * - the client left the guild\n                    * - the client was kicked/banned from the guild\n                    * - the guild was literally deleted\n                    * @event Client#guildDelete\n                    * @prop {Guild} guild The guild\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 861,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildDelete",
        "longname": "CommandClient#event:guildDelete",
        "kind": "event",
        "description": "Fired when a guild is deleted. This happens when:\n- the client left the guild\n- the client was kicked/banned from the guild\n- the guild was literally deleted",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            }
        ],
        "inherits": "Client#event:guildDelete",
        "inherited": true,
        "overrides": "Client#event:guildDelete"
    },
    {
        "comment": "/**\n                * Fired when a user is banned from a guild\n                * @event Client#guildBanAdd\n                * @prop {Guild} guild The guild\n                * @prop {User} user The banned user\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 876,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildBanAdd",
        "longname": "CommandClient#event:guildBanAdd",
        "kind": "event",
        "description": "Fired when a user is banned from a guild",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The banned user",
                "name": "user"
            }
        ],
        "inherits": "Client#event:guildBanAdd",
        "inherited": true,
        "overrides": "Client#event:guildBanAdd"
    },
    {
        "comment": "/**\n                * Fired when a user is unbanned from a guild\n                * @event Client#guildBanRemove\n                * @prop {Guild} guild The guild\n                * @prop {User} user The banned user\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 886,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildBanRemove",
        "longname": "CommandClient#event:guildBanRemove",
        "kind": "event",
        "description": "Fired when a user is unbanned from a guild",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The banned user",
                "name": "user"
            }
        ],
        "inherits": "Client#event:guildBanRemove",
        "inherited": true,
        "overrides": "Client#event:guildBanRemove"
    },
    {
        "comment": "/**\n                * Fired when a guild role is created\n                * @event Client#guildRoleCreate\n                * @prop {Guild} guild The guild\n                * @prop {Role} role The role\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 896,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildRoleCreate",
        "longname": "CommandClient#event:guildRoleCreate",
        "kind": "event",
        "description": "Fired when a guild role is created",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Role"
                    ]
                },
                "description": "The role",
                "name": "role"
            }
        ],
        "inherits": "Client#event:guildRoleCreate",
        "inherited": true,
        "overrides": "Client#event:guildRoleCreate"
    },
    {
        "comment": "/**\n                * Fired when a guild role is updated\n                * @event Client#guildRoleUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Role} role The updated role\n                * @prop {Object} oldRole The old role data\n                * @prop {String} oldRole.name The name of the role\n                * @prop {Boolean} oldRole.mentionable Whether the role is mentionable or not\n                * @prop {Boolean} oldRole.managed Whether a guild integration manages this role or not\n                * @prop {Boolean} oldRole.hoist Whether users with this role are hoisted in the user list or not\n                * @prop {Number} oldRole.color The hex color of the role in base 10\n                * @prop {Number} oldRole.position The position of the role\n                * @prop {Permission} oldRole.permissions The permissions number of the role\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 933,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildRoleUpdate",
        "longname": "CommandClient#event:guildRoleUpdate",
        "kind": "event",
        "description": "Fired when a guild role is updated",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Role"
                    ]
                },
                "description": "The updated role",
                "name": "role"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The old role data",
                "name": "oldRole"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the role",
                "name": "oldRole.name"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the role is mentionable or not",
                "name": "oldRole.mentionable"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether a guild integration manages this role or not",
                "name": "oldRole.managed"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether users with this role are hoisted in the user list or not",
                "name": "oldRole.hoist"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The hex color of the role in base 10",
                "name": "oldRole.color"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the role",
                "name": "oldRole.position"
            },
            {
                "type": {
                    "names": [
                        "Permission"
                    ]
                },
                "description": "The permissions number of the role",
                "name": "oldRole.permissions"
            }
        ],
        "inherits": "Client#event:guildRoleUpdate",
        "inherited": true,
        "overrides": "Client#event:guildRoleUpdate"
    },
    {
        "comment": "/**\n                * Fired when a guild role is deleted\n                * @event Client#guildRoleDelete\n                * @prop {Guild} guild The guild\n                * @prop {Role} role The role\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 951,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildRoleDelete",
        "longname": "CommandClient#event:guildRoleDelete",
        "kind": "event",
        "description": "Fired when a guild role is deleted",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Role"
                    ]
                },
                "description": "The role",
                "name": "role"
            }
        ],
        "inherits": "Client#event:guildRoleDelete",
        "inherited": true,
        "overrides": "Client#event:guildRoleDelete"
    },
    {
        "comment": "/**\n                * Fired when a guild invite is created\n                * @event Client#inviteCreate\n                * @prop {Guild} guild The guild this invite was created in.\n                * @prop {Invite} invite The invite that was created\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 980,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "inviteCreate",
        "longname": "CommandClient#event:inviteCreate",
        "kind": "event",
        "description": "Fired when a guild invite is created",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild this invite was created in.",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Invite"
                    ]
                },
                "description": "The invite that was created",
                "name": "invite"
            }
        ],
        "inherits": "Client#event:inviteCreate",
        "inherited": true,
        "overrides": "Client#event:inviteCreate"
    },
    {
        "comment": "/**\n                * Fired when a guild invite is deleted\n                * @event Client#inviteDelete\n                * @prop {Guild} guild The guild this invite was created in.\n                * @prop {Invite} invite The invite that was deleted\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1004,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "inviteDelete",
        "longname": "CommandClient#event:inviteDelete",
        "kind": "event",
        "description": "Fired when a guild invite is deleted",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild this invite was created in.",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Invite"
                    ]
                },
                "description": "The invite that was deleted",
                "name": "invite"
            }
        ],
        "inherits": "Client#event:inviteDelete",
        "inherited": true,
        "overrides": "Client#event:inviteDelete"
    },
    {
        "comment": "/**\n                    * Fired when a channel is created\n                    * @event Client#channelCreate\n                    * @prop {TextChannel | VoiceChannel | CategoryChannel | StoreChannel | NewsChannel | GuildChannel | PrivateChannel} channel The channel\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1029,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "channelCreate",
        "longname": "CommandClient#event:channelCreate",
        "kind": "event",
        "description": "Fired when a channel is created",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "TextChannel",
                        "VoiceChannel",
                        "CategoryChannel",
                        "StoreChannel",
                        "NewsChannel",
                        "GuildChannel",
                        "PrivateChannel"
                    ]
                },
                "description": "The channel",
                "name": "channel"
            }
        ],
        "inherits": "Client#event:channelCreate",
        "inherited": true,
        "overrides": "Client#event:channelCreate"
    },
    {
        "comment": "/**\n                * Fired when a channel is updated\n                * @event Client#channelUpdate\n                * @prop {TextChannel | VoiceChannel | CategoryChannel | StoreChannel | NewsChannel | GuildChannel | PrivateChannel} channel The updated channel\n                * @prop {Object} oldChannel The old channel data\n                * @prop {String} oldChannel.name The name of the channel\n                * @prop {Number} oldChannel.position The position of the channel\n                * @prop {Boolean} oldChannel.nsfw Whether the channel is NSFW or not\n                * @prop {String?} oldChannel.topic The topic of the channel (text channels only)\n                * @prop {Number} oldChannel.type The type of the old channel\n                * @prop {Number?} oldChannel.bitrate The bitrate of the channel (voice channels only)\n                * @prop {Collection} oldChannel.permissionOverwrites Collection of PermissionOverwrites in this channel\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1107,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "channelUpdate",
        "longname": "CommandClient#event:channelUpdate",
        "kind": "event",
        "description": "Fired when a channel is updated",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "TextChannel",
                        "VoiceChannel",
                        "CategoryChannel",
                        "StoreChannel",
                        "NewsChannel",
                        "GuildChannel",
                        "PrivateChannel"
                    ]
                },
                "description": "The updated channel",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The old channel data",
                "name": "oldChannel"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the channel",
                "name": "oldChannel.name"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The position of the channel",
                "name": "oldChannel.position"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the channel is NSFW or not",
                "name": "oldChannel.nsfw"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The topic of the channel (text channels only)",
                "name": "oldChannel.topic"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The type of the old channel",
                "name": "oldChannel.type"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The bitrate of the channel (voice channels only)",
                "name": "oldChannel.bitrate"
            },
            {
                "type": {
                    "names": [
                        "Collection"
                    ]
                },
                "description": "Collection of PermissionOverwrites in this channel",
                "name": "oldChannel.permissionOverwrites"
            }
        ],
        "inherits": "Client#event:channelUpdate",
        "inherited": true,
        "overrides": "Client#event:channelUpdate"
    },
    {
        "comment": "/**\n                            * Fired when a channel is deleted\n                            * @event Client#channelDelete\n                            * @prop {PrivateChannel | TextChannel | VoiceChannel | CategoryChannel} channel The channel\n                            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1129,
            "columnno": 28,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "channelDelete",
        "longname": "CommandClient#event:channelDelete",
        "kind": "event",
        "description": "Fired when a channel is deleted",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "PrivateChannel",
                        "TextChannel",
                        "VoiceChannel",
                        "CategoryChannel"
                    ]
                },
                "description": "The channel",
                "name": "channel"
            }
        ],
        "inherits": "Client#event:channelDelete",
        "inherited": true,
        "overrides": "Client#event:channelDelete"
    },
    {
        "comment": "/**\n                * Fired when a call is created\n                * @event Client#callCreate\n                * @prop {Call} call The call\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1191,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "callCreate",
        "longname": "CommandClient#event:callCreate",
        "kind": "event",
        "description": "Fired when a call is created",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Call"
                    ]
                },
                "description": "The call",
                "name": "call"
            }
        ],
        "inherits": "Client#event:callCreate",
        "inherited": true,
        "overrides": "Client#event:callCreate"
    },
    {
        "comment": "/**\n                * Fired when a call is updated\n                * @event Client#callUpdate\n                * @prop {Call} call The updated call\n                * @prop {Object} oldCall The old call data\n                * @prop {String[]} oldCall.participants The IDs of the call participants\n                * @prop {Number?} oldCall.endedTimestamp The timestamp of the call end\n                * @prop {String[]?} oldCall.ringing The IDs of people that were being rung\n                * @prop {String?} oldCall.region The region of the call server\n                * @prop {Boolean} oldCall.unavailable Whether the call was unavailable or not\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1211,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "callUpdate",
        "longname": "CommandClient#event:callUpdate",
        "kind": "event",
        "description": "Fired when a call is updated",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Call"
                    ]
                },
                "description": "The updated call",
                "name": "call"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The old call data",
                "name": "oldCall"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "The IDs of the call participants",
                "name": "oldCall.participants"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "nullable": true,
                "description": "The timestamp of the call end",
                "name": "oldCall.endedTimestamp"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "nullable": true,
                "description": "The IDs of people that were being rung",
                "name": "oldCall.ringing"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "nullable": true,
                "description": "The region of the call server",
                "name": "oldCall.region"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the call was unavailable or not",
                "name": "oldCall.unavailable"
            }
        ],
        "inherits": "Client#event:callUpdate",
        "inherited": true,
        "overrides": "Client#event:callUpdate"
    },
    {
        "comment": "/**\n                * Fired when a call is deleted\n                * @event Client#callDelete\n                * @prop {Call} call The call\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1232,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "callDelete",
        "longname": "CommandClient#event:callDelete",
        "kind": "event",
        "description": "Fired when a call is deleted",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Call"
                    ]
                },
                "description": "The call",
                "name": "call"
            }
        ],
        "inherits": "Client#event:callDelete",
        "inherited": true,
        "overrides": "Client#event:callDelete"
    },
    {
        "comment": "/**\n                * Fired when a user joins a group channel\n                * @event Client#channelRecipientAdd\n                * @prop {GroupChannel} channel The channel\n                * @prop {User} user The user\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1242,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "channelRecipientAdd",
        "longname": "CommandClient#event:channelRecipientAdd",
        "kind": "event",
        "description": "Fired when a user joins a group channel",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "GroupChannel"
                    ]
                },
                "description": "The channel",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The user",
                "name": "user"
            }
        ],
        "inherits": "Client#event:channelRecipientAdd",
        "inherited": true,
        "overrides": "Client#event:channelRecipientAdd"
    },
    {
        "comment": "/**\n                * Fired when a user leaves a group channel\n                * @event Client#channelRecipientRemove\n                * @prop {GroupChannel} channel The channel\n                * @prop {User} user The user\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1253,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "channelRecipientRemove",
        "longname": "CommandClient#event:channelRecipientRemove",
        "kind": "event",
        "description": "Fired when a user leaves a group channel",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "GroupChannel"
                    ]
                },
                "description": "The channel",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The user",
                "name": "user"
            }
        ],
        "inherits": "Client#event:channelRecipientRemove",
        "inherited": true,
        "overrides": "Client#event:channelRecipientRemove"
    },
    {
        "comment": "/**\n                * Fired when a client receives a friend suggestion\n                * @event Client#friendSuggestionCreate\n                * @prop {User} user The suggested user\n                * @prop {String[]} reasons Array of reasons why this suggestion was made\n                * @prop {Number} reasons.type Type of reason?\n                * @prop {String} reasons.platform_type Platform you share with the user\n                * @prop {String} reasons.name Username of suggested user on that platform\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1263,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "friendSuggestionCreate",
        "longname": "CommandClient#event:friendSuggestionCreate",
        "kind": "event",
        "description": "Fired when a client receives a friend suggestion",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The suggested user",
                "name": "user"
            },
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of reasons why this suggestion was made",
                "name": "reasons"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "Type of reason?",
                "name": "reasons.type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Platform you share with the user",
                "name": "reasons.platform_type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Username of suggested user on that platform",
                "name": "reasons.name"
            }
        ],
        "inherits": "Client#event:friendSuggestionCreate",
        "inherited": true,
        "overrides": "Client#event:friendSuggestionCreate"
    },
    {
        "comment": "/**\n                * Fired when a client's friend suggestion is removed for any reason\n                * @event Client#friendSuggestionDelete\n                * @prop {User} user The suggested user\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1276,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "friendSuggestionDelete",
        "longname": "CommandClient#event:friendSuggestionDelete",
        "kind": "event",
        "description": "Fired when a client's friend suggestion is removed for any reason",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "User"
                    ]
                },
                "description": "The suggested user",
                "name": "user"
            }
        ],
        "inherits": "Client#event:friendSuggestionDelete",
        "inherited": true,
        "overrides": "Client#event:friendSuggestionDelete"
    },
    {
        "comment": "/**\n                * Fired when Discord sends member chunks\n                * @event Client#guildMemberChunk\n                * @prop {Guild} guild The guild the chunked members are in\n                * @prop {Array<Member>} members The members in the chunk\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1321,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildMemberChunk",
        "longname": "CommandClient#event:guildMemberChunk",
        "kind": "event",
        "description": "Fired when Discord sends member chunks",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild the chunked members are in",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Array.<Member>"
                    ]
                },
                "description": "The members in the chunk",
                "name": "members"
            }
        ],
        "inherits": "Client#event:guildMemberChunk",
        "inherited": true,
        "overrides": "Client#event:guildMemberChunk"
    },
    {
        "comment": "/**\n                * Fired when a shard finishes processing the ready packet\n                * @event Client#shardPreReady\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1464,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "shardPreReady",
        "longname": "CommandClient#event:shardPreReady",
        "kind": "event",
        "description": "Fired when a shard finishes processing the ready packet",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "inherits": "Client#event:shardPreReady",
        "inherited": true,
        "overrides": "Client#event:shardPreReady"
    },
    {
        "comment": "/**\n                    * Fired when a relationship is updated\n                    * @event Client#relationshipUpdate\n                    * @prop {Relationship} relationship The relationship\n                    * @prop {Object} oldRelationship The old relationship data\n                    * @prop {Number} oldRelationship.type The old type of the relationship\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1505,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "relationshipUpdate",
        "longname": "CommandClient#event:relationshipUpdate",
        "kind": "event",
        "description": "Fired when a relationship is updated",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Relationship"
                    ]
                },
                "description": "The relationship",
                "name": "relationship"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The old relationship data",
                "name": "oldRelationship"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The old type of the relationship",
                "name": "oldRelationship.type"
            }
        ],
        "inherits": "Client#event:relationshipUpdate",
        "inherited": true,
        "overrides": "Client#event:relationshipUpdate"
    },
    {
        "comment": "/**\n                    * Fired when a relationship is added\n                    * @event Client#relationshipAdd\n                    * @prop {Relationship} relationship The relationship\n                    */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1514,
            "columnno": 20,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "relationshipAdd",
        "longname": "CommandClient#event:relationshipAdd",
        "kind": "event",
        "description": "Fired when a relationship is added",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Relationship"
                    ]
                },
                "description": "The relationship",
                "name": "relationship"
            }
        ],
        "inherits": "Client#event:relationshipAdd",
        "inherited": true,
        "overrides": "Client#event:relationshipAdd"
    },
    {
        "comment": "/**\n                * Fired when a relationship is removed\n                * @event Client#relationshipRemove\n                * @prop {Relationship} relationship The relationship\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1527,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "relationshipRemove",
        "longname": "CommandClient#event:relationshipRemove",
        "kind": "event",
        "description": "Fired when a relationship is removed",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Relationship"
                    ]
                },
                "description": "The relationship",
                "name": "relationship"
            }
        ],
        "inherits": "Client#event:relationshipRemove",
        "inherited": true,
        "overrides": "Client#event:relationshipRemove"
    },
    {
        "comment": "/**\n                * Fired when a guild's emojis are updated\n                * @event Client#guildEmojisUpdate\n                * @prop {Guild} guild The guild\n                * @prop {Array} emojis The updated emojis of the guild\n                * @prop {Array} oldEmojis The old emojis of the guild\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1539,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "guildEmojisUpdate",
        "longname": "CommandClient#event:guildEmojisUpdate",
        "kind": "event",
        "description": "Fired when a guild's emojis are updated",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Guild"
                    ]
                },
                "description": "The guild",
                "name": "guild"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The updated emojis of the guild",
                "name": "emojis"
            },
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "The old emojis of the guild",
                "name": "oldEmojis"
            }
        ],
        "inherits": "Client#event:guildEmojisUpdate",
        "inherited": true,
        "overrides": "Client#event:guildEmojisUpdate"
    },
    {
        "comment": "/**\n                * Fired when a channel pin timestamp is updated\n                * @event Client#channelPinUpdate\n                * @prop {PrivateChannel | TextChannel} channel The channel\n                * @prop {Number} timestamp The new timestamp\n                * @prop {Number} oldTimestamp The old timestamp\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1557,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "channelPinUpdate",
        "longname": "CommandClient#event:channelPinUpdate",
        "kind": "event",
        "description": "Fired when a channel pin timestamp is updated",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "PrivateChannel",
                        "TextChannel"
                    ]
                },
                "description": "The channel",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new timestamp",
                "name": "timestamp"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The old timestamp",
                "name": "oldTimestamp"
            }
        ],
        "inherits": "Client#event:channelPinUpdate",
        "inherited": true,
        "overrides": "Client#event:channelPinUpdate"
    },
    {
        "comment": "/**\n                * Fired when a channel's webhooks are updated\n                * @event Client#webhooksUpdate\n                * @prop {Object} data The update data\n                * @prop {String} channelID The ID of the channel that webhooks were updated in\n                * @prop {String} guildID The ID of the guild that webhooks were updated in\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1568,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "webhooksUpdate",
        "longname": "CommandClient#event:webhooksUpdate",
        "kind": "event",
        "description": "Fired when a channel's webhooks are updated",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The update data",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the channel that webhooks were updated in",
                "name": "channelID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the guild that webhooks were updated in",
                "name": "guildID"
            }
        ],
        "inherits": "Client#event:webhooksUpdate",
        "inherited": true,
        "overrides": "Client#event:webhooksUpdate"
    },
    {
        "comment": "/**\n                * Fired when the shard encounters an unknown packet\n                * @event Client#unknown\n                * @prop {Object} packet The unknown packet\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1615,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "unknown",
        "longname": "CommandClient#event:unknown",
        "kind": "event",
        "description": "Fired when the shard encounters an unknown packet",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The unknown packet",
                "name": "packet"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "inherits": "Client#event:unknown",
        "inherited": true,
        "overrides": "Client#event:unknown"
    },
    {
        "comment": "/**\n        * Fired when the shard establishes a connection\n        * @event Client#connect\n        * @prop {Number} id The ID of the shard\n        */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1755,
            "columnno": 8,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "connect",
        "longname": "CommandClient#event:connect",
        "kind": "event",
        "description": "Fired when the shard establishes a connection",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "inherits": "Client#event:connect",
        "inherited": true,
        "overrides": "Client#event:connect"
    },
    {
        "comment": "/**\n            * Fired when the shard receives a websocket packet\n            * @event Client#rawWS\n            * @prop {Object} packet The packet\n            * @prop {Number} id The ID of the shard\n            */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1897,
            "columnno": 12,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "rawWS",
        "longname": "CommandClient#event:rawWS",
        "kind": "event",
        "description": "Fired when the shard receives a websocket packet",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The packet",
                "name": "packet"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "inherits": "Client#event:rawWS",
        "inherited": true,
        "overrides": "Client#event:rawWS"
    },
    {
        "comment": "/**\n                * Fired to warn of something weird but non-breaking happening\n                * @event Client#warn\n                * @prop {String} message The warning message\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1908,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "warn",
        "longname": "CommandClient#event:warn",
        "kind": "event",
        "description": "Fired to warn of something weird but non-breaking happening",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The warning message",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "inherits": "Client#event:warn",
        "inherited": true,
        "overrides": "Client#event:warn"
    },
    {
        "comment": "/**\n                * Fired when a shard receives an OP:10/HELLO packet\n                * @event Client#hello\n                * @prop {String[]} trace The Discord server trace of the gateway and session servers\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "Shard.js",
            "lineno": 1965,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "hello",
        "longname": "CommandClient#event:hello",
        "kind": "event",
        "description": "Fired when a shard receives an OP:10/HELLO packet",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "The Discord server trace of the gateway and session servers",
                "name": "trace"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "inherits": "Client#event:hello",
        "inherited": true,
        "overrides": "Client#event:hello"
    },
    {
        "comment": "/**\n                * Fired when a shard turns ready\n                * @event Client#shardReady\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "ShardManager.js",
            "lineno": 51,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "shardReady",
        "longname": "CommandClient#event:shardReady",
        "kind": "event",
        "description": "Fired when a shard turns ready",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "inherits": "Client#event:shardReady",
        "inherited": true,
        "overrides": "Client#event:shardReady"
    },
    {
        "comment": "/**\n                * Fired when all shards turn ready\n                * @event Client#ready\n                */",
        "meta": {
            "filename": "ShardManager.js",
            "lineno": 67,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "ready",
        "longname": "CommandClient#event:ready",
        "kind": "event",
        "description": "Fired when all shards turn ready",
        "memberof": "CommandClient",
        "scope": "instance",
        "inherits": "Client#event:ready",
        "inherited": true,
        "overrides": "Client#event:ready"
    },
    {
        "comment": "/**\n                * Fired when a shard resumes\n                * @event Client#shardResume\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "ShardManager.js",
            "lineno": 73,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "shardResume",
        "longname": "CommandClient#event:shardResume",
        "kind": "event",
        "description": "Fired when a shard resumes",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "inherits": "Client#event:shardResume",
        "inherited": true,
        "overrides": "Client#event:shardResume"
    },
    {
        "comment": "/**\n                * Fired when a shard disconnects\n                * @event Client#shardDisconnect\n                * @prop {Error?} error The error, if any\n                * @prop {Number} id The ID of the shard\n                */",
        "meta": {
            "filename": "ShardManager.js",
            "lineno": 91,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "shardDisconnect",
        "longname": "CommandClient#event:shardDisconnect",
        "kind": "event",
        "description": "Fired when a shard disconnects",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Error"
                    ]
                },
                "nullable": true,
                "description": "The error, if any",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The ID of the shard",
                "name": "id"
            }
        ],
        "inherits": "Client#event:shardDisconnect",
        "inherited": true,
        "overrides": "Client#event:shardDisconnect"
    },
    {
        "comment": "/**\n                * Fired when all shards disconnect\n                * @event Client#disconnect\n                */",
        "meta": {
            "filename": "ShardManager.js",
            "lineno": 105,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/gateway",
            "code": {}
        },
        "name": "disconnect",
        "longname": "CommandClient#event:disconnect",
        "kind": "event",
        "description": "Fired when all shards disconnect",
        "memberof": "CommandClient",
        "scope": "instance",
        "inherits": "Client#event:disconnect",
        "inherited": true,
        "overrides": "Client#event:disconnect"
    },
    {
        "comment": "/**\n                         * Fired when the Client's RuquestHandler receives a response\n                         * @event Client#rawREST\n                         * @arg {Object} [request] The data for the request.\n                         * @arg {String} request.method Uppercase HTTP method\n                         * @arg {String} request.url URL of the endpoint\n                         * @arg {Boolean} request.auth True if the request required an authorization token\n                         * @arg {Object} [request.body] The request payload\n                         * @arg {Object} [request.file] The file object sent in the request\n                         * @arg {Buffer} request.file.file A buffer containing file data\n                         * @arg {String} request.file.name The name of the file\n                         * @arg {String} request.route The calculated ratelimiting route for the request\n                         * @arg {Boolean} request.short Whether or not the request was prioritized in its ratelimiting queue\n                         * @arg {IncomingMessage} request.resp The HTTP response to the request\n                         */",
        "meta": {
            "filename": "RequestHandler.js",
            "lineno": 170,
            "columnno": 24,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/rest",
            "code": {}
        },
        "name": "rawREST",
        "longname": "CommandClient#event:rawREST",
        "kind": "event",
        "description": "Fired when the Client's RuquestHandler receives a response",
        "memberof": "CommandClient",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "The data for the request.",
                "name": "request"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Uppercase HTTP method",
                "name": "request.method"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "URL of the endpoint",
                "name": "request.url"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "True if the request required an authorization token",
                "name": "request.auth"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "The request payload",
                "name": "request.body"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "The file object sent in the request",
                "name": "request.file"
            },
            {
                "type": {
                    "names": [
                        "Buffer"
                    ]
                },
                "description": "A buffer containing file data",
                "name": "request.file.file"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the file",
                "name": "request.file.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The calculated ratelimiting route for the request",
                "name": "request.route"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether or not the request was prioritized in its ratelimiting queue",
                "name": "request.short"
            },
            {
                "type": {
                    "names": [
                        "IncomingMessage"
                    ]
                },
                "description": "The HTTP response to the request",
                "name": "request.resp"
            }
        ],
        "inherits": "Client#event:rawREST",
        "inherited": true,
        "overrides": "Client#event:rawREST"
    },
    {
        "comment": "/**\n                * Fired when the bot user is rung in a call\n                * @event Client#callRing\n                * @prop {Call} call The call\n                */",
        "meta": {
            "filename": "Call.js",
            "lineno": 38,
            "columnno": 16,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {}
        },
        "name": "callRing",
        "longname": "CommandClient#event:callRing",
        "kind": "event",
        "description": "Fired when the bot user is rung in a call",
        "memberof": "CommandClient",
        "scope": "instance",
        "properties": [
            {
                "type": {
                    "names": [
                        "Call"
                    ]
                },
                "description": "The call",
                "name": "call"
            }
        ],
        "inherits": "Client#event:callRing",
        "inherited": true,
        "overrides": "Client#event:callRing"
    },
    {
        "comment": "/**\n    * Get the channel-specific permissions of a member\n    * @arg {String} memberID The ID of the member\n    * @returns {Permission}\n    */",
        "meta": {
            "range": [
                2130,
                3091
            ],
            "filename": "GuildChannel.js",
            "lineno": 59,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029659",
                "name": "GuildChannel#permissionsOf",
                "type": "MethodDefinition",
                "paramnames": [
                    "memberID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "permissionsOf",
        "longname": "CategoryChannel#permissionsOf",
        "kind": "function",
        "description": "Get the channel-specific permissions of a member",
        "returns": [
            {
                "type": {
                    "names": [
                        "Permission"
                    ]
                }
            }
        ],
        "memberof": "CategoryChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            }
        ],
        "inherits": "GuildChannel#permissionsOf",
        "inherited": true
    },
    {
        "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
        "meta": {
            "range": [
                4102,
                4215
            ],
            "filename": "GuildChannel.js",
            "lineno": 98,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029805",
                "name": "GuildChannel#edit",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "edit",
        "longname": "CategoryChannel#edit",
        "kind": "function",
        "description": "Edit the channel's properties",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|TextChannel|VoiceChannel|NewsChannel)>"
                    ]
                }
            }
        ],
        "memberof": "CategoryChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the channel",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The topic of the channel (guild text channels only)",
                "name": "options.topic"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The bitrate of the channel (guild voice channels only)",
                "name": "options.bitrate"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The channel user limit (guild voice channels only)",
                "name": "options.userLimit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
                "name": "options.rateLimitPerUser"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "The nsfw status of the channel",
                "name": "options.nsfw"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
                "name": "options.parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#edit",
        "inherited": true
    },
    {
        "comment": "/**\n    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4437,
                4552
            ],
            "filename": "GuildChannel.js",
            "lineno": 107,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029828",
                "name": "GuildChannel#editPosition",
                "type": "MethodDefinition",
                "paramnames": [
                    "position"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editPosition",
        "longname": "CategoryChannel#editPosition",
        "kind": "function",
        "description": "Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CategoryChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new position of the channel",
                "name": "position"
            }
        ],
        "inherits": "GuildChannel#editPosition",
        "inherited": true
    },
    {
        "comment": "/**\n    * Delete the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4693,
                4792
            ],
            "filename": "GuildChannel.js",
            "lineno": 116,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029849",
                "name": "GuildChannel#delete",
                "type": "MethodDefinition",
                "paramnames": [
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "delete",
        "longname": "CategoryChannel#delete",
        "kind": "function",
        "description": "Delete the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CategoryChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#delete",
        "inherited": true
    },
    {
        "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<PermissionOverwrite>}\n    */",
        "meta": {
            "range": [
                5273,
                5452
            ],
            "filename": "GuildChannel.js",
            "lineno": 129,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029870",
                "name": "GuildChannel#editPermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "overwriteID",
                    "allow",
                    "deny",
                    "type",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editPermission",
        "longname": "CategoryChannel#editPermission",
        "kind": "function",
        "description": "Create a channel permission overwrite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<PermissionOverwrite>"
                    ]
                }
            }
        ],
        "memberof": "CategoryChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for allowed permissions",
                "name": "allow"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for denied permissions",
                "name": "deny"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The object type of the overwrite, either \"member\" or \"role\"",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#editPermission",
        "inherited": true
    },
    {
        "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                5683,
                5828
            ],
            "filename": "GuildChannel.js",
            "lineno": 139,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029899",
                "name": "GuildChannel#deletePermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "overwriteID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deletePermission",
        "longname": "CategoryChannel#deletePermission",
        "kind": "function",
        "description": "Delete a channel permission overwrite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "CategoryChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#deletePermission",
        "inherited": true
    },
    {
        "comment": "/**\n    * Get the channel-specific permissions of a member\n    * @arg {String} memberID The ID of the member\n    * @returns {Permission}\n    */",
        "meta": {
            "range": [
                2130,
                3091
            ],
            "filename": "GuildChannel.js",
            "lineno": 59,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029659",
                "name": "GuildChannel#permissionsOf",
                "type": "MethodDefinition",
                "paramnames": [
                    "memberID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "permissionsOf",
        "longname": "TextChannel#permissionsOf",
        "kind": "function",
        "description": "Get the channel-specific permissions of a member",
        "returns": [
            {
                "type": {
                    "names": [
                        "Permission"
                    ]
                }
            }
        ],
        "memberof": "TextChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            }
        ],
        "inherits": "GuildChannel#permissionsOf",
        "inherited": true,
        "overrides": "GuildChannel#permissionsOf"
    },
    {
        "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
        "meta": {
            "range": [
                4102,
                4215
            ],
            "filename": "GuildChannel.js",
            "lineno": 98,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029805",
                "name": "GuildChannel#edit",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "edit",
        "longname": "TextChannel#edit",
        "kind": "function",
        "description": "Edit the channel's properties",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|TextChannel|VoiceChannel|NewsChannel)>"
                    ]
                }
            }
        ],
        "memberof": "TextChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the channel",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The topic of the channel (guild text channels only)",
                "name": "options.topic"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The bitrate of the channel (guild voice channels only)",
                "name": "options.bitrate"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The channel user limit (guild voice channels only)",
                "name": "options.userLimit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
                "name": "options.rateLimitPerUser"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "The nsfw status of the channel",
                "name": "options.nsfw"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
                "name": "options.parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#edit",
        "inherited": true,
        "overrides": "GuildChannel#edit"
    },
    {
        "comment": "/**\n    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4437,
                4552
            ],
            "filename": "GuildChannel.js",
            "lineno": 107,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029828",
                "name": "GuildChannel#editPosition",
                "type": "MethodDefinition",
                "paramnames": [
                    "position"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editPosition",
        "longname": "TextChannel#editPosition",
        "kind": "function",
        "description": "Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "TextChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new position of the channel",
                "name": "position"
            }
        ],
        "inherits": "GuildChannel#editPosition",
        "inherited": true,
        "overrides": "GuildChannel#editPosition"
    },
    {
        "comment": "/**\n    * Delete the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4693,
                4792
            ],
            "filename": "GuildChannel.js",
            "lineno": 116,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029849",
                "name": "GuildChannel#delete",
                "type": "MethodDefinition",
                "paramnames": [
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "delete",
        "longname": "TextChannel#delete",
        "kind": "function",
        "description": "Delete the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "TextChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#delete",
        "inherited": true,
        "overrides": "GuildChannel#delete"
    },
    {
        "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<PermissionOverwrite>}\n    */",
        "meta": {
            "range": [
                5273,
                5452
            ],
            "filename": "GuildChannel.js",
            "lineno": 129,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029870",
                "name": "GuildChannel#editPermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "overwriteID",
                    "allow",
                    "deny",
                    "type",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editPermission",
        "longname": "TextChannel#editPermission",
        "kind": "function",
        "description": "Create a channel permission overwrite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<PermissionOverwrite>"
                    ]
                }
            }
        ],
        "memberof": "TextChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for allowed permissions",
                "name": "allow"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for denied permissions",
                "name": "deny"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The object type of the overwrite, either \"member\" or \"role\"",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#editPermission",
        "inherited": true,
        "overrides": "GuildChannel#editPermission"
    },
    {
        "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                5683,
                5828
            ],
            "filename": "GuildChannel.js",
            "lineno": 139,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029899",
                "name": "GuildChannel#deletePermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "overwriteID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deletePermission",
        "longname": "TextChannel#deletePermission",
        "kind": "function",
        "description": "Delete a channel permission overwrite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "TextChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#deletePermission",
        "inherited": true,
        "overrides": "GuildChannel#deletePermission"
    },
    {
        "comment": "/**\n    * Get all invites in the channel\n    * @returns {Promise<Invite[]>}\n    */",
        "meta": {
            "range": [
                2043,
                2136
            ],
            "filename": "TextChannel.js",
            "lineno": 49,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034917",
                "name": "TextChannel#getInvites",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getInvites",
        "longname": "NewsChannel#getInvites",
        "kind": "function",
        "description": "Get all invites in the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Invite>>"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "inherits": "TextChannel#getInvites",
        "inherited": true,
        "overrides": "TextChannel#getInvites"
    },
    {
        "comment": "/**\n    * Create an invite for the channel\n    * @arg {Object} [options] Invite generation options\n    * @arg {Number} [options.maxAge] How long the invite should last in seconds\n    * @arg {Number} [options.maxUses] How many uses the invite should last for\n    * @arg {Boolean} [options.temporary] Whether the invite grants temporary membership or not\n    * @arg {Boolean} [options.unique] Whether the invite is unique or not\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Invite>}\n    */",
        "meta": {
            "range": [
                2683,
                2812
            ],
            "filename": "TextChannel.js",
            "lineno": 63,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034936",
                "name": "TextChannel#createInvite",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "createInvite",
        "longname": "NewsChannel#createInvite",
        "kind": "function",
        "description": "Create an invite for the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Invite>"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "Invite generation options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "How long the invite should last in seconds",
                "name": "options.maxAge"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "How many uses the invite should last for",
                "name": "options.maxUses"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the invite grants temporary membership or not",
                "name": "options.temporary"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether the invite is unique or not",
                "name": "options.unique"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "TextChannel#createInvite",
        "inherited": true,
        "overrides": "TextChannel#createInvite"
    },
    {
        "comment": "/**\n    * Get all the webhooks in the channel\n    * @returns {Promise<Object[]>} Resolves with an array of webhook objects\n    */",
        "meta": {
            "range": [
                2952,
                3047
            ],
            "filename": "TextChannel.js",
            "lineno": 71,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034959",
                "name": "TextChannel#getWebhooks",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getWebhooks",
        "longname": "NewsChannel#getWebhooks",
        "kind": "function",
        "description": "Get all the webhooks in the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Object>>"
                    ]
                },
                "description": "Resolves with an array of webhook objects"
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "inherits": "TextChannel#getWebhooks",
        "inherited": true,
        "overrides": "TextChannel#getWebhooks"
    },
    {
        "comment": "/**\n    * Create a channel webhook\n    * @arg {Object} options Webhook options\n    * @arg {String} options.name The default name\n    * @arg {String} options.avatar The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Object>} Resolves with a webhook object\n    */",
        "meta": {
            "range": [
                3462,
                3593
            ],
            "filename": "TextChannel.js",
            "lineno": 83,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100034978",
                "name": "TextChannel#createWebhook",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "createWebhook",
        "longname": "NewsChannel#createWebhook",
        "kind": "function",
        "description": "Create a channel webhook",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Object>"
                    ]
                },
                "description": "Resolves with a webhook object"
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Webhook options",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The default name",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The default avatar as a base64 data URI. Note: base64 strings alone are not base64 data URI strings",
                "name": "options.avatar"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "TextChannel#createWebhook",
        "inherited": true,
        "overrides": "TextChannel#createWebhook"
    },
    {
        "comment": "/**\n    * Bulk delete messages (bot accounts only)\n    * @arg {String[]} messageIDs Array of message IDs to delete\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                3820,
                3952
            ],
            "filename": "TextChannel.js",
            "lineno": 93,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035001",
                "name": "TextChannel#deleteMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageIDs",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteMessages",
        "longname": "NewsChannel#deleteMessages",
        "kind": "function",
        "description": "Bulk delete messages (bot accounts only)",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<String>"
                    ]
                },
                "description": "Array of message IDs to delete",
                "name": "messageIDs"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "TextChannel#deleteMessages",
        "inherited": true,
        "overrides": "TextChannel#deleteMessages"
    },
    {
        "comment": "/**\n    * Purge previous messages in the channel with an optional filter (bot accounts only)\n    * @arg {Number} limit The max number of messages to search through, -1 for no limit\n    * @arg {function} [filter] Optional filter function that returns a boolean when passed a Message object\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<Number>} Resolves with the number of messages deleted\n    */",
        "meta": {
            "range": [
                4534,
                4691
            ],
            "filename": "TextChannel.js",
            "lineno": 106,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035024",
                "name": "TextChannel#purge",
                "type": "MethodDefinition",
                "paramnames": [
                    "limit",
                    "filter",
                    "before",
                    "after",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "purge",
        "longname": "NewsChannel#purge",
        "kind": "function",
        "description": "Purge previous messages in the channel with an optional filter (bot accounts only)",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Number>"
                    ]
                },
                "description": "Resolves with the number of messages deleted"
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The max number of messages to search through, -1 for no limit",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "Optional filter function that returns a boolean when passed a Message object",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages before this message ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages after this message ID",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "TextChannel#purge",
        "inherited": true,
        "overrides": "TextChannel#purge"
    },
    {
        "comment": "/**\n    * Send typing status in the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4777,
                4870
            ],
            "filename": "TextChannel.js",
            "lineno": 114,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035053",
                "name": "TextChannel#sendTyping",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "sendTyping",
        "longname": "NewsChannel#sendTyping",
        "kind": "function",
        "description": "Send typing status in the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "inherits": "TextChannel#sendTyping",
        "inherited": true,
        "overrides": "TextChannel#sendTyping"
    },
    {
        "comment": "/**\n    * Get a previous message in the channel\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                5021,
                5127
            ],
            "filename": "TextChannel.js",
            "lineno": 123,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035072",
                "name": "TextChannel#getMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getMessage",
        "longname": "NewsChannel#getMessage",
        "kind": "function",
        "description": "Get a previous message in the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "TextChannel#getMessage",
        "inherited": true,
        "overrides": "TextChannel#getMessage"
    },
    {
        "comment": "/**\n    * Get previous messages in the channel\n    * @arg {Number} [limit=50] The max number of messages to get\n    * @arg {String} [before] Get messages before this message ID\n    * @arg {String} [after] Get messages after this message ID\n    * @arg {String} [around] Get messages around this message ID (does not work with limit > 100)\n    * @returns {Promise<Message[]>}\n    */",
        "meta": {
            "range": [
                5518,
                5664
            ],
            "filename": "TextChannel.js",
            "lineno": 135,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035093",
                "name": "TextChannel#getMessages",
                "type": "MethodDefinition",
                "paramnames": [
                    "limit",
                    "before",
                    "after",
                    "around"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getMessages",
        "longname": "NewsChannel#getMessages",
        "kind": "function",
        "description": "Get previous messages in the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Message>>"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 50,
                "description": "The max number of messages to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages before this message ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages after this message ID",
                "name": "after"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get messages around this message ID (does not work with limit > 100)",
                "name": "around"
            }
        ],
        "inherits": "TextChannel#getMessages",
        "inherited": true,
        "overrides": "TextChannel#getMessages"
    },
    {
        "comment": "/**\n    * Get all the pins in the channel\n    * @returns {Promise<Message[]>}\n    */",
        "meta": {
            "range": [
                5759,
                5839
            ],
            "filename": "TextChannel.js",
            "lineno": 143,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035120",
                "name": "TextChannel#getPins",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "name": "getPins",
        "longname": "NewsChannel#getPins",
        "kind": "function",
        "description": "Get all the pins in the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<Message>>"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "inherits": "TextChannel#getPins",
        "inherited": true,
        "overrides": "TextChannel#getPins"
    },
    {
        "comment": "/**\n    * Create a message in the channel\n    * Note: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user\n    * @arg {String | Object} content A string or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.tts] Set the message TTS flag\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Object} [file] A file object\n    * @arg {Buffer} file.file A buffer containing file data\n    * @arg {String} file.name What to name the file\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                7129,
                7249
            ],
            "filename": "TextChannel.js",
            "lineno": 163,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035139",
                "name": "TextChannel#createMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "content",
                    "file"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "createMessage",
        "longname": "NewsChannel#createMessage",
        "kind": "function",
        "description": "Create a message in the channel\nNote: If you want to DM someone, the user ID is **not** the DM channel ID. use Client.getDMChannel() to get the DM channel ID for a user",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String",
                        "Object"
                    ]
                },
                "description": "A string or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Set the message TTS flag",
                "name": "content.tts"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A file object",
                "name": "file"
            },
            {
                "type": {
                    "names": [
                        "Buffer"
                    ]
                },
                "description": "A buffer containing file data",
                "name": "file.file"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "What to name the file",
                "name": "file.name"
            }
        ],
        "inherits": "TextChannel#createMessage",
        "inherited": true,
        "overrides": "TextChannel#createMessage"
    },
    {
        "comment": "/**\n    * Edit a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String | Array | Object} content A string, array of strings, or object. If an object is passed:\n    * @arg {String} content.content A content string\n    * @arg {Boolean} [content.disableEveryone] Whether to filter @everyone/@here or not (overrides default)\n    * @arg {Object} [content.embed] An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure\n    * @arg {Number} [content.flags] A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference\n    * @arg {Object} [content.allowedMentions] A list of mentions to allow (overrides default)\n    * @arg {Boolean} [content.allowedMentions.everyone] Whether or not to allow @everyone/@here.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.roles] Whether or not to allow all role mentions, or an array of specific role mentions to allow.\n    * @arg {Boolean | Array<String>} [content.allowedMentions.users] Whether or not to allow all user mentions, or an array of specific user mentions to allow.\n    * @returns {Promise<Message>}\n    */",
        "meta": {
            "range": [
                8604,
                8730
            ],
            "filename": "TextChannel.js",
            "lineno": 181,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035162",
                "name": "TextChannel#editMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "content"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editMessage",
        "longname": "NewsChannel#editMessage",
        "kind": "function",
        "description": "Edit a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Message>"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String",
                        "Array",
                        "Object"
                    ]
                },
                "description": "A string, array of strings, or object. If an object is passed:",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "A content string",
                "name": "content.content"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether to filter @everyone/@here or not (overrides default)",
                "name": "content.disableEveryone"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "An embed object. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#embed-object) for object structure",
                "name": "content.embed"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "A number representing the flags to apply to the message. See [the official Discord API documentation entry](https://discordapp.com/developers/docs/resources/channel#message-object-message-flags) for flags reference",
                "name": "content.flags"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "optional": true,
                "description": "A list of mentions to allow (overrides default)",
                "name": "content.allowedMentions"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow @everyone/@here.",
                "name": "content.allowedMentions.everyone"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all role mentions, or an array of specific role mentions to allow.",
                "name": "content.allowedMentions.roles"
            },
            {
                "type": {
                    "names": [
                        "Boolean",
                        "Array.<String>"
                    ]
                },
                "optional": true,
                "description": "Whether or not to allow all user mentions, or an array of specific user mentions to allow.",
                "name": "content.allowedMentions.users"
            }
        ],
        "inherits": "TextChannel#editMessage",
        "inherited": true,
        "overrides": "TextChannel#editMessage"
    },
    {
        "comment": "/**\n    * Pin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                8848,
                8954
            ],
            "filename": "TextChannel.js",
            "lineno": 190,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035185",
                "name": "TextChannel#pinMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "pinMessage",
        "longname": "NewsChannel#pinMessage",
        "kind": "function",
        "description": "Pin a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "TextChannel#pinMessage",
        "inherited": true,
        "overrides": "TextChannel#pinMessage"
    },
    {
        "comment": "/**\n    * Unpin a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                9074,
                9184
            ],
            "filename": "TextChannel.js",
            "lineno": 199,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035206",
                "name": "TextChannel#unpinMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "unpinMessage",
        "longname": "NewsChannel#unpinMessage",
        "kind": "function",
        "description": "Unpin a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "TextChannel#unpinMessage",
        "inherited": true,
        "overrides": "TextChannel#unpinMessage"
    },
    {
        "comment": "/**\n    * Get a list of users who reacted with a specific reaction\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {Number} [limit=100] The maximum number of users to get\n    * @arg {String} [before] Get users before this user ID\n    * @arg {String} [after] Get users after this user ID\n    * @returns {Promise<User[]>}\n    */",
        "meta": {
            "range": [
                9649,
                9835
            ],
            "filename": "TextChannel.js",
            "lineno": 212,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035227",
                "name": "TextChannel#getMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction",
                    "limit",
                    "before",
                    "after"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "getMessageReaction",
        "longname": "NewsChannel#getMessageReaction",
        "kind": "function",
        "description": "Get a list of users who reacted with a specific reaction",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<Array.<User>>"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "defaultvalue": 100,
                "description": "The maximum number of users to get",
                "name": "limit"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users before this user ID",
                "name": "before"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "Get users after this user ID",
                "name": "after"
            }
        ],
        "inherits": "TextChannel#getMessageReaction",
        "inherited": true,
        "overrides": "TextChannel#getMessageReaction"
    },
    {
        "comment": "/**\n    * Add a reaction to a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to react as\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                10146,
                10304
            ],
            "filename": "TextChannel.js",
            "lineno": 223,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035256",
                "name": "TextChannel#addMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "addMessageReaction",
        "longname": "NewsChannel#addMessageReaction",
        "kind": "function",
        "description": "Add a reaction to a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to react as",
                "name": "userID"
            }
        ],
        "inherits": "TextChannel#addMessageReaction",
        "inherited": true,
        "overrides": "TextChannel#addMessageReaction"
    },
    {
        "comment": "/**\n    * Remove a reaction from a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @arg {String} [userID=\"@me\"] The ID of the user to remove the reaction for\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                10635,
                10799
            ],
            "filename": "TextChannel.js",
            "lineno": 234,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035281",
                "name": "TextChannel#removeMessageReaction",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction",
                    "userID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "removeMessageReaction",
        "longname": "NewsChannel#removeMessageReaction",
        "kind": "function",
        "description": "Remove a reaction from a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"@me\"",
                "description": "The ID of the user to remove the reaction for",
                "name": "userID"
            }
        ],
        "inherits": "TextChannel#removeMessageReaction",
        "inherited": true,
        "overrides": "TextChannel#removeMessageReaction"
    },
    {
        "comment": "/**\n    * Remove all reactions from a message\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                10939,
                11069
            ],
            "filename": "TextChannel.js",
            "lineno": 243,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035306",
                "name": "TextChannel#removeMessageReactions",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "removeMessageReactions",
        "longname": "NewsChannel#removeMessageReactions",
        "kind": "function",
        "description": "Remove all reactions from a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "TextChannel#removeMessageReactions",
        "inherited": true,
        "overrides": "TextChannel#removeMessageReactions"
    },
    {
        "comment": "/**\n    * Remove all reactions from a message for a single emoji\n    * @arg {String} messageID The ID of the message\n    * @arg {String} reaction The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                11341,
                11499
            ],
            "filename": "TextChannel.js",
            "lineno": 253,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035327",
                "name": "TextChannel#removeMessageReactionEmoji",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reaction"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "removeMessageReactionEmoji",
        "longname": "NewsChannel#removeMessageReactionEmoji",
        "kind": "function",
        "description": "Remove all reactions from a message for a single emoji",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The reaction (Unicode string if Unicode emoji, `emojiName:emojiID` if custom emoji)",
                "name": "reaction"
            }
        ],
        "inherits": "TextChannel#removeMessageReactionEmoji",
        "inherited": true,
        "overrides": "TextChannel#removeMessageReactionEmoji"
    },
    {
        "comment": "/**\n    * Delete a message\n    * @arg {String} messageID The ID of the message\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                11690,
                11818
            ],
            "filename": "TextChannel.js",
            "lineno": 263,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035350",
                "name": "TextChannel#deleteMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deleteMessage",
        "longname": "NewsChannel#deleteMessage",
        "kind": "function",
        "description": "Delete a message",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "TextChannel#deleteMessage",
        "inherited": true,
        "overrides": "TextChannel#deleteMessage"
    },
    {
        "comment": "/**\n    * Un-send a message. You're welcome Programmix\n    * @arg {String} messageID The ID of the message\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                11967,
                12079
            ],
            "filename": "TextChannel.js",
            "lineno": 272,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100035373",
                "name": "TextChannel#unsendMessage",
                "type": "MethodDefinition",
                "paramnames": [
                    "messageID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "unsendMessage",
        "longname": "NewsChannel#unsendMessage",
        "kind": "function",
        "description": "Un-send a message. You're welcome Programmix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the message",
                "name": "messageID"
            }
        ],
        "inherits": "TextChannel#unsendMessage",
        "inherited": true,
        "overrides": "TextChannel#unsendMessage"
    },
    {
        "comment": "/**\n    * Get the channel-specific permissions of a member\n    * @arg {String} memberID The ID of the member\n    * @returns {Permission}\n    */",
        "meta": {
            "range": [
                2130,
                3091
            ],
            "filename": "GuildChannel.js",
            "lineno": 59,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029659",
                "name": "GuildChannel#permissionsOf",
                "type": "MethodDefinition",
                "paramnames": [
                    "memberID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "permissionsOf",
        "longname": "NewsChannel#permissionsOf",
        "kind": "function",
        "description": "Get the channel-specific permissions of a member",
        "returns": [
            {
                "type": {
                    "names": [
                        "Permission"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "inherits": "GuildChannel#permissionsOf",
        "inherited": true,
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            }
        ],
        "overrides": "TextChannel#permissionsOf"
    },
    {
        "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
        "meta": {
            "range": [
                4102,
                4215
            ],
            "filename": "GuildChannel.js",
            "lineno": 98,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029805",
                "name": "GuildChannel#edit",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "edit",
        "longname": "NewsChannel#edit",
        "kind": "function",
        "description": "Edit the channel's properties",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|TextChannel|VoiceChannel|NewsChannel)>"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "inherits": "GuildChannel#edit",
        "inherited": true,
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the channel",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The topic of the channel (guild text channels only)",
                "name": "options.topic"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The bitrate of the channel (guild voice channels only)",
                "name": "options.bitrate"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The channel user limit (guild voice channels only)",
                "name": "options.userLimit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
                "name": "options.rateLimitPerUser"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "The nsfw status of the channel",
                "name": "options.nsfw"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
                "name": "options.parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "overrides": "TextChannel#edit"
    },
    {
        "comment": "/**\n    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4437,
                4552
            ],
            "filename": "GuildChannel.js",
            "lineno": 107,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029828",
                "name": "GuildChannel#editPosition",
                "type": "MethodDefinition",
                "paramnames": [
                    "position"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editPosition",
        "longname": "NewsChannel#editPosition",
        "kind": "function",
        "description": "Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "inherits": "GuildChannel#editPosition",
        "inherited": true,
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new position of the channel",
                "name": "position"
            }
        ],
        "overrides": "TextChannel#editPosition"
    },
    {
        "comment": "/**\n    * Delete the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4693,
                4792
            ],
            "filename": "GuildChannel.js",
            "lineno": 116,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029849",
                "name": "GuildChannel#delete",
                "type": "MethodDefinition",
                "paramnames": [
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "delete",
        "longname": "NewsChannel#delete",
        "kind": "function",
        "description": "Delete the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "inherits": "GuildChannel#delete",
        "inherited": true,
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "overrides": "TextChannel#delete"
    },
    {
        "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<PermissionOverwrite>}\n    */",
        "meta": {
            "range": [
                5273,
                5452
            ],
            "filename": "GuildChannel.js",
            "lineno": 129,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029870",
                "name": "GuildChannel#editPermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "overwriteID",
                    "allow",
                    "deny",
                    "type",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editPermission",
        "longname": "NewsChannel#editPermission",
        "kind": "function",
        "description": "Create a channel permission overwrite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<PermissionOverwrite>"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "inherits": "GuildChannel#editPermission",
        "inherited": true,
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for allowed permissions",
                "name": "allow"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for denied permissions",
                "name": "deny"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The object type of the overwrite, either \"member\" or \"role\"",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "overrides": "TextChannel#editPermission"
    },
    {
        "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                5683,
                5828
            ],
            "filename": "GuildChannel.js",
            "lineno": 139,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029899",
                "name": "GuildChannel#deletePermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "overwriteID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deletePermission",
        "longname": "NewsChannel#deletePermission",
        "kind": "function",
        "description": "Delete a channel permission overwrite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "NewsChannel",
        "scope": "instance",
        "inherits": "GuildChannel#deletePermission",
        "inherited": true,
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "overrides": "TextChannel#deletePermission"
    },
    {
        "comment": "/**\n    * Get the channel-specific permissions of a member\n    * @arg {String} memberID The ID of the member\n    * @returns {Permission}\n    */",
        "meta": {
            "range": [
                2130,
                3091
            ],
            "filename": "GuildChannel.js",
            "lineno": 59,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029659",
                "name": "GuildChannel#permissionsOf",
                "type": "MethodDefinition",
                "paramnames": [
                    "memberID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "permissionsOf",
        "longname": "StoreChannel#permissionsOf",
        "kind": "function",
        "description": "Get the channel-specific permissions of a member",
        "returns": [
            {
                "type": {
                    "names": [
                        "Permission"
                    ]
                }
            }
        ],
        "memberof": "StoreChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            }
        ],
        "inherits": "GuildChannel#permissionsOf",
        "inherited": true
    },
    {
        "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
        "meta": {
            "range": [
                4102,
                4215
            ],
            "filename": "GuildChannel.js",
            "lineno": 98,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029805",
                "name": "GuildChannel#edit",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "edit",
        "longname": "StoreChannel#edit",
        "kind": "function",
        "description": "Edit the channel's properties",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|TextChannel|VoiceChannel|NewsChannel)>"
                    ]
                }
            }
        ],
        "memberof": "StoreChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the channel",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The topic of the channel (guild text channels only)",
                "name": "options.topic"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The bitrate of the channel (guild voice channels only)",
                "name": "options.bitrate"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The channel user limit (guild voice channels only)",
                "name": "options.userLimit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
                "name": "options.rateLimitPerUser"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "The nsfw status of the channel",
                "name": "options.nsfw"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
                "name": "options.parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#edit",
        "inherited": true
    },
    {
        "comment": "/**\n    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4437,
                4552
            ],
            "filename": "GuildChannel.js",
            "lineno": 107,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029828",
                "name": "GuildChannel#editPosition",
                "type": "MethodDefinition",
                "paramnames": [
                    "position"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editPosition",
        "longname": "StoreChannel#editPosition",
        "kind": "function",
        "description": "Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "StoreChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new position of the channel",
                "name": "position"
            }
        ],
        "inherits": "GuildChannel#editPosition",
        "inherited": true
    },
    {
        "comment": "/**\n    * Delete the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4693,
                4792
            ],
            "filename": "GuildChannel.js",
            "lineno": 116,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029849",
                "name": "GuildChannel#delete",
                "type": "MethodDefinition",
                "paramnames": [
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "delete",
        "longname": "StoreChannel#delete",
        "kind": "function",
        "description": "Delete the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "StoreChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#delete",
        "inherited": true
    },
    {
        "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<PermissionOverwrite>}\n    */",
        "meta": {
            "range": [
                5273,
                5452
            ],
            "filename": "GuildChannel.js",
            "lineno": 129,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029870",
                "name": "GuildChannel#editPermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "overwriteID",
                    "allow",
                    "deny",
                    "type",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editPermission",
        "longname": "StoreChannel#editPermission",
        "kind": "function",
        "description": "Create a channel permission overwrite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<PermissionOverwrite>"
                    ]
                }
            }
        ],
        "memberof": "StoreChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for allowed permissions",
                "name": "allow"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for denied permissions",
                "name": "deny"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The object type of the overwrite, either \"member\" or \"role\"",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#editPermission",
        "inherited": true
    },
    {
        "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                5683,
                5828
            ],
            "filename": "GuildChannel.js",
            "lineno": 139,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029899",
                "name": "GuildChannel#deletePermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "overwriteID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deletePermission",
        "longname": "StoreChannel#deletePermission",
        "kind": "function",
        "description": "Delete a channel permission overwrite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "StoreChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#deletePermission",
        "inherited": true
    },
    {
        "comment": "/**\n    * Get the channel-specific permissions of a member\n    * @arg {String} memberID The ID of the member\n    * @returns {Permission}\n    */",
        "meta": {
            "range": [
                2130,
                3091
            ],
            "filename": "GuildChannel.js",
            "lineno": 59,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029659",
                "name": "GuildChannel#permissionsOf",
                "type": "MethodDefinition",
                "paramnames": [
                    "memberID"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "permissionsOf",
        "longname": "VoiceChannel#permissionsOf",
        "kind": "function",
        "description": "Get the channel-specific permissions of a member",
        "returns": [
            {
                "type": {
                    "names": [
                        "Permission"
                    ]
                }
            }
        ],
        "memberof": "VoiceChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the member",
                "name": "memberID"
            }
        ],
        "inherits": "GuildChannel#permissionsOf",
        "inherited": true,
        "overrides": "GuildChannel#permissionsOf"
    },
    {
        "comment": "/**\n    * Edit the channel's properties\n    * @arg {Object} options The properties to edit\n    * @arg {String} [options.name] The name of the channel\n    * @arg {String} [options.topic] The topic of the channel (guild text channels only)\n    * @arg {Number} [options.bitrate] The bitrate of the channel (guild voice channels only)\n    * @arg {Number} [options.userLimit] The channel user limit (guild voice channels only)\n    * @arg {Number} [options.rateLimitPerUser] The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)\n    * @arg {Boolean} [options.nsfw] The nsfw status of the channel\n    * @arg {Number?} [options.parentID] The ID of the parent channel category for this channel (guild text/voice channels only)\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<CategoryChannel | TextChannel | VoiceChannel | NewsChannel>}\n    */",
        "meta": {
            "range": [
                4102,
                4215
            ],
            "filename": "GuildChannel.js",
            "lineno": 98,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029805",
                "name": "GuildChannel#edit",
                "type": "MethodDefinition",
                "paramnames": [
                    "options",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "edit",
        "longname": "VoiceChannel#edit",
        "kind": "function",
        "description": "Edit the channel's properties",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<(CategoryChannel|TextChannel|VoiceChannel|NewsChannel)>"
                    ]
                }
            }
        ],
        "memberof": "VoiceChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The properties to edit",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The name of the channel",
                "name": "options.name"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The topic of the channel (guild text channels only)",
                "name": "options.topic"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The bitrate of the channel (guild voice channels only)",
                "name": "options.bitrate"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The channel user limit (guild voice channels only)",
                "name": "options.userLimit"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "description": "The time in seconds a user has to wait before sending another message (does not affect bots or users with manageMessages/manageChannel permissions) (guild text channels only)",
                "name": "options.rateLimitPerUser"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "description": "The nsfw status of the channel",
                "name": "options.nsfw"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "optional": true,
                "nullable": true,
                "description": "The ID of the parent channel category for this channel (guild text/voice channels only)",
                "name": "options.parentID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#edit",
        "inherited": true,
        "overrides": "GuildChannel#edit"
    },
    {
        "comment": "/**\n    * Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.\n    * @arg {Number} position The new position of the channel\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4437,
                4552
            ],
            "filename": "GuildChannel.js",
            "lineno": 107,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029828",
                "name": "GuildChannel#editPosition",
                "type": "MethodDefinition",
                "paramnames": [
                    "position"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editPosition",
        "longname": "VoiceChannel#editPosition",
        "kind": "function",
        "description": "Edit the channel's position. Note that channel position numbers are lowest on top and highest at the bottom.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "VoiceChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The new position of the channel",
                "name": "position"
            }
        ],
        "inherits": "GuildChannel#editPosition",
        "inherited": true,
        "overrides": "GuildChannel#editPosition"
    },
    {
        "comment": "/**\n    * Delete the channel\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                4693,
                4792
            ],
            "filename": "GuildChannel.js",
            "lineno": 116,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029849",
                "name": "GuildChannel#delete",
                "type": "MethodDefinition",
                "paramnames": [
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "delete",
        "longname": "VoiceChannel#delete",
        "kind": "function",
        "description": "Delete the channel",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "VoiceChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#delete",
        "inherited": true,
        "overrides": "GuildChannel#delete"
    },
    {
        "comment": "/**\n    * Create a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {Number} allow The permissions number for allowed permissions\n    * @arg {Number} deny The permissions number for denied permissions\n    * @arg {String} type The object type of the overwrite, either \"member\" or \"role\"\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise<PermissionOverwrite>}\n    */",
        "meta": {
            "range": [
                5273,
                5452
            ],
            "filename": "GuildChannel.js",
            "lineno": 129,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029870",
                "name": "GuildChannel#editPermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "overwriteID",
                    "allow",
                    "deny",
                    "type",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "editPermission",
        "longname": "VoiceChannel#editPermission",
        "kind": "function",
        "description": "Create a channel permission overwrite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<PermissionOverwrite>"
                    ]
                }
            }
        ],
        "memberof": "VoiceChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for allowed permissions",
                "name": "allow"
            },
            {
                "type": {
                    "names": [
                        "Number"
                    ]
                },
                "description": "The permissions number for denied permissions",
                "name": "deny"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The object type of the overwrite, either \"member\" or \"role\"",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#editPermission",
        "inherited": true,
        "overrides": "GuildChannel#editPermission"
    },
    {
        "comment": "/**\n    * Delete a channel permission overwrite\n    * @arg {String} overwriteID The ID of the overwritten user or role\n    * @arg {String} [reason] The reason to be displayed in audit logs\n    * @returns {Promise}\n    */",
        "meta": {
            "range": [
                5683,
                5828
            ],
            "filename": "GuildChannel.js",
            "lineno": 139,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100029899",
                "name": "GuildChannel#deletePermission",
                "type": "MethodDefinition",
                "paramnames": [
                    "overwriteID",
                    "reason"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "deletePermission",
        "longname": "VoiceChannel#deletePermission",
        "kind": "function",
        "description": "Delete a channel permission overwrite",
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "memberof": "VoiceChannel",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The ID of the overwritten user or role",
                "name": "overwriteID"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "optional": true,
                "description": "The reason to be displayed in audit logs",
                "name": "reason"
            }
        ],
        "inherits": "GuildChannel#deletePermission",
        "inherited": true,
        "overrides": "GuildChannel#deletePermission"
    },
    {
        "comment": "/**\n    * Check if this permission allows a specific permission\n    * @arg {String} permission The name of the permission. [A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)\n    * @returns {Boolean} Whether the permission allows the specified permission\n    */",
        "meta": {
            "range": [
                1815,
                1895
            ],
            "filename": "Permission.js",
            "lineno": 51,
            "columnno": 4,
            "path": "/home/soviet/Code/Js/ServerBot/node_modules/eris/lib/structures",
            "code": {
                "id": "astnode100033676",
                "name": "Permission#has",
                "type": "MethodDefinition",
                "paramnames": [
                    "permission"
                ]
            },
            "vars": {
                "": null
            }
        },
        "name": "has",
        "longname": "PermissionOverwrite#has",
        "kind": "function",
        "description": "Check if this permission allows a specific permission",
        "returns": [
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "description": "Whether the permission allows the specified permission"
            }
        ],
        "memberof": "PermissionOverwrite",
        "scope": "instance",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The name of the permission. [A full list of permission nodes can be found on the docs reference page](/Eris/docs/reference)",
                "name": "permission"
            }
        ],
        "inherits": "Permission#has",
        "inherited": true,
        "overrides": "Permission#has"
    }
]
